/*
		|\\          //|		|||||||||||||||		||||||
		||\\        //||		||					||	  ||
		|| \\      // ||		||					||      ||
		||  \\    //  ||		||					||     ||
		||   \\  //   ||		|||||||||||			|||||||
		||    \\//    ||		||					||	  ||
		||     \/     ||		||					||		||
		||            ||		||					||        ||

*/

///					Includek 			///
#include <			a_samp				>
#include <			a_mysql				>
#include <          a_zones         	>
#include <			streamer			>
#include <			sscanf2				>
#include <			YSI\foreach_new		>
#include <			gvar				>
#include <			sniperfix			>
#include <			YSI\y_va.inc		>
#include <			YSI\y_scripting.inc >
#include <			YSI\y_bit.inc 		>
#include <			Geoip_Plugin		>
#include <			mapandreas			>
#include <          crashdetect         >
#include <          YSF        			>
#include <			mSelection			>

// JC48dfZcA
#pragma dynamic 				32768
#pragma warning disable 		217

#define SERVER_VERSION	 		"4.1"
#define SERVER_UPDATE			"2016.11.13 07:25:24" // Last Update
#define WEB_ADDRESS             "www.mfrserver.net"

#define RAKSAMP_VERSION         "fASfash57d"
#define FAKECLIENT_VERSION		"0.3.7"
#define SERVER_GMT              1
#define HEALTH_GOD              FLOAT_INFINITY
#define ADMIN_SKIN_ID           137
#define IN_RANGE_DISTANCE       75.0
#define BOT_ACTION_TIME         90


/// Színek ///
#define COLOR_GREY				0x375FFFFF
#define COLOR_GREEN 			0x33FF33AA
#define COLOR_GREEN2 			0x008000FF
#define COLOR_GREEN3 			0x2B7E18AA
#define COLOR_RED 				0xFF0000AA
#define COLOR_YELLOW 			0xCDF917FF // 0xFF9900AA, 0xFF5721AA (Dave)
#define COLOR_WHITE 			0xFFFFFFFF
#define COLOR_BLUE 				0x33CCFFAA
#define COLOR_DARKBLUE 			0x375FFFFF
#define COLOR_ORANGE 			0xFF9900AA
#define COLOR_BASIC 			0x0066FFAA
#define COLOR_SYSTEM 			0xEFEFF7AA
#define COLOR_LIGHTBLUE 		0x00DDFFAA
#define COLOR_GREENYELLOW 		0xADFF2FFF
#define COLOR_FLBLUE 			0x6495EDAA
#define COLOR_BLACK 			0x000000AA
#define COLOR_PINK 				0xDE18C4AA // 0xFFB6C1FF
#define COLOR_DARKPINK 			0xDE18C4AA
#define COLOR_LIGHTPINK 		0xF263DDAA
#define COLOR_LIME 				0x99FF00AA
#define COLOR_DARKGREEN 		0x33AA33AA
#define COLOR_BROWN  			0x66330089
#define COLOR_STEELBLUE 		0xB0C4DEFF
#define COLOR_LIGHTGREEN 		0x00FF7FFF
#define COLOR_PROPGREEN         0x99FF66AA
#define COLOR_LIGHTRED 			0xD41746AA // 0xF02424AA
#define COLOR_GOLD 				0xFFD700FF
#define COLOR_SAMP 				0xEE5555AA
#define COLOR_BLUE2 			0x439BEDAA
#define COLOR_BLUE3 			0x057CEAAA
#define COLOR_KICK              0x17C000AA
#define COLOR_DEFAULT 			0xA9C4E4AA
#define COLOR_DB                0x5cd624AA
#define COLOR_KACASFOS          0xd3e836AA
#define COLOR_ORANGERED        	0xff4b14AA
#define COLOR_NORTI				0x00e893AA
#define COLOR_KACSAFOS         	0xd3e836AA
#define COLOR_NARANCSSARGA      0xff6200AA

// RRGGBB Színek
#define XCOLOR_GREEN 			33FF33
#define XCOLOR_GREEN2 			008000
#define XCOLOR_GREEN3 			2B7E18
#define XCOLOR_RED 				FF0000
#define XCOLOR_YELLOW 			CDF917
#define XCOLOR_BLUE 			33CCFF
#define XCOLOR_BLUE2 			439BED
#define XCOLOR_BLUE3 			057CEA
#define XCOLOR_BROWN            663300
#define XCOLOR_DARKBLUE			2200FE
#define XCOLOR_ORANGE			FF9900
#define XCOLOR_BASIC			0066FF
#define XCOLOR_LIGHTBLUE		00DDFF
#define XCOLOR_GREENYELLOW		ADFF2F
#define XCOLOR_PINK			    DE18C4//FFB6C1
#define XCOLOR_LIGHTPINK 		F263DD
#define XCOLOR_LIGHTGREEN		00FF7F
#define XCOLOR_PROPGREEN        99FF66
#define XCOLOR_LIGHTGREEN2		63DF53
#define XCOLOR_LIGHTRED   		D41746
#define XCOLOR_GOLD				CDF917
#define XCOLOR_WHITE 			FFFFFF
#define XCOLOR_DARKGREEN 		33AA33
#define XCOLOR_GREY				375FFF
#define XCOLOR_PURPLE			488FB6
#define XCOLOR_BLACK   			000000
#define XCOLOR_DEFAULT 			A9C4E4
#define XCOLOR_SAMP 			EE5555
#define XCOLOR_LIME 			99FF00
#define XCOLOR_KICK				17C000
#define XCOLOR_DB               5cd624
#define XCOLOR_KACSAFOS         d3e836
#define XCOLOR_ORANGERED        ff4b14
#define XCOLOR_NORTI            00e893
#define XCOLOR_NARANCSSARGA     ff6200

// Tömbök a fordításhoz
enum eColor
{
	szColorName[32],
	szColor[32],
}

#define INFINITY 				0x7F800000

// Zóna színek
#define STUNTZONE 				0x46E84696
#define DMZONE 					0xF4000096
#define DERBYZONE 				0xFFC500AA

// Beállítások
#define PING_MAX_EXCEEDS   		15
#define FPS_MAX_EXCEEDS        	15
#define MAX_FLOOD               13
#define KICK_TIME               350
#define MAX_MYTEXT_CHAR         48
#define MAX_RACE_CP             150

#define MAX_WARNINGS    		5
#define STR_SIZE				128
#define	BONUS_CAR_RANGE         15.0
#define BULL_TIME   			30000
#define MAX_HOUSES              2500
#define MAX_BIZNIS 				600
#define MAX_TELEPORTS			500
#define MAX_RACES				500


#define HOUSE_ELEMENT_OSZTO     150

#define GLASSES		 			1
#define WATCHES 	 			2
#define HATS 		 			3
#define WEAPON		 			4
#define OTHERITEMS 	 			5

#define RIGHT 					0
#define LEFT  					1

// Dialógusok
//#define Style           		14291
#define Style2         			14391
#define LeftRight       		14491
#define UpdateVer       		14591
#define UpdVer          		14691
#define WeaponsType     		14791
#define DeleteItem      		14891
#define DeleteItem2     		14991

#define STYLES					150
#define DIALOG_RULES			151
#define DIALOG_WEATHER           152
//#define CREDITS                 153
#define DIALOG_HELP				154
//#define CONNECT                 155
#define WEAPONMENU              156
//#define DONATE                  157
#define DIALOG_REGISTER 		159
#define DIALOG_LOGIN 			160
#define DIALOG_REGLOTOFIP       162
#define MGM2SELECT              163
#define CHANGEPASS              164
#define WEAPONSKILL             165
#define SPAWNCHANGE             173
#define CMDMENU                 177
#define DIALOG_BUY 		        181
#define DIALOG_DAMAGE		    182
#define DIALOG_FPS		        183
#define DIALOG_AUDIO	        183 + 5789
#define DIALOG_CHANGENAME       184
#define DIALOG_RACE_BUILDMENU   185
#define DIALOG_KEYCHANGE        191
#define DIALOG_INTERIORS        193
#define DIALOG_ELEVATOR         194
#define DIALOG_COLORS           195
#define DIALOG_DERBYSELECT      197
#define DIALOG_WHEELS     		198
#define DIALOG_HOLIST     		199
#define DIALOG_RACES            200
#define DIALOG_FORUM_REGISTER 	205
#define DIALOG_FORUM_SETACC 	207
#define DIALOG_LOCKPROP 		209 //10 11 12
#define DIALOG_LOCKBIZ 			211 //10 11 12
#define DIALOG_BANLIST          213
#define DIALOG_RADIO			216 + 9999
#define DIALOG_TELEPORTS		217
#define DIALOG_DMKILLS			235
#define DIALOG_WALKSTYLE		240
//#define DIALOG_SPRINTSTYLE		246 + 85
#define DIALOG_TOP				241
#define DIALOG_TOP_1			243
#define DIALOG_CPANEL			250
#define DIALOG_CARSPAWNER       290
#define DIALOG_NETWORK		    294
#define DIALOG_FINDPLAYER       296
#define DIALOG_NITROSTATE       305
#define DIALOG_NEON             306

#define	DIALOG_MEMBERS          307
#define	DIALOG_FINDOBJECT		309
#define DIALOG_VOLIST           582
#define DIALOG_SPLIST           589

#define DIALOG_MCHAWER			590 // (590..590+9)
#define DIALOG_HOUSERIASZTO     640
#define DIALOG_HOUSEHACKDETECTOR 641
#define DIALOG_HOUSEMENU     	643
#define DIALOG_HOUSEELEMENTS    650

#define DIALOG_DUEL_LOCATION    700
#define DIALOG_DERBYMAP         706
#define DIALOG_TEXTDRAWS        707
#define DIALOG_CMDLIST          720
#define DIALOG_FINDDM           722
#define DIALOG_RADIO_SQL   		724
#define DIALOG_KEYCHANGE2  		725
#define DIALOG_RACE_EDIT        727
#define DIALOG_RACE_EDIT2 		728
#define DIALOG_SELECT_LANG 		740
#define DIALOG_HOUSEMENU_BUTOROK 745
#define DIALOG_CHATMSG 			755
#define DIALOG_SQL_TUNE_1 		760
#define DIALOG_SQL_TUNE_2 		761

#define DIALOG_DMINFO 			25473

// DM Zóna azonosító
#define DM_ZONE_WORLD 			15
#define DM_ZONE_WORLD_DIVIDE    10
#define DM_ZONE_INVALID   		-1
#define DM_ZONE_DUEL	        150 + DM_ZONE_WORLD

// Walk Style
#define WALK_DEFAULT    		0
#define WALK_NORMAL     		1
#define WALK_PED        		2
#define WALK_GANGSTA    		3
#define WALK_GANGSTA2   		4
#define WALK_OLD        		5
#define WALK_FAT_OLD    		6
#define WALK_FAT        		7
#define WALK_LADY      			8
#define WALK_LADY2      		9
#define WALK_WHORE      		10
#define WALK_WHORE2     		11
#define WALK_DRUNK     			12
#define WALK_BLIND     			13

// Elevator
#define ELEVATOR_SPEED      	(5.0)   // Movement speed of the elevator.
#define DOORS_SPEED         	(4.0)   // Movement speed of the doors.
#define ELEVATOR_WAIT_TIME  	(5000)  // Time in ms that the elevator will wait in each floor before continuing with the queue.
									// Be sure to give enough time for doors to open.
// Privat
#define X_DOOR_CLOSED       	(1786.627685)
#define X_DOOR_R_OPENED     	(1785.027685)
#define X_DOOR_L_OPENED     	(1788.227685)
#define GROUND_Z_COORD      	(14.511476)
#define ELEVATOR_OFFSET     	(0.059523)

// Ferris Wheel
#define NUM_FERRIS_CAGES        10
#define FERRIS_WHEEL_SPEED      0.01

#define FERRIS_WHEEL_Z_ANGLE  	-90.0 // This is the heading the entire ferris wheel is at (beware of gimbal lock)

// Ingatlanok
#define MAX_PROP_NAME           128 // Színezéssel együtt.
#define MAX_TEXT_DISTANCE       10.0
#define MAX_MAPICON_DISTANCE    100

// Max world bounds
#define WB_MAX_X 20000.0
#define WB_MIN_X -20000.0
#define WB_MAX_Y 20000.0
#define WB_MIN_Y -20000.0

// Üzenet
#define MESSAGE_TIME 			5000

// Minimum játékos a tesztekhez
#define	MIN_ACTIVE_PLAYERS      4

// Spawnplace
#define SPAWNPLACE_DEFAULT      	0
#define SPAWNPLACE_RANDOM       	1
#define SPAWNPLACE_CLAN       		2
#define SPAWNPLACE_HQ        		3
#define SPAWNPLACE_BEFORE_DEATH 	4
#define SPAWNPLACE_SAVED_POSITION 	5
#define SPAWNPLACE_HOUSE            6
#define SPAWNPLACE_BIZNIS           7
#define SPAWNPLACE_SP            	8
#define SPAWNPLACE_TELEPORT         9

// Language
#define LANGUAGE_HU 0
#define LANGUAGE_EN 1

#define MAX_LANGUAGE 2

new const gLanguage[][][] =
	{
		{{"Magyar"}, {"Angol"}},
		{{"Hungarian"}, {"English"}}
	};

// Definált funkciók
#define LANG(%1,%2) \
    GetGVarStringEx(%2, g_pLang{%1})

#define PVarIntFel(%1,%2) \
	SetPVarInt(%1, %2, GetPVarInt(%1, %2) + 1)

#define PVarIntLe(%1,%2) \
	SetPVarInt(%1, %2, GetPVarInt(%1, %2) - 1)


#define RandomColor \
	random(255)

#define BlackBox(%1) \
    TextDrawShowForPlayer(%1, T_BlackBox[0]), TextDrawShowForPlayer(%1, T_BlackBox[1])

#define BlackBoxHide(%1) \
    TextDrawHideForPlayer(%1, T_BlackBox[0]), TextDrawHideForPlayer(%1, T_BlackBox[1])
/*
#define WhiteBox(%1) \
    TextDrawShowForPlayer(%1, T_WhiteBox[0]), TextDrawShowForPlayer(%1, T_WhiteBox[1])

#define WhitekBoxHide(%1) \
    TextDrawHideForPlayer(%1, T_WhiteBox[0]), TextDrawHideForPlayer(%1, T_WhiteBox[1])
*/
#define UpdateDMPlayers \
    DMUpdate

#define UpdateStyleTD(%1,%2) \
    PlayerTextDrawSetString(%1, StyleTD[%1], FixGameString(%2))

#define RESPAWN_TIME \
	600

#define IsValidHouse(%1) \
    GetGVarType("PropOwnerRegID", %1)

#define IsValidBiznis(%1) \
    GetGVarType("BizOwnerRegID", %1)

#define IsPlayerInBank(%1) \
	(IsPlayerInDynamicCP(%1, gCP_BANK[0]) || IsPlayerInDynamicCP(%1, gCP_BANK[1]) || IsPlayerInDynamicCP(%1, gCP_BANK[2]) || IsPlayerInDynamicCP(%1, gCP_BANK[3]) || IsPlayerInDynamicCP(%1, gCP_BANK[4]) || IsPlayerInDynamicCP(%1, gCP_BANK[5]) || IsPlayerInDynamicCP(%1, gCP_BANK[6]) || IsPlayerInDynamicCP(%1, gCP_BANK[7]))

#define AdminNotAdmin(%1,%2) \
    (%2 != %1 && GetPVarInt(%2, "Level") > 0 && GetPVarInt(%1, "Level") < 4 && !(g_PlayerData[%2] & e_REJTETT))

#define AdmintNotAdminAndYou(%1,%2) \
    (GetPVarInt(%2, "Level") > 0 && GetPVarInt(%1, "Level") < 4 && !(g_PlayerData[%2] & e_REJTETT))

#define fcheck(%1) \
    if(!fexist(#%1)) fclose(fopen(#%1, io_write))

#define IsNegative(%0) \
	(_:(%0)&0x80000000)

// Páratlan
#define IsOdd(%0) \
	((%0)&1)

 // Páros
#define IsEven(%0) \
	(!IsOdd(%0))

stock IsBlack(color)
{
	new
	    r = color >>> 24,
		g = color >>> 16 & 0xFF,
		b = color >> 8 & 0xFF,
		a = color & 0xFF;
	return ((r < 10 && g < 10 && b < 10) || a < 16);
}

stock rgba2hex(hex,&r,&g,&b,&a)
{
	r = (hex >> 24) & 0x000000FF,
	g = (hex >> 16) & 0x000000FF,
	b = (hex >> 8) & 0x000000FF,
	a = hex & 0x000000FF;
}

stock ShiftRGBAToARGB(color)
	return color >>> 8 | color << 24; //(color & 0xFF) << 24 | (color >>> 24 & 0xFF) << 16 | (color >>> 16 & 0xFF) << 8 | (color >>> 8 & 0xFF);

#define pName(%1) \
    g_szaPlayerNames[(%1)]

#define ConvertTime(%0,%1,%2,%3,%4) \
	new \
	    Float: %0 = floatdiv(%1, 60000) \
	;\
	%2 = floatround(%0, floatround_tozero); \
	%3 = floatround(floatmul(%0 - %2, 60), floatround_tozero); \
	%4 = floatround(floatmul(floatmul(%0 - %2, 60) - %3, 1000), floatround_tozero)

#define SPAM_CHECK(%1,%2) if(GetPVarType(playerid, #%1__Tick)){new __iTick = GetTickCount() - GetPVarInt(playerid, #%1__Tick);if(__iTick < %2) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_KOVETKEZO_HASZNALATIG"), (float(%2 - __iTick) / 1000));}SetPVarInt(playerid, #%1__Tick, GetTickCount());

#define CalculateVelocity(%1,%2,%3) \
    (floatsqroot((%1*%1)+(%2*%2)+(%3*%3))*200)
/*
#define IsValidDynamicVehicle(%1) \
	(!!GetDynamicVehicleModel(%1))
*/
#define PreloadAnimLib(%1,%2) \
	ApplyAnimation((%1), %2, "null", 0.0, 0, 0, 0, 0, 0)

#define randomex(%0,%1) \
	floatround(random((%1) - (%0)) + (%0))

#define CHECK_SZINT(%1,%2) \
    if(g_pSzint{(%1)} < (GetGVarInt(#%2, 0)) && g_pDebug{(%1)} != 0xFF && GetPVarInt(%1,"Level") < 2) return SendClientMessagef(%1, COLOR_RED, LANG(%1, "MSG_NEM_ELEG_MAGAS_A_SZINTED_LEGALABB"), GetGVarInt(#%2, 0))

/*
#define CHECK_SZINT(%1,%2) \
    if(g_pSzint{(%1)} < (GetGVarInt(#%2, 0)) && g_pDebug{(%1)} != 0xFF) return SendClientMessagef(%1, COLOR_RED, LANG(%1, "MSG_NEM_ELEG_MAGAS_A_SZINTED_LEGALABB"), GetGVarInt(#%2, 0))
*/

#define CHECK_SZINT_EX(%1,%2) \
    if(g_pSzint{(%1)} < (%2) && g_pDebug{(%1)} != 0xFF) return SendClientMessagef(%1, COLOR_RED, LANG(%1, "MSG_NEM_ELEG_MAGAS_A_SZINTED_LEGALABB"), %2)

#define DIALOG(%1,\"%2\") \
 GetGVarStringEx(#%2_TITLE, g_pLang{%1}), GetGVarStringEx(#%2, g_pLang{%1}), GetGVarStringEx(#%2_KEY1, g_pLang{%1}), GetGVarStringEx(#%2_KEY2, g_pLang{%1})

#define pb_percent(%1,%2,%3,%4) \
	((%1 - 6.0) + ((((%1 + 6.0 + %2 - 2.0) - %1) / %3) * %4))

#define IsClient(%1) \
	(g_pOtherFlags[(%1)] & e_HAVE_CLIENT)

#define CAM_HIPER_SPEED   	100
#define CAM_HI_SPEED        75
#define CAM_SPEED   		10
#define CAM_LO_SPEED   		5


/*
new
	gIRCBot,
	groupID;
*/
stock const
	szItems[] = "{" #XCOLOR_BLUE "}Szemüvegek\n{" #XCOLOR_BLUE "}Órák\n{" #XCOLOR_BLUE "}Sapkák\n{" #XCOLOR_BLUE "}Fegyverek\n{" #XCOLOR_BLUE "}Egyéb dolgok\n{" #XCOLOR_GREEN "}Befejezés\n{" #XCOLOR_GREEN "}Tárgy Törlése\n{" #XCOLOR_RED "}Minden tárgy törlése\nFelrakott tárgyak Elmentése";

#define MINIGAME_TUTORIAL_COUNT 10 //

// Pénzek
#define FALLOUT_WIN             2500
#define DERBY_WIN             	2500
#define CTC_WIN             	2500
#define CTC_WIN_TEAM            2800 // -CTC nyertes csapat:
#define TELEPORT_PRICE          -50
#define CARSPAWN_PRICE          -100
//#define CHANGENAME_PRICE        50000
#define PRICE_GOTO              200
#define PRICE_LOCKPROP          5000
#define PRICE_UNLOCKPROP        10000
#define PRICE_LOCKBIZ			5000
#define PRICE_UNLOCKBIZ        	10000

#define MAX_BANK_MONEY          1000000000

// XP-k
#define XP_POSTAS               2
#define XP_FENYKEP 				2
#define XP_RANGE        		5
#define XP_MATEK 				10
#define XP_TELEPORT 			8
#define XP_ARANYTOJAS      		7
#define XP_TRUCKING 			10
#define XP_RACE_1 				10
#define XP_RACE_2 				7
#define XP_RACE_3 				5
#define XP_STUNT 				10
#define XP_PATKO 				9
#define XP_OSZTRIGA 			9
#define XP_ZASZLO 				7
#define XP_BONUSCAR 			10
#define XP_CTC_LEADVA			2
#define XP_KOCSI_LEADVA 		15
#define XP_RABOL 				13
#define XP_REAKCIO 				5
#define XP_GRAFFITI 			7
#define XP_LOTTO_WIN            15 + random(10)
#define XP_NINCS_TALALAT        -7
#define XP_HALAL                -2
#define XP_ROSSZ_EREDMENY       -5
#define XP_FAIL_HAZFELTORES     -5

#define MoneyCheck(%1,%2) \
	if(GetPlayerMoneyEx(%1) < %2) return SendClientMessagef(%1, COLOR_RED, LANG(%1, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB"), FormatNumber(%2));\
	GivePlayerMoneyEx(%1, -%2, "CheckMoney")

#define QUERY_COLLISION(%0) \
	printf("Query collision \" #%0 \"! PlayerID: %d, queue: %d, g_pQueryQueue: %d", playerid, queue, g_pQueryQueue[playerid]), SendClientMessageToAll(-1, "Query collision \" #%0 \"")

// HQ Zónák
new
	//gGroveZone,
	gSevileZone,
	gLMZone,
	gSpawnZone,
	gDavidHaza,
	gDamZone;

// Jármû objectok
#define MAX_VEH_OBJECT          120
#define VEH_OBJECT_NULL "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"

new
#if defined UVS
	gVehicleObject[4000][MAX_VEH_OBJECT],
#else
    gVehicleObject[MAX_VEHICLES][MAX_VEH_OBJECT],
#endif
	gPlayerVehicleObject[MAX_PLAYERS][MAX_VEH_OBJECT],
	gPlayerVehicleObjectID[MAX_PLAYERS][MAX_VEH_OBJECT],
	BitArray:gIsHouseCar<MAX_VEHICLES>;

new
    g_ConsolePlayer = -1;

new
    CHANGENAME_PRICE;

new
	MAX_GIVECASH;

// Globális float változók
new
	Float:X,
	Float:Y,
	Float:Z,
	Float:Angle,
	Float:Health,
	Float:Armour,
	Float:V[3];

// Pickupok
new
	pwnt,
	gDive[2],
	fire[4],
	molotov,
	ajtonyito[3],
	gBistroEnter[2],
	gFegyverBoltAru[7],
	g_SpawnPickup[4];

// Jármû Sérülés
new
	g_iRacemodeInterior,
	g_iMaxSerialBan,
	g_iRCONFails,
	g_iMaxCMD;

// Teleportok
new
	//g_TeleportCreator[MAX_TELEPORTS],
	g_szTeleportName[MAX_TELEPORTS][48],
	g_szTeleportMSG[MAX_TELEPORTS][48],
	g_szTeleportCommand[MAX_TELEPORTS][24],
	g_TeleportWorld[MAX_TELEPORTS],
	g_TeleportInterior[MAX_TELEPORTS],
	Float:g_TeleportPos[MAX_TELEPORTS][4];
	
#if defined YSF
new g_iMaxPlayerSetTimer = -1;
#endif

// Idõ
new
	year,
	month,
	day,
	hour,
	minute,
	second;

// Uptime
new
	up_days,
	up_hours,
	up_minutes,
	uptimeCount;

// Kocsik
new
    gTunedCar[2],
    gTruck[16],
    gIsTrailerInTruck,
    gWJCar[2],
    gTrailers[2],
    g_NPC_Car[13];

static
	const gVehicleColors[] =
{
    0x000000AA, 0xF5F5F5AA, 0x2A77A1AA, 0x840410AA, 0x263739AA, 0x86446EAA, 0xD78E10AA, 0x4C75B7AA, 0xBDBEC6AA, 0x5E7072AA,
    0x46597AAA, 0x656A79AA, 0x5D7E8DAA, 0x58595AAA, 0xD6DAD6AA, 0x9CA1A3AA, 0x335F3FAA, 0x730E1AAA, 0x7B0A2AAA, 0x9F9D94AA,
    0x3B4E78AA, 0x732E3EAA, 0x691E3BAA, 0x96918CAA, 0x515459AA, 0x3F3E45AA, 0xA5A9A7AA, 0x635C5AAA, 0x3D4A68AA, 0x979592AA,
    0x421F21AA, 0x5F272BAA, 0x8494ABAA, 0x767B7CAA, 0x646464AA, 0x5A5752AA, 0x252527AA, 0x2D3A35AA, 0x93A396AA, 0x6D7A88AA,
    0x221918AA, 0x6F675FAA, 0x7C1C2AAA, 0x5F0A15AA, 0x193826AA, 0x5D1B20AA, 0x9D9872AA, 0x7A7560AA, 0x989586AA, 0xADB0B0AA,
    0x848988AA, 0x304F45AA, 0x4D6268AA, 0x162248AA, 0x272F4BAA, 0x7D6256AA, 0x9EA4ABAA, 0x9C8D71AA, 0x6D1822AA, 0x4E6881AA,
    0x9C9C98AA, 0x917347AA, 0x661C26AA, 0x949D9FAA, 0xA4A7A5AA, 0x8E8C46AA, 0x341A1EAA, 0x6A7A8CAA, 0xAAAD8EAA, 0xAB988FAA,
    0x851F2EAA, 0x6F8297AA, 0x585853AA, 0x9AA790AA, 0x601A23AA, 0x20202CAA, 0xA4A096AA, 0xAA9D84AA, 0x78222BAA, 0x0E316DAA,
    0x722A3FAA, 0x7B715EAA, 0x741D28AA, 0x1E2E32AA, 0x4D322FAA, 0x7C1B44AA, 0x2E5B20AA, 0x395A83AA, 0x6D2837AA, 0xA7A28FAA,
    0xAFB1B1AA, 0x364155AA, 0x6D6C6EAA, 0x0F6A89AA, 0x204B6BAA, 0x2B3E57AA, 0x9B9F9DAA, 0x6C8495AA, 0x4D8495AA, 0xAE9B7FAA,
    0x406C8FAA, 0x1F253BAA, 0xAB9276AA, 0x134573AA, 0x96816CAA, 0x64686AAA, 0x105082AA, 0xA19983AA, 0x385694AA, 0x525661AA,
    0x7F6956AA, 0x8C929AAA, 0x596E87AA, 0x473532AA, 0x44624FAA, 0x730A27AA, 0x223457AA, 0x640D1BAA, 0xA3ADC6AA, 0x695853AA,
    0x9B8B80AA, 0x620B1CAA, 0x5B5D5EAA, 0x624428AA, 0x731827AA, 0x1B376DAA, 0xEC6AAEAA, 0x000000AA, 0x177517AA, 0x210606AA,
    0x125478AA, 0x452A0DAA, 0x571E1EAA, 0x010701AA, 0x25225AAA, 0x2C89AAAA, 0x8A4DBDAA, 0x35963AAA, 0xB7B7B7AA, 0x464C8DAA,
    0x84888CAA, 0x817867AA, 0x817A26AA, 0x6A506FAA, 0x583E6FAA, 0x8CB972AA, 0x824F78AA, 0x6D276AAA, 0x1E1D13AA, 0x1E1306AA,
    0x1F2518AA, 0x2C4531AA, 0x1E4C99AA, 0x2E5F43AA, 0x1E9948AA, 0x1E9999AA, 0x999976AA, 0x7C8499AA, 0x992E1EAA, 0x2C1E08AA,
    0x142407AA, 0x993E4DAA, 0x1E4C99AA, 0x198181AA, 0x1A292AAA, 0x16616FAA, 0x1B6687AA, 0x6C3F99AA, 0x481A0EAA, 0x7A7399AA,
    0x746D99AA, 0x53387EAA, 0x222407AA, 0x3E190CAA, 0x46210EAA, 0x991E1EAA, 0x8D4C8DAA, 0x805B80AA, 0x7B3E7EAA, 0x3C1737AA,
    0x733517AA, 0x781818AA, 0x83341AAA, 0x8E2F1CAA, 0x7E3E53AA, 0x7C6D7CAA, 0x020C02AA, 0x072407AA, 0x163012AA, 0x16301BAA,
    0x642B4FAA, 0x368452AA, 0x999590AA, 0x818D96AA, 0x99991EAA, 0x7F994CAA, 0x839292AA, 0x788222AA, 0x2B3C99AA, 0x3A3A0BAA,
    0x8A794EAA, 0x0E1F49AA, 0x15371CAA, 0x15273AAA, 0x375775AA, 0x060820AA, 0x071326AA, 0x20394BAA, 0x2C5089AA, 0x15426CAA,
    0x103250AA, 0x241663AA, 0x692015AA, 0x8C8D94AA, 0x516013AA, 0x090F02AA, 0x8C573AAA, 0x52888EAA, 0x995C52AA, 0x99581EAA,
    0x993A63AA, 0x998F4EAA, 0x99311EAA, 0x0D1842AA, 0x521E1EAA, 0x42420DAA, 0x4C991EAA, 0x082A1DAA, 0x96821DAA, 0x197F19AA,
    0x3B141FAA, 0x745217AA, 0x893F8DAA, 0x7E1A6CAA, 0x0B370BAA, 0x27450DAA, 0x071F24AA, 0x784573AA, 0x8A653AAA, 0x732617AA,
    0x319490AA, 0x56941DAA, 0x59163DAA, 0x1B8A2FAA, 0x38160BAA, 0x041804AA, 0x355D8EAA, 0x2E3F5BAA, 0x561A28AA, 0x4E0E27AA,
    0x706C67AA, 0x3B3E42AA, 0x2E2D33AA, 0x7B7E7DAA, 0x4A4442AA, 0x28344EAA
};

new
	//g_TaxiActor[MAX_PLAYERS],
    g_TaxiCP[MAX_PLAYERS],
    g_TaxiVehicle[12],
    g_TaxiTime[MAX_PLAYERS],
    g_TaxiMapIcon[MAX_PLAYERS];
    
new const 
	Float:g_TaxiPos[][] =
	{
 		{2766.9111,-2455.5000,13.6431,92.0162},
		{2245.0305,-2203.9960,13.5468,134.9434},
		{1710.2109,-2324.7768,13.5468,0.3452},
		{2501.8239,-1654.7800,13.4644,146.0959},
		{2672.1186,-1862.1800,11.0887,141.5234},
		{824.1967,-1789.6638,13.8791,0.1044},
		{1253.7454,-2061.2575,59.7957,356.6577},
		{2418.2236,-1250.5468,23.8125,177.1161},
		{2274.7912,-1430.3095,24.0000,84.7863},
		{1994.4161,-1452.9287,13.5546,129.0946},
		{1788.3138,-1284.6048,13.6328,25.8593},
		{671.4116,-1261.9738,13.6250,88.6974},
		{1128.0606,-1412.3736,13.6099,357.6788},
		{1023.7573,-776.8201,103.1287,190.9609},
		{415.4478,-1431.5258,32.4613,127.0867},
		{2506.6013,-967.0906,82.2932,181.2474},
		{956.7109,-1102.1334,23.7269,270.9892},
		{-85.3880,-1122.3795,1.0780,76.6397},
		{635.6403,-571.8472,16.3358,268.0881},
		{203.5263,-206.1056,1.5780,178.3462},
		{681.9934,-479.4024,16.3358,178.4739},
		{253.9685,-65.9037,1.5780,176.3851},
		{-127.2356,-151.4759,3.1171,258.0379},
		{1353.5610,255.3150,19.5547,64.5007},
		{1235.6214,236.7767,19.5547,66.8682},
		{2338.1533,61.9005,26.4843,272.2658},
		{2539.9023,28.7775,26.4843,89.7186},
		{2153.2062,-49.3913,7.0278,304.0172},
		{-218.0258,-2300.6308,28.3950,123.2629},
		{16.3264,-2648.2204,40.4739,92.3877},
		{-504.0747,-194.2277,78.4063,7.5286},
		{868.0358,-30.4920,63.1953,158.5973},
		{1088.7325,-302.7965,73.9922,162.1804},
		{-1424.0334,-293.9240,14.1484,137.4268},
		{-1963.4509,-854.2246,32.2266,183.0202},
		{-2724.9497,-313.6332,7.1875,44.3660},
		{-1986.2420,138.6096,27.6875,83.3560},
		{-2120.1667,-402.9739,35.5312,66.9261},
		{-2668.8344,264.3539,4.6328,358.1517},
		{-2557.5510,193.4418,6.2442,110.3755},
		{-1605.9108,723.0449,12.0417,358.7466},
		{-1520.4367,916.3311,7.1875,89.3820},
		{-1757.9919,956.6793,24.8827,180.2727},
		{-1972.4880,1118.0500,53.3532,271.0126},
		{-2491.0307,1196.6907,37.5848,211.6177},
		{-2660.4833,632.1326,14.4531,178.0068},
		{-2607.2949,1366.8547,7.1473,175.6537},
		{-1759.6724,-121.9530,3.5998,358.4332},
		{-1714.4736,1339.3977,7.1799,135.3146},
		{-2225.9833,-2447.9804,30.6250,54.5931},
		{-2140.3903,-2467.3107,30.6250,230.1743},
		{-1553.7763,-2740.4265,48.7434,144.4246},
		{-1883.3538,-1690.2161,21.7401,231.8455},
		{-1076.6627,-1641.2924,76.4990,170.4635},
		{-1039.1175,-635.4822,32.0078,267.4961},
		{-2487.5634,2403.3073,16.1417,120.0309},
		{-2438.7526,2233.9165,4.9843,89.5822},
		{2777.5864,907.1657,10.8984,13.0324},
		{2835.8869,1290.5206,10.9352,91.0615},
		{1492.8088,713.5238,10.8203,174.7949},
		{1090.5141,1722.4841,10.8203,359.3500},
		{1713.9931,1471.1561,10.8203,251.3768},
		{2036.2059,1008.0861,10.8203,270.0491},
		{2162.1704,1682.7628,10.8203,92.6197},
		{2032.1082,1913.8218,12.3359,270.4670},
		{2487.6552,1532.3631,10.8163,320.4151},
		{1046.5822,2059.3093,10.8203,181.0617},
		{2165.8439,2156.1960,10.8203,184.0906},
		{2501.1948,2131.0949,10.8203,0.8122},
		{2624.0612,2343.0217,10.8203,241.4313},
		{2486.2956,2767.2929,10.8203,2.4600},
		{1767.0749,2719.3830,10.8203,180.0406},
		{1461.9913,2773.0529,10.8203,269.6546},
		{1436.1000,2667.3908,10.8203,358.3056},
		{2286.7094,2418.9880,10.8203,180.1217},
		{2127.3942,2359.3903,10.8203,180.9806},
		{692.0441,1929.2108,5.5725,356.4023},
		{-75.5885,1372.8105,9.9961,276.2116},
		{-311.2709,1535.6896,75.5625,180.5628},
		{127.9392,1949.7989,19.3889,273.4960},
		{802.2647,1870.6868,4.7733,266.0542},
		{821.5366,856.9605,11.8388,212.4445},
		{-199.8291,977.7581,18.8572,275.7124},
		{-145.9721,1221.7008,19.8992,177.8005},
		{-90.2089,1225.3424,19.7422,185.2714},
		{-201.3726,1119.3309,19.7422,271.2214},
		{-315.8200,1060.2521,19.7422,326.3221},
		{-305.9919,829.7122,13.1670,281.9793},
		{-304.9512,1764.0239,42.7812,268.1691},
		{-374.7679,2220.3637,42.4324,105.4432},
		{-245.4971,2597.6979,62.8582,279.2406},
		{-157.2310,2755.3503,62.6697,102.9832},
		{-542.7017,2593.0976,53.5155,269.5502},
		{-767.4724,2737.7353,45.5536,178.9727},
		{-1507.5859,2545.1904,55.8358,13.9956},
		{-1396.1737,2635.8332,55.8613,89.9852},
		{-1659.6346,2492.5541,86.8944,10.5489},
		{-1938.1173,2377.0061,49.6953,297.1965},
		{-1208.2518,1834.6357,41.9219,265.7090},
		{-891.0769,1528.4785,25.9300,78.1829},
		{-802.8754,1557.1347,27.1172,88.9988},
		{-851.7841,1535.2945,22.5809,266.3937},
		{-795.2739,1445.9300,13.9453,185.4716},
		{-716.3931,956.1781,12.1774,86.3531},
		{-1367.6270,2063.1611,52.8330,355.5089},
		{-1489.7426,1964.9895,48.2083,276.1304}
	};
	
new
	g_DerbyNames[][20 char] =
	{
	    {!"cross_ax"},
	    {!"cross_y_v2"},
	    {!"crossdyadya"},
	    {!"heavymulti"},
		{!"dd_crash"},
		{!"crossxl-b"},
		{!"dino"},
		{!"inferno"},
		{!"sunny"},
		{!"subaru"},
		{!"down!_down!_down!"},
		{!"parkour12"},
		{!"alba_ktk"},
		{!"newlife"},
		{!"ates-ve-su"},
		{!"glasswindow"},
		{!"hayloft"}
	};

new const //kamera pos - hova néz
	Float:g_DerbyPos[][] =
	{
		{2393.1325, -3625.9467, 56.5565, 2307.5171, -3555.1519, 63.5763, 2393.3223, -3623.7827, 22.2151}, // cross_ax
		{3080.5490, -3404.2919, 57.4150, 3038.8396, -3340.8018, 39.3205, 3083.7073, -3411.1033, 3.2656}, // crossy_v2
		{3986.6838, -1926.0394, 209.1335, 3988.3606, -1991.7394, 459.6900, 3988.3831, -1990.7404, 454.7953}, // crossdayda
		{-4085.1442, -1123.2703, 46.0794, -3993.9092, -1161.4056, 27.8273, -4085.8474, -1123.7687, 7.0000}, // heavymulti
		{296.1473, 3891.1735, 57.8601, 383.1251, 3833.9238, 33.7544, 291.8771,3894.0403,2.5285}, // dd_crash
		{-4628.5493, 643.6395, 60.2669, -4673.1880, 617.4753, 225.5487, -4672.1895, 617.4717, 219.7185}, // crossxl-b
		{2438.4101, -3452.3356, 77.9352, 2514.3491,-3539.4709,54.7358, 2444.0261,-3458.0771,8.8371}, // dino
		{4166.5874, 1786.4833, 116.7249, 4113.9507, 1829.3436, 96.8097, 4168.1235, 1781.5143, 76.4583}, // inferno
		{3872.7658, -1173.1121, 72.7098, 3772.7375, -1092.7478, 48.5563, 3874.3862, -1198.1005, 26.2608}, // sunny
		{2634.3203, -3524.8547, 120.2443, 2712.1221, -3622.7339, 98.7535, 2640.7400, -3531.6506, 61.7032}, // subaru
		{4103.2275, -1915.2958, 3296.3789, 4188.2646, -2030.7664, 3311.5510, 4102.6230, -1915.5830, 3262.0784}, // down!down
		{3316.1857, 745.7681, 55.9470, 3383.5872, 649.8278, 38.6391, 3288.7896, 754.1536, 4.3285}, // parkour12
		{645.4237, -2935.8930, 66.6166, 575.9161, -3025.8386, 47.7305, 649.2262, -2934.4543, 29.3804}, // alba_ktk
		{1999.8560, -3486.4865, 26.9670, 1902.6525, -3560.1621, 32.7427, 1903.3575, -3559.4546, 32.4377}, // newlife
		{3313.7937, -1747.5052, 65.8830, 3246.7485, -1632.7308, 31.7033, 3309.0437, -1739.6514, 5.5806}, // ates-ve-su
		{3142.1604, -1500.5137, 51.3821, 3169.1797, -1561.2169, 59.2168, 3144.2202, -1502.1672, 27.7026}, // glasswindow
		{2393.1230, -4049.6643, 24.1174, 2332.0093, -4015.7112, 38.9906, 2389.1387, -4048.3694, 3.5060} // hayloft
	};
	
#define MAX_DERBY_AVIABLE_MAPS      7

new
	g_DerbyAviableMaps[MAX_DERBY_AVIABLE_MAPS char],
	g_bDerbyMapIsListed;

new
	g_DerbyMode,
	g_DerbyStartTime,
	g_DerbyTime,
	g_DerbyVote,
	g_DerbyPlayers,
	g_DerbyVotes[MAX_DERBY_AVIABLE_MAPS];

new
	g_DerbyVehicleModel,
	g_DerbyPlayerVehicle[MAX_PLAYERS] = {INVALID_VEHICLE_ID, ...};

new
	g_DerbyUpperPos,
	g_DerbySlotUsed,
	Float:g_DerbyMinZ,
	Text:TD_Derby;
	
// Tárolók
new
	Iterator:houses<MAX_HOUSES>,
	Iterator:biznis<MAX_BIZNIS>,
	Iterator:Teleports<MAX_TELEPORTS>,
	Iterator:races<MAX_RACES>;

new
//	g_iBiznisFlags[MAX_BIZNIS],
	g_BiznisType[MAX_BIZNIS];

new
	g_iTeleTD = -1;

// Jármû paraméterek
new
	panels,
	doors,
	lights,
	tires;

// Alap integerek
new
	datez,
	vID,
	rand,
	houseid,
	player1;

// Enter & Exit pickups
new
	gLVFBPickup[4],
	gLVFBBigPickup[4],
	gLVFBGreenPickup[4],
	gLVFBOtherPickup[4],
	gCaligulaCasino[2],
	gDragonsCasino[2];

// Elevator
new
	LiftObject[7],
	DamGate[5],
	gLuxGate,
	//gBuzikapu,
//	LMLift,
	gSpawnKo,
//	LMBelsoKapu,
	RendLSGate,
	RendSFGate[2],
	RendLVGate,
	RocketObject,
	MGMGate[2],
	A51Gate[2],
	DriverSchool[3],
	BikeSchool,
	MyGate,
	seajto, // Sevile ...
	senagyajto,
	selift,
	setoronyajto,
	g_AhouseGate,
	gHeavenLift;
/*
new
	gGroveGate,
	gGroveLift,
	gGroveHeli,
	gGroveJobbfal,
	gGroveBalfal,
	gGroveBabu[27];
*/
new
	gLegbalon;

// Globális stringek
new
	i_str[128 + 1],
	i_str_apadfasza[128 + 1],
	ip[16 + 1],
	name[24 + 1],
	country[45 + 1];

// MySQL & Speciális stringek
new
	tmp[1024 + 1],
	query[2048 + 1],
	dline[6144 + 1],
	dline2[6144 + 1];

// Fallout
#define FALLOUT_STATE_WAITING			1
#define FALLOUT_STATE_PLAYING           2

#define DERBY_STATE_WAITING				1
#define DERBY_STATE_PLAYING           	2

new
	g_iDerbyRoundCount,
	g_iDerbyStartCount;

new
//    FALLOUT_OFFSET,
    FalloutObject[56],
    FalloutOState[56 char],
	fmcd = 10, //Fallout várakozási idõ
	FalloutRanking,
    FalloutOSelected = -1,
    FalloutOCount = 56,
	FalloutPlayers,
	FalloutMajStartTimer = -1,
	FalloutCheckTimer = -1,
	StartFalloutCheckTimer = -1;

#define FALLOUT_OFFSET \
    FalloutObject[0]

new
	g_FalloutStartTick,
	g_FalloutEndTick;

// Ház rablás
new
	g_pRobCount[MAX_PLAYERS char],
	Float:g_pRobPos[MAX_PLAYERS][3];

new
	g_pDebug[MAX_PLAYERS char],
	g_pGMT[MAX_PLAYERS char],
	g_pVIP[MAX_PLAYERS],
	g_pRaceRecords[MAX_PLAYERS];

new
	IsSpecing[MAX_PLAYERS],
	spectatorid[MAX_PLAYERS];

// Noclip
new
	g_pNoClipObject[MAX_PLAYERS];

// Language
new
	g_pLang[MAX_PLAYERS char];

// Elevator
new
	Obj_Elevator,
	Obj_ElevatorDoors[2],
	Obj_FloorDoors[21][2];

new
	Text3D:Label_Elevator;

#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)

new
	ElevatorState,
	ElevatorFloor;  // If Idle or Waiting, this is the current floor. If Moving, the floor it's moving to.

#define INVALID_FLOOR           (-1)

new
	ElevatorQueue[21],  	// Floors in queue.
	FloorRequestedBy[21];   // FloorRequestedBy[floor_id] = playerid; - Points out who requested which floor.

new
	ElevatorBoostTimer;     // Timer that makes the elevator move faster after players start surfing the object.

forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);

// Private:
forward Elevator_Initialize();
forward Elevator_Destroy();

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);

// Ferris Wheel
new const
	Float:gFerrisOrigin[3] = {832.8393, -2046.1990, 27.0900};

// Cage offsets for attaching to the main wheel
new const
	Float:gFerrisCageOffsets[NUM_FERRIS_CAGES][3] =
	{
		{0.0699, 0.0600, -11.7500},
		{-6.9100, -0.0899, -9.5000},
		{11.1600, 0.0000, -3.6300},
		{-11.1600, -0.0399, 3.6499},
		{-6.9100, -0.0899, 9.4799},
		{0.0699, 0.0600, 11.7500},
		{6.9599, 0.0100, -9.5000},
		{-11.1600, -0.0399, -3.6300},
		{11.1600, 0.0000, 3.6499},
		{7.0399, -0.0200, 9.3600}
	};

new const
	Float:g_fLegbalonPos[][] =
	{
		{-2340.97, 146.79, 34.19},
		{-2336.579589, 194.039962, 100.474945},
		{-2272.089599, 554.379821, 100.764945},
		{-1982.308471, 554.379821, 100.764945},
		{-1993.2734, 444.1673, 100.764945},
		{-1825.467773, 442.249237, 100.044952},
		{-1825.467773, 100.129379, 100.044952},
		{-1942.5667, 93.8716, 130.000},
		{-1947.0626, 183.4303, 132.019012},
		{-2205.788574, 157.921417, 76.828933},
		{-2330.714355, 108.211448, 62.828933}
	};

new const
	g_aiXPs[] =
		{
			0, 72, 144, 212, 273, 333, 385, 420, 435, 500,
			568, 673, 768, 812, 894, 911, 996, 1025, 1167, 1216,
			1379, 1546, 1674, 1848, 1996, 2113, 1312, 1780, 3128, 3333,
			3751, 4320, 4897, 5557, 6814, 7356, 7828, 8570, 9725, 10000,
			11256, 13864, 15000, 17868, 19352, 22358, 24495, 26857, 29307, 35608
		};

new const
	g_aiXPsEgyben[] =
		{
			0, 72, 216, 428, 701, 1034, 1419, 1839, 2274, 2774, 3342,
			4015, 4783, 5595, 6489, 7400, 8396, 9421, 10588, 11804, 13183,
			14729, 16403, 18251, 20247, 22360, 23672, 25452, 28580, 31913, 35664,
			39984, 44881, 50438, 57252, 64608, 72436, 81006, 90731, 100731, 111987,
			125851, 140851, 158719, 178071, 200429, 224924, 251781, 281088, 316696
		};

new
	gLegbalonPos[1 char];

// SA-MP objects
new
	gFerrisWheel,
	gFerrisCages[NUM_FERRIS_CAGES];

new
	Float:gCurrentTargetYAngle; // Angle of the Y axis of the wheel to rotate to.
								 // Since MoveObject requires some translation target to intepolate
						    // rotation, the world pos target is alternated by a small amount.

#define GetPlayerWalkingStyle(%1) \
    GetPVarInt(%1, "WalkStyle")

#define SetPlayerWalkingStyle(%1,%2) \
	SetPVarInt(%1, "WalkStyle", %2)

new const
	wheels[17] =
	{
		1025, 1073, 1074, 1075, 1076,
		1077, 1078, 1079, 1080, 1081,
		1082, 1083, 1084, 1085, 1096,
		1097, 1098
	};
/*
new const
	Weathers[] =
	{
		1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17,
		18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 42,
		38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 42
	};
*/
new const
	InvalidNosVehicles[29] =
	{
		581, 523, 462, 521, 463, 522, 461, 448, 468, 586,
		509, 481, 510, 472, 473, 493, 595, 484, 430, 453,
		452, 446, 454, 590, 569, 537, 538, 570, 449
	};
/*
new const
	CarColors[161] = // 199826
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
		41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
		79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114,
		115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
		155, 156, 157, 158, 159, 160, 161, 173, 174, 175, 236, 237, 239, 243, 252
	};
*/
new const
	Lasers[6] = {18643, 19080, 19081, 19082, 19083, 19084};

enum e_RadioStruct
{
	e_RadioName[24 char],
	e_RadioURL[64 char]
}

new const
	FastCars[] = {402, 411, 415, 429, 451, 477, 494, 502, 503, 506, 541, 558, 559, 562, 565, 587, 602, 603};

// Textdrawok
new
	Text:T_BlackBox[2],
//	Text:T_WhiteBox[2],
	PlayerText:StyleTD[MAX_PLAYERS],
	PlayerText:TDamageTD[MAX_PLAYERS],
	PlayerText:XP_BonusText[MAX_PLAYERS],
	PlayerText:g_XPText[MAX_PLAYERS],
	PlayerText:g_SzintText[MAX_PLAYERS],
	Text:g_XPBox,
	PlayerText:g_XPPos[MAX_PLAYERS],
//	Text:Tele0,
//	Text:Tele1,
//	Text:ServerIP,
	Text:FosoFolirat,
	PlayerText:TD_Datum[MAX_PLAYERS],
	PlayerText:TD_Ido[MAX_PLAYERS],
	Text:NoKill,
//	Text:ReloadTD,
	Text:RaceRecord,
	PlayerText:TD_InDMPlayers[MAX_PLAYERS],
	PlayerText:TD_DMInfoSettings[MAX_PLAYERS],
	Text:TD_DMInfo[7],
	Text:TD_DMInfoHelp[MAX_LANGUAGE],
	PlayerText:InDMKills[MAX_PLAYERS],
	Text:FalloutTextdraw,
	PlayerText:Speedo[MAX_PLAYERS][7];


new
	PlayerText:TD_pHealth[MAX_PLAYERS],
	PlayerText:TD_pArmour[MAX_PLAYERS],
	PlayerText:TD_pGPS[MAX_PLAYERS],
	PlayerText:TD_Spec[MAX_PLAYERS];

new
	Text:TD_Weblap,
	Text:TD_SpecBox,
//	Text:TD_SzerverIP,
	Text:TD_Info,
	Text:TD_Tele,
	Text:TD_CMDListAlatt[2];

new
	Text:TD_WMenu_WStart,
	Text:TD_WMenu_WEnd,
	Text:TD_WMenu_PStart,
	Text:TD_WMenu_PEnd;

new Text:TD_Kezdes0;
new Text:TD_Kezdes1;
new Text:TD_Kezdes2;
new Text:TD_Kezdes3;
new Text:TD_Kezdes4;
new Text:TD_Kezdes5;
new Text:TD_Kezdes6;
new Text:TD_Kezdes7;
new Text:TD_Kezdes8;
new Text:TD_Kezdes9;
new Text:TD_Kezdes10;
new Text:TD_Kezdes11;
new Text:TD_Kezdes12;
new Text:TD_Kezdes13;

enum e_TDW_Struct
{
	e_WeaponID,
	e_WeaponPrice,
	e_WeaponAmmo
}

new const
	g_WeaponData[][e_TDW_Struct] =
	{
	    {WEAPON_BRASSKNUCKLE, 500, 1},
	    {WEAPON_GOLFCLUB, 1200, 1},
	    {WEAPON_NITESTICK, 1500, 1},
	    {WEAPON_KNIFE, 4000, 1},
	    {WEAPON_BAT, 4200, 1},
	    {WEAPON_SHOVEL, 4500, 1},
	    {WEAPON_POOLSTICK, 5000, 1},
	    {WEAPON_KATANA, 6000, 1},
	    {WEAPON_CHAINSAW, 7000, 1},

	    {WEAPON_DILDO, 12000, 1},
	    {WEAPON_DILDO2, 12000, 1},
	    {WEAPON_VIBRATOR, 12000, 1},
	    {WEAPON_VIBRATOR2, 12000, 1},
	    {WEAPON_FLOWER, 3600, 1},
	    {WEAPON_CANE, 3500, 1},

	    {WEAPON_GRENADE, 13000, 120},
	    {WEAPON_TEARGAS, 8000, 120},
	    {WEAPON_MOLTOV, 15000, 120},

	    {WEAPON_COLT45, 15000, 500},
	    {WEAPON_SILENCED, 15000, 500},
	    {WEAPON_DEAGLE, 15000, 500},

	    {WEAPON_SHOTGUN, 18000, 500},
	    {WEAPON_SAWEDOFF, 18000, 500},
	    {WEAPON_SHOTGSPA, 25000, 500},

	    {WEAPON_UZI, 10000, 1500},
	    {WEAPON_TEC9, 12000, 1500},
	    {WEAPON_MP5, 15000, 1500},

	    {WEAPON_AK47, 23000, 750},
	    {WEAPON_M4, 25000, 750},

	    {WEAPON_RIFLE, 27000, 300},
	    {WEAPON_SNIPER, 33000, 250},

	    {WEAPON_ROCKETLAUNCHER, 70000, 150},
	    {WEAPON_HEATSEEKER, 85000, 150},
	    {WEAPON_FLAMETHROWER, 50000, 200},
	    {WEAPON_MINIGUN, 100000, 800},

	    {WEAPON_BOMB, 30000, 50},

	    {WEAPON_SPRAYCAN, 1500, 3500},
	    {WEAPON_FIREEXTINGUISHER, 6500, 3500},
	    {WEAPON_CAMERA, 19000, 3500},

	    {44, 10000, 1},
	    {45, 10000, 1}
	};

// CTC

new
	g_CTC_Auto[2],
	g_CTC_Hajo[2];

new
	g_RoundType,
	g_RedSteals,
	g_BlueSteals;

new
    g_VoteCount,
	g_CTC_Votes[2],
	g_LastVote = -1;

new
	Text:TD_CTC,
	Text:TD_SelectAuto,
	Text:TD_SelectHajo;

new const
	Float:g_fLeadoHelyek[4][3] =
	{
	    {-776.6226,1636.3937,27.0529},
	    {-816.6125,1431.5752,13.7891},
	    {2288.6980,508.2289,-0.4388},
	    {1961.0604,-245.3176,-0.4979}
	};

// Ganwar
new
	Text:TD_SelectGrove,
	Text:TD_SelectBallas,
	Text:TD_SelectVagos,
	Text:TD_SelectAztecas,
	Text:TD_SelectMessage;

new const
	Float:g_fGANGWAR_Grove[4][4] =
	{
		{2495.1365,-1686.4253,13.5136,3.1679},
		{2465.9702,-1672.1891,13.4834,7.1197},
		{2486.9739,-1650.3212,13.4858,95.7939},
		{2506.7756,-1667.7605,13.3765,95.3591}
	};


new const
	Float:g_fGANGWAR_Ballas[4][4] =
	{
		{2048.2705,-1193.5939,23.6983,183.8633},
		{1970.5968,-1200.1376,25.6338,98.6806},
		{1972.1849,-1235.4714,20.0523,281.0188},
		{1905.1105,-1155.7465,24.1424,272.9409}
	};

new const
	Float:g_fGANGWAR_Vagos[4][4] =
	{
		{2601.2954,-1096.6421,69.2543,6.5801},
		{2634.2524,-1098.3682,69.4000,268.2601},
		{2656.3530,-1025.6611,76.0535,163.8748},
		{2657.4795,-1078.8433,69.6172,68.9105}
	};

new const
	Float:g_fGANGWAR_Aztecas[4][4] =
	{
		{1793.4355,-2129.0786,13.5469,358.1062},
		{1746.1868,-2105.3982,13.5469,271.3355},
		{1787.3600,-2094.6660,17.4470,180.3719},
		{1711.7422,-2115.3772,13.3828,273.5310}
	};

// Gangwar
#define	TEAM_GROVE		0
#define	TEAM_BALLAS  	1
#define	TEAM_VAGOS  	2
#define	TEAM_AZTECAS 	3

enum E_ZONE_INFO
{
	Float:e_MinX,
	Float:e_MinY,
	Float:e_MaxX,
	Float:e_MaxY,
	Float:e_CPX,
	Float:e_CPY,
	Float:e_CPZ
}

new const
	gZoneInfo[][E_ZONE_INFO] =
	{
        {2417.3476, -1738.3458, 2639.3928, -1607.9997,	2515.8540,-1667.0889,13.8006}, // FÕ
		{2413.7866, -1891.6850, 2639.2521, -1738.2037,	2509.6533, -1834.8288, 13.5468},
		{2217.1369, -1966.8468, 2412.1818, -1892.2747,	2298.4291, -1936.8395, 13.5700},
		{2411.7695, -2048.2399, 2622.9804, -1891.8233,	2519.9294, -1943.7388, 13.6223},
		{2622.7285, -2048.6577, 2834.3405, -1888.5100,	2744.6740, -1943.6721, 13.5468},
		{2043.6712, -1759.6027, 2227.8837, -1608.5037,	2146.1535, -1682.5673, 15.0859},
		{2227.3754, -1758.4262, 2418.1284, -1608.2530,	2349.5712, -1668.0780, 13.5391},
		{2125.5517, -1892.7370, 2413.9389, -1758.2023,	2299.0576, -1813.6174, 13.5468},
		{2350.0939, -1608.1932, 2639.4357, -1451.3071,	2439.5195, -1512.5754, 23.9885},
		{2074.5385, -1608.3718, 2350.3618, -1450.5888,	2203.3977, -1498.4919, 23.9843},

        {1840.7974, -1271.5977, 2077.5036, -1094.1616,	2014.2775,-1199.4840,20.0234}, // FÕ
		{119.0886, -2101.5756, 616.2821, -1715.0338,	368.0249, -1783.7683, 5.4713},
		{616.1865, -2102.0837, 1054.5216, -1714.6437,	833.8942, -1841.4691, 12.5958},
		{954.6310, -1158.4155, 1361.9799, -921.5658,	1162.5140, -1044.3344, 31.6548},
		{1840.4383, -1610.4752, 2079.7370, -1414.0688,	2005.6215, -1531.2725, 3.6110},
		{1840.7126, -1414.4627, 2078.3024, -1270.7792,	1994.7731, -1351.7926, 23.9731},
		{2076.9572, -1272.7231, 2321.6833, -1093.0532,	2222.7707, -1157.1990, 25.7479},
		{2321.3864, -1294.1901, 2638.6979, -1155.8934,	2504.9528, -1220.6744, 38.3315},
		{2078.0895, -1451.1842, 2321.8430, -1272.1505,	2211.2399, -1342.4595, 23.9843},
		{2321.3557, -1453.3785, 2639.3813, -1294.0045,	2428.9143, -1370.3724, 24.6305},

        {2469.2888, -1155.1514, 2645.7666, -891.2755,	2555.9191, -1057.3076, 69.5569}, // FÕ
		{1972.0958, -1093.3348, 2184.3464, -922.5405,	2084.4638, -1044.1027, 31.2353},
		{2184.0686, -1092.5880, 2319.7307, -922.3607,	2263.7597, -1044.1665, 51.2993},
		{2319.8159, -1154.6633, 2469.5534, -890.8837,	2382.7907, -1047.4659, 53.6310},
		{2645.3161, -1154.6711, 2976.5493, -926.6037,	2798.4826, -1087.1629, 30.7187},
		{2639.0856, -1332.6783, 2975.9257, -1154.5327,	2802.4357, -1255.7152, 46.9530},
		{2638.8715, -1489.9792, 2976.1867, -1332.6723,	2745.5849, -1395.3613, 36.7739},
		{2639.1015, -1635.8591, 2975.9211, -1489.9241,	2817.9501, -1577.5651, 10.9289},
		{2639.2160, -1888.9620, 2975.8088, -1780.4895,	2813.9624, -1849.7316, 11.0438},
		{2639.3251, -1780.3988, 2976.0339, -1635.5115,	2701.6833, -1695.2338, 10.6583},

        {1653.1024, -2165.3134, 1826.7360, -2070.3532,	1745.2150, -2112.9082, 13.4568}, // FÕ
		{1564.2648, -1736.7064, 1826.0933, -1609.9644,	1696.9206, -1684.5466, 13.5468},
		{1564.2905, -1875.8493, 1826.4583, -1736.4630,	1702.6572, -1838.4843, 13.5452},
		{1652.9266, -2070.4431, 1826.2406, -1875.6981,	1761.2572, -1955.8400, 13.5468},
		{1962.2348, -2164.6069, 2216.8149, -2028.2103,	2093.0302, -2085.0788, 13.5468},
		{1962.0974, -2028.1363, 2217.2062, -1891.8214,	2087.4768, -1955.7006, 13.5468},
		{2216.6772, -2064.7060, 2411.7248, -1966.1121,	2315.6218, -2001.8853, 13.5486},
		{2043.3673, -1891.9822, 2126.3676, -1759.5190,	2073.9550, -1820.1447, 13.5468},
		{1826.1806, -1892.3208, 2043.6894, -1609.6672,	1952.9361, -1759.8381, 13.5468},
		{1825.9992, -2164.5939, 1962.3581, -1892.1453,	1883.1276, -2020.4974, 13.3906}
	};
// Zone Data -> g_ZoneIsAttacked
/*	0 = Nincs támadva,
	1 = CP-be áll a támodó,
	2 = CP-be áll a támadó és már villog
*/
new
	g_ZoneIsAttacked[40],
	g_ZoneAttacker[40],
	g_ZoneKillsAttacker[40],
	g_ZoneKillsDefender[40],
	g_ZoneLastKill[40],
	g_ZoneOwner[40],
	g_ZoneAttackTime[40],
	g_ZoneIconID[40],
//	g_ZoneCars[4 * 20],
	bool:g_ZoneAttackRahuzas[40];

new
	g_GangwarPlayerCount[4];

// Player Data
new
	g_pInCPCount[MAX_PLAYERS char],
	g_pInRegTick[MAX_PLAYERS];

new
	g_pJumpID[MAX_PLAYERS char],
	g_pJumpTick[MAX_PLAYERS];

new
	g_pSprayCount[MAX_PLAYERS char];

new
	g_pBounty[MAX_PLAYERS];
/*
new
	g_pHealthObject[MAX_PLAYERS][MAX_PLAYERS];
*/
/////////////////////////////////////////////////// Ház feltörés
new const
	Gombok[4][11] =
	{
		{"0123456789"},
		{"QWERTZUIOP"},
		{"ASDFGHJKL"},
		{"YXCVBNM"}
	};

new
	g_KijelzoStartTD = -1; // +10

new
	PlayerText:TD_pKijelzo[MAX_PLAYERS],
	g_pKijelzoText[MAX_PLAYERS][24];

new
	g_pKijelzoTimer[MAX_PLAYERS] = {-1,...},
	g_pKijelzoCount[MAX_PLAYERS][4];  // 0 = összes, 1 = játékos, 2 = sikeres, 2 = elbaszott

// Saveplayer
new
	gSavePlayerCount,
	gSavePlayerRuns,
	gSavePlayerTick,
	gSavePlayerPlayerID;

/////////////////////////////////////////////////// Póstás

new
	Float:g_LevelPos[][3] =
	{
		// Fort Carson
		{-362.1322, 1111.2075, 20.9398},
		{-360.2338, 1141.1917, 20.9398},
		{-368.5404, 1167.9816, 20.2719},
		{-327.2514, 1163.8399, 20.9398},
		{-321.2668, 1125.0336, 20.9398},
		{-297.2596, 1114.9970, 20.9398},
		{-297.8230, 1178.5866, 20.9398},
		{-260.5416, 1171.2377, 20.9398},
		{-258.8146, 1149.8922, 20.9398},
		{-261.0568, 1120.6068, 20.9398},
		{-260.1993, 1075.7873, 20.9398},
		{-260.1632, 1046.4227, 20.9398},
		{-278.6516, 1003.7944, 20.9398},
		{-249.1692, 1001.8469, 20.9398},
		{84.9247, 1161.9664, 20.9402},
		{99.2343, 1169.9903, 20.9402},
		{-37.8816, 1113.8037, 20.9398},
		{-16.8770, 1115.0736, 20.9398},
		{12.4594, 1113.1832, 20.9398},
		{1.2460, 1074.9866, 20.9398},
		{-38.8424, 1074.1783, 20.9398},
		{-35.3946, 1038.2019, 20.9398},
		{64.8725, 1005.8640, 13.7197},
		{70.1336, 973.4600, 15.8197},
		{-15.7755, 933.9696, 21.1058},
		{-151.2595, 881.5891, 18.4617},
		{-124.2966, 917.9539, 19.9139},
		{-92.1258, 970.8018, 19.9610},
		{110.4304, 1105.9765, 13.6093},
		{-233.8732,1052.0714,19.7344}
	};

new
	Float:g_PizzaPos[][3] =
	{
		{2322.1528, -124.5606, 28.1536},
		{2293.6579, -123.8068, 28.1534},
		{2271.3510, -117.8402, 28.1534},
		{2247.3066, -120.9747, 28.1534},
		{2204.7338, -88.2809, 28.1534},
		{2198.7919, -59.7788, 28.1534},
		{2201.6696, -39.4317, 28.1534},
		{2246.8696, -3.3712, 28.1536},
		{2271.6623, -8.7279, 28.1534},
		{2366.3906, -47.7741, 28.1534},
		{2384.0935, -53.6180, 28.1536},
		{2416.8110, -50.7920, 28.1534},
		{2437.3005, -53.7855, 28.1534},
		{2374.8544, -8.6796, 28.4416},
		{2375.0192, 22.0781, 28.4416},
		{2374.5693, 42.1557, 28.4416},
		{2374.9128, 71.3812, 28.4416},
		{2398.2568, 110.9496, 28.4416},
		{2418.4079, -11.8921, 27.6835},
		{2416.4387, 18.0501, 27.6835},
		{2413.8815, 60.6743, 28.4416},
		{2443.3623, 60.6235, 28.4416},
		{2439.5646, 25.5030, 27.6408},
		{2447.2919, -11.9362, 27.6835},
		{2488.3076, 19.4409, 28.4416},
		{2509.6040, 19.6019, 28.4416},
		{2484.6450, -36.1763, 28.4416},
		{2512.6772, -36.3694, 28.4416},
		{2548.6984, 23.7845, 27.6756},
		{2550.4841, -5.5145, 27.6756},
		{2549.9582, 59.0956, 27.6756},
		{2511.4663, 56.6733, 27.6835},
		{2516.3896, 95.6439, 27.6835},
		{2556.3725, 88.0650, 27.6756},
		{2542.9116, 135.9375, 27.5307},
		{2512.1506, 136.3372, 27.6756},
		{2481.4289, 126.2089, 27.6756},
		{2462.5224, 134.0984, 27.6756},
		{2362.7077, 115.8926, 28.4416},
		{2363.3510, 142.2017, 28.4416},
		{2362.5637, 165.8309, 28.4416},
		{2363.1215, 187.5852, 28.4416},
		{2325.3090, 191.4647, 28.4416},
		{2324.2333, 162.4754, 28.4416},
		{2325.2224, 136.5346, 28.4416},
		{2324.6057, 116.3684, 28.4416},
		{2269.3454, 110.5157, 28.4416},
		{2249.2539, 110.6984, 28.4416},
		{2205.0341, 62.1828, 28.4416},
		{2205.8737, 106.3377, 28.4452},
		{2236.1010, 166.5016, 28.1534},
		{2266.2954, 167.7191, 28.1536},
		{2285.5971, 160.4309, 28.4416}
	};

new
	g_Posta[50] = {-1, ...},
	g_PostaPickup[sizeof(g_LevelPos)+1],
	g_PostaKocsik[12],
	g_PostaArea;

// Pizza
new
	g_Pizza[50] = {-1, ...},
	g_PizzaPickup[sizeof(g_PizzaPos)+1],
	g_PizzaKocsik[12],
	g_PizzaArea;

new
	g_pElvittLevel[MAX_PLAYERS][5 char], // Elvitt Levél ID "g_Posta"-ból
	g_pLevelHelyek[MAX_PLAYERS][5 char], // Játékosnál lévõ levelek id-i "g_LevelPos"-ból
	g_pOnLevel[MAX_PLAYERS char], // Hányodik levél CP-ben van benne a játékos, a "g_pLevelHelyek"-bõl
	g_pPostasTime[MAX_PLAYERS],
	g_pPostaMoney[MAX_PLAYERS];

new
	PlayerText:TD_pPostasTime[MAX_PLAYERS];

#define DIALOG_POSTA        		25684

#define POSTAS_KEZDOHELY        	-319.9708,1048.7540,20.3403
#define PIZZAS_KEZDOHELY        	2333.1150,74.8937,26.6210

stock ResetPostasVars(playerid)
{
	for(new i; i != 5; i++)
	{
    	g_pLevelHelyek[playerid]{i} = 0xFF;
    	g_pElvittLevel[playerid]{i} = 0xFF;
	}
    g_pOnLevel{playerid} = 0xFF;
    g_pPostasTime[playerid] = 0;
    g_pPostaMoney[playerid] = 0;
}
// /text 490.0 72.0 162.0 162

// Clan rendszer / system
#define MAX_CLANS           100
#define MAX_CLAN_PLAYERS    60

static stock
	gJOGOK[2][24] = {{"{FF0000}Tiltva"}, {"{00FF00}Engedélyezve"}};

static stock
	gBeKi[2][24] = {{"{FF0000}Kikapcsolva"}, {"{00FF00}Bekapcsolva"}};

//#define DIALOG_CLAN				25567

enum
{
	DIALOG_CLAN = 25567,
	DIALOG_CLAN_CREATE,
	DIALOG_CLAN_ACCEPT,
	DIALOG_CLAN_CP,
	DIALOG_CLAN_CP_NAME,
	DIALOG_CLAN_CP_LEIRAS,
	DIALOG_CLAN_CP_COLOR,
	DIALOG_CLAN_RANKS,
	DIALOG_CLAN_PLAYERS,
	DIALOG_CLAN_PLAYERS_2,
	DIALOG_CLAN_PLAYERS_3,
	DIALOG_CLAN_RANKS_2,
	DIALOG_CLAN_RANKS_3,
	DIALOG_CLAN_BANK,
	DIALOG_CLAN_ACCEPTCLAN,
	DIALOG_CLAN_ACCEPTCLAN_2,
	DIALOG_CLAN_ACCEPTCLAN_3,
	DIALOG_CLAN_CP_LOG,
};

enum E_CLAN_FLAGS (<<= 1)
{
	e_INVITE_MEMBERS = 1, // tagokat meghívni
	e_KICK_MEMBERS,         // tagokat kidobni
	e_SET_RANK, // rangot állítani
	e_BANK_BALANCE, // klánbankban lévõ pénz megtekintése
	e_BANK_LOG, // klánbak log megtekintése
	e_BANK_DEPOSIT, // klánbannkba pénz betétele
	e_BANK_WITHDRAW,     // klánbankból pénz kivétele
	e_CAN_CHANGE_BANK_POS, // bank pozíciójának megváltoztatása
	e_CAN_CHANGE_SPAWN_POS, // spawn pozíciójának megváltoztatása
	e_SET_CLANNAME, // klánnév megváltoztatása
	e_SET_CLANLEIRAS, // klánleírás megváltoztatása
	e_SET_CLANCOLOR, // klánszín megváltoztatása
	e_EDIT_PERMISSIONS,    // jogosultságok szerkesztése
	e_CLAN_LOG, // klán log megtekintése
}

enum
{
	e_NOT_VALID_FORMAT = 1,
	e_NEGATIVE_NUMBER,
	e_KEVESEBB_PENZ_PLAYER,
	e_KEVESEBB_PENZ_BANK
}

new
	gCLAN_RIGHTS[5];

#define CLAN_RIGHTS_1 \
	_:(e_BANK_BALANCE | e_BANK_LOG)

#define CLAN_RIGHTS_2 \
    _:(e_BANK_BALANCE | e_BANK_LOG | e_BANK_DEPOSIT)

#define CLAN_RIGHTS_3 \
    _:(e_INVITE_MEMBERS | e_BANK_BALANCE | e_BANK_LOG | e_BANK_DEPOSIT | e_BANK_WITHDRAW)

#define CLAN_RIGHTS_4 \
    _:(e_INVITE_MEMBERS | e_KICK_MEMBERS | e_BANK_BALANCE | e_BANK_LOG | e_BANK_DEPOSIT | e_BANK_WITHDRAW | e_CAN_CHANGE_BANK_POS | e_CAN_CHANGE_SPAWN_POS | e_SET_CLANLEIRAS | e_SET_CLANCOLOR)

#define ALL_CLAN_RIGHTS \
    _:(e_INVITE_MEMBERS | e_KICK_MEMBERS | e_SET_RANK | e_BANK_BALANCE | e_BANK_LOG | e_BANK_DEPOSIT | e_BANK_WITHDRAW | e_CAN_CHANGE_BANK_POS | e_CAN_CHANGE_SPAWN_POS | e_SET_CLANLEIRAS | e_SET_CLANCOLOR | e_SET_CLANNAME | e_EDIT_PERMISSIONS)

#define CLAN_TD_SELECT_COLOR    0xFF0000AA

enum E_CLAN_MOD_FLAGS (<<= 1)
{
	e_CLAN_ACTIVE = 1,
	e_CLAN_BANK_PLACING,
}
new
	E_CLAN_MOD_FLAGS:g_ClanFlags[MAX_CLANS char];

new
//	bool:gClanIsActive[MAX_CLANS],
	gClanName[MAX_CLANS][24],
	gClanLeiras[MAX_CLANS][128 char],
	gClanColor[MAX_CLANS],
	gClanCreator[MAX_CLANS],
	gClanCreatorName[MAX_CLANS][MAX_PLAYER_NAME],
	Float:gClanSpawnPos[MAX_CLANS][4],
	gClanSpawnInterior[MAX_CLANS],
	gClanSpawnWorld[MAX_CLANS],
	Float:gClanArena[MAX_CLANS][6],
//	bool:gClanHaveBank[MAX_CLANS],
//	bool:gSomeonePlacingBank[MAX_CLANS],
	gClanBankMoney[MAX_CLANS],
	Float:gClanBankPos[MAX_CLANS][3],
	gClanRankFlags[MAX_CLANS][10],
	gClanPlayers[MAX_CLANS][2][MAX_CLAN_PLAYERS],
	gClanCreateTime[MAX_CLANS],
	g_Clan_SQL_ID[MAX_CLANS],
	g_Clan_ID_SQL[1000 char];

new
	Iterator:clans<MAX_CLANS>;

#define CLAN_SQL(%1) \
    g_Clan_SQL_ID[(%1)]

#define SQL_CLAN(%1) \
    g_Clan_ID_SQL{(%1)}

new
	gClanZone[MAX_CLANS],
	gClanGangZone[MAX_CLANS],
	gClanBankCP[MAX_CLANS] = {-1, ...},
	Text3D:gClanBankText[MAX_CLANS];

new
	gClanRankName[MAX_CLANS][10][24];

new
	g_pClan[MAX_PLAYERS char],
	g_pClanRank[MAX_PLAYERS char];

new
	g_pClanTDSelect[MAX_PLAYERS char];

new
	Text:TD_CLAN_Log,
	Text:TD_CLAN_Balance,
	Text:TD_CLAN_Deposit,
	Text:TD_CLAN_Withdraw,
	Text:TD_CLAN_Font;

new
	g_ClanCount;
////////////////////////////////////////////////////
new
	g_pClanCreateState[MAX_PLAYERS char];

////////////////////////////////////////////////////
#define MAX_DM  				500
#define DM_WORLD_START          1

// Ide tartozik

// Szerkesztés
new
	g_pDMID[MAX_PLAYERS],
	g_pDMCreation[MAX_PLAYERS];

// InGame
new
	g_pDeathMatchID[MAX_PLAYERS],
	g_pDeathMatchTeam[MAX_PLAYERS];

new
	g_szDMName[MAX_DM][32],
	g_szDMCommand[MAX_DM][24],
	g_szDMTeams[MAX_DM][2][12],
	g_DMTeamPlayers[MAX_DM][2],
	g_DMTeamKills[MAX_DM][2],
	g_DMTeamColor[MAX_DM][2],
	g_DMMaxKills[MAX_DM],
	g_DMRoundStart[MAX_DM],
	g_DMMaxPlayers[MAX_DM],
	Float:g_DMSpawns[MAX_DM][30][4],
	Float:g_DMZone[MAX_DM][4],
	g_DMZoneColor[MAX_DM],
	g_DMAreaID[MAX_DM],
	g_DMZoneID[MAX_DM],
	g_DMUpperSpawnID[MAX_DM char],
	g_DMUpperSpawnID_2[MAX_DM char],
	g_DMInterior[MAX_DM],
	Float:g_DMHealth[MAX_DM],
	Float:g_DMArmour[MAX_DM],
	g_DMWeapons[MAX_DM][13][2],
	g_DMArmedWeapon[MAX_DM char],
	g_DMCreator[MAX_DM],
    g_DMCreatorName[MAX_DM][MAX_PLAYER_NAME],
	g_DM_SQL_ID[MAX_DM],
	g_DM_ID_SQL[1000 char],
	g_DMCreateTime[MAX_DM],
	Float:g_DMGravity[MAX_DM],
	g_DM_Weather[MAX_DM],
	g_DM_Time[MAX_DM],
	g_DM_MaxKillstreak[MAX_DM],
	g_DM_MaxKillstreakPlayerID[MAX_DM],
	g_DM_MaxKillstreakPlayer[MAX_DM][MAX_PLAYER_NAME];

new
	Text:g_DMTextdraw[MAX_DM][2];

new
	Iterator:DeathMatches<MAX_DM>;
	
new
	g_CustomDMCount;

#define DM_SQL(%1) \
    g_DM_SQL_ID[(%1)]

#define SQL_DM(%1) \
    g_DM_ID_SQL{(%1)}

enum E_DM_FLAGS (<<= 1)
{
	e_DM_ACTIVE = 1,
	e_COMPLETED,
	e_IS_TDM,
	e_IN_CLEARWORLD,
	e_ONE_HIT_KILL,
	e_HEADSHOT,
	e_WEAPONS_BUY,
	e_PLACE_BOMB,
	e_NO_NAMETAGS,
	e_EXPLOSIVE_AMMO,
	e_JETPACK_MODE,
	e_NO_HUD,
	e_DM_MODE,
}
new
	E_DM_FLAGS:g_DMFlags[MAX_DM];

enum
{
	DIALOG_CREATEDM_WEAPONS = 32000,
	DIALOG_CREATEDM_WEAPONS_AMMO,
	DIALOG_CREATEDM_TEAM,
	DIALOG_CREATEDM_ZONE_OK,
	DIALOG_CREATEDM_COLOR,
	DIALOG_DM,
	DIALOG_DM_SHOTOBJECT,
	DIALOG_DM_SELECT_TEAM,
	DIALOG_DM_EDIT,
	DIALOG_DM_EDIT_ARMED_WEAPON,
	DIALOG_DM_EDIT_NAME,
	DIALOG_DM_WEATHER,
	DIALOG_DM_TIME,
	DIALOG_DM_INTERIOR,
}

new const
	g_szCustomDMWeapons[][] =
	{
	    "{" #XCOLOR_YELLOW "}Slot 0:",
	    "\tBrass Knuckles",
	    "{" #XCOLOR_YELLOW "}Slot 1:",
	    "\tNite Stick",
	    "\tKnife",
	    "\tBaseball Bat",
	    "\tShovel",
	    "\tPool Cue",
	    "\tKatana",
	    "\tMotorfûrész",
	    "{" #XCOLOR_YELLOW "}Slot 2:",
	    "\tGrenade",
	    "\tTeargas",
	    "\tMolotov",
	    "{" #XCOLOR_YELLOW "}Slot 3:",
	    "\tColt 45",
	    "\tSilenced Pistol",
	    "\tDesert Eagle",
	    "{" #XCOLOR_YELLOW "}Slot 4:",
	    "\tShotgun",
	    "\tSawnoff Shotgun",
	    "\tCombat Shotgun",
	    "{" #XCOLOR_YELLOW "}Slot 5:",
	    "\tUZI",
	    "\tMP5",
	    "\tTEC9",
	    "{" #XCOLOR_YELLOW "}Slot 6:",
	    "\tAK47",
	    "\tM4",
	    "{" #XCOLOR_YELLOW "}Slot 7:",
	    "\tRifle",
	    "\tSniper Rifle",
	    "{" #XCOLOR_YELLOW "}Slot 8:",
	    "\tRocket Launcher",
	    "\tHeat Seaker",
	    "\tFlamethrower",
	    "\tMinigun",
	    "{" #XCOLOR_YELLOW "}Slot 9:",
	    "\tSpray Can",
	    "\tFire Extinguisher",
	    "\tCamera",
	    "{" #XCOLOR_YELLOW "}Slot 10:",
	    "\tLila mûfasz",
	    "\tKicsi vibrátor",
	    "\tNagy vibrátor",
	    "\tSzürke vibrátor",
	    "\tVirág",
	    "\tGörbebot",
	    "{" #XCOLOR_YELLOW "}Slot 11:",
	    "\tNightvision",
	    "\tInfrared"
	};

#define MAX_NUMBER_COUNT		6
#define MAX_LIMIT				45
#define MIN_LIMIT				1
#define TICKET_PRICE			4000
#define TICKET_PRICE_VIP		3000

#define SORSOLASTIMER 			10 * 60 * 1111  	// ~10+ perc

new
	NyeroSzamok[MAX_PLAYERS][MAX_NUMBER_COUNT],
	KisorsoltSzamok[MAX_NUMBER_COUNT];

// Timers
new
	CountDown = -1;

// Reakcióteszt
new
	g_szReactionStr[24],
	g_iReactionActive,
	g_iReactionTime,
	g_iReactionWinner = INVALID_PLAYER_ID;

// Matekatika
new
	g_iMatMegoldas,
	g_iMatTime,
	g_iMatNyeremeny,
	g_szMatFeladat[32 char];

// TeleportTeszt
new
	g_szTeleStr[24],
	g_iTeleTime;

// Killstreak
new
	CurrKillStreak[MAX_DM] = {2, ...},
	CurrKillStreakID[MAX_DM] = {INVALID_PLAYER_ID, ...};

// Flag
new
	ZaszloPickup = -1,
	ZaszloOwner = INVALID_PLAYER_ID,
	ZaszloCount,
	ZaszloUnderwater,
	ZaszloRespawn,
	Float:ZaszloPos[3];

// Bónuszautó
new
	g_BonusCarID = INVALID_VEHICLE_ID,
	g_BonusCarOwner = INVALID_PLAYER_ID,
	g_BonusCarCount,
	g_BonusCarRespawn = 600;

new
	g_pDrunkLevelLast[MAX_PLAYERS],
	g_pFPS[MAX_PLAYERS],
	g_pAVG_FPS[MAX_PLAYERS],
	g_pFPSPosition[MAX_PLAYERS char];

new
	g_pPingPosition[MAX_PLAYERS char],
	g_pAVG_Ping[MAX_PLAYERS];
/*
new
	gPlayerEnterTime[MAX_PLAYERS],
	g_pLastVehicle[MAX_PLAYERS];
*/
#define MINIGAMES_MIN_FPS   12
#define MINIGAMES_MAX_PING  150

#define GetAverageFPS(%1) \
	g_pAVG_FPS[(%1)]

#define GetAveragePing(%1) \
	g_pAVG_Ping[(%1)]

// Tárolók
enum PLAYERINFO
{
	P_StyleTick,
	P_GlassesCount,
	P_WatchesCount,
	P_WeaponsCount,
	P_OthersCount,
	P_HatsCount,
	P_StyleStage,
	pPing[PING_MAX_EXCEEDS],
	pLekertFPS[FPS_MAX_EXCEEDS],
	Text3D:p3DText,
	pTotalSeconds,
	pRegYear,
	pRegMonth,
	pRegDay,
	pRegHour,
	pRegMinute,
	pRegSecond,
	pLastYear,
	pLastMonth,
	pLastDay,
	pLastHour,
	pLastMinute,
	pLastSecond,
	pLastActive,
	pStuntTick,
	pMSGCount,
	pAFKTime,
	pRegID,
	fRegID
};
new
	PlayerInfo[MAX_PLAYERS][PLAYERINFO];

#define MAX_PLAYER_POS      10

new
	Float:g_pSavedPosition[MAX_PLAYERS][MAX_PLAYER_POS][4],
	g_pSavedPositionInt[MAX_PLAYERS][MAX_PLAYER_POS],
	g_pSavedPositionWorld[MAX_PLAYERS][MAX_PLAYER_POS],
	Float:g_pSavedPositionVel[MAX_PLAYERS][MAX_PLAYER_POS][3];

new
	g_pLastDamgeTick[MAX_PLAYERS],
	g_pShots[MAX_PLAYERS],
	g_pKillFlood[MAX_PLAYERS char],
	g_pDeathFlood[MAX_PLAYERS char],
	g_pDriveByWarn[MAX_PLAYERS char],
	g_pSzint[MAX_PLAYERS char],
	g_pGangwarTeam[MAX_PLAYERS];

new
	g_pLastActiveTick[MAX_PLAYERS],
	Float:g_pLastCamVector[MAX_PLAYERS][3];

new
	g_pLastVehicleEnterTick[MAX_PLAYERS];

new
	g_pGodEnableTick[MAX_PLAYERS];

new
	BitArray:gPlayerShotPlayer[MAX_PLAYERS]<MAX_PLAYERS>,
	g_FakeKillKick[MAX_PLAYERS char],
	g_DisallowedBulletSync[MAX_PLAYERS char];

new
	g_pSavedObject[MAX_PLAYERS][10],
	g_pWeaponSlot[MAX_PLAYERS][13],
	g_pWeaponAmmo[MAX_PLAYERS][13],
	g_pWeaponSkill[MAX_PLAYERS][11];

// Weaponshot statisztika
new
	gWeaponShots[14],
	g_pWeaponShots[MAX_PLAYERS][14]; // 14 töltényes fegyver

new
    g_iPlayerObjects[MAX_PLAYERS][113],
    g_HoldingObject[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS];

new
	g_pQueryQueue[MAX_PLAYERS];
///////////////////////

new
	BitArray:g_pIgnoreList[MAX_PLAYERS]<MAX_PLAYERS>,
	BitArray:g_pChatIgnoreList[MAX_PLAYERS]<MAX_PLAYERS>;

new
	BitArray:g_pHorseshoes[MAX_PLAYERS]<50>,
	BitArray:g_pPhotos[MAX_PLAYERS]<50>,
	BitArray:g_pOysters[MAX_PLAYERS]<50>,
	BitArray:g_pJumps[MAX_PLAYERS]<70>,
	BitArray:g_pTags[MAX_PLAYERS]<100>;

new
	Float:g_pCarFlyValue[MAX_PLAYERS];

enum SERVERINFO
{
	RecordPlayers,
	CurrPlayers,
	#if !defined YSF
	WorldTimeFormat
	#endif
};
new
	ServerInfo[SERVERINFO];

enum RANGE
{
	e_rRecord,
	e_ConvertedTime[3],
	RegID,
	Player[MAX_PLAYER_NAME],
	e_rTime
};
new
	Range[RANGE];

enum GOLDPOT
{
	Float:gLocX,
	Float:gLocY,
	Float:gLocZ,
	gMoney,
	gPickup,
	gTick,
	Text3D:gText,
	max_goldpot_id
}
new
	goldpot[GOLDPOT];
new gHint[2][45 char];

enum SESSION
{
	queries,
	fqueries,
	connections,
	registrations[2],
	startuptime,
	commands,
//	longest_query,
//	max_query_len,
	messages,
	wins[3],
	kills[2],
	curr_maxplayers_time,
}
new
	session[SESSION];

enum TOPRACER
{
	rname[MAX_PLAYER_NAME char],
	reg_id,

	record,
	convertedtime[3],
	//car_name[32],

	rec_hour,
	rec_minute,
	rec_sec,
	rec_day,
	rec_month,
	rec_year
}
new TopRacer[TOPRACER];

#define MAX_DMINFO_LEN          260

new
	g_pDMInfo[MAX_PLAYERS][11];

enum
{
	e_Count_DERBY = 0,
	e_Count_FALLOUT = 1,
	e_Count_TRUCKING,
	e_Count_RACE,
	e_Count_GANGWAR,
	e_Count_CTC,
	e_Count_POSTAS,
	e_Count_PIZZAS,
	e_Count_DM,
	e_Count_TAXI,
}

new const
	gDMData[][] =
	{
		{"/Derby"},
		{"/Fallout"},
		{"/Trucking"},
		{"Verseny"},
		{"/Gangwar"},
		{"/CTC"},
		{"/Postas"},
		{"/Pizzas"} // minigame 8 db
	};

new
	g_InDMPlayerCount[512 char],
	g_iDMReklamLastUpdate; // sizeof(gDMData)

new
	g_pMinigameJoins[MAX_PLAYERS][15];

stock GetDMInfoData(id)
{
	static
		ret[32];
	strcpy(ret, "N/A");

	if(id < 0)
    return ret;

	if(id < sizeof(gDMData))
 	{
  		strcpy(ret, gDMData[id]);
    	return ret;
	}

  	new
  		dmid = SQL_DM(id - 8);
 		//printf("dmid: %d", dmid);

 	strcpy(ret, g_szDMCommand[dmid], sizeof(g_szDMCommand[]));
 	//printf(ret);
  	return ret;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Szerver Flags
enum e_ServerFlags (<<= 1)
{
	e_RACEDEBUG = 1,
	e_ANTIMOP,
//	e_CMDFLOOD,
	e_INSTAGIB,
	e_AUTOGATE,
	e_GROVEFAL,
	e_MATEK,
	e_TELEPORT,
	e_DERBY_STARTED,
	e_FALLOUT_STARTED,
	e_RACE_MAJSTART,
	e_RACE_START,
	e_RACE_ACTIVE,
	e_WHEEL_ALTERNATE,
	e_LEGBALON_WAIT,
	e_DERBY_CAN_START,
	e_IPLIMIT,
	e_DATA_LOADED,
	e_ANTI_SOBEIT_KICK,
	e_ANTIDB,
};

new
    e_ServerFlags:g_ServerFlags,
    g_GateFlags;

// Házak
#define MAX_HOUSE_OBJECTS 5
enum e_HouseFlags (<<= 1)
{
    e_OBJECT_LOADER = 1,
	e_RANDOM_WHEEL,
	e_NO_TELE_CAR,
	e_CAR_LIGHTS,
	e_CAR_DOORS,
	e_CAR_BONNET,
	e_CAR_BOOT,

	e_CAR_DOORS_D,
	e_CAR_DOORS_P,
	e_CAR_DOORS_BL,
	e_CAR_DOORS_BR,

	e_CAR_WINDOWS_D, // invert
	e_CAR_WINDOWS_P, // invert
	e_CAR_WINDOWS_BL, // invert
	e_CAR_WINDOWS_BR, // invert

	e_CAR_SIREN,
};

new
    e_HouseFlags:g_HouseFlags[MAX_HOUSES],
    g_HouseElements[MAX_HOUSES],
    g_HouseVehicleObjects[MAX_HOUSES][MAX_VEH_OBJECT],
    g_HouseType[MAX_HOUSES];
    //g_HouseObjects[MAX_HOUSES][MAX_HOUSE_OBJECTS];

// Player Flags
enum e_PlayerFlags (<<= 1)
{
    e_SPIN = 1,
    e_READCMDS,
    e_FLY,
	e_ANTIFALL,
	e_SPEEDO,
	e_STUNTBONUS,
	e_STUNTS,
	e_GOTO,
	e_TELE_MSG,
	e_GAME_HOUR,
	e_NO_NAMETAG,
	e_SEENAMETAG,
	e_CLICKTELE,
	e_SPVEL,
	e_SEEPMS,
	e_FASTRESPAWN,
 	e_GOD,
 	e_ANTIDB_,
	e_MUSIC,
	e_CON_MSG, // rezerválva, amik értéke automatikusan 1 lesz (e_RESERVED_1)
	e_LOCATE,
	e_CREATEDM_RIGHT,
	e_CREATECLAN_RIGHT,
	e_MAX_DMPLAYERS,
	e_AUTOLOGIN,
	e_AUTOSPAWN,
	e_CARFLY,
	e_SHOW_HIDED_CON_MSG,
	e_HAS_VIP,
	e_ALLOW_SPEC, // TÖBBBET NEEEE!!!!
};

new
    e_PlayerFlags:g_PlayerFlags[MAX_PLAYERS];

enum e_PlayerFlags2 (<<= 1)
{
    e_HOUSE_ICONS = 1,
    e_BIZNIS_ICONS,
    e_PORTAL,
    e_FPS_MOD,
    e_VIP_TEXT,
    e_SHOW_CLAN_MSG,
    e_ALLOW_CHANGENAME,
    e_RACE_ICONS,
    e_HIDE_CLANZONES,
    e_HUD,
   	e_asd, //Ne töröld ki
    e_ALLOW_RACE_RECORD,
};

new
    e_PlayerFlags2:g_PlayerFlags2[MAX_PLAYERS];

enum e_ChatMSG_Flags (<<= 1)
{
	e_TeleTest_MSG = 1,
	e_MathsTest_MSG,
	e_ReactionTest_MSG,
	e_Race_MSG,
	e_Info_MSG,
	e_ClanChat_MSG,
	e_Goldpot_MSG,
	e_MinigameJoins_MSG,
	e_Flag_MSG,
 	e_BonusCar_MSG,
 	e_DMJoin_MSG,
}
new
    e_ChatMSG_Flags:g_pChatMSGFlags[MAX_PLAYERS];

// 8323580
#define DEFAULT_PLAYER_FLAGS \
	e_PlayerFlags:(e_FLY | e_ANTIFALL | e_SPEEDO | e_STUNTBONUS | e_STUNTS | e_GOTO | e_TELE_MSG | e_ANTIDB_ | e_GOD | e_MUSIC | e_CON_MSG | e_LOCATE | e_CREATEDM_RIGHT | e_CREATECLAN_RIGHT)

#define DEFAULT_PLAYER_FLAGS2 \
	e_PlayerFlags2:(e_HOUSE_ICONS | e_BIZNIS_ICONS)

enum e_TD_Flags (<<= 1)
{
	e_NOTD_FELIRAT = 1,
	e_NOTD_HONLAP,
	e_NOTD_ORA,
	e_NOTD_XP,
	e_NOTD_XPCSIK,
	e_NOTD_XPSZINT,
	e_NOTD_DMINFO,
	e_NOTD_DMKILLS,
	e_NOTD_TELE,
	e_NOTD_FALLOUT,
	e_NOTD_CTC,
	e_NOTD_WELCOME,
	e_NOTD_INFOTD,
	e_NOTD_HEALTH,
	e_NOTD_ARMOUR,
	e_TD_GPS,
	e_NOTD_GIVEDAMAGE,
	e_NOTD_TAKEDAMAGE,
	e_NOTD_FPS,
	e_NOTD_DM_INFO_HELP,
	e_NOTD_SPEC,
}
new
    e_TD_Flags:g_pTDFlags[MAX_PLAYERS];

enum e_PlayerData (<<= 1)
{
    e_INVIS = 1,
    e_NORELOAD,
    e_REJTETT,
    e_NOCARMSG,
    e_FALLED,
    e_TIMESSPAWNED,
    e_FIRST_CLASS,
    e_LOGGED_IN,
    e_THREADS_DONE,
    e_ON_STYLE,
    e_SAVE_STYLE,
    e_RACEMODE,
    e_CLEARWORLD,
    e_CLEARWORLD_NOOBJECTS,
    e_NOVOBJECTS,
    e_CMDCOUNT,
    e_SPAWN_SP,
    e_MUST_LOGIN,
    e_USE_LOOP_ANIM,
    e_NO_SYNC,
    e_AFK,
    e_SPEEDO_TD,
    e_BEBASZVA,
    e_MYTEXT,
    e_KOCSI_RESPAWN,
    e_RACE_KICKED,
    e_CTC_VOTED,
    e_RECONNECT,
    e_ZASZLONA_MEGDOGLOTT,
    e_EXPLOSION_AMMO,
};

new
    e_PlayerData:g_PlayerData[MAX_PLAYERS];

enum e_GamesData (<<= 1)
{
    e_IN_DERBY = 1,
	e_IN_FALLOUT, // 2
	e_IN_DM, // 4
	e_IN_DUEL, // 4
    e_IN_TRUCKING, // 8
    e_IN_RANGE, // 16
    e_IN_RACE, // 32
    e_RABOL, // 64
	e_KOCSIT_LOP, // 128
    e_IN_GANGWAR, // 256
    e_IN_CTC, // 512
	e_POSTAS, // 1024
	e_PIZZAS, // 2048
	e_FLAG_OWNER, // 4096
	e_BCAR_OWNER,// 8192
	e_NOTELE, // 16384
	e_GRAV,  // 32768
	e_WORLDEDIT, // 65536
	e_SPEC,
	e_GHOSTMODE,
	e_IN_TAXI,
}

new
    e_GamesData:g_pGamesData[MAX_PLAYERS];

#define NoTele(%1) \
	(ZaszloOwner == %1 || g_BonusCarOwner == %1 || ((e_IN_DUEL | e_RABOL | e_IN_GANGWAR | e_IN_CTC | e_POSTAS | e_PIZZAS | e_IN_DERBY | e_FLAG_OWNER | e_BCAR_OWNER | e_NOTELE | SPEC | e_IN_TAXI) & g_pGamesData[%1]) || GetPVarType(%1, "ElloptaKocsit") || GetPVarType(%1, "FalloutState") || GetPVarType(%1, "Trucking") || GetPVarType(%1, "RaceParticipant"))

#define MINIGAMES_LEAVE\
	(e_IN_DERBY | e_IN_FALLOUT | /*e_IN_DM | */e_IN_DUEL | e_IN_TRUCKING | e_IN_RANGE | e_IN_RACE | e_IN_GANGWAR | e_IN_CTC | e_POSTAS | e_PIZZAS | e_WORLDEDIT | e_IN_TAXI)

#define IN_MINIGAME_AND_SHITS \
    (e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_DUEL | e_IN_TRUCKING | e_IN_RANGE | e_IN_RACE | e_RABOL | e_KOCSIT_LOP | e_IN_GANGWAR | e_IN_CTC | e_POSTAS | e_PIZZAS | e_FLAG_OWNER | e_BCAR_OWNER | e_IN_TAXI)
//D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>
//#define ALL_GAMES 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256

//#define ALL_GAMES_RACE 1 | 2 | 4 | 8 | 16 | 128 | 256

#define DERBY 		e_IN_DERBY
#define FALLOUT 	e_IN_FALLOUT
#define DM 			e_IN_DM
#define DUEL 		e_IN_DUEL
#define TRUCKING 	e_IN_TRUCKING
#define RANGE	 	e_IN_RANGE
#define RACE 		e_IN_RACE
#define LOP 		e_RABOL
#define KOCSILOP	e_KOCSIT_LOP
#define GANGWAR 	e_IN_GANGWAR
#define CTC         e_IN_CTC
#define POSTAS      e_POSTAS
#define PIZZAS      e_PIZZAS
#define FLAG		e_FLAG_OWNER
#define BCAR		e_BCAR_OWNER
#define NOTELE      e_NOTELE
#define GRAV        e_GRAV
#define WORLDEDIT	e_WORLDEDIT
#define SPEC		e_SPEC
#define GHOSTMODE	e_GHOSTMODE
#define TAXI		e_IN_TAXI

#define D:<%1> _:(%1)

////////////////////////////////
enum e_pOtherFlags (<<= 1)
{
	e_NOBACK = 1, // Teleport dialóghoz kiegészítõ
	e_HOUSEMENU,
	e_HAVE_CLIENT,
	e_CLIENT_CHECKED,
	e_RAKSAMP,
	e_NO_TEXTDRAWS,
	e_FINDMODE,
	e_JETPACK,
	e_KICKED,
	e_HAVE_TICKET,
	e_GOD_ALLOWED,
	e_GOD_SETTED,
	e_BEMENT_BIZNISZBE,
	e_ZONE_UPDATE_DISABLED,
	e_IN_HOUSE,
}

new
    e_pOtherFlags:g_pOtherFlags[MAX_PLAYERS],
    g_ClientVersion[MAX_PLAYERS];

// sscanf version
stock IsNotConnected(playerid)
{
	if(playerid == INVALID_PLAYER_ID || playerid == cellmin)
	{
	    return 1;
	}
	return !!(g_pOtherFlags[playerid] & e_KICKED);
}

/////////////////////////////////

enum e_pTDFlags (<<= 1)
{
    e_SELECT_GANGWAR = 1,
	e_SELECT_WEAPON,
	e_SELECT_CLAN,
	e_SELECT_CMDLIST
}
new
    e_pTDFlags:g_pSelectTDFlags[MAX_PLAYERS];

// Shooting Range
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum E_OBJECTS
{
	Float:pObjectX[MAX_PLAYERS],
	Float:pObjectY[MAX_PLAYERS],
	Float:pObjectZ[MAX_PLAYERS]
};

new const
	Float:Random_Object_Speed[18] =
	{
		0.8, 0.9, 1.0,
		1.1, 1.2, 1.3,
		1.4, 1.5, 1.6,
		1.6, 1.8, 2.0,
		2.2, 2.3, 2.5,
		2.1, 2.5, 2.0
	};

new
    RangePickup[8],
    AimObject[50][E_OBJECTS],
	PlayerObjects[MAX_PLAYERS char],
	Objects_Hit2[MAX_PLAYERS char],
	Objects_Missed[MAX_PLAYERS char],
	A_Objects[50][MAX_PLAYERS],
	Float:OnArrow[3][MAX_PLAYERS];

new const
	Float:Pickup_Pos[8][3] =
	{
		{809.2676, 1668.9481, 5.2813},
		{806.3400, 1668.8962, 5.2813},
		{803.0370, 1668.8966, 5.2813},
		{800.2703, 1668.8964, 5.2813},
		{797.1923, 1668.8964, 5.2813},
		{794.1580, 1668.8971, 5.2875},
		{795.9923, 1681.0208, 5.2813},
		{814.0499, 1672.9974, 5.2813}
	};

enum e_PackedString2
{
	e_szName2[34 char]
};

new const
	g_szVehicleNames[212][] =
	{
		"Landstalker", "Bravura", "Buffalo", "Linerunner", "Pereniel", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
		"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection",
		"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Artic Trailer 1", "Previon", "Coach", "Cabbie",
		"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Artic Trailer 2", "Turismo", "Speeder",
		"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Topfun", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider",
		"Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina",
		"Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Maverick", "Rancher A", "FBI Rancher", "Virgo", "Greenwood",
		"Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B",
		"Bloodring Banger", "Rancher B", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stuntplane", "Tanker", "RoadTrain",
		"Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV-1000", "Cement Truck", "Tow Truck", "Fortune", "Cadrona", "FBI Truck",
		"Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover",
		"Sadler", "Firetruck LA", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility Van", "Nevada", "Yosemite", "Windsor", "Monster A",
		"Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight Box", "Artic Trailer 3",
		"Kart", "Mower", "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "Newsvan", "Tug", "Ptero Trailer", "Emperor",
		"Wayfarer", "Euros", "Hotdog", "Club", "Trailer B", "Trailer C", "Andromada", "Dodo", "RC Cam", "Launch", "Cop Car LS", "Cop Car SF",
		"Cop Car LV", "Ranger", "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale Shit", "Sadler Shit", "Bag Box A", "Bag Box B",
		"Stair Trailer", "Boxburg", "Farm Plow", "Utility Trailer"
	};

new const
	g_szVehicleNamesORG[212][] =
{
	"landstal", "bravura", "buffalo", "linerun", "peren", "sentinel", "dumper", "firetruk", "trash", "stretch", "manana", "infernus", "voodoo", "pony", "mule", "cheetah",
	"ambulan", "leviathn", "moonbeam", "esperant", "taxi", "washing", "bobcat", "mrwhoop", "bfinject", "hunter", "premier", "enforcer", "securica", "banshee", "predator",
	"bus", "rhino", "barracks", "hotknife", "artict1", "previon", "coach", "cabbie", "stallion", "rumpo", "rcbandit", "romero", "packer", "monster", "admiral", "squalo",
	"seaspar", "pizzaboy", "tram", "artict2", "turismo", "speeder", "reefer", "tropic", "flatbed", "yankee", "caddy", "solair", "topfun", "skimmer", "pcj600", "faggio",
	"freeway", "rcbaron", "rcraider", "glendale", "oceanic", "sanchez", "sparrow", "patriot", "quad", "coastg", "dinghy", "hermes", "sabre", "rustler", "zr350",
	"walton", "regina", "comet", "bmx", "burrito", "camper", "marquis", "baggage", "dozer", "maverick", "vcnmav", "rancher", "fbiranch", "virgo", "greenwoo", "jetmax",
	"hotring", "sandking", "blistac", "polmav", "boxville", "benson", "mesa", "rcgoblin", "hotrina", "hotrinb", "bloodra", "rnchlure", "supergt", "elegant", "journey",
	"bike", "mtbike", "beagle", "cropdust", "stunt", "petro", "rdtrain", "nebula", "majestic", "buccanee", "shamal", "hydra", "fcr900", "nrg500", "copbike",
	"cement", "towtruck", "fortune", "cadrona", "fbitruck", "willard", "forklift", "tractor", "combine", "feltzer", "remingtn", "slamvan", "blade", "freight",
	"streak", "vortex", "vincent", "bullet", "clover", "sadler", "firela", "hustler", "intruder", "primo", "cargobob", "tampa", "sunrise", "merit", "utility",
	"nevada", "yosemite", "windsor", "monstera", "monsterb", "uranus", "jester", "sultan", "stratum", "elegy", "raindanc", "rctiger", "flash", "tahoma", "savanna",
	"bandito", "freiflat", "streakc", "kart", "mower", "duneride", "sweeper", "broadway", "tornado", "at400", "dft30", "huntley", "stafford", "bf400", "newsvan",
	"tug", "petrotr", "emperor", "wayfarer", "euros", "hotdog", "club", "freibox", "artict3", "androm", "dodododo", "rccam", "launch", "copcarla", "copcarsf",
	"copcarvg", "copcarru", "picador", "swatvan", "alpha", "phoenix", "glenshit", "sadlshit", "bagboxa", "bagboxb", "tugstair", "boxburg", "farmtr1", "utiltr1"
};

// Checkpointok
new
	gCP_BANK[8],
	gCP_CH,
	gCP_AA,
	gCP_SFA,
	gCP_LSA,
	gCP_JIZZY,
	gCP_SKTP,
	gCP_ARMY,
	gCP_LVA,
	gCP_LVSZ,
	//gCP_GATE, //Grove CP
	gCP_BAR,
	gCP_LC,
	gCP_ROCKET[4],
	gCP_TRUCKMISSION,
	gCP_TUNE[5],
	gCP_GOLDPOT;

#define MAX_STUNTS               49

new
    g_pSC_StuntCount[MAX_PLAYERS][MAX_STUNTS], // Melyik CP-van megcsinálva melyik stuntnál
    g_pSC_Count[MAX_PLAYERS][MAX_STUNTS char]; // Mennyi CP-n ment át melyik stuntnál

new
	g_SC_StuntRange[MAX_STUNTS][10],
	g_SC_StuntScore[MAX_STUNTS char],
	g_SC_StuntName[MAX_STUNTS][45 char];

// Pozíció
enum SPLACE
{
	Neve[24 char],
	Float:Kordinatak[4]
};

new const
	Float:g_HintakPos[][] =
	{
		{946.483300, -1883.792400, 8.478500}, // csúszda - roller
		{907.819213, -1876.338989, 9.199993}, // tehénkörhinta - carousel
		{877.185913, -1877.019897, 10.836444}, // körhinta - revolution
		{810.988159, -1878.776855, 8.871276}, // forgószék  - observer
		{842.020874, -1887.778686, 16.750499}, // forgó - topgun
		{832.689025, -1936.544189, 13.507499}, // rodeo - cow
		{836.618164, -1974.003417, 13.505937}, // projekt
		{837.787109, -2058.295898, 12.867187}, // börtön - thejail
		{909.894226, -2049.239257, 14.378616}, // viking
		{837.364562, -2005.619262, 12.867187}  // hidraulika - caida
	};

new const
	g_fBonusCarPos[][SPLACE] =
	{ // 3
		{!"Glen Park", 			{2004.3091, -1230.1168, 21.0456, 98.4696}},
		{!"Bayside Marina", 	{-2427.8398, 2501.8118, 13.5121, 267.1465}},
		{!"Doherty Garage", 	{-2026.2983, 126.9883, 29.0024, 2.8378}},
		{!"Caligula's Casino", 	{2146.9019, 1751.9937, 10.8203, 85.4101}},
		{!"ZeRo RC Shop", 		{-2265.4219, 109.2701, 35.1718, 87.3606}},
		{!"Caligula's Palace", 	{2601.8901, 1853.0804, 10.8203, 87.8067}},
		{!"Chilliad Barlang", 	{-1995.3478, -1503.0076, 84.1578, 182.6088}},
		{!"Fern Ridge House", 	{859.5314, -17.1390, 63.3235, 156.6127}}
	};

new const
	Float:g_fZaszloPos[][] =
	{ // 3
		{501.582, -1908.04, 34.654}, // Monster Parkour Tower
		{1850.37, -1415.87, 36.4858}, // Skatepark Csõ
		{-2221.5830,-1750.2440,531.2635}, // Chilliad Jumpdown
		{1770.2302, 2858.3174, 10.8283}, // Észak LV
		{-219.818, 1493.38, 76.62}, // A legkedveltebb driftpálya
		{1786.22, -1307.22, 13.6859}, // 0.3c Irodaház
		{-379.023, -1449.45, 25.7265}, // Paraszt Csaj
		{-198.1970,-2264.9609,34.7149}, // Luxhouse
		{1394.99, -806.878, 85.0375}, // Hollywood
		{-543.3833, 2072.1597, 123.2070}, //Dam stunt
		{2058.9011, 2435.1812, 165.6172}, // The Emerald Isle
		{1964.4277, 1911.7191, 130.9375} // The Visage
	};

enum TruckStruct
{
	T_Neve[24 char],
	T_Jovedelem,
	Float:T_Kordinatak[3]
};

new const
	TruckPos[][TruckStruct] =
	{ // 0
		{!"LS Docks", 				5900, {2768.1636,-2556.7195,13.6322}},
		{!"Junkyard", 				5500, {2169.9226,-1979.0289,13.5547}},
		{!"Los Santos Airport", 	6200, {1798.1461,-2308.7710,-2.7937}},
		{!"LS Építkezés", 			4500, {1257.4211,-1150.8295,23.6563}},
		{!"Film Studio", 			3200, {812.8713,-1192.5835,16.9766 }},
		{!"Angel Pine", 			7500, {-1996.6239,-2423.5088,30.6250}},
		{!"Shady Creeks", 			5000, {-1663.8184,-2237.6108,33.7338}},
		{!"Chilliad Yunkyard", 		7200, {-1888.9606,-1704.3397,21.7500}},
		{!"Missionary Hill", 		7500, {-2476.5967,-615.7300,132.5558}},
		{!"Doherty Garage", 		5300, {-2029.3179,171.4344,28.8359}},
		{!"Jizzy Club", 			6500, {-2587.4365,1385.9940,7.1390}},
		{!"Shipstunt", 				5200, {-1465.4569,432.4947,7.1875}},
		{!"Las Barrancas", 			5000, {-774.1821,1440.3441,13.7891}},
		{!"Tierra Roboda", 			5500, {-1197.9684,1825.9216,41.7188}},
		{!"Bayside Marina", 		6800, {-2254.3972,2287.7046,4.8202}},
		{!"El Quebrados", 			7100, {-1524.2037,2637.1206,55.8359}},
		{!"Abandobed Airport", 		7000, {485.5685,2392.2366,28.9375}},
		{!"Prickle Pine", 			7300, {1516.4946,2772.7412,10.6719}},
		{!"Company", 				6200, {2858.1104,912.8091,10.7500}},
		{!"Freight Depot", 			6200, {1424.8260,1039.2367,10.3256}},
		{!"Green Palms", 			5900, {196.8313,1424.4995,10.5859}},
		{!"The Big Ear", 			6300, {-363.5539,1585.1062,76.4846}},
		{!"Blueberry",	 			5200, {51.0715,-284.5813,1.7258}},
		{!"Palomino Creeck", 		6300, {2545.8765,72.3396,26.4766}},
		{!"Dillimore", 				6300, {652.7844,-564.2861,16.3359}},
		{!"Yellow Bel Golf", 		7300, {1480.1847,2847.5464,10.8203}},
		{!"Hunter Quarry", 			9500, {643.6478,882.1414,-42.6702}},
		{!"KACC Millitary Fuels", 	7600, {2523.3076,2830.2844,10.8203}},
		{!"Tierra Robada", 			8200, {-537.5844,2570.4858,53.4141}},
		{!"LV Fegyverbolt", 		5500, {2200.3394,922.8490,10.8130}},
		{!"Ocean Flats", 			8600, {-2687.3494,233.0342,4.3359}},
		{!"Big Smoke Crackplace", 	7000, {2512.0872,-1273.2194,34.7044}}
	};

new const
	Float:g_fGarazsPos[][] =
	{
		{1645.4347, 2185.6079, 10.8203}, // Redsands West
		{-2107.8962, -2401.4121, 31.3873}, // Angyal Pina
		{2740.9438, -2009.4327, 13.5547}, // Default Rob Place
		{-343.5125, 1541.0471, 75.5625}, // Drift 1
		{2320.5332, 59.5513, 26.4854}, // Bank robbed by Catalina
		{-2459.3494, 1073.3374, 55.8330} // Észak SF garázs
	};
new leadofos[MAX_PLAYERS][sizeof(g_fGarazsPos)];

enum e_DuelStruct
{
	e_szName[24 char],
	e_iInterior,
	Float:e_fDuelPos[8]
}

new
	g_pDuelWeapon[MAX_PLAYERS][13 char],
	g_pDuelCaller[MAX_PLAYERS], // Kihívott félnek van mindig beállítva
	g_pDuelPlayer[MAX_PLAYERS],
	g_pDuelLocation[MAX_PLAYERS char],
	g_pDuelID[MAX_PLAYERS char]; // 0 = Kihívó, 1 = Kihívótt játékos

new
    BitArray:g_bDuelActive<500>,
	g_DuelWeapons[MAX_PLAYERS / 2][13 char],
	g_DuelPlayer[MAX_PLAYERS / 2][2],
	g_DuelLocation[500 char], // Kihívó & Kihívott játékos
	g_DuelKills[MAX_PLAYERS / 2][2],
	g_DuelMaxRound[MAX_PLAYERS / 2],
	g_DuelRounds[MAX_PLAYERS / 2],
	g_DuelMessziVannak[MAX_PLAYERS / 2],
 	g_DuelHealth[500 char],
	g_DuelArmour[500 char];

new const
	g_fDuel[][e_DuelStruct] =
	{
		{!"Las Venturas Raktár", 	0,	{1460.8143,1112.5646,10.8130,94.4237,		1431.9330,1110.3263,10.8203,275.1255}},
		{!"Los Santos Docks", 		0,	{2599.6611,-2429.0356,13.4688,39.4338,		2571.8677,-2401.3284,13.4688,222.6964}},
		{!"Dam Stunt",				0,	{-384.2649,2238.7366,42.0938,194.2513, 		-376.7671,2209.5356,42.0938,8.8546}},
		{!"Glass Duel",				0,	{-1984.2932,632.2905,145.3203,359.0316,	 	-1984.2073,685.4141,145.3203,178.8191}},
		{!"Skyskraper Duel",		0,	{1451.9587,-1045.3605,213.3828,182.5655,	1450.9474,-1085.4452,213.3828,0.0000}},
		{!"Üres Garázs",			1,	{1406.7776,0.4899,1000.9215,132.2908,		1373.7317,-30.2038,1000.9219,308.3760}},
		{!"Fa sziget",				0,	{-3950.9810,572.8806,7.6502,68.3318, 		-4006.1355,596.6340,13.6356,248.3318}},
		{!"Medence", 				0,	{2553.7659,1586.6666,10.8203,128.4772,		2508.9507,1548.2549,10.8203,310.1812}},
		{!"Tierra Robada Parkoló", 	0,	{-523.8944,2609.9685,53.5703,175.9991,		-524.1934,2579.6401,53.5703,356.8223}},
		{!"Ketrecduel", 			0,	{2181.1003,-2221.1794,923.1041,182.6750,	2180.8367,-2268.9678,923.1041,359.3733}}
	};
// Dave kabbe a faszom..
new const
	g_szTiltottSzavak[][] =
	{
		{"pina"}, {"punci"}, {"picsa"}, {"fasz"}, {"kurva"}, {"cigany"}, {"zsido"}, {"geci"}, {"sperma"}, {"pocs"},
		{"buzi"}, {"csicska"}, {"anyad"}, {"apad"}, {"admin"}, {"szar"}, {"fos"}, {"kuki"}, {"fing"}, {"suna"}
	};
	
new const
	g_szTiltottBanIndok[][] =
	{
		{"kurva"}, {"anyád"}, {"anyad"}, {"apad"}, {"fasz"}, {"szar"}, {"kurvaanyad"}, {"kurvaanyád"}, {"geci"}, {"csicska"}, {"faszom"}, {"cs"}, {"csá"}, {"szia"}
	};

new const
	g_szTopDialog_0[][] = //Általános
	{
	    !"XP",
		!"Szint",
		!"Money",
		!"Bank",
		!"Játszott óra",
		!"Flag Time (Óra)",
		!"BonusCar Time (Óra)",
		!"AFK-ban töltött idõ [2012.05.23 óta]",
		!"AFK rekord [2014.02.04 óta]",
		!"Fórumon eltöltött idõ",
		!"Fórum hozzászólás",
		!"Rablások",
		!"Chatbe elküldött üzenetek",
		!"Stuntbónusz"
		//!"Jármûben megtett távolság [2016.10.16 óta]",
		//!"Gyalog megtett távolság [2016.10.16 óta]"
	};
	
new const
	g_szTopDialog_1[][] = //Minigamek, tesztek
	{
		!"Hallövölde",
		!"Megnyert versenyek",
		!"Versenyrekordok",
		!"Fuvart Szállító",
		!"Fallout nyertes",
		!"Leszállított levelek [2013.10.15 óta]",
		!"Leszállított pizzák [2013.10.15 óta]",
		!"Derby nyerések [2013.10.15 óta]",
		!"CTC Autó leadások [2013.10.15 óta]",
		!"CTC Hajó leadások [2013.10.15 óta]",
		!"Elszállított utasok",
        //!"Taxiban megtett távolság [2016.10.16 óta]",
		!"Aranytojás",
		!"Reakcióteszt",
		!"Matek",
		!"Teleportteszt",
		!"Lottó  [2014.06.22 óta]"
	};

new const
	g_szTopDialog_2[][] = //Ölések, halálok
	{
	    !"Ölések",
		!"Halálok",
		!"Ölésrekord",
		!"Vérdíj",
		!"Fejlövéssel ölõk [2013.10.15 óta]",
		!"Fejlövéstõl halottak [2013.10.15 óta]"
	};

new const
	g_szTopDialog_3[][] = //Adminos cucc
	{
	    !"Adminok",
	    !"Legtöbb warnt adó admin",
		!"Legtöbb warn levevõ admin",
		!"Legtöbb warnt kapó játékos",
		!"Legtöbb warn levett játékos",
		!"Legtöbb kicket adó admin",
		!"Legtöbbet kickelt játékos",
		!"Legtöbb RCON Login",
		!"Legtöbb RCON Fail Login",
		!"Legtöbb bant adó admin",
		!"Legtöbbet bannolt játékos"
    };

new const
	g_szTopDialog_4[][] = //Egyéb
	{
	    !"VIP játékosok",
		!"Klán bank",
		!"Legtöbbször csatlakozott játékos",
		!"Legtöbbször hibásan bejelenkezett",
		!"Legtöbb holdingobject készítõ",
		!"Legtöbb névváltó",
		!"Legtöbb jelszóváltó",
		!"Legtöbb PM-et küldõ",
		!"Legtöbb PM-et fogadó",
		!"Legtöbb jármû object készítõ",
		!"Legtöbb jármû objectset készítõ",
		!"Legtöbb hoset készítõ",
		!"Legtöbb DM készítõt",
		!"Legtöbb zene feltöltõ",
		!"Legtöbb verseny készítõ",
		!"Legtöbbet használt teleportok [2016.05.22 óta]",
		!"Legtöbbszõr lejátszott zene",
		!"Legtöbb pénzt küldõ",
		!"Legtöbb pénzt fogadó",
		!"Legtöbb hibajelentõ (/bugs)",
	    !"Legtöbb panaszjelentõ (/reports)",
	    !"Legtöbb ötlet beküldõ (/ideas)"
	};

enum
{
	e_TOP_XP = 1,
	e_TOP_SZINT,
	e_TOP_MONEY,
	e_TOP_BANK,
	e_TOP_KILLS,
	e_TOP_DEATHS,
	e_TOP_KILLSTREAK,
	e_TOP_BOUNTY,
	e_TOP_RANGE,
	e_TOP_TIME,
	e_TOP_RACES,
	e_TOP_GOLDPOTS,
	e_TOP_REACTIONS,
	e_TOP_MATHS,
	e_TOP_TELES,
	e_TOP_POSTS,
	e_TOP_STUNTBONUS,
	e_TOP_RABLO,
	e_TOP_FLAGTIME,
	e_TOP_BCARTIME,
	e_TOP_FUVAROK,
	e_TOP_FALLOUT,
	e_TOP_AFK,
	e_TOP_RECORDAFK,
	e_TOP_POSTAS,
	e_TOP_PIZZAS,
	e_TOP_DERBY,
	e_TOP_CTC_AUTO,
	e_TOP_CTC_HAJO,
//	e_TOP_CTC_ALL,
	e_TOP_HEADSHOT_KILL,
	e_TOP_HEADSHOT_DEATH,
	e_TOP_VIP,
	e_TOP_CLAN_BANK,
	e_TOP_RACERECORDS,
	e_TOP_FORUMTIME,
	e_TOP_FORUMPOSTS,
	e_TOP_MOST_WARNADMIN,
	e_TOP_MOST_UNWARNADMIN,
	e_TOP_MOST_WARNPLAYER,
	e_TOP_MOST_UNWARNPLAYER,
	e_TOP_MOST_KICKADMIN,
	e_TOP_MOST_KICKEDPLAYER,
	e_TOP_MOST_CONNECTED,
	e_TOP_MOST_FAILLOGIN,
	e_TOP_MOST_OBJECTMAKER,
	e_TOP_MOST_RCON,
	e_TOP_MOST_FAILRCON,
	e_TOP_MOST_CHANGENAME,
	e_TOP_MOST_CHANGEPASS,
	e_TOP_MOST_PMSENDER,
	e_TOP_MOST_PMRECEIVER,
	e_TOP_ADMIN,
	e_TOP_MOST_BANADMIN,
	e_TOP_MOST_BANNEDPLAYER,
	e_TOP_MOST_VOBJECT,
	e_TOP_MOST_VOBJECTSET,
	e_TOP_MOST_HOSET,
	e_TOP_DM_CREATOR,
	e_TOP_MUSIC_UPLOADER,
	e_TOP_RACE_CREATOR,
	e_TOP_TELEPORT,
	e_TOP_TAXI,
	e_TOP_MUSIC,
	e_TOP_LOTTO,
	e_TOP_GIVECASH,
	e_TOP_ACCEPTCASH,
	e_TOP_BUG,
	e_TOP_REPORT,
	e_TOP_IDEA,
	e_TOP_TAXI_KM,
	e_TOP_VEHICLE_KM,
	e_TOP_ONFOOT_KM,
	
	//
	/*e_TOP_CHAT,
	e_TOP_ADMINCHAT,
	e_TOP_PM,

	e_TOP_GIVECASH,
	e_TOP_KILL,
	e_TOP_DEATH,*/
}

new const
	g_szWeaponDialog[][] =
	{
		!"Kézi Fegyverek\t\t ( {" #XCOLOR_RED "}slot 1 {" #XCOLOR_BLUE2 "})",
		!"Mûfaszok\t\t\t ( {" #XCOLOR_RED "}slot 10 {" #XCOLOR_BLUE3 "})",
		!"Gránátok\t\t\t ( {" #XCOLOR_RED "}slot 8 {" #XCOLOR_BLUE2 "})",
		!"Pisztolyok\t\t\t ( {" #XCOLOR_RED "}slot 2 {" #XCOLOR_BLUE3 "})",
		!"Shotgunok\t\t\t ( {" #XCOLOR_RED "}slot 3 {" #XCOLOR_BLUE2 "})",
		!"Gépfegyverek\t\t\t ( {" #XCOLOR_RED "}slot 4 {" #XCOLOR_BLUE3 "})",
		!"Gépkarabélyok\t\t ( {" #XCOLOR_RED "}slot 5 {" #XCOLOR_BLUE2 "})",
		!"Mesterlövész\t\t\t ( {" #XCOLOR_RED "}slot 6 {" #XCOLOR_BLUE3 "})",
		!"Speciális\t\t\t ( {" #XCOLOR_RED "}slot 7 {" #XCOLOR_BLUE2 "})",
		!"C4 & Távirányító\t\t ( {" #XCOLOR_RED "}slot 8 & 12 {" #XCOLOR_BLUE3 "})",
		!"Egyéb Fegyverek\t\t ( {" #XCOLOR_RED "}slot 9 {" #XCOLOR_BLUE2 "})",
		!"Éjjellátók\t\t\t ( {" #XCOLOR_RED "}slot 11 {" #XCOLOR_BLUE3 "})",
		!"{" #XCOLOR_SAMP "}Tapasztalat áttállítás",
		!"{" #XCOLOR_RED "}Felújítás",
		!"{" #XCOLOR_LIGHTRED "}Fegyverek törlése {" #XCOLOR_WHITE "}( Mentés nélkül )",
		!"{" #XCOLOR_LIGHTRED "}Fegyverek törlése {" #XCOLOR_RED "}( Mentéssel )"
	};

new const
	WeaponMenu_1[][] =
	{
		!"Boxer",
		!"Golfütõ",
		!"Gumibot",
		!"Kés",
		!"Bézbolütõ",
		!"Biliárd dákó",
		!"Kard",
		!"Motorfûrész"
	},
	WeaponMenu_10[][] =
	{
		!"Lila mûfasz",
		!"Kicsi vibrátor",
		!"Nagy vibrátor",
		!"Szürke vibrátor",
		!"Virág",
		!"Görbebot"
	},
	WeaponMenu_2[][] =
	{
		!"Gránát",
		!"Füstgránát",
		!"Molotov Koktél"
	},
	WeaponMenu_3[][] =
	{
		!"Pisztoly 9mm",
		!"Tompíotott 9mm",
		!"Desert Eagle"
	},
	WeaponMenu_4[][] =
	{
		!"Shotgun",
		!"Sawn-Off Shotgun",
		!"Combat Shotgun"
	},
	WeaponMenu_5[][] =
	{
		!"Micro SMG",
		!"TEC 9",
		!"MP5"
	},
	WeaponMenu_6[][] =
	{
		!"AK-47",
		!"M4"
	},
	WeaponMenu_7[][] =
	{
		!"Country Rile",
		!"Sniper Rifle"
	},
	WeaponMenu_8[][] =
	{
		!"Rakétavetõ",
		!"Hõkövetõs rakétavetõ",
		!"Lángszóró",
		!"Minigun"
	},
	WeaponMenu_9[][] =
	{
		!"Spray",
		!"Tûzoltó palack",
		!"Fényképezõgép"
	},
	WeaponMenu_11[][] =
	{
		!"Éjjellátó",
		!"Hõérzékelõ"
	};

stock MakeWeaponDialog(slot, IsSetToPrimary)
{
	dline[0] = EOS;
	new
	    i;
	switch(slot)
	{
		case 1:
		{
			for( ; i != sizeof(WeaponMenu_1); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_1[i]);
			    strcat(dline, "\n");
			}
		}
		case 10:
		{
			for( ; i != sizeof(WeaponMenu_10); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_10[i]);
			    strcat(dline, "\n");
			}
		}
		case 2:
		{
			for( ; i != sizeof(WeaponMenu_2); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_2[i]);
			    strcat(dline, "\n");
			}
		}
		case 3:
		{
			for( ; i != sizeof(WeaponMenu_3); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_3[i]);
			    strcat(dline, "\n");
			}
		}
		case 4:
		{
			for( ; i != sizeof(WeaponMenu_4); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_4[i]);
			    strcat(dline, "\n");
			}
		}
		case 5:
		{
			for( ; i != sizeof(WeaponMenu_5); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_5[i]);
			    strcat(dline, "\n");
			}
		}
		case 6:
		{
			for( ; i != sizeof(WeaponMenu_6); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_6[i]);
			    strcat(dline, "\n");
			}
		}
		case 7:
		{
			for( ; i != sizeof(WeaponMenu_7); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_7[i]);
			    strcat(dline, "\n");
			}
		}
		case 8:
		{
			for( ; i != sizeof(WeaponMenu_8); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_8[i]);
			    strcat(dline, "\n");
			}
		}
		case 9:
		{
			for( ; i != sizeof(WeaponMenu_9); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_9[i]);
			    strcat(dline, "\n");
			}
		}
		case 11:
		{
			for( ; i != sizeof(WeaponMenu_11); i++)
			{
				if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN2 "}");
				else strcat(dline, "{" #XCOLOR_GREEN "}");
				strcat(dline, WeaponMenu_11[i]);
			    strcat(dline, "\n");
			}
		}
	}

	if(IsSetToPrimary)
	{
		strcat(dline, "{" #XCOLOR_WHITE "}Kezdésre állítás\n{" #XCOLOR_RED "}Törlés");
	}
	return 1;
}
/*
enum
{
	mSelection_Butorok = 1,
	mSelection_Falikepek,
	mSelection_Szorakozas,
	mSelection_Falak,
	mSelection_Furdoszoba,
	mSelection_Konyhai
}

new
	butorok[113] =
	{
		2063, 2000, 2007, 2210, 2211, 1491, 1492, 1493, 1502, 1649, 2559, 3278, 2915, 2916, 2913, 2611, 2612, 2614, 16165, 11245, 1736,
		1738, 2147, 2149, 2627, 2628, 2629, 2630, 2631, 2632, 17405, 2167, 2168, 19470, 19471, 19473, 19474, 18635, 18632, 18633, 18634, 18653,
  		18654, 19273, 19159, 18655, 19315, 19128, 19129, 19078, 18749, 19076, 19054, 19055, 19056, 19057, 19058, 2510, 2251, 2253, 2241, 2244, 2247,

  		14867, 2617, 2571, 2357, 2290, 2116, 1753, 1756, 1757, 1760, 1761, 1702, 1703, 1706, 1417, 1742, 1755, 1759, 2200, 2204, 2570,
  		2573, 2574, 2576, 2375, 2459, 2484, 1745, 1794, 1798, 1799, 2091, 2093, 14446, 643, 1663, 1708, 1714, 1721, 1735, 1806, 1811,
  		1797, 1798, 1799, 1802, 1768, 1763, 2502, 2131
	},
 	falikepek[39] =
	{
	    2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274,
 		2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 19172, 19173, 19174, 19175
	},
 	szorakozas[57] =
	{
	    2239, 2196, 14820, 1429, 16780, 1518, 1717, 1747, 1783, 1788, 1809, 1839, 1840, 1841, 2099, 2100, 2101, 2102, 2103, 2104, 2229, 2230, 2231, 2232, 14806, 2009, 19317, 19318, 19319,
        1781, 14722, 1747, 1751, 1752, 2091, 2093, 2297, 2296, 14532, 16377, 14604, 2322, 2596, 2648, 15037, 2318, 1750, 1786, 1749, 1748, 1518, 1791, 1429, 1792, 19786, 19787, 2700
	},
 	falak[36] =
	{
	    19353, 19354, 19355, 19356, 19357, 19358, 19359, 19360, 19361, 19362, 19363, 19364, 19365, 19366, 19367, 19368, 19369, 19370, 19371, 19390,
 		19391, 19392, 19393, 19396, 19399, 19400, 19401,1828, 2818, 2833, 2834, 2835, 2836, 2841, 2842, 2847
	},
 	furdoszoba[18] =
	{
	    1744, 2097, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 14480
	},
 	konyhai[59] =
	{
	    2118, 936, 937, 941, 2014, 2015, 2016, 2018, 2019, 2024, 2128, 2129, 2133, 2134, 2137, 2138, 2139, 2140, 2042, 2043,
		2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 14720, 2433, 2443, 1486, 1487, 1512, 1517, 1520, 16151,
		2013, 2017, 2127, 2130, 2132, 2135, 2136, 2144, 1825, 2120, 1720, 1739, 2079, 2120, 1432, 1594, 1516, 2635, 2799, 2421
	};
*/
enum e_HouseElement
{
	e_ElementName[24 char],
	e_Price,
    e_ElementObjectID
};
/*
new const
	g_HouseElementStruct[][e_HouseElement] =
	{
		{!"Digitális mérleg", 		3000, 		-1},
		{!"Boxzsák", 				5000, 		1985},
		{!"Ventillátor", 			8000, 		16779},
		{!"Asztali ventillátor", 	9000, 		2192},
		{!"Mennyezeti ventillátor", 11000, 		16779},
		{!"Szerszámos láda", 		12000, 		19921},
		{!"Rádió",					16000, 		-1},
		{!"Hajszárító", 			19500, 		-1},
		{!"Vasaló",					24000, 		-1},
		{!"Fotel",					27500, 		2292},
		{!"Kis kanapé",				28000, 		1706},
		{!"Nagy kanapé",			29500, 		1707},
		{!"Szobabicikli", 			30000, 		2630},
		{!"Futópad", 				35000, 		2627},
		{!"Parabola antenna",		33500, 		-1},
		{!"Fényképezõ", 			36500, 		19623},
		{!"Telefon", 				38000, 		11705},
		{!"Mikrosütõ", 				43000, 		2149},
		{!"Kávéfõzõ", 				45500, 		11743},
		{!"Kenyérpirító", 			47000, 		-1},
		{!"Szendvics sütõ", 		49500, 		-1},
		{!"Grillsütõ", 				52000, 		19831},
		{!"Dobfelszerelés", 		54000, 		19609},
		{!"iPad", 			        55500, 		-1},
		{!"Nyomtató", 				58000, 		2201},
		{!"Porszívó", 				62500, 		-1},
		{!"Fagyasztószekrény",		66000, 		-1},
		{!"Hûtõszekrény", 			69000, 		-1},
		{!"Mosógép", 				74500, 		-1},
		{!"Mosogatógép", 			75000, 		-1},
		{!"Hi-Fi", 					80000, 		14806},
		{!"Villanytûzhely", 		84000, 		-1},
		{!"TV", 					87500, 		1518},
		{!"Kicsi LCD TV", 			89500, 		19787},
		{!"Nagy LCD TV", 			92500, 		19786},
		{!"Házimozi", 				93500, 		-1},
		{!"Asztali számítógép", 	94500, 		2165},
		{!"Laptop", 				97000, 		19893},
		{!"Ékszerdoboz", 			100000, 	-1}
	};
*/

new const
	g_HouseElementStruct[][e_HouseElement] =
	{
		{!"Digitális mérleg", 		3000},
		{!"Boxzsák", 				5000, 		1985},
		{!"Ventillátor", 			8000, 		16779},
		{!"Szerszámos láda", 		12000},
		{!"Rádió",					16000},
		{!"Hajszárító", 			19500},
		{!"Vasaló",					24000},
		{!"Fotel",					27500},
		{!"Szobabicikli", 			30000, 		2630},
		{!"Parabola antenna",		33500},
		{!"Fényképezõ", 			36500, 		19623},
		{!"Telefon", 				38000, 		11705},
		{!"Mikrosütõ", 				43000, 		2149},
		{!"Kávéfõzõ", 				45500},
		{!"Kenyérpirító", 			47000},
		{!"Szendvics sütõ", 		49500},
		{!"Grillsütõ", 				52000, 		19831},
		{!"iPad", 			        55500},
		{!"Nyomtató", 				58000},
		{!"Porszívó", 				62500},
		{!"Fagyasztószekrény",		66000},
		{!"Hûtõszekrény", 			69000},
		{!"Mosógép", 				74500},
		{!"Mosogatógép", 			75000},
		{!"Hi-Fi lejátszó", 		80000, 		14806},
		{!"Villanytûzhely", 		84000},
		{!"TV", 					87500, 		19786},
		{!"Házimozi", 				93500},
		{!"Laptop", 				97000, 		2165},
		{!"Ékszerdoboz", 			100000}
	};

enum e_HouseType
{
	e_szHouseName_HU[24],
	e_szHouseName_EN[24],
	e_iPrice
}

new
	g_pRaktar[MAX_PLAYERS][sizeof(g_HouseElementStruct)];

new const
	g_szHouseTypes[][e_HouseType] =
	{
		{"Faház", 			"Tree house",			500000},
		{"Lakás", 			"House",				1000000},
		{"Banda ház", 		"Gang house", 			2000000},
		{"Kis családi ház",	"Small family house",	3000000},
		{"Társasház",		"Condominium",			3000000},
		{"Nagy családi ház","Big family house", 	4500000},
		{"Nyaraló", 		"Summer house",			5000000},
		{"Luxus ház #1",	"Luxus house #1", 		7500000},
		{"Luxus ház #2", 	"Luxus house #2",		10000000}
	};

enum e_HouseRiaszto
{
	e_szName_HU[16],
	e_szName_EN[16],
	e_iPrice
}

new const
	g_HouseRiaszto[][e_HouseRiaszto] =
	{
		{"Nincs", "No", 0},
		{"Gyenge", "Weak", 250000},
		{"Erõs", "Powerful", 450000}
	};

new const
	g_szBiznisTypes[][e_HouseType] =
	{
	  {"Fodrász szalon",  	"Barber Shop",  		30000000},
	  {"Tetováló szalon",  	"Tattoo Parlor",  		41250000},
	  {"Konditerem",   		"GYM",   				52500000},
	  {"Szexbolt",   		"Sex Shop",   			63750000},
	  {"Ruhabolt",   		"Clothing Shop",   		75000000},
	  {"Szennyvíztisztító", "Sewage Plant",    	   	86250000},
	  {"Vágóhíd",    		"Slaughterhouse",    	97500000},
	  {"Gyorsétterem",  	"Fast Food",  			108000000},
	  {"Étterem",			"Restaurant",			120000000},
	  {"Jármû festõ",   	"Pay'N'Spray",   		131250000},
	  {"Tuning garázs",  	"Tuning Garage",  		142500000},
	  {"Benzinkút",   		"Gas Station",   		153750000},
	  {"Fegyverbolt",   	"Ammu-Nation",   		165000000},
	  {"Jármûiskola",   	"Driving School",   	176250000},
	  {"Bár",   			"Bar",   				187500000},
	  {"Sztriptízbár",  	"Strip Club",  			198750000},
	  {"Sorsoló",    		"Lottery",    			210000000},
	  {"Hotel",    			"Hotel",    			221250000},
	  {"Disco",    			"Disco",    			232500000},
	  {"Tûzoltóság",   		"Fire Department",   	243750000},
	  {"Rendõrség",   		"Police Department", 	255000000},
	  {"Kórház",    		"Hospital",    			266250000},
	  {"Reptér",    		"Airport",    			277500000},
	  {"Bank",    			"Bank",    				288750000},
	  {"Casino",    		"Casino",    			300000000}
	};

stock GetHousePriceByType(_houseid)
{
	if(!(0 <= g_HouseType[_houseid] <= 9)) return 0;

	return g_szHouseTypes[g_HouseType[_houseid]][e_iPrice];
}

stock GetHouseTypeName(_houseid)
{
	static
	    szRet[24];
    szRet[0] = '\0';
	if(!(0 <= g_HouseType[_houseid] <= 9)) return szRet;

	strcpy(szRet, g_szHouseTypes[g_HouseType[_houseid]][e_szHouseName_HU], sizeof(szRet));
	return szRet;
}

stock GetBiznisPriceByType(_houseid)
{
//	if(!(0 <= g_szBiznisTypes[_houseid] < 25)) return 0;

	return g_szBiznisTypes[g_BiznisType[_houseid]][e_iPrice];
}

stock GetBiznisTypeName(_houseid)
{
	static
	    szRet[24];
    szRet[0] = '\0';
//	if(!(0 <= g_szBiznisTypes[_houseid] < 25)) return szRet;

	strcpy(szRet, g_szBiznisTypes[g_BiznisType[_houseid]][e_szHouseName_HU], sizeof(szRet));
	return szRet;
}

stock GetBiznisTypeByName(bizname[])
{
	for(new i; i != sizeof(g_szBiznisTypes); i++)
	{
		if(!strcmp(bizname, g_szBiznisTypes[i][e_szHouseName_HU], true))
		    return i;
	}
	return -1;
}

/////// Stats //////

new
	g_pStatsRow[MAX_PLAYERS][4];
new
	Text:TD_StatsBox;

new
	BitArray:gPlayerStatsTDs[MAX_PLAYERS]<MAX_PLAYER_TEXT_DRAWS>;

enum eWeaponTD
{
	eModelllTeFasz,
	Float:fEltolasBazdmeg[4]
};

new const gWeaponArray[][eWeaponTD] =
{
	{331, {0.000000, -20.000000, 0.000000, 0.550000}},
	{333, {0.000000, -20.000000, 0.000000, 3.000000}},
	{334, {0.000000, 20.000000, 0.000000, 1.000000}},
	{335, {0.000000, 90.000000, 0.000000, 1.000000}},
	{336, {0.000000, 30.000000, 0.000000, 2.000000}},
	{337, {0.000000, 30.000000, 0.000000, 2.000000}},
	{338, {0.000000, 30.000000, 0.000000, 0.800000}},
	{339, {0.000000, 30.000000, 0.000000, 2.000000}},

	{341, {0.000000, 30.000000, 0.000000, 2.000000}},
	{321, {0.000000, 30.000000, 0.000000, 1.500000}},
	{322, {0.000000, 30.000000, 0.000000, 0.60000}},
	{323, {0.000000, 30.000000, 0.000000, 1.000000}},
	{324, {0.000000, 30.000000, 0.000000, 0.699998}},
	{325, {0.000000, 30.000000, 0.000000, 1.399999}},
	{326, {0.000000, 30.000000, 0.000000, 1.000000}},

	{342, {15.000000, 10.000000, 20.000000, 0.400000}},
	{343, {15.000000, 10.000000, 20.000000, 0.500000}},
	{344, {15.000000, 10.000000, 20.000000, 0.699998}},
	{346, {0.000000, -20.000000, 0.000000, 0.699998}},
	{347, {0.000000, -20.000000, 0.000000, 1.000000}},
	{348, {0.000000, -20.000000, 0.000000, 1.000000}},
	{349, {0.000000, -20.000000, 0.000000, 1.600000}},
	{350, {0.000000, -20.000000, 0.000000, 1.000000}},

	{351, {0.000000, -20.000000, 0.000000, 1.500000}},
	{352, {0.000000, -20.000000, 0.000000, 0.699998}},
	{372, {0.000000, -20.000000, 0.000000, 1.000000}},
	{353, {0.000000, -20.000000, 0.000000, 1.0000000}},
	{355, {0.000000, -20.000000, 0.000000, 1.600000}},
	{356, {0.000000, -20.000000, 0.000000, 1.600000}},
	{357, {0.000000, -20.000000, 0.000000, 1.600000}},

	{358, {0.000000, -20.000000, 0.000000, 1.000000}},
	{359, {0.000000, -20.000000, 0.000000, 2.000000}},
	{360, {0.000000, -20.000000, 0.000000, 1.399999}},
	{361, {0.000000, -20.000000, 0.000000, 3.000000}},
	{362, {0.000000, -20.000000, 0.000000, 3.000000}},
	{363, {-30.000000, 30.000000, 0.000000, 1.000000}},
	{365, {0.000000, -20.000000, 0.000000, 0.500000}},
	{366, {-20.000000, 0.000000, 0.000000, 2.000000}},
	{367, {-50.000000, 50.000000, -10.000000, 0.800000}},
	{368, {0.000000, -90.000000, 35.000000, 0.400000}},
	{369, {0.000000, -90.000000, 35.000000, 0.400000}}
};

stock FindID(weaponid)
{
	for(new i = 0; i != sizeof(gWeaponArray); i++)
	{
		if(gWeaponArray[i][eModelllTeFasz] == weaponid)
		    return i;
	}
	return -1;
}

////////////////////////////////////////////////////////////////////
/* Fegyverlist MySQL-bõl választásra */
////////////////////////////////////////////////////////////////////
enum e_ReasonStruct
{
	e_WeaponName[20 char],
	e_WeaponID
};

new const
	WeaponList_MySQL[][e_ReasonStruct] =
	{
		{!"Fist", 				0},
		{!"Brass Knuckles", 	1},
		{!"Golf Club", 			2},
		{!"Nite Stick", 		3},
		{!"Knife", 				4},
		{!"Baseball Bat", 		5},
		{!"Shovel", 			6},
		{!"Pool Cue", 			7},
		{!"Katana", 			8},
		{!"Chainsaw", 			9},
		{!"Lila mûfasz", 		10},
		{!"Fehér vibrátor", 	11},
		{!"Fehér mûfasz", 		12},
		{!"Szürke vibrátor",	13},
		{!"Gyom", 				14},
		{!"Görbebot", 			15},
		{!"Grenade", 			16},
		{!"Teargas", 			17},
		{!"Molotov", 			18},
		{!"Colt 45", 			22},
		{!"Silenced Pistol", 	23},
		{!"Desert Eagle", 		24},
		{!"Shotgun", 			25},
		{!"Sawn-off Shotgun", 	26},
		{!"Combat Shotgun", 	27},
		{!"UZI", 				28},
		{!"MP5", 				29},
		{!"AK47", 				30},
		{!"M4", 				31},
		{!"TEC 9", 				32},
		{!"Country Rifle", 		33},
		{!"Sniper Rifle", 		34},
		{!"Rocket Launcher", 	35},
		{!"Heat Seaker", 		36},
		{!"Flamethrower", 		37},
		{!"Minigun", 			38},
//		{!"C4", 				39},
//		{!"C4 Távirányító", 	40},
		{!"Spray Can", 			41},
		{!"Fire Extinguisher", 	42},
//		{!"Camera",				43},
//		{!"Parachute", 			46},
//		{!"Fake Pistol", 		47},
		{!"Jármû", 				49},
		{!"Helikopter", 		50},
		{!"Robbanás", 			51},
		{!"Drowned", 			53},
		{!"Splat", 				54}
	};

new const
	RandAnims[][] =
	{
		!"DAN_LOOP_A",
		!"DNCE_M_A",
		!"DNCE_M_B",
		!"DNCE_M_C",
		!"DNCE_M_D",
		!"DNCE_M_E"
	};

new const
	g_szWeatherNames[][] =
	{
		"0 = EXTRASUNNY_LA",
		"1 = SUNNY_LA",
		"2 = EXTRASUNNY_SMOG_LA",
		"3 = SUNNY_SMOG_LA",
		"4 = CLOUDY_LA",
		"5 = SUNNY_SF",
		"6 = EXTRASUNNY_SF",
		"7 = CLOUDY_SF",
		"8 = RAINY_SF",
		"9 = FOGGY_SF",
		"10 = SUNNY_VEGAS",
		"11 = EXTRASUNNY_VEGAS (melegedés effekt)",
		"12 = CLOUDY_VEGAS",
		"13 = EXTRASUNNY_COUNTRYSIDE",
		"14 = SUNNY_COUNTRYSIDE",
		"15 = CLOUDY_COUNTRYSIDE",
		"16 = RAINY_COUNTRYSIDE",
		"17 = EXTRASUNNY_DESERT",
		"18 = SUNNY_DESERT",
		"19 = SANDSTORM_DESERT",
		"20 = UNDERWATER (zöld, ködös)"
	};

// Lópatkó pos
new const
	Float:HorseShoes[][3] =
	{
		{1224.0000,2617.0000,11.0000},
		{2323.0000,1284.0000,97.0000},
		{2035.0000,2305.0000,18.0000},
		{2491.0000,2263.0000,15.0000},
		{1433.0000,2796.0000,20.0000},
		{2071.0000,712.0000,11.0000},
		{2239.0000,1839.0000,18.0000},
		{2583.0000,2387.0000,16.0000},
		{2864.0000,857.0000,13.0000},
		{2612.0000,2200.0000,-1.0000},
		{2274.0000,1507.0000,24.0000},
		{2184.0000,2529.0000,11.0000},
		{1863.0000,2314.0000,15.0000},
		{2054.0000,2434.0000,166.0000},
		{1603.0000,1435.0000,11.0000},
		{1362.9200,1015.2399,11.0000},
		{2058.6999,2159.1000,16.0000},
		{2003.0000,1672.0000,12.0000},
		{2238.0000,1135.0000,49.0000},
		{1934.0600,988.7899,22.0000},
		{1768.0000,2847.0000,9.0000},
		{1084.0000,1076.0000,11.0000},
		{2879.0000,2522.0000,11.0000},
		{2371.0000,2009.0000,15.0000},
		{1521.0000,1690.0000,10.6000},
		{2417.0000,1281.0000,21.0000},
		{1376.0000,2304.0000,15.0000},
		{1393.0000,1832.0000,12.3400},
		{984.0000,2563.0000,12.0000},
		{1767.0000,601.0000,13.0000},
		{2108.0000,1003.0000,46.0000},
		{2705.9799,1862.5200,24.4099},
		{2493.0000,922.0000,16.0000},
		{1881.0000,2846.0000,11.0000},
		{2020.0000,2352.0000,11.0000},
		{1680.3000,2226.8601,16.1100},
		{1462.0000,936.0000,10.0000},
		{2125.5000,789.2299,11.4499},
		{2588.0000,1902.0000,15.0000},
		{919.0000,2070.0000,11.0000},
		{2173.0000,2465.0000,11.0000},
		{2031.2500,2207.3300,11.0000},
		{2509.0000,1144.0000,19.0000},
		{2215.0000,1968.0000,11.0000},
		{2626.0000,2841.0000,11.0000},
		{2440.0800,2161.0700,20.0000},
		{1582.0000,2401.0000,19.0000},
		{2077.0000,1912.0000,14.0000},
		{970.0000,1787.0000,11.0000},
		{1526.2199,751.0000,29.0400}
	};

new const
	Float:PhotoPos[][3] =
	{
		{-2511.28, -672.98, 195.75},
		{-2723.62, -314.72, 55.79},
		{-1737.70, -579.54, 26.19},
		{-1486.07, 920.03, 41.36},
		{-1269.81, 963.63, 130.36},
		{-1650.01, 422.00, 21.17},
		{-1851.71, -96.73, 24.37},
		{-2732.00, -244.00, 19.00},
		{-2802.75, 375.47, 36.59},
		{-2773.04, 783.45, 67.66},
		{-2680.07, 1590.80, 143.52},
		{-2476.75, 1543.43, 49.25},
		{-1879.04, 1456.52, 9.34},
		{-1561.55, 655.19, 56.52},
		{-1325.15, 494.19, 26.82},
		{-1941.41, 137.72, 37.83},
		{-2153.22, 462.25, 103.26},
		{-2243.95, 577.76, 49.00},
		{-2051.00, 456.00, 167.00},
		{-1951.00, 659.00, 81.00},
		{-2064.00, 926.00, 63.00},
		{-2357.33, 1017.01, 59.75},
		{-2072.00, 1066.00, 74.00},
		{-1744.00, 972.46, 156.88},
		{-1941.00, 883.00, 68.00},
		{-1839.51, 1086.88, 101.29},
		{-1704.80, 1338.00, 14.00},
		{-2346.62, 536.84, 86.01},
		{-2443.00, 755.00, 49.00},
		{-2765.00, 375.00, 15.00},
		{-2880.31, -935.83, 40.81},
		{-2083.00, -808.00, 69.00},
		{-1954.00, -760.00, 53.00},
		{-964.53, -331.58, 47.15},
		{-1689.00, 51.00, 38.00},
		{-2080.00, 256.04, 107.00},
		{-2413.00, 331.00, 37.00},
		{-2244.41, 731.32, 61.88},
		{-2462.00, 369.00, 59.00},
		{-1124.43, -153.14, 18.50},
		{-1275.78, 53.68, 89.06},
		{-2430.00, 38.00, 51.00},
		{-2591.00, 162.00, 15.00},
		{-2591.00, -16.00, 17.00},
		{-2648.00, -5.00, 31.00},
		{-2593.00, 56.00, 16.00},
		{-1619.31, 1341.39, 11.30},
		{-2307.00, 207.00, 42.00},
		{-2343.00, -79.00, 38.00},
		{-1906.66, 518.58, 61.70}
	};

// Osztrigák
new const
	Float:Oysters[][3] =
	{
		{979.0000,-2210.0000,-3.0000},
		{2750.0000,-2584.0000,-5.0000},
		{1279.0000,-806.0000,85.0000},
		{2945.1298,-2051.9299,-3.0000},
		{67.0000,-1018.0000,-5.0000},
		{2327.0000,-2662.0000,-5.0000},
		{2621.0000,-2506.0000,-5.0000},
		{1249.0000,-2687.0000,-1.0000},
		{725.0000,-1849.0000,-5.0000},
		{723.0000,-1586.0000,-3.0000},
		{155.0000,-1975.0000,-8.0000},
		{1968.0000,-1203.0000,17.0000},
		{-2657.0000,1564.0000,-6.0000},
		{-1252.0000,501.0000,-8.0000},
		{-1625.0000,4.0000,-10.0000},
		{-1484.0000,1489.0000,-10.0000},
		{-2505.4060,1543.7239,-22.0000},
		{-2727.0000,-469.0000,-5.0000},
		{-1266.0000,966.0000,-10.0000},
		{-1013.0000,478.0000,-7.0000},
		{-1364.0000,390.0000,-5.0000},
		{2578.0000,2382.0000,16.0000},
		{2090.0000,1898.0000,8.0000},
		{2130.0000,1152.0000,7.0000},
		{2013.0000,1670.0000,7.0000},
		{2531.0000,1569.0000,9.0000},
		{2998.0000,2998.0000,-10.0000},
		{-832.0000,925.0000,-2.0000},
		{486.0000,-253.0000,-4.0000},
		{-90.0000,-910.0000,-5.0000},
		{26.4300,-1320.9399,-10.0399},
		{-207.0000,-1682.0000,-8.0000},
		{-1672.0000,-1641.0000,-2.0000},
		{-1175.0000,-2639.0000,-2.5000},
		{-1097.0000,-2858.0000,-8.0000},
		{-2889.0000,-1042.0000,-9.0000},
		{-659.0000,874.0000,-2.0000},
		{-955.0000,2628.0000,35.0000},
		{-1066.0000,2197.0000,32.0000},
		{40.0000,-531.0000,-8.0000},
		{-765.0000,247.0000,-8.0000},
		{2098.0000,-108.0000,-2.0000},
		{2767.0000,470.0000,-8.0000},
		{-783.0000,2116.0000,35.0000},
		{-821.0000,1374.0000,-8.0000},
		{-2110.5000,2329.7199,-7.5000},
		{-1538.0000,1708.0000,-3.2699},
		{-2685.0000,2153.0000,-5.0000},
		{796.0000,2939.0000,-5.0000},
		{2179.0000,235.0000,-5.0000}
	};

enum e_JUMPS_STRUCT
{
	Float:e_Jump[3],
	Float:e_JumpRadius[3],
	Float:e_Land[3],
	Float:e_LandRadius[3],
	Float:e_Camera[3],
}

new
	g_JumpsAreaStartID = -1;

new  const
	Float:g_Jumps[70][15] =
	{
		{1939.1359, -1968.0520, 17.6648, 2.5000, 2.7279, 3.1700, 1989.9580, -1971.9510, 28.7248, 11.1339, 5.3979, 7.2300, 1960.5450, -1963.5710, 25.3229},
		{2209.2749, -1843.6860, 19.0963, 2.5000, 4.2800, 3.8299, 2215.1240, -1889.3590, 17.7863, 15.3599, 7.0100, 11.0500, 2203.3400, -1861.5240, 21.8367},
		{1177.2149, -1696.7609, 21.3680, 2.2200, 2.5000, 5.0999, 1177.9720, -1626.7189, 32.8078, 18.2000, 7.2300, 12.3599, 1182.9200, -1659.4310, 29.1114},
		{2278.2900, -1357.8570, 31.3255, 2.5000, 2.5000, 3.9600, 2275.2990, -1310.7559, 30.9554, 10.6899, 2.5000, 9.3599, 2271.6809, -1331.2819, 32.6621},
		{2335.3510, -2163.9470, 18.5146, 3.5199, 2.5000, 3.4400, 2344.4189, -2178.7028, 24.2546, 15.6400, 3.0499, 11.9600, 2336.8898, -2190.3210, 22.4291},
		{2825.9331, -1582.6600, 18.1259, 2.5000, 4.2199, 4.9200, 2787.5039, -1569.3179, 27.7759, 2.7039, 19.1599, 14.1499, 2805.1210, -1579.8919, 20.7985},
		{2460.1770, -2567.9108, 18.8162, 2.5000, 2.5000, 3.6500, 2464.2060, -2597.4550, 25.8861, 8.8900, 0.8199, 6.2600, 2454.8779, -2593.7871, 23.9706},
		{1832.4530, -2386.8049, 17.9246, 2.5000, 2.5000, 3.0099, 1833.6120, -2372.3850, 17.9246, 6.5700, 0.5000, 6.6500, 1840.2879, -2367.0949, 19.4731},
		{1839.7449, -2514.4770, 16.1769, 2.5000, 2.3399, 2.7699, 1921.6789, -2517.8959, 20.6068, 2.5120, 6.4200, 8.6998, 1879.7519, -2529.8940, 22.7840},
		{2634.3969, -2107.9838, 17.0886, 4.1719, 2.5000, 5.0599, 2595.6459, -2109.0549, 25.7387, 9.5920, 4.1779, 6.0999, 2608.6999, -2117.1740, 21.6271},
		{2352.3000, -1259.0679, 28.9962, 2.5000, 2.5000, 2.7599, 2298.2041, -1257.6770, 28.7061, 2.6199, 20.0400, 9.9600, 2312.8378, -1265.6140, 37.7793},
		{1013.1630, -1270.3620, 24.4456, 2.0000, 2.0000, 4.0500, 1045.3590, -1273.4749, 32.9636, 2.0000, 14.3039, 13.1400, 1037.3559, -1264.5019, 25.3721},
		{-973.3569, -223.2306, 53.3717, 5.3499, 29.1298, 15.9799, -1116.0279, -211.0102, 30.6016, 49.9398, 32.2598, 27.0398, -1038.6669, -187.1253, 54.0000},
		{-2637.0690, 780.3948, 50.0166, 6.7600, 2.5199, 9.2899, -2639.5769, 733.2753, 44.1565, 9.9099, 2.5199, 9.2899, -2633.3588, 757.9171, 52.0808},
		{-2520.1989, 1169.2030, 59.5525, 6.5399, 3.0899, 5.9699, -2520.1989, 1202.1199, 53.4025, 33.5399, 6.2100, 17.6599, -2513.7780, 1193.9250, 57.4114},
		{-1794.9820, 1211.6120, 35.6794, 3.0199, 2.5799, 4.7500, -1795.8020, 1258.1970, 32.5393, 19.5100, 5.1300, 19.6900, -1797.4899, 1238.3950, 37.9678},
		{-2659.5510, 1533.6700, 53.2004, 2.5000, 2.6199, 4.7300, -2659.5510, 1551.6450, 45.5003, 7.2600, 11.7899, 18.5400, -2658.4260, 1531.6309, 60.6475},
		{-1690.6619, 1110.3919, 57.2775, 2.2999, 2.9800, 5.0799, -1662.5119, 1110.3919, 57.2775, 2.2999, 18.1200, 12.2600, -1649.6760, 1114.1400, 50.8558},
		{-2145.4609, -112.0259, 44.3451, 7.2399, 3.2999, 5.4899, -2146.8200, -89.4658, 54.3751, 4.3600, 3.2999, 14.2799, -2141.0510, -89.1471, 45.6461},
		{-267.7738, 2662.0358, 68.7405, 3.5299, 4.0199, 6.0000, -237.1134, 2661.9360, 79.7505, 7.2800, 12.0600, 8.1400, -253.1990, 2654.0161, 72.7988},
		{-249.6903, 2590.8049, 66.1194, 3.6800, 2.9600, 3.9600, -249.6903, 2575.3249, 66.1194, 12.6599, 5.2100, 9.6800, -256.2141, 2555.2070, 64.5245},
		{-871.5031, 2308.7900, 164.5738, 3.3900, 2.8699, 4.8600, -981.0789, 2300.9130, 111.7537, 18.7700, 40.0200, 69.5897, -905.3314, 2315.0639, 163.7205},
		{2073.7128, 2366.6530, 50.8534, 5.5399, 3.4500, 2.1800, 2050.7299, 2313.7089, 31.8132, 29.6900, 11.1899, 26.0900, 2077.4860, 2318.8720, 26.9286},
		{2170.9470, 2402.6088, 62.2905, 2.7799, 3.5899, 3.6199, 2183.6699, 2402.6088, 62.2905, 4.9200, 9.1999, 9.8000, 2232.1101, 2387.5869, 50.9114},
		{2418.0559, 1353.2340, 12.3641, 2.2000, 5.0139, 3.9800, 2481.9230, 1346.3540, 25.6639, 5.0100, 19.9839, 11.6300, 2462.3129, 1362.7020, 19.7672},
		{2407.3081, 1364.3790, 14.5733, 5.1599, 2.7200, 6.0000, 2399.1201, 1386.5240, 25.4934, 18.5699, 4.6100, 11.6199, 2412.7719, 1392.4310, 22.3043},
		{2784.7629, 2208.7199, 15.1934, 3.0499, 1.7599, 4.3299, 2738.9838, 2208.7199, 21.8433, 3.2400, 24.2299, 16.1499, 2758.6560, 2201.6650, 18.3638},
		{1482.3830, 2037.0040, 17.0576, 2.0899, 2.6900, 5.5799, 1482.8750, 2077.9780, 23.8775, 3.2839, 4.0900, 7.0700, 1489.1250, 2065.0239, 20.6513},
		{1976.3969, 2593.6860, 17.2126, 3.6700, 2.0000, 5.4400, 2041.1910, 2593.6860, 30.4424, 5.0500, 32.7999, 20.5000, 2007.6760, 2596.3139, 28.1338},
		{1636.2640, 2399.7119, 15.8902, 2.5000, 2.5000, 5.0799, 1636.2640, 2449.0710, 15.8902, 21.3299, 2.0000, 13.9499, 1642.1700, 2440.2900, 18.5118},
		{2119.2299, 2385.2128, 33.7094, 2.0999, 3.3599, 2.5999, 2151.8911, 2385.6010, 30.8957, 3.5099, 13.4200, 9.0399, 2128.1020, 2392.0480, 32.2356},
		{-2082.5290, -2498.9318, 33.9682, 2.3399, 2.4000, 3.5499, -2110.0310, -2479.7089, 40.8881, 4.4200, 4.0799, 5.9400, -2101.4179, -2496.4680, 37.1703},
		{2112.4079, 97.9000, 39.9930, 5.6399, 10.2799, 8.0500, 2152.1169, 91.3300, 39.9930, 14.9499, 26.9500, 16.2199, 2149.9331, 76.6566, 44.9509},
		{-2100.4130, -1743.5949, 199.7312, 2.9400, 4.2699, 4.9600, -2082.4909, -1718.9229, 199.7312, 10.8000, 9.3900, 17.6200, -2096.1669, -1714.5720, 201.0245},
		{-2287.6708, -2800.7790, 22.0541, 5.8099, 13.6599, 5.5700, -2255.1330, -2800.7790, 22.0541, 12.5600, 28.6800, 14.6899, -2253.3190, -2814.6450, 22.8246},
		{110.8901, 2428.0490, 23.7936, 3.5799, 3.1500, 4.1999, 132.6399, 2445.7810, 32.7336, 4.3800, 16.6200, 15.3500, 119.7758, 2449.6398, 27.7166},
		{-894.4962, 2693.1989, 44.7303, 3.5799, 2.6300, 2.4400, -941.4025, 2662.9389, 55.7302, 29.1399, 16.0200, 19.7399, -931.5991, 2647.9951, 51.4500},
		{89.9935, -243.2046, 7.5581, 3.9600, 4.4600, 4.4800, 101.5435, -255.4344, 7.5581, 7.3899, 11.3100, 14.9899, 87.0604, -266.0403, 9.8152},
		{160.7991, -160.2478, 6.1452, 2.1199, 1.4520, 2.2300, 171.8146, -162.4049, 12.3210, 2.0000, 7.1999, 7.1799, 183.2545, -151.3139, 13.5960},
		{-72.3000, 17.7000, 8.4132, 2.8099, 2.4000, 4.4800, -65.1154, 35.7187, 16.6431, 7.7100, 2.0000, 7.2699, -70.4781, 55.8288, 15.0867},
		{-39.7989, 53.3007, 6.9222, 3.1500, 2.7599, 2.3499, -36.4289, 76.6106, 6.9222, 12.5100, 4.4800, 9.6700, -42.5507, 77.3671, 7.8899},
		{638.7504, -520.0714, 18.8519, 2.0000, 2.1500, 2.3399, 639.8602, -545.0902, 22.7618, 10.9700, 3.0099, 8.2600, 629.1660, -542.9603, 24.9594},
		{1749.7230, 779.6027, 13.4757, 1.6799, 2.6159, 2.1640, 1749.7230, 825.0913, 14.2657, 10.7180, 2.6159, 5.8239, 1744.0460, 799.4149, 12.6554},
		{110.2445, -257.9928, 6.2739, 3.3599, 3.3199, 2.9300, 92.4845, -245.6927, 11.0438, 8.4300, 6.9200, 3.9900, 92.9552, -254.6195, 10.1539},
		{2125.6420, 95.2542, 37.3959, 3.8299, 4.0900, 2.5699, 2098.5100, 99.5840, 35.8558, 3.8299, 8.4600, 5.7199, 2116.3930, 88.0306, 40.2112},
		{-344.6466, -9.8811, 44.9608, 14.2600, 3.4500, 3.7999, -336.1166, 28.7688, 37.7608, 16.0900, 4.5500, 6.2899, -358.2565, 15.6352, 41.7240},
		{-2589.1799, 1164.3699, 59.8255, 2.8399, 2.7699, 2.2300, -2567.1250, 1231.1829, 47.0362, 18.8999, 9.0399, 6.0500, -2576.0600, 1209.2249, 53.5489},
		{-2292.0439, 1097.7099, 84.7347, 2.0820, 2.0739, 2.0199, -2350.5910, 1101.9279, 64.1846, 4.5219, 14.2040, 9.0299, -2323.7309, 1106.6650, 77.1770},
		{-2408.2849, 723.2977, 38.6834, 2.6199, 2.5000, 1.6900, -2461.5645, 723.7534, 45.1613, 22.4099, 2.5799, 4.0599, -2407.9809, 716.5808, 38.4333},
		{-2116.3559, 925.6832, 87.8190, 2.6800, 1.9900, 2.4800, -2069.5649, 925.4329, 76.6890, 2.6800, 15.2600, 14.4600, -2085.6289, 935.5673, 85.4676},
		{-1903.1920, 223.3468, 37.7965, 1.7500, 1.8400, 1.7000, -1874.3819, 223.3466, 42.4063, 1.7500, 8.1300, 4.6700, -1897.0389, 219.1329, 39.9109},
		{-1687.3229, -162.2010, 17.8603, 2.6800, 3.1900, 2.2000, -1722.5369, -126.3909, 14.9903, 9.0900, 7.1300, 13.0699, -1716.8780, -142.6181, 14.6113},
		{-1729.9239, -364.5275, 18.2245, 2.2679, 2.5099, 2.1480, -1777.4870, -364.2775, 17.9445, 2.2679, 15.3299, 7.0679, -1745.8399, -355.4089, 14.2196},
		{-1972.0989, -543.0899, 38.9861, 1.9600, 2.0099, 1.7699, -1912.3179, -543.0899, 45.3461, 7.5799, 14.7799, 8.6899, -1942.9150, -539.1157, 40.2453},
		{2770.2141, -1177.4770, 70.7527, 2.3440, 1.9900, 2.1719, 2814.4680, -1182.9959, 55.7938, 5.9400, 17.3799, 31.5200, 2766.0310, -1184.6920, 74.9192},
		{2248.8378, -2463.2580, 15.1049, 5.1799, 2.2599, 2.5899, 2247.4680, -2432.4270, 21.8068, 12.4399, 2.2599, 9.3199, 2240.7570, -2446.2009, 16.8108},
		{2248.8320, -2627.6230, 15.1806, 4.8619, 2.1440, 2.5559, 2248.8320, -2655.4980, 21.2584, 8.6800, 2.1440, 8.4980, 2237.6950, -2650.7680, 16.3791},
		{2326.1220, -1508.7509, 27.0065, 2.2420, 1.7280, 2.0799, 2286.8129, -1508.7320, 30.3747, 3.8599, 9.3800, 8.9899, 2299.4040, -1514.5959, 29.8682},
		{1623.5739, -1110.9560, 61.8177, 1.6560, 2.0139, 1.8359, 1623.5739, -1079.2650, 61.8177, 17.2460, 2.0139, 22.1459, 1615.6330, -1093.8000, 64.8723},
		{1679.6459, -962.2208, 65.6736, 1.6940, 2.4900, 1.9400, 1679.6459, -988.7401, 65.6736, 13.1239, 2.4900, 16.7399, 1683.8809, -977.1464, 65.7484},
		{1667.1669, -992.8579, 32.7591, 6.3200, 3.7679, 2.4800, 1675.8050, -1008.2969, 32.7591, 18.7479, 2.4379, 9.7899, 1689.1560, -1013.6300, 35.6715},
		{347.0000, -1662.2989, 35.8218, 3.1199, 2.6500, 2.6099, 351.6596, -1700.2640, 35.8218, 19.9099, 4.1300, 29.7600, 337.9746, -1676.9930, 36.7335},
		{743.1525, -1132.8189, 25.7991, 1.8339, 3.6059, 2.3499, 710.0014, -1132.9890, 25.7991, 1.8339, 11.0959, 10.0000, 717.1129, -1136.5489, 25.5160},
		{1395.5620, -1460.5660, 12.3906, 1.6720, 1.9700, 1.7500, 1402.9599, -1447.4659, 17.7266, 10.0620, 1.9700, 5.1500, 1395.0229, -1450.8360, 17.1620},
		{1586.4890, 312.8876, 23.9965, 2.1500, 6.3800, 1.9900, 1540.2080, 325.3572, 28.9664, 2.1500, 32.8899, 11.3699, 1562.9119, 331.3251, 23.6495},
		{2058.1000, -2677.5170, 15.4946, 3.0999, 2.4800, 2.5999, 2009.2609, -2677.5170, 20.8945, 1.9299, 16.5499, 11.2600, 2036.5660, -2685.2810, 13.2053},
		{586.0101, -1773.7690, 15.2312, 2.0000, 2.2699, 1.7799, 627.7188, -1781.1190, 22.6912, 2.0000, 7.0599, 9.9399, 598.5319, -1778.4809, 17.0529},
		{2172.0778, 2430.5070, 61.7470, 2.1199, 3.2999, 2.3499, 2191.5920, 2436.3039, 53.0569, 2.5000, 12.5699, 25.2199, 2227.2338, 2436.8850, 37.7879},
		{2176.1330, 2268.1960, 13.4682, 2.2860, 1.9340, 1.9379, 2137.2719, 2268.2460, 16.7182, 2.2860, 10.5539, 6.4580, 2148.6010, 2264.8920, 13.6633},
		{-2213.7729, -311.0786, 38.5339, 1.1499, 3.0399, 2.5899, -2213.7729, -327.8281, 44.6738, 10.3739, 3.0399, 5.9299, -2215.9770, -325.7728, 42.5119}
	};

enum e_TAGS_STRUCT
{
	e_tModelID,
	Float:e_tPos[6]
}
new const
	g_Tags[][e_TAGS_STRUCT] =
	{
		{1524, {2162.7812, -1786.0703, 14.1875,	0.0000, 0.0000, 91.0001}}, //	tag_front -		1524
		{1524, {2034.3984, -1801.6718, 14.5468,	0.0000, 0.0000, 91.0001}}, //	tag_front -		1524
		{1524, {1910.1640, -1779.6640, 18.7500,	0.0000, 0.0000, -88.9998}}, //	tag_front -		1524
		{1524, {1837.1953, -1814.1875, 4.3359,	0.0000, 0.0000, -103.9997}}, //	tag_front -		1524
		{1524, {1837.6640, -1640.3828, 13.7578,	0.0000, 0.0000, 1.0002}}, //	tag_front -		1524
		{1524, {1959.3984, -1577.7578, 13.7578,	0.0000, 0.0000, -44.9997}}, //	tag_front -		1524
		{1524, {2074.1796, -1579.1484, 14.0312,	0.0000, 0.0000, 0.0002}}, //	tag_front -		1524
		{1527, {2182.2343, -1467.8984, 25.5546,	0.0000, 0.0000, -89.4998}}, //	tag_rollin -	1527
		{1527, {2132.2343, -1258.0937, 24.0546,	0.0000, 0.0000, 90.5001}}, //	tag_rollin -	1527
		{1527, {2233.9531, -1367.6171, 24.5312,	0.0000, 0.0000, -179.4998}}, //	tag_rollin -	1527
		{1527, {2224.7656, -1193.0625, 25.8359,	0.0000, 0.0000, 90.1911}}, //	tag_rollin -	1527
		{1527, {2119.2031, -1196.6171, 24.6328,	0.0000, 0.0000, -89.4998}}, //	tag_rollin -	1527
		{1525, {1974.0859, -1351.1640, 24.5625,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1525, {2093.7578, -1413.4453, 24.1171,	0.0000, 0.0000, 90.5001}}, //	tag_kilo -		1525
		{1525, {1969.5937, -1289.6953, 24.5625,	0.0000, 0.0000, -0.4999}}, //	tag_kilo -		1525
		{1525, {1966.9453, -1174.7265, 20.0390,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1525, {1911.8671, -1064.3984, 25.1875,	0.0000, 0.0000, 179.5000}}, //	tag_kilo -		1525
		{1530, {2281.4609, -1118.9609, 27.0078,	0.0000, 0.0000, -179.8775}}, //	tag_vagos -		1530
		{1530, {2239.7812, -999.7500, 59.7578,	0.0000, 0.0000, -127.4998}}, //	tag_vagos -		1530
		{1530, {2122.6875, -1060.8984, 25.3906,	0.0000, 0.0000, -32.9998}}, //	tag_vagos -		1530
		{1530, {2062.7187, -996.4609, 48.2656,	0.0000, 0.0000, -15.4998}}, //	tag_vagos -		1530
		{1530, {2076.7265, -1071.1328, 27.6093,	0.0000, 0.0000, -36.9999}}, //	tag_vagos -		1530
		{1490, {2046.4062, -1635.8437, 13.5859,	0.0000, 0.0000, -0.4999}}, //	tag_01 -		1490
		{1490, {2066.4296, -1652.4765, 14.2812,	0.0000, 0.0000, 179.5000}}, //	tag_01 -		1490
		{1490, {2102.1953, -1648.7578, 13.5859,	0.0000, 0.0000, 0.3090}}, //	tag_01 -		1490
		{1530, {2841.3671, -1312.9609, 18.8203,	0.0000, 0.0000, 101.5003}}, //	tag_vagos -		1530
		{1530, {2820.3437, -1190.9765, 25.6718,	0.0000, 0.0000, -90.4995}}, //	tag_vagos -		1530
		{1530, {2766.0859, -1197.1406, 69.0703,	0.0000, 0.0000, 179.5004}}, //	tag_vagos -		1530
		{1530, {2756.0078, -1388.1250, 39.4609,	0.0000, 0.0000, -0.4995}}, //	tag_vagos -		1530
		{1530, {2821.2343, -1465.0937, 16.5390,	0.0000, 0.0000, -0.4995}}, //	tag_vagos -		1530
		{1530, {2767.7812, -1621.1875, 11.2343,	0.0000, 0.0000, 179.5004}}, //	tag_vagos -		1530
		{1530, {2767.7578, -1819.9453, 12.2265,	0.0000, 0.0000, 113.0003}}, //	tag_vagos -		1530
		{1530, {2667.8906, -1469.1328, 31.6796,	0.0000, 0.0000, 179.5004}}, //	tag_vagos -		1530
		{1530, {2612.9296, -1390.7734, 35.4296,	0.0000, 0.0000, 89.5004}}, //	tag_vagos -		1530
		{1530, {2536.2187, -1352.7656, 31.0859,	0.0000, 0.0000, 179.5005}}, //	tag_vagos -		1530
		{1530, {2580.9453, -1274.0937, 46.5937,	0.0000, 0.0000, -0.4994}}, //	tag_vagos -		1530
		{1530, {2603.1562, -1197.8125, 60.9921,	0.0000, 0.0000, -93.4995}}, //	tag_vagos -		1530
		{1524, {2542.9531, -1363.2421, 31.7656,	0.0000, 0.0000, -0.4998}}, //	tag_front -		1524
		{1525, {2462.2656, -1541.4140, 25.4218,	0.0000, 0.0000, 89.5001}}, //	tag_kilo -		1525
		{1527, {2522.4609, -1478.7421, 24.1640,	0.0000, 0.0000, -0.4998}}, //	tag_rollin -	1527
		{1525, {2346.5156, -1350.7812, 24.2812,	0.0000, 0.0000, 89.5001}}, //	tag_kilo -		1525
		{1527, {2322.4531, -1254.4140, 22.9218,	0.0000, 0.0000, 179.5001}}, //	tag_rollin -	1527
		{1525, {2273.0156, -1687.4296, 14.9687,	0.0000, 0.0000, 89.5001}}, //	tag_kilo -		1525
		{1525, {2422.9062, -1682.2968, 13.9921,	0.0000, 0.0000, 0.0001}}, //	tag_kilo -		1525
		{1530, {2576.8203, -1143.2734, 48.2031,	0.0000, 0.0000, 89.5003}}, //	tag_vagos -		1530
		{1530, {2621.5078, -1092.2031, 69.7968,	0.0000, 0.0000, 89.5003}}, //	tag_vagos -		1530
		{1530, {2797.9218, -1097.6953, 31.0625,	0.0000, 0.0000, -91.9996}}, //	tag_vagos -		1530
		{1490, {2399.4140, -1552.0312, 28.7500,	0.0000, 0.0000, -90.4998}}, //	tag_01 -		1490
		{1490, {2353.5390, -1508.2109, 24.7500,	0.0000, 0.0000, -0.4998}}, //	tag_01 -		1490
		{1490, {2394.1015, -1468.3671, 24.7812,	0.0000, 0.0000, 89.5001}}, //	tag_01 -		1490
		{1525, {1549.8906, -1714.5234, 15.1015,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1527, {1448.2343, -1755.8984, 14.5234,	0.0000, 0.0000, -90.4998}}, //	tag_rollin -	1527
		{1530, {1332.1328, -1722.3046, 14.1875,	0.0000, 0.0000, 89.5000}}, //	tag_vagos -		1530
		{1531, {1724.7343, -1741.5000, 14.1015,	0.0000, 0.0000, -90.4998}}, //	tag_azteca -	1531
		{1531, {1767.2109, -1617.5390, 15.0390,	0.0000, 0.0000, -109.4349}}, //	tag_azteca -	1531
		{1531, {1799.1328, -1708.7656, 14.1015,	0.0000, 0.0000, 179.5001}}, //	tag_azteca -	1531
		{1525, {1498.6328, -1207.3515, 24.6796,	0.0000, 0.0000, -90.0053}}, //	tag_kilo -		1525
		{1530, {1732.7343, -963.0781, 41.4375,	0.0000, 0.0000, 7.5734}}, //	tag_vagos -		1530
		{1531, {1746.7500, -1359.7734, 16.2109,	0.0000, 0.0000, -90.0030}}, //	tag_azteca -	1531
		{1525, {1519.4218, -1010.9453, 24.6093,	0.0000, 0.0000, 179.9946}}, //	tag_kilo -		1525
		{1525, {1687.2265, -1239.1250, 15.8125,	-0.0000, 0.0000, -90.0000}}, //	tag_kilo -		1525
		{1525, {1783.9687, -2156.5390, 14.3125,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1527, {1574.7109, -2691.8828, 13.6015,	0.0000, 0.0000, -0.4998}}, //	tag_rollin -	1527
		{1530, {1118.9062, -2008.2421, 75.0234,	0.0000, 0.0000, 122.5132}}, //	tag_vagos -		1530
		{1531, {1850.0078, -1876.8359, 14.3593,	0.0000, 0.0000, 89.5000}}, //	tag_azteca -	1531
		{1531, {1889.2421, -1982.5078, 15.7578,	0.0000, 0.0000, -0.4999}}, //	tag_azteca -	1531
		{1531, {1950.6171, -2034.3984, 14.0937,	0.0000, 0.0000, 179.5000}}, //	tag_azteca -	1531
		{1531, {1936.8828, -2134.9062, 14.2187,	0.0000, 0.0000, 89.4999}}, //	tag_azteca -	1531
		{1531, {1808.3437, -2092.2656, 14.2187,	0.0000, 0.0000, -179.0178}}, //	tag_azteca -	1531
		{1525, {1624.6250, -2296.2421, 14.3125,	0.0000, 0.0000, 89.4999}}, //	tag_kilo -		1525
		{1527, {1071.1406, -1863.7890, 14.0937,	0.0000, 0.0000, -0.4998}}, //	tag_rollin -	1527
		{1525, {2065.4375, -1897.2343, 13.6093,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1528, {2763.0000, -2012.1093, 14.1328,	0.0000, 0.0000, 179.5001}}, //	tag_seville -	1528
		{1529, {2379.3203, -2166.2187, 24.9453,	0.0000, 0.0000, 44.5000}}, //	tag_temple -	1529
		{1525, {2134.3281, -2011.2031, 10.5156,	0.0000, 0.0000, 134.5000}}, //	tag_kilo -		1525
		{1527, {2392.3593, -1914.5703, 14.7421,	0.0000, 0.0000, 89.5000}}, //	tag_rollin -	1527
		{1527, {2430.3281, -1997.9062, 14.7421,	0.0000, 0.0000, 89.5000}}, //	tag_rollin -	1527
		{1527, {2587.3203, -2063.5234, 4.6093,	0.0000, 0.0000, 179.5000}}, //	tag_rollin -	1527
		{1524, {2704.1953, -1966.6875, 13.7578,	0.0000, 0.0000, 179.5000}}, //	tag_front -		1524
		{1524, {2489.2421, -1959.0703, 13.7578,	0.0000, 0.0000, -90.4998}}, //	tag_front -		1524
		{1531, {2273.8984, -2265.8046, 14.5625,	0.0000, 0.0000, 134.5000}}, //	tag_azteca -	1531
		{1531, {2173.5937, -2165.1875, 15.3046,	0.0000, 0.0000, 134.5000}}, //	tag_azteca -	1531
		{1530, {2273.1953, -2529.1171, 8.5156,	0.0000, 0.0000, 179.5001}}, //	tag_vagos -		1530
		{1530, {2704.2265, -2144.3046, 11.8203,	0.0000, 0.0000, 179.5001}}, //	tag_vagos -		1530
		{1528, {2794.5312, -1906.8125, 14.6718,	0.0000, 0.0000, -90.4998}}, //	tag_seville -	1528
		{1528, {2812.9375, -1942.0703, 11.0625,	0.0000, 0.0000, 179.5001}}, //	tag_seville -	1528
		{1528, {2874.5000, -1909.3828, 8.3906,	0.0000, 0.0000, 179.5001}}, //	tag_seville -	1528
		{1524, {1295.1796, -1465.2187, 10.2812,	0.0000, 0.0000, -90.4998}}, //	tag_front -		1524
		{1525, {1271.4843, -1662.3203, 20.2500,	0.0000, 0.0000, 89.5000}}, //	tag_kilo -		1525
		{1529, {810.5703, -1797.5703, 13.6171,	0.0000, 0.0000, -135.4999}}, //	tag_temple -	1529
		{1529, {730.4453, -1482.0078, 2.2500,	0.0000, 0.0000, 90.5001}}, //	tag_temple -	1529
		{1529, {947.4843, -1466.7187, 17.2421,	0.0000, 0.0000, -179.9998}}, //	tag_temple -	1529
		{1524, {482.6250, -1761.5859, 5.9140,	0.0000, 0.0000, 89.5000}}, //	tag_front -		1524
		{1529, {399.0078, -2066.8828, 11.2343,	0.0000, 0.0000, 179.5000}}, //	tag_temple -	1529
		{1529, {466.9765, -1283.0234, 16.3203,	0.0000, 0.0000, 33.4795}}, //	tag_temple -	1529
		{1529, {583.4609, -1502.1093, 16.0000,	0.0000, 0.0000, 179.5000}}, //	tag_temple -	1529
		{1529, {944.2734, -985.8203, 39.2968,	0.0000, 0.0000, -79.9919}}, //	tag_temple -	1529
		{1529, {1072.9062, -1012.7968, 35.5156,	0.0000, 0.0000, -178.9593}}, //	tag_temple -	1529
		{1529, {1206.2500, -1162.0000, 23.8750,	0.0000, 0.0000, -179.6482}}, //	tag_temple -	1529
		{1529, {1098.8125, -1292.5468, 17.1406,	0.0000, 0.0000, -0.0919}} //	tag_temple -	1529
	};

new const
	g_szFloorNames[][24 char] =
	{
		!"Földszint",
		!"Emelet",
		!"Második Emelet",
		!"Harmadik Emelet",
		!"Negyedik Emelet",
		!"Ötödik Emelet",
		!"Hatodik Emelet",
		!"Hetedik Emelet",
		!"Nyolcadik Emelet",
		!"Kilencedik Emelet",
		!"Tizedik Emelet",
		!"Tizeneggyedik Emelet",
		!"Tizenkettedik Emelet",
		!"Tizenharmadik Emelet",
		!"Tizennegyedik Emelet",
		!"Tizenötödik Emelet",
		!"Tizenhatodik Emelet",
		!"Tizenhetedeik Emelet",
		!"Tizennyolcadik Emelet",
		!"Tizenkilencedik Emelet",
		!"Padlás"
	};

new const
	Float:FloorZOffsets[21] =
	{
	    0.0,		// 0.0,
	    8.5479,		// 8.5479,
	    13.99945,   // 8.5479 + (5.45155 * 1.0),
	    19.45100,   // 8.5479 + (5.45155 * 2.0),
	    24.90255,   // 8.5479 + (5.45155 * 3.0),
	    30.35410,   // 8.5479 + (5.45155 * 4.0),
	    35.80565,   // 8.5479 + (5.45155 * 5.0),
	    41.25720,   // 8.5479 + (5.45155 * 6.0),
	    46.70875,   // 8.5479 + (5.45155 * 7.0),
	    52.16030,   // 8.5479 + (5.45155 * 8.0),
	    57.61185,   // 8.5479 + (5.45155 * 9.0),
	    63.06340,   // 8.5479 + (5.45155 * 10.0),
	    68.51495,   // 8.5479 + (5.45155 * 11.0),
	    73.96650,   // 8.5479 + (5.45155 * 12.0),
	    79.41805,   // 8.5479 + (5.45155 * 13.0),
	    84.86960,   // 8.5479 + (5.45155 * 14.0),
	    90.32115,   // 8.5479 + (5.45155 * 15.0),
	    95.77270,   // 8.5479 + (5.45155 * 16.0),
	    101.22425,  // 8.5479 + (5.45155 * 17.0),
	    106.67580,	// 8.5479 + (5.45155 * 18.0),
	    112.12735	// 8.5479 + (5.45155 * 19.0)
	};

enum e_Interiors
{
	e_szIntName[45],
	e_IntInterior,
	Float:e_fIntPos[4],
	Float:e_fInzZonaMin[3],
	Float:e_fInzZonaMax[3]
}

new const g_Interiors[][e_Interiors] =
{
	{"24/7 {" #XCOLOR_GREEN2 "}(version 1)", 17, {-25.7220, -187.8215, 1003.5468, 5.0760}, {-36.5300,-190.5083,1000.7673}, {-1.8617,-168.0264,1007.5695}},
	{"24/7 {" #XCOLOR_GREEN2 "}(version 2 - big)", 10, {6.0854, -28.8966, 1003.5493, 5.0363}, {-14.4346,-34.2530,1001.5596}, {12.3441,-1.7941,1008.8792}},
	{"24/7 {" #XCOLOR_GREEN2 "}(version 3)", 18, {-30.9874, -89.6806, 1003.5468, 359.8399}, {-39.5926,-93.4812,1001.0108}, {-11.6418,-73.2699,1009.7772}},
	{"24/7 {" #XCOLOR_GREEN2 "}(version 4)", 16, {-26.1856, -140.9163, 1003.5468, 2.9086}, {-39.0487,-147.1121,1001.5370}, {-12.3316,-121.6311,1009.9656}},
	{"24/7 {" #XCOLOR_GREEN2 "}(version 5)", 4, {-27.8439, -26.6737, 1003.5573, 184.3117}, {-37.9099,-34.3196,1001.5129}, {-23.8898,-0.4985,1007.4249}},
	{"24/7 {" #XCOLOR_GREEN2 "}(version 6)", 6, {-26.8339, -55.5844, 1003.5468, 3.9528}, {-38.8983,-61.1011,1001.2028}, {-15.4656,-46.9316,1008.0677}},
	{"4 Burglary houses", 15, {295.1390, 1473.3719, 1080.2578, 352.9526}, {283.3355,1470.0151,1077.4230}, {307.4702,1489.5118,1084.3250}},
	{"8-Track Stadium", 7, {-1403.0114, -250.4526, 1043.5340, 355.8576}, {-1622.2485,-365.5004,1037.4507}, {-1195.1353,-48.3393,1093.3340}},
	{"Abandoned AC tower", 10, {419.8934, 2537.1154, 10.0000, 67.6537}, {412.1328,2533.2317,7.8122}, {424.3971,2543.8066,13.3823}},
	{"Ammu-nation {" #XCOLOR_GREEN2 "}(version 1)", 7, {315.2438, -140.8858, 999.6016, 7.4225}, {266.6094,-148.8192,997.8423}, {318.3941,-123.7187,1009.6329}},
	{"Ammu-nation {" #XCOLOR_GREEN2 "}(version 2)", 1, {285.8359, -39.0166, 1001.5156, 0.7529}, {282.5332,-45.1469,998.3638}, {301.2260,-2.0685,1006.6570}},
	{"Ammu-nation {" #XCOLOR_GREEN2 "}(version 3", 4, {291.7626, -80.1305, 1001.5156, 290.2195}, {282.7367,-90.0410,999.1705}, {333.6227,-56.9617,1006.4833}},
	{"Ammu-nation {" #XCOLOR_GREEN2 "}(version 4)", 6, {297.1440, -109.8702, 1001.5156, 20.2254}, {283.3041,-115.8842,999.5991}, {299.1585,-101.8763,1005.4377}},
	{"Ammu-nation {" #XCOLOR_GREEN2 "}(version 5)", 6, {316.5025, -167.6271, 999.5938, 10.3030}, {270.8558,-172.1328,997.6807}, {320.2725,-158.1764,1004.3373}},
	{"Andromada", 9, {315.4544, 976.5972, 1960.8509, 359.6368}, {310.7436,971.3320,1957.6764}, {325.5203,1056.6587,1962.9519}},
	{"Angel Pine Trailer", 2, {1.1851, -3.2386, 999.4284, 87.5718}, {-4.5776,-8.4938,997.2733}, {7.2534,10.5366,1007.9147}},
	{"Area 69", 0, {215.1515, 1874.0577, 13.1406, 177.5538}, {180.8603,1795.6952,-40.9169},{275.5044,1934.9922,27.6605}},
	{"Atrium", 18, {1727.2851, -1642.9449, 20.2254, 172.4192},{1698.5369,-1680.3901,17.5846},{1698.5369,-1680.3901,17.5846}},
	{"B Dup's Apartment", 3, {1527.0467, -12.0235, 1002.0971, 350.0013}, {1516.7755,-17.0840,998.4159}, {1537.5229,-2.0377,1009.7927}},
	{"B Dup's Crack Palace", 2, {1523.5096, -47.8209, 1002.2697, 262.7037}, {1504.6600,-63.7752,991.1306}, {1542.5032,-26.7980,1010.7261}},
	{"Bar", 11, {501.9577, -70.5646, 998.7578, 171.5706}, {486.7509,-91.6403,996.7477}, {513.8733,-66.0919,1004.0137}},
	{"Barbara's Love nest", 5, {322.5014, 303.6906, 999.1483, 8.1745}, {317.0928,301.4896,997.3507}, {328.4915,319.0362,1004.1205}},
	{"Barber Shop", 3, {418.4666, -80.4595, 1001.8046, 343.2358}, {415.8691,-86.4514,998.8395}, {424.7766,-73.0552,1005.7869}},
	{"Barber Shop", 12, {411.9707, -51.9216, 1001.8983, 173.3448}, {407.7204,-57.2820,1000.1766}, {416.1424,-47.3310,1005.4365}},
	{"Barber Shop 2 (Reece's)", 2, {414.2987, -18.8043, 1001.8046, 41.4263}, {409.8081,-25.1950,999.4216}, {416.4145,-9.2376,1006.5475}},
	{"Below The Belt Gym (Las Venturas)", 7, {773.7318, -74.6957, 1000.6541, 5.2304}, {755.8307,-81.2456,998.4224}, {777.4485,-57.7205,1006.2921}},
	{"Big Smoke's Crack Palace", 2, {2536.5322, -1294.8425, 1044.1250, 254.9548}, {2522.2700,-1322.1631,1022.7582}, {2592.5986,-1272.2866,1072.7726}},
	{"Bike School", 3, {1494.8587, 1306.4798, 1093.2951, 196.0650}, {1487.6362,1301.0002,1091.6637}, {1503.6555,1310.8058,1096.7635}},
	{"Bike School", 0, {1168.5118, 1360.1145, 10.9293, 196.5933},{1156.8673,1344.4504,7.7002},{1177.2418,1359.3927,18.0178}},
	{"Binco", 15, {207.5218, -109.7446, 1005.1328, 358.6199}, {199.3962,-114.9639,1002.8141}, {219.6242,-95.1596,1009.5090}},
	{"Blastin' Fools Records", 3, {1037.8276, 0.3970, 1001.2844, 353.9335}, {1035.5629,-4.8740,995.9028}, {1045.4518,11.9493,1008.8530}},
	{"Blood Bowl Stadium", 15, {-1417.8927, 932.4481, 1041.5312, 0.7013},{-1606.0507,842.7264,1013.1705},{-1185.8760,1096.1281,1142.7804}},
	{"Blueberry Liquor Store", 0, {255.2082, -59.6753, 1.5701, 1.4644},{242.0027,-62.7730,-0.1139},{257.6943,-51.4622,5.9012}},
	{"Brothel", 3, {974.0177, -9.5937, 1001.1483, 22.6044}, {930.3621,-20.3396,998.1182}, {976.2642,8.8358,1005.9314}},
	{"Brothel2", 3, {961.9307, -51.9071, 1001.1171, 95.5381}, {940.6286,-65.8841,998.8178}, {972.9583,-41.7810,1004.8085}},
	{"Budget Inn Motel Room", 12, {446.3247, 509.9660, 1001.4193, 330.5671}, {441.6739,505.6967,999.0896}, {453.1077,515.8069,1005.6980}},
	{"Budget Inn Motel Room", 10, {2260.5864,-1135.7686,1050.6328,265.4193}, {2258.4680,-1146.8217,1047.0527}, {2272.4966,-1130.7303,1058.5039}},
	{"Burger shot", 10, {366.0248, -73.3478, 1001.5078, 292.0083}, {361.5172,-77.9203,999.9136}, {383.2736,-54.8280,1004.5044}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}1", 3, {234.6087, 1187.8194, 1080.2578, 349.4844}, {218.9700,1183.7598,1076.7510}, {247.2135,1214.3904,1089.7594}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}2", 2, {225.5706, 1240.0643, 1082.1406, 96.2852}, {215.9083,1237.2310,1080.3468}, {235.6278,1253.0923,1086.9967}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}3", 1, {224.2879, 1289.1905, 1082.1406, 359.8680}, {215.7547,1284.2115,1080.3730}, {235.1356,1294.7714,1085.5935}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}4", 5, {239.2819, 1114.1989, 1080.9920, 270.2654}, {224.9186,1100.3087,1079.3962}, {252.2689,1124.4772,1089.6827}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}5", 15, {328.4519,1481.0912,1084.4375,342.8134}, {319.1077,1471.0162,1082.1418}, {338.7033,1492.2374,1088.6816}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}6", 15, {382.9429,1471.5608,1080.1949,88.9641}, {370.5054,1451.8011,1078.2839}, {391.2086,1473.6755,1083.2443}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}8", 2, {490.0343,1402.2235,1080.2645,1.8731}, {474.1006,1392.1298,1077.5862}, {503.1521,1425.5394,1091.3303}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}9", 7, {227.2327,1026.5942,1084.0110,301.4059}, {223.2693,1015.5286,1081.5966}, {256.3062,1053.0176,1094.4595}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}11", 5, {227.7559, 1114.3842, 1080.9920, 266.2622}, {224.3202,1101.6620,1077.4802}, {252.7258,1123.7457,1088.8724}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}12", 4, {261.1163, 1287.2197, 1080.2578, 178.9149}, {248.4616,1279.3074,1077.9783}, {269.4744,1297.0746,1086.2169}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}13", 4, {221.6766, 1142.4962, 1082.6092, 184.9618}, {217.2533,1137.6406,1080.9294}, {230.5096,1161.3136,1085.9200}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}14", 10, {24.3768, 1341.1827, 1084.3750, 8.3304}, {17.5453,1334.8666,1082.1111}, {37.5702,1353.2906,1092.9321}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}15", 4, {-262.1759, 1456.6158, 1084.3670, 82.4589}, {-281.1217,1442.7737,1081.106}, {-254.2371,1459.0540,1094.807}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}16", 5, {22.8610, 1404.9165, 1084.4295, 349.6158}, {13.7918,1394.5109,1082.2070}, {34.4712,1419.8729,1088.2734}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}17", 5, {140.3679, 1367.8835, 1083.8620, 349.2372}, {133.3838,1362.0179,1079.5980}, {155.9445,1388.7886,1097.2671}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}18", 6, {234.2825, 1065.2290, 1084.2099, 4.3864}, {218.8820,1061.5142,1080.1183}, {249.1243,1089.3538,1091.6984}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}19", 6, {-68.5145, 1353.8485, 1080.2109, 3.5741}, {-74.2162,1342.3512,1076.7736}, {-55.8768,1368.0284,1085.0679}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}20", 15, {-285.2510, 1471.1970, 1084.3750, 85.6547}, {-302.8363,1466.4861,1081.796}, {-277.4708,1480.4778,1095.616}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}21", 8, {-42.5265, 1408.2298, 1084.4295, 172.0679}, {-53.6752,1393.0394,1081.2003}, {-33.5057,1413.4457,1088.4714}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}22", 9, {84.9244, 1324.2983, 1083.8592, 159.5581}, {72.9198,1314.8082,1078.9802}, {97.1580,1346.6976,1094.4606}},
	{"Burglary House X{" #XCOLOR_GREEN2 "}23", 9, {260.7420, 1238.2259, 1084.2578, 84.3084}, {250.7146,1233.4945,1081.5894}, {266.9525,1258.2870,1088.6866}},
	{"Burning Desire Building", 5, {2350.1596, -1181.0656, 1027.9764, 99.1864}, {2318.1238,-1190.2722,1024.8171}, {2357.9441,-1171.1147,1035.6062}},
	{"Caligula's Casino", 1, {2233.9362, 1711.8038, 1011.6312, 184.3890},{2123.5930,1544.4711,993.4044}, {2295.2297,1730.4478,1022.8099}},
	{"Caligula's Roof", 1, {2268.5156, 1647.7680, 1084.2342, 99.7331},{2258.8000,1607.8622,1081.7313}, {2274.5930,1679.4484,1095.1050}},
	{"Casino (Redsands West)", 12, {1133.3498, -7.8460, 1000.6796, 165.8482}, {1112.6682,-17.1844,999.6478}, {1144.3787,12.9877,1007.0065}},
	{"Club", 17, {493.1441, -24.2607, 1000.6796, 356.9862}, {473.5778,-26.9373,998.5568}, {508.3311,1.4719,1007.1359}},
	{"Cluckin' Bell", 9, {366.0002, -9.4336, 1001.8516, 160.5278}, {362.1091,-14.8420,1000.2253}, {382.1190,-1.8926,1005.3123}},
	{"Cobra Gym", 6, {773.8886, -47.7696, 1000.5858, 10.7159}, {752.6991,-54.0959,998.9660}, {779.1125,-15.7498,1009.4640}},
	{"Colonel Furhberger's", 8, {2807.3603, -1171.7048, 1025.5703, 193.7117}, {2802.4548,-1178.0707,1022.9150}, {2821.5769,-1160.3381,1033.5377}},
	{"Crack Den", 5, {318.564971, 1118.209960, 1083.882812, 267.4590}, {304.4777,1111.7698,1081.9078}, {336.4509,1131.6333,1086.9086}},
	{"Crypt in LS cemetery (temple)", 0, {818.7714, -1102.8687, 25.7940, 91.1437}, {808.7869,-1127.1682,22.4181}, {824.3527,-1080.5946,34.5211}},
	{"Denise's Bedroom", 1, {245.2306, 304.7632, 999.1483, 273.4364}, {242.3536,299.3494,997.3337}, {251.0133,307.3758,1004.364}},
	{"Didier Sachs", 14, {204.1658, -165.7678, 1000.5233, 181.7583}, {196.3529,-171.4611,998.2610}, {217.8855,-150.4116,1004.8763}},
	{"Dillimore Gas Station", 0, {663.0587, -573.6273, 16.3358, 264.9829}, {661.6834,-577.9793,14.1566}, {669.5948,-564.7293,17.3473}},
	{"Diner 1", 5, {454.9851, -107.2546, 999.4376, 309.0195}, {441.1297,-115.2749,997.3557}, {461.2582,-102.9993,1003.5928}},
	{"Dirtbike Stadium", 4, {-1421.5616, -663.8261, 1059.5567, 170.9340}, {-1649.3881,-836.9418,1039.2018}, {-1166.3805,-522.2897,1152.0405}},
	{"Driving School", 3, {-2031.1196, -115.8285, 1035.1717, 190.1876}, {-2036.9067,-122.6957,1032.3003}, {-2018.3390,-102.9873,1040.0995}},
	{"Fanny Batter's Whore House", 6, {748.4622, 1438.2376, 1102.9531, 0.6068}, {723.3207,1432.8154,1100.1309}, {763.8163,1444.2568,1107.9224}},
	{"Four Dragons", 10, {2016.1156, 1017.1541, 996.8750, 88.0055}, {1922.8284,961.1909,990.2842}, {2032.0491,1085.8577,1011.7572}},
	{"Four Dragons' Janitor's Office", 10, {1893.0731, 1017.8958, 31.8826, 86.1044}, {1882.8356,1008.5576,29.1888}, {1896.1776,1027.2101,38.2335}},
	//{"Four Dragons' Managerial Suite", 11, {2003.1176, 1015.1948, 33.0079, 351.5787}},
	//{"Francis International Airport", 14, {-1813.2130, -58.0120, 1058.9641, 335.3197}},
	{"Ganton Gym", 5, {770.8032, -0.7031, 1000.7266, 22.8598}, {754.1821,-9.3365,998.8303}, {775.7083,15.3621,1008.2457}},
	{"Helena's Barn", 3, {290.6228, 309.0621, 999.1483, 89.9162}, {278.9485,303.3622,997.6368}, {293.8206,311.3014,1006.7023}},
	{"Inside Track Betting", 3, {830.6016, 5.9404, 1004.1796, 125.8149}, {818.4987,-1.1179,1001.9713}, {835.7314,12.2851,1010.4426}},
	{"Jay's Diner", 4, {449.0172, -88.9894, 999.5546, 89.6606}, {432.4165,-93.6984,997.7179}, {461.1737,-79.2733,1004.3315}},
	{"Jefferson Motel", 15, {2217.2810, -1150.5349, 1025.7967, 273.7326}, {2176.1455,-1201.7520,1025.0618}, {2254.6855,-1134.8185,1038.9698}},
	//{"Jet Interior", 1, {1.5491, 23.3183, 1199.5937, 359.9053}},
	//{"K.A.C.C. Military Fuels Depot", 0, {2548.4807, 2823.7429, 10.8203, 270.6003}},
	{"Katie's Lovenest", 2, {269.6405, 305.9512, 999.1483, 215.6625}, {265.9507,301.2964,997.0061}, {274.4630,308.5934,1003.0061}},
	//{"Kickstart Stadium", 14, {-1420.4277, 1616.9221, 1052.5312, 159.1255}},
	{"Las Venturas Police Department", 3, {288.4721, 170.0646, 1007.1793, 22.0477}, {186.2841,132.9703,999.6680}, {304.6921,203.1299,1023.0084}},
	{"Las Venturas Tattoo parlor", 3, {-201.2236, -43.2463, 1002.2733, 45.8613}, {-206.5263,-48.2290,999.5525}, {-198.3755,-36.2960,1006.6401}},
	//{"Liberty City", 1, {-742.0891, 493.8035, 1371.9765, 155.0780}},
	{"Lil' Probe Inn", 18, {-227.5702, 1401.5544, 27.7656, 269.2976}, {-233.4916,1393.0267,25.9148}, {-217.0374,1413.9108,30.2651}},
	//{"Loco Low Co", 2, {611.3535, -77.5574, 997.9995, 320.9263}},
	//{"Los Santos Airport", 14, {-1864.9433, 55.7323, 1055.5274, 85.8541}},
	//{"Los Santos Police Department", 6, {246.6694, 65.8039, 1003.6406, 7.9562}},
	//{"Los Santos Tattoo Parlor", 16, {-202.8419, -24.0324, 1002.2733, 252.8153}},
	//{"Lost San Fierro Tattoo parlor", 17, {-202.9380, -6.7006, 1002.2733, 204.2693}},
	{"Madd Dogg's Mansion", 5, {1267.8405, -776.9586, 1091.9062, 231.3417}, {1222.2052,-847.3182,1080.454}, {1311.1021,-752.1092,1101.785}},
	{"Michelle's Love Nest*", 4, {306.1965, 307.8190, 1003.3046, 203.1354},{297.6370,298.1547,997.7910}, {311.8049,314.7025,1010.1180}},
	{"Millie's Bedroom", 6, {344.9984, 307.1824, 999.1557, 193.6430}, {342.6857,299.7932,996.6360}, {351.2169,311.2646,1003.8902}},
	{"OG Loc's House", 3, {512.9290, -11.6927, 1001.5653, 198.7669}, {509.8260,-22.5749,998.8687}, {522.0333,-5.2184,1005.9873}},
	//{"Otto's Autos", 0, {-1658.1656, 1215.0002, 7.2500, 103.9074}},
	//{"Oval Stadium", 1, {-1402.6612, 106.3897, 1032.2734, 105.1354}},
	{"Pair of Burglary Houses", 2, {446.6260, 1397.7380, 1084.3045, 343.9645}, {434.6830,1393.6279,1081.5232}, {462.4194,1422.7727,1091.9595}},
	{"Palamino Bank", 0, {2306.3825, -15.2363, 26.7495, 274.4898}, {2304.7012,-16.8109,24.2278}, {2321.0647,0.9735,32.1011}},
	{"Palamino Diner", 0, {2331.8984, 6.7814, 26.5032, 100.2357}, {2322.1729,-8.7145,23.232}, {2333.8003,10.4419,32.0509}},
	{"Pizza Stack", 5, {372.5563, -131.3607, 1001.4921, 354.2283}, {366.2369,-136.1350,999.0599}, {382.6501,-112.2110,1006.7088}},
	{"Planning Department", 3, {386.5259, 173.6381, 1008.3828, 63.7397}, {316.8257,141.3129,1002.7156}, {397.9116,222.0929,1032.9904}},
	{"Pro-Laps", 3, {206.4627, -137.7075, 1003.0938, 10.9347}, {195.3625,-140.6649,1000.0295}, {218.3398,-125.2448,1009.4180}},
	{"RC Battlefield", 10, {-1129.8907, 1057.5423, 1346.4139, 274.5267}, {-1138.9865,1012.1378,1338.6154}, {-965.3349,1098.3997,1359.2627}},
	//{"Rosenberg's Office in Caligulas", 2, {2182.2016, 1628.5848, 1043.8723, 224.8601}},
	{"Rusty Brown's Donuts", 17, {378.0260, -190.5155, 1000.6328, 141.0245}, {371.6897,-196.8555,997.8455}, {382.9182,-176.6733,1004.9553}},
	{"Ryder's house", 2, {2447.8703, -1704.4509, 1013.5078, 314.5252}, {2446.1755,-1708.8453,1011.6014}, {2477.4336,-1684.4735,1017.9280}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}1", 5, {2233.6918, -1112.8105, 1050.8828, 8.6483}, {2224.7134,-1119.3551,1048.4871}, {2242.5684,-1102.4664,1055.6907}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}2", 15, {374.3883, 1417.2364, 1081.3281, 269.4357}, {355.1924,1407.2170,1078.1652}, {381.3588,1431.8207,1086.6239}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}3", 9, {2319.1271, -1023.9561, 1050.2109, 167.3959}, {2311.3062,-1036.8907,1048.0786}, {2332.5159,-1002.1242,1058.2031}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}4", 10, {2261.0976, -1137.8833, 1050.6328, 266.8800}, {224.8487,1102.5182,1078.6642}, {254.5461,1123.1448,1090.4558}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}5", 9, {2255.0742,-1139.8053,1050.6328,87.5659}, {2243.5598,-1144.6001,1048.4854}, {2256.1431,-1132.8229,1055.0116}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}6", 11, {2282.9453,-1140.2847,1050.8984,358.2649}, {2275.5337,-1142.5599,1048.3110}, {2289.5562,-1132.9303,1055.1082}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}7", 2, {2236.6997, -1078.9477, 1049.0234, 2.5706}, {2232.2554,-1084.4269,1047.2764}, {2247.5210,-1063.7672,1053.4835}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}8", 6, {2333.3228,-1077.3529,1049.0234,0.1684}, {2327.3484,-1078.6786,1046.9048}, {2347.1685,-1060.9279,1054.5851}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}9", 6, {2308.7839,-1212.9337,1049.0234,352.3349}, {2303.9402,-1216.1781,1046.3278}, {2322.3047,-1206.7303,1052.9855}},
	{"Safe House group X{" #XCOLOR_GREEN2 "}10", 6, {2196.8499,-1203.9585,1049.0234,81.2991}, {2180.8755,-1227.5438,1046.3135}, {2204.1384,-1198.2598,1053.9250}},
	{"San Fierro Garage", 1, {-2041.2332, 178.3968, 28.8465, 156.2153},{-2060.9561,141.8511,26.8250}, {-2037.4037,181.7823,35.0496}}, 																								//Nem kell zóna
	{"San Fierro Police Department", 10, {246.0688, 108.9701, 1003.2188, 0.2921}, {212.5886,105.9470,998.4315}, {280.1755,128.4076,1015.6856}}, 																						//Nem kell zóna
	//{"Secret Valley Diner", 6, {442.1293, -52.4780, 999.7166, 177.9394}},
	//{"Secret Valley Diner 2", 5, {457.0308,-108.5043,1000.1459,263.4647}},
	{"Sex Shop", 3, {-100.2674, -22.9375, 1000.7188, 17.2849}, {-117.3099,-29.2692,998.5521}, {-97.4989,-8.0095,1008.3619}},
	{"Sherman Dam", 17, {-944.2401, 1886.1534, 5.0050, 179.8547}, {-964.6107,1839.4806,1.0919}, {-936.5355,1954.4669,30.7530}},
	{"Sindacco Abatoir", 1, {963.0584, 2159.7563, 1011.0302, 175.3130}, {929.5641,2093.5479,1006.6358}, {967.8689,2176.8962,1029.7571}},
	{"SubUrban", 1, {204.1174, -46.8045, 1001.8046, 357.5776}, {194.5190,-54.8447,997.9709}, {216.7529,-32.0371,1008.1469}},
	{"Sweet's House", 1, {2527.0175, -1679.2076, 1015.4984, 260.9707}, {2522.8376,-1689.9788,1013.1160}, {2539.2864,-1671.5596,1021.7242}},
	{"The Big Spread Ranch", 3, {1212.1489, -28.5387, 1000.9531, 170.5691}, {1204.3672,-46.0921,998.4396}, {1218.0182,-21.0132,1002.7637}},
	{"The Camel's Toe Safehouse", 1, {2216.1281, -1076.3050, 1050.4842, 86.4280}, {2201.9697,-1080.6921,1048.5138}, {2219.1653,-1069.8013,1057.8357}},
	{"The Johnson House", 3, {2496.0549, -1695.1749, 1014.7421, 179.2174}, {2489.9812,-1713.6327,1012.5543}, {2501.7927,-1692.9803,1024.3230}},
	{"The Pig Pen (strip club 2)", 2, {1204.6689, -13.5429, 1000.9218, 350.0202}, {1199.8199,-17.4476,998.8375}, {1226.6813,22.2386,1005.1827}},
	{"The Pleasure Domes (Jizzy)", 3, {-2638.8232, 1407.3393, 906.4608, 94.6792}, {-2690.4048,1383.3900,902.8648}, {-2631.2554,1434.5708,930.3686}},
	{"The Welcome Pump", 1, {681.6215, -451.8933, -25.6172, 166.1660}, {674.2516,-472.2007,-28.5093}, {691.7332,-444.1167,-20.5206}},
	{"Torreno's Ranch", 0, {-688.1494, 942.0825, 13.6328, 177.6573}, {-693.7635,931.9505,9.0400}, {-666.7593,945.9808,23.2820}},
	{"Transfenders", 1, {621.4528, -23.7289, 1000.9218, 15.6787}, {602.3978,-35.6994,996.1411}, {639.9603,7.1377,1014.4003}},
	{"Unused Safe House", 12, {2323.7062, -1147.6507, 1050.7099, 206.5352}, {2307.1226,-1150.9432,1048.9749}, {2341.1018,-1133.4451,1057.2822}},
	{"Verdant Bluffs Safehouse", 8, {2365.1088, -1133.0793, 1050.8750, 177.3946}, {2357.0894,-1142.3989,1048.4077}, {2376.8223,-1120.7230,1056.3242}},
	//{"Vice Stadium", 16, {-1401.0670, 1265.3706, 1039.8670, 178.6483}},
	{"Victim", 5, {225.0305, -9.1836, 1002.2180, 85.5322}, {198.6404,-19.3203,999.7120}, {231.1118,-1.8305,1011.5134}},
	//{"Wang Cars", 0, {-1977.0454, 302.9772, 35.6718, 166.0682}},
	{"Wardrobe/Changing room", 14, {256.9046, -41.6537, 1002.0233, 85.8774}, {250.0199,-49.3759,999.6241}, {260.6569,-36.2443,1008.4668}},
	{"Warehouse {" #XCOLOR_GREEN2 "}1", 18, {1290.4106, 1.9512, 1001.0200, 179.9418}, {1245.0621,-73.2493,997.7440}, {1312.6461,10.0166,1019.9783}},
	{"Warehouse {" #XCOLOR_GREEN2 "}2", 1, {1412.1472, -2.2836, 1000.9240, 114.6610}, {1355.6577,-69.1858,997.9164}, {1425.1907,6.0429,1020.7107}},
	//{"Warehouse {" #XCOLOR_GREEN2 "}3", 0, {2135.2004, -2276.2814, 20.6718, 318.5899}},
	{"Wheel Arch Angels", 3, {612.2191, -123.9028, 997.9921, 266.5704}, {608.6720,-140.1548,996.1054}, {624.4754,-115.7997,1002.3541}},
	//{"Willowfield Safehouse", 11, {2283.3117, 1139.3070, 1050.8984, 19.7031}},
	{"World of Coq", 1, {445.6003, -6.9822, 1000.7343, 172.2104}, {437.3258,-28.7281,997.4868}, {463.0804,-2.8321,1006.6601}},
	{"Wu-Zi Mu's", 1, {-2158.6730, 642.0900, 1052.3750, 86.5401}, {-2172.4163,634.1537,1050.3081}, {-2157.0142,649.4097,1061.4446}},																										//Nem kell zóna
	{"Zero's RC Shop", 6, {-2240.1027, 136.9730, 1035.4139, 269.0953},{-2241.5420,127.5698,1033.4532}, {-2217.7695,137.2711,1040.3613}},																									//Nem kell zóna
	{"Zip", 18, {161.4048, -94.2416, 1001.8046, 0.7936}, {144.2956,-97.5552,1000.2205}, {183.8075,-69.2506,1010.6883}},
	//{"Zombotech - Lobby Area", 0, {-1916.1268, 714.8615, 46.5625, 152.2839}, {-1990.8373,618.2229,29.2333}, {-1909.7147,708.2333,155.2144}},
	{"Zombotech - Lobby Area", 0, {-1916.1268, 714.8615, 46.5625, 152.2839}},
	{"A", 8, {2365.4738, -1129.4595, 1050.8750, 156.3547}, {2356.7856,-1143.0057,1048.7750}, {2377.2720,-1120.5861,1056.9384}},
	{"B", 10, {2261.3273, -1210.5366, 1049.0234, 86.9041}, {2246.7651,-1225.7620,1046.4283}, {2271.0984,-1205.6320,1054.5577}},
	{"David House", 1, {211.2041,1755.0898,3334.2429,312.7657}, {197.4117,1744.7611,3320.3198}, {246.4682,1774.6086,3355.3223}},
	{"Small House", 2, {1783.7103,-1791.3737,1552.5270,358.5369}, {1765.0725,-1794.2433,1549.1022}, {1790.2286,-1767.8088,1558.4495}},
	// Vice City
	{"{" #XCOLOR_BLUE "}Vice City Bank", 3, {4196.2886,-4440.8687,8.3370,89.0600}},
	{"{" #XCOLOR_BLUE "}Vice City Club", 17, {5579.7080,-4167.9126,4.9436,31.3337}},
	{"{" #XCOLOR_BLUE "}Vice City Concerth", 8, {4175.2881,-3048.6963,8.1605,347.4897}},
	{"{" #XCOLOR_BLUE "}Vice City Hotel", 1, {5314.0039,-5380.8394,7.0534,168.5748}},
	{"{" #XCOLOR_BLUE "}Vice City Lawyers", 6, {5240.4946,-5466.7832,8.1427,327.4365}},
	{"{" #XCOLOR_BLUE "}Vice City Mall", 4, {5515.8301,-2923.5142,13.6060,308.6126}},
	{"{" #XCOLOR_BLUE "}Vice City Mansion", 5, {4720.7837,-4688.5659,20.2841,200.5912}},
	{"{" #XCOLOR_BLUE "}Vice City Stadion", 14, {3686.7686,-2601.3655,297.8010,243.9145}},
	{"{" #XCOLOR_BLUE "}Vice City Striptclub", 5, {5176.8999,-5559.8945,5.5218,290.7294}}
};

stock IsPlayerInHouseZone(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	for(new i; i != sizeof(g_Interiors); i++)
	{
		if(	x >= g_Interiors[i][e_fInzZonaMin][0] && x < g_Interiors[i][e_fInzZonaMax][0] &&
			y >= g_Interiors[i][e_fInzZonaMin][1] && y < g_Interiors[i][e_fInzZonaMax][1] &&
			z >= g_Interiors[i][e_fInzZonaMin][2] && z < g_Interiors[i][e_fInzZonaMax][2] &&
			GetPlayerInterior(playerid) == g_Interiors[i][e_IntInterior] &&
			GetPVarInt(playerid, "RaceParticipant") == 0 &&
			GetPlayerVirtualWorld(playerid) != 9999 && GetPlayerVirtualWorld(playerid) != 0)
		{
			return i;
		}
	}
	return -1;
}

stock GetPlayerHouseID_ByZone(playerid)
{
	new zoneid = IsPlayerInHouseZone(playerid); // Megkeressük az interior id-jét a tömbbõl amibe van
	if(zoneid == -1) return -1;

	new Float:x, Float:y, Float:z/*, interior = GetPlayerInterior(playerid)*/, world = GetPlayerVirtualWorld(playerid);
	foreach(houseid: houses)
	{
		if(world != GetGVarInt("VirtualWorld", houseid)) continue;

		x = GetGVarFloat("InX", houseid);
		y = GetGVarFloat("InY", houseid);
		z = GetGVarFloat("InZ", houseid);
		if(	x >= g_Interiors[zoneid][e_fInzZonaMin][0] && x < g_Interiors[zoneid][e_fInzZonaMax][0] &&
			y >= g_Interiors[zoneid][e_fInzZonaMin][1] && y < g_Interiors[zoneid][e_fInzZonaMax][1] &&
			z >= g_Interiors[zoneid][e_fInzZonaMin][2] && z < g_Interiors[zoneid][e_fInzZonaMax][2] &&
			GetGVarInt("Interior", houseid) == g_Interiors[zoneid][e_IntInterior])
		{
			return houseid;
		}
	}
	return -1;
}

new const
	g_szBones[][] =
	{
		!"{" #XCOLOR_YELLOW "}1 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Gerinc",
		!"{" #XCOLOR_YELLOW "}2 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Fej",
		!"{" #XCOLOR_YELLOW "}3 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal felsõ kar",
		!"{" #XCOLOR_YELLOW "}4 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb felsõ kar",
		!"{" #XCOLOR_YELLOW "}5 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal kéz",
		!"{" #XCOLOR_YELLOW "}6 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb kéz",
		!"{" #XCOLOR_YELLOW "}7 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal comb",
		!"{" #XCOLOR_YELLOW "}8 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb comb",
		!"{" #XCOLOR_YELLOW "}9 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal láb",
		!"{" #XCOLOR_YELLOW "}10 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb láb",
		!"{" #XCOLOR_YELLOW "}11 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb könyök",
		!"{" #XCOLOR_YELLOW "}12 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal könyök",
		!"{" #XCOLOR_YELLOW "}13 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal alsókar",
		!"{" #XCOLOR_YELLOW "}14 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb alsókar",
		!"{" #XCOLOR_YELLOW "}15 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Bal kulcscsont",
		!"{" #XCOLOR_YELLOW "}16 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Jobb kulcscsont",
		!"{" #XCOLOR_YELLOW "}17 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Nyak",
		!"{" #XCOLOR_YELLOW "}18 {" #XCOLOR_WHITE "}- {" #XCOLOR_DEFAULT "}Állkapocs"
	};

new const
	g_szKeyChanegeMenu[][e_PackedString2] =
	{
		!"KEY_ACTION\t\t\t\t1",
		!"KEY_CROUCH\t\t\t\t2",
		!"KEY_FIRE\t\t\t\t4",
		!"KEY_SPRINT\t\t\t\t8",
		!"KEY_SECONDARY_ATTACK\t\t16",
		!"KEY_JUMP\t\t\t\t32",
		!"KEY_LOOK_RIGHT\t\t\t64",
		!"KEY_HANDBRAKE\t\t\t128",
		!"KEY_LOOK_LEFT\t\t\t256",
		!"KEY_SUBMISSION\t\t\t512",
		!"KEY_LOOK_BEHIND\t\t\t512",
		!"KEY_WALK\t\t\t\t1024",
		!"KEY_ANALOG_UP\t\t\t2048",
		!"KEY_ANALOG_DOWN\t\t\t4096",
		!"KEY_ANALOG_LEFT\t\t\t8192",
		!"KEY_ANALOG_RIGHT\t\t\t16384",
		!"KEY_YES\t\t\t\t65536",
		!"KEY_NO\t\t\t\t131072",
		!"KEY_CTRL_BACK\t\t\t262144",
		!"KEY_UP\t\t\t\t-128",
		!"KEY_DOWN\t\t\t\t128",
		!"KEY_LEFT\t\t\t\t-128",
		!"KEY_RIGHT\t\t\t\t128"
	};

new
//	gDerbyZone,
	gCsikZone,
	gJailZone,
	gJailRange,
//	gSawnoffZone,
	gRangeZone,
	gVidamparkZone,
	gQuarryZone,
	gLVAlagut,
	gPCZone;

// Race
new
	Ranking = 1,
 	Countdown,
 	cd,
 	MajStartTimer,
 	mscd,
	LCurrentCheckpoint,
 	Participants,
	g_AllParticipants,
	Float:CPsize,
	Float:RaceAngle,
	RaceType,
  	g_RaceClearworld,
 	BSelectedCheckpoint,
 	VersenyIdo,
	VersenyCount,
	BuildRaceID[MAX_PLAYERS],
	Float:BRaceAngle,
	g_szRaceName_[48],
 	g_szBRaceName[48],
 	Float:BuildRaceCP[4][MAX_PLAYERS][500],
 	Float:BuildRaceCPSize[MAX_PLAYERS],
 	BuildRaceType[MAX_PLAYERS],
 	BuildRaceClearWorld[MAX_PLAYERS],
 	BuildRaceCPS[MAX_PLAYERS],
 	BuildRaceAutoFix[MAX_PLAYERS],
	BuildRaceGhostMode[MAX_PLAYERS],
	RaceAutoFix,
    RaceGhostMode,
    Float:RaceGravity,
    RaceVehicle,
    RaceInterior;

new
	g_szRaceName[MAX_RACES][32],
	g_szRaceAutoFix[MAX_RACES],
	g_szRaceGhostMode[MAX_RACES],
	Float:g_szRaceCPSize[MAX_RACES],
	g_szRaceType[MAX_RACES],
 	g_szRaceClearWorld[MAX_RACES],
  	g_szRaceCreator[MAX_RACES],
  	g_szRaceCreatorName[MAX_RACES][24],
  	g_szRaceCreateTime[MAX_RACES],
	g_szRaceHolder[MAX_RACES][24],
	g_szRaceHolderID[MAX_RACES],
	g_szRaceRecord[MAX_RACES],
	g_szRaceRecordTime[MAX_RACES],
	g_szRaceRecordVeh[MAX_RACES][24],
	Float:g_szRaceGravity[MAX_RACES],
	g_szRaceVehicle[MAX_RACES];

new
	g_rStartTick,
	g_rEndTick;

new
	g_LastRaceStartTick[MAX_PLAYERS] = 0;
#define LOADRACE_LIMIT 120000 //2 perc
//------------------------------------------------------------------------------------------------------
	//FunFair:
new
	Vikingo_Barco						,
	Vikingo_Base                        ,
	Kart_Vehs[9]            			,
	Quad_Vehs[9]						,
	Roller_Platform         			,
	Roller_Unused[37]       			,
	Roller_Unused2[76]      			,
	Roller_Veh              			,
    Carousel_Base           			,
    Carousel_Base2          			,
    Carousel_Seats[4]       			,
    Carousel_Unused[12]     			,
	Revolution_Base         			,
	Revolution_Base2        			,
    Revolution_Platforms[4] 			,
    Revolution_Seats[4] 				,
    Revolution_Statue       			,
	Revolution_Unused[5]   				,
	Topgun_Base							,
	Topgun_Platforms[7]					,
	Topgun_Unused[24]					,
	Topgun_Stairs[2]					,
	bool:stair							,
	Jail_Base							,
	Jail_BasePlatform					,
	Jail_Plataforms[29]					,
	Jail_Doors[2]						,
	Jail_Unused[4]						,
	Jail[5]								,
	Jail_Base2							,
	bool:door							,
	Projekt_Base[3]						,
	Projekt_Platform[3]					,
	Projekt_Seats[12]					,
	Projekt_Unused[10]					,
	SuperProjekt_Base[4]				,
	Projekt_Letters[5]					,
	Observer_Base						,
	Observer_Seats[2]					,
/*
	FerrisWheel_Base					,
	FerrisWheel_Seats[10]				,
*/
	Cars_Base[3]						,
	Cars_Unused[25]						,
	Cars_Vehs[4]						,
	Caida_Base[2]						,
	Caida_Seats[12]						,
	Caida_Unused[34]					,
	Cow_Seats[4]						,
	F_ret = -1;

//------------------------------------------------------------------------------------------------------

// Kiegészítések
#include "NMSS_config.pwn"
#include "NMSS_vehicles.pwn"
#include <zcmd2>

stock SendUsage(playerid, format[], va_args<>)
{
    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<2>);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HASZNALAT_"), gs_szKimenet);
	return 1;
}

stock VehName(vehicleid)
{
	static
		s_szRetStr[33],
		iModelID;
	s_szRetStr[0] = EOS;
	if(IsValidModel((iModelID = GetDynamicVehicleModel(vehicleid))))
	{
		strcat(s_szRetStr, g_szVehicleNames[iModelID - 400], 32);
		return s_szRetStr;
	}
	return s_szRetStr;
}

stock GetSpawnName(playerid)
{
	new
	    tmp2[32],
	    spawn = GetPVarInt(playerid, "SpawnLocation"),
	    spawn2 = GetPVarInt(playerid, "SpawnLocation2");
	switch(spawn)
	{
	    case SPAWNPLACE_DEFAULT: tmp2 = "{" #XCOLOR_GOLD "}Alap";
	    case SPAWNPLACE_RANDOM: tmp2 = "{" #XCOLOR_GOLD "}Véletlenszerû";
	   	case SPAWNPLACE_CLAN: tmp2 = "{" #XCOLOR_GREEN "}Klán spawn";
		case SPAWNPLACE_HQ:
		{
			switch(spawn2)
			{
				case 0: tmp2 = "{" #XCOLOR_DARKBLUE "}Vagos HQ";
				case 1: tmp2 = "{" #XCOLOR_BLUE "}Sevile HQ";
			}
		}
		case SPAWNPLACE_BEFORE_DEATH: tmp2 = "{" #XCOLOR_RED "}Halál Elõtti";
		case SPAWNPLACE_SAVED_POSITION: tmp2 = "{" #XCOLOR_GREEN2 "}Mentett Pozíció";
		case SPAWNPLACE_HOUSE: format(tmp2, sizeof(tmp2), "{" #XCOLOR_YELLOW "}Háznál %s", (!spawn) ? ("{" #XCOLOR_GREEN "}( Kint )") : ("{" #XCOLOR_YELLOW "}Háznál {" #XCOLOR_RED "}( Bent )"));

		case SPAWNPLACE_BIZNIS: format(tmp2, sizeof(tmp2), "{" #XCOLOR_YELLOW "}Bizniszn %s", (!spawn) ? ("{" #XCOLOR_GREEN "}( Kint )") : ("{" #XCOLOR_YELLOW "}Háznál {" #XCOLOR_RED "}( Bent )"));

        case SPAWNPLACE_SP:
		{
			format(tmp2, sizeof(tmp2), "Admin pozíció {" #XCOLOR_LIGHTRED "}( %d )", spawn2);
		}

		case SPAWNPLACE_TELEPORT: format(tmp2, sizeof(tmp2), "%s", g_szTeleportCommand[spawn2]);
	}
	return tmp2;
}

stock GetTeleportIDByCMD(teleportcmd[])
{
    new
	    iRet = -1;
    foreach(Teleports, i)
	{
	    if(!strcmp(teleportcmd, g_szTeleportCommand[i], true))
     	{
     	    iRet = i;
     	}
	}
	return iRet;
}

// yyyy.mm.dd hh:mm:ss
new const g_Colors[][eColor] =
{
	{"XCOLOR_GREEN", 			"33FF33"},
	{"XCOLOR_GREEN2", 			"008000"},
	{"XCOLOR_GREEN3", 			"2B7E18"},
	{"XCOLOR_RED", 				"FF0000"},
	{"XCOLOR_YELLOW", 			"CDF917"},
	{"XCOLOR_BLUE", 			"33CCFF"},
	{"XCOLOR_BLUE2", 			"439BED"},
	{"XCOLOR_BLUE3", 			"057CEA"},
	{"XCOLOR_BROWN",            "663300"},
	{"XCOLOR_DARKBLUE",			"2200FE"},
	{"XCOLOR_ORANGE",			"FF9900"},
	{"XCOLOR_BASIC",			"0066FF"},
	{"XCOLOR_LIGHTBLUE",		"00DDFF"},
	{"XCOLOR_GREENYELLOW",		"ADFF2F"},
	{"XCOLOR_PINK",			    "DE18C4"},
	{"XCOLOR_LIGHTPINK", 		"F263DD"},
	{"XCOLOR_LIGHTGREEN",		"00FF7F"},
	{"XCOLOR_PROPGREEN",        "99FF66"},
	{"XCOLOR_LIGHTGREEN2",		"63DF53"},
	{"XCOLOR_LIGHTRED",   		"D41746"},
	{"XCOLOR_GOLD",				"CDF917"},
	{"XCOLOR_WHITE", 			"FFFFFF"},
	{"XCOLOR_DARKGREEN", 		"33AA33"},
	{"XCOLOR_GREY",				"375FFF"},
	{"XCOLOR_PURPLE",			"488FB6"},
	{"XCOLOR_BLACK",   			"000000"},
	{"XCOLOR_DEFAULT", 			"A9C4E4"},
	{"XCOLOR_SAMP", 			"EE5555"},
	{"XCOLOR_LIME", 			"99FF00"},
	{"XCOLOR_KICK",				"17C000"},
	{"XCOLOR_DB",               "5cd624"},
	{"XCOLOR_KACSAFOS",         "d3e836"},
	{"XCOLOR_ORANGERED",        "ff4b14"},
	{"XCOLOR_NORTI",            "00e893"},

	// Defines
	{"SERVER_VERSION",        	SERVER_VERSION},
	{"SERVER_UPDATE",        	SERVER_UPDATE},
	{"WEB_ADDRESS",        		WEB_ADDRESS},

	{"MAX_MYTEXT_CHAR",        	MAX_MYTEXT_CHAR},
	{"MAX_RACE_CP",        		MAX_RACE_CP},
	//{"MAX_GIVECASH",        	MAX_GIVECASH},
	{"MAX_WARNINGS",        	MAX_WARNINGS},
	{"MAX_HOUSES",        		MAX_HOUSES},
	{"MAX_BIZNIS",        		MAX_BIZNIS},
	{"MAX_NUMBER_COUNT",        MAX_NUMBER_COUNT},
	{"MAX_LIMIT",        		MAX_LIMIT},
	{"MIN_LIMIT",        		MIN_LIMIT},
	{"TICKET_PRICE",        	TICKET_PRICE},
	{"TICKET_PRICE_VIP",        TICKET_PRICE_VIP}
};

stock GetGVarStringEx(const varname[], id)
{
	static LANG_str[4096];
	LANG_str[0] = EOS;
	GetGVarString(varname, LANG_str, sizeof(LANG_str), id);
	return LANG_str;
}

stock FindColorByName(string[])
{
	static
		s_szRetStr[33];
    s_szRetStr[0] = EOS;
	for(new i; i != sizeof(g_Colors); i++)
	{
		if(!strcmp(string, g_Colors[i][szColorName]))
  		{
			strcat(s_szRetStr, g_Colors[i][szColor], 32);
			return s_szRetStr;
		}
	}
	return s_szRetStr;
}

stock ConvertColorCodeToColor(string[6144 + 1])
{
    new
        textPos = -1,
        len = strlen(string)
    ;
    while((textPos = strfind(string, "{", false, (textPos + 1))) != -1)
    {
		for(new x = textPos; x != len; x++)
		{
			if(string[x] == '#')
			{
				for(new j = x; j != len; j++)
				{
					if(string[j] == ' ')
					{
						new output[64];
						strmid(output, string, x + 1, j);
						//printf("output: %s", output);
						strdel(string, x - 2, j + 2);

						format(output, sizeof(output), "%s", FindColorByName(output));
						//printf("outpit: %s", output);

						strins(string, output, x - 2);
						break;
					}
				}
				break;
			}
		}
    }
    textPos = -1;
	while((textPos = strfind(string, "\" #", false, (textPos + 1))) != -1)
    {
		//printf("gecifasz: %d", textPos);

		for(new x = textPos + 1; x != len; x++)
		{
			if(string[x] == '\"')
			{
				new output2[64];
				strmid(output2, string, textPos + 3, x - 1);
				strdel(string, textPos, x + 1);
				strins(string, FindColorByName(output2), textPos);

				//printf("output2: %s, %d, %d", output2, textPos, x);
				break;

			}
		}
	}
}
/*
stock ConvertColorCodeToColor(string[])
{
    new
        textPos = -1,
        len = strlen(string),
        i
    ;
    while((textPos = strfind(string, "{", false, (textPos + 1))) != -1)
    {
		for(new x = textPos; x != len; x++)
		{
			if(string[x] == '#')
			{
				for(new j = x; j != len; j++)
				{
					if(string[j] == ' ')
					{
						new output[64];
						strmid(output, string, x + 1, j);
						printf("output: %s", output);
						strdel(string, x - 2, j + 2);

					//format(output, sizeof(output), "%s", FindColorByName(output));
					//	printf("outpit: %s", output);

						strins(string, FindColorByName(output), x - 2);
						break;
					}
				}
				break;
			}
		}
    }
}
*/
stock LoadLang(language[], id)
{
	new path[64], len, bool:bInDialog, textname[64], languagestr[6144+1], szCurrentDialog[128], szTempDialog[6144+1];
	format(path, sizeof(path), "NMSS/lang/%s.txt", language);
	new File:fLang = fopen(path);

	while(fread(fLang, dline, sizeof(dline)))
	{
		if(dline[0] == '/' || dline[0] == '#' || dline[0] == ';' || dline[0] == '\0') continue;

		if(bInDialog)
		{
			new len2 = strlen(dline);
			//printf("dline: ---%s---%c", dline, dline[len - 3]);
			new end = -1;
			for(new x = len2; x != 0; x--)
			{
				if(dline[x] == '×')
				{
					end = x;
					//printf("end megvan");
					break;
				}
			}
			if(end != -1)
            {
				dline[end] = EOS;
				//szTempDialog[strlen(szTempDialog) - 1] = EOS;
                ConvertNewLine(szTempDialog);
                //ConvertColorCodeToColor(dline);
				strcat(szTempDialog, dline);
                strcat(szTempDialog, "\n");

                ConvertColorCodeToColor(szTempDialog);
                SetGVarString(szCurrentDialog, szTempDialog, id);

                //printf("Dialog FINAL: %s---%s\n", szCurrentDialog, szTempDialog);
                szCurrentDialog[0] = EOS;
                szTempDialog[0] = EOS;
                bInDialog = false;
			}
			else
			{
				strcat(szTempDialog, dline);
				//printf("strcat kurvaanyad");
			}
			//printf("dialog: %s", szTempDialog);
		}

		if(!strcmp(dline, "MSG_", true, 4) && !bInDialog)
		{
			sscanf(dline, "p<=>s[64]'\"'s[256]", textname, languagestr);

			// Szóköz törlése a név végérõl
			len = strlen(textname);
			for(new i = len; i != 0; i--)
			{
				if(textname[i] == ' ')
				{
				    textname[i] = EOS;
				    break;
				}
			}

			// Utolsó " jel törlése a szöveg végérõl
			len = strlen(languagestr);
			for(new i = len; i != 0; i--)
			{
				if(languagestr[i] == '\"')
				{
				    languagestr[i] = EOS;
				    break;
				}
			}

			//printf("%s = %s", textname, languagestr);
			ConvertColorCodeToColor(languagestr);
			SetGVarString(textname, languagestr, id);
		}

		if(!strcmp(dline, "DIALOG_", true, 7) && !bInDialog)
		{
			new egyenlopos = strfind(dline, "=", true), count, positions[6], title[64], key1[32], key2[32];
			for(new i = egyenlopos, a = strlen(dline); i != a; i++)
			{
				if(dline[i] == '\"')
				{
		            positions[count] = i;
		            count++;
				}
			}

			strmid(szCurrentDialog, dline, 0, egyenlopos - 1);
			strmid(title, dline, positions[0] + 1, positions[1]);
			strmid(key1, dline, positions[2] + 1, positions[3]);
			strmid(key2, dline, positions[4] + 1, positions[5]);
			//printf("dialog found %s, %s, %s, %s", szCurrentDialog, title, key1, key2);

            format(path, sizeof(path), "%s_TITLE", szCurrentDialog);
            SetGVarString(path, title, id);

            format(path, sizeof(path), "%s_KEY1", szCurrentDialog);
            SetGVarString(path, key1, id);

            format(path, sizeof(path), "%s_KEY2", szCurrentDialog);
            SetGVarString(path, key2, id);

			bInDialog = true;
		}
	}
	//printf("loaded: asdasd");

	//printf("asd: %s", GetGVarStringEx("MSG_FIGYELMEZTETVE_LETTEL_FEGYVER", 0));
	//printf("asd2: %s", GetGVarStringEx("MSG_FIGYELMEZTETVE_LETTEL_FEGYVER", 1));
}

main()
{
	print(!"\n----------------------------------");
	print(!"    Nagy Magyar Stunt Szerver v" #SERVER_VERSION "");
	print(!"         Sikeresen Betöltve!");
	print(!"             Scriptelte:");
	print(!"            kurta999");
	print(!"----------------------------------\n");

	// Anti DeAMX
	new a[][15] =
    { "?", "?" };
    #pragma unused a

	new
		iString;
	#emit load.pri iString
	#emit stor.pri iString
    getdate(year, month, day);
	gettime(hour, minute, second);
	session[startuptime] = mktime(hour, minute, second, day, month, year);
    GetServerVarAsString("version", name, sizeof(name));

	mysql_format(1, query, sizeof(query), "INSERT INTO `serverstarts`(id, time, sversion, version, lastupdate) VALUES(0, '%02d.%02d.%02d %02d:%02d:%02d', '%s', '" #SERVER_VERSION "', '" #SERVER_UPDATE "')", year, month, day, hour, minute, second, name);
	mysql_function_query(1, query, false, "", "");
}

public OnIncomingConnection(playerid, ip_address[], port)
{
    //SendRconCommand("reloadbans");
	return 1;
}

public OnPlayerConnect(playerid)
{
	#if defined YSF
	// Kliensnek RPC küldése - ha válaszol fél másodperc után, akkor van kliense
    SendRPC(playerid, 244, BS_STRING, "anyad");
    #endif

    new
	    bIsNPC = IsPlayerNPC(playerid),
		iIPCount,
		szIP[16],
		Name[24];

	GetPlayerIp(playerid, szIP, sizeof(szIP));
    GetCountryName(szIP, country, sizeof(country));
    GetPlayerName(playerid, Name, sizeof Name);
    
    if(IPCheck(playerid, Name, "N/A")) Kick(playerid);
    
	if(GetGVarType(Name, 0))
	{
   		g_pLang{playerid}                   = GetGVarInt(Name, 0);
   		//SendClientMessagef(playerid,-1,"SetLang %d",g_pLang{playerid});
	}
	else
	{
 		//g_pLang{playerid}                	= LANGUAGE_HU;
 		if(!strcmp(country, "Hungary", true))
		{
			g_pLang{playerid}                	= LANGUAGE_HU;
			//SendClientMessage(playerid,-1,"GeoIP SetLang Hungary");
		}
		else
		{
			g_pLang{playerid}                	= LANGUAGE_EN;
			//SendClientMessage(playerid,-1,"GeoIP SetLang English");
		}
	}
    //SendClientMessagef(playerid,-1,"g_pLang %d | pName: %s",g_pLang{playerid},Name);
	GetPlayerName(playerid, g_szaPlayerNames[playerid], MAX_PLAYER_NAME);
    SSCANF_Join(playerid, pName(playerid), bIsNPC);
    session[connections] ++;
	if(!(g_ServerFlags & e_IPLIMIT))
	{
		/*if(bIsNPC)
		{
			if(strcmp(szIP, "37.221.210.31") != 0)
			{
	           	AntiCheatLog(playerid, "Fake NPC Connection");
				BanEx(playerid, !"Fake NPC Connection");
				return 1;
			}
		}*/
		foreach(new i: Player)
		{
		    if(g_pOtherFlags[i] & e_RAKSAMP) continue;
			GetPlayerIp(i, ip, sizeof(ip));
			if(!strcmp(ip, szIP, true))
			{
				if(++iIPCount > 6)
				{
                    AntiCheatLog(playerid, "IP Flood");
				    BanEx(playerid, !"IP Flood");
	                return 1;
				}
			}
		}
	}
	new
	    i;
	for( ; i != sizeof(g_szTiltottSzavak); i++)
	{
		if(strfind(g_szaPlayerNames[playerid], g_szTiltottSzavak[i], true) != -1)
		{
			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO"), g_szTiltottSzavak[i]);
            KickEx(playerid, "nem engedélyezett rész", 4500);
            return 1;
		}
	}
	PlayerInfo[playerid][pRegID] 			= -1;
	PlayerInfo[playerid][fRegID] 			= -1;
	PlayerInfo[playerid][pTotalSeconds] 	= 0;
	PlayerInfo[playerid][pLastActive] 		= GetTickCount();
	PlayerInfo[playerid][pAFKTime]          = 0;
	g_pDrunkLevelLast[playerid]   			= 0;
	g_pFPS[playerid]          				= 0;
	g_pAVG_FPS[playerid]                    = 30;
	g_pAVG_Ping[playerid]                   = 50;
	PlayerInfo[playerid][p3DText] 			= Text3D:INVALID_3DTEXT_ID;
	PlayerInfo[playerid][pStuntTick]		= 0;
	PlayerInfo[playerid][pMSGCount]         = 0;
	PlayerInfo[playerid][P_StyleStage]      = 0;
	PlayerInfo[playerid][P_StyleTick]		= -1;
	PlayerInfo[playerid][P_GlassesCount]	= -1;
	PlayerInfo[playerid][P_WatchesCount]	= -1;
	PlayerInfo[playerid][P_WeaponsCount]	= -1;
	PlayerInfo[playerid][P_OthersCount]		= -1;
	PlayerInfo[playerid][P_HatsCount]		= -1;
	g_pRobCount{playerid}                   = 0;
	g_pInCPCount{playerid}                  = 0;
	g_pInRegTick{playerid}                 	= 0;
	g_pJumpID{playerid}                     = 0xFF;
	g_pSprayCount{playerid}                 = 0xFF;
	g_pShots[playerid] 						= 0;
	g_pKillFlood{playerid}                  = 0;
	g_pDeathFlood{playerid}                 = 0;
    g_pGangwarTeam[playerid]                = 0xF;
    g_pBounty[playerid]                     = 0;
    g_pDMInfo[playerid] = {4, 1, 0, 5, 14, 20, 16, 29, 27, 18, 15};
    g_pCarFlyValue[playerid]                = 1.2;
    g_pFPSPosition{playerid}                = 0;
    g_FakeKillKick{playerid}				= 0;
    g_DisallowedBulletSync{playerid}        = 0;
    g_pPingPosition{playerid}               = 0;
    g_pLastActiveTick[playerid]             = GetTickCount();
	g_pLastVehicleEnterTick[playerid]       = 0;
    g_ClientVersion[playerid]               = 0;
    g_pGodEnableTick[playerid]              = 0;
    g_pGMT{playerid}                        = 1;
    g_pVIP[playerid]                        = 0;
    g_pRaceRecords[playerid]                = 0;
    spectatorid[playerid]                   = INVALID_PLAYER_ID;
    BuildRaceID[playerid]                   = -1;
    BuildRaceCPSize[playerid]               = -1;
 	BuildRaceType[playerid]                 = -1;
 	BuildRaceClearWorld[playerid]           = -1;
 	BuildRaceAutoFix[playerid]				= -1;
	BuildRaceGhostMode[playerid]			= -1;


	// Játékos Statisztika
    SetPVarInt(playerid, "AutoRepair", 3);
	SetPVarInt(playerid, "pCar", INVALID_VEHICLE_ID);
	SetPVarInt(playerid, "pCar2", INVALID_VEHICLE_ID);
	SetPVarFloat(playerid, "SpinX", 0.0);
	SetPVarFloat(playerid, "SpinY", 0.0);
	SetPVarFloat(playerid, "SpinZ", 0.15);
	SetPVarInt(playerid, "FavCarColor_1", -1);
	SetPVarInt(playerid, "FavCarColor_2", -1);
	SetPVarInt(playerid, "CurrentCP", -1);
	SetPVarFloat(playerid, "VehicleboostValue", 1.2);
	SetPVarFloat(playerid, "VehicleHopping", 0.2);
	SetPVarInt(playerid, "SpeedBoostKey", KEY_FIRE);
	SetPVarInt(playerid, "VehicleHoppingKey", KEY_CROUCH);
	SetPVarInt(playerid, "FlipKey", KEY_ANALOG_LEFT);
	SetPVarInt(playerid, "TeleportMenuKey", KEY_YES);
	SetPVarInt(playerid, "CarFlyKey", KEY_ACTION );
	SetPVarInt(playerid, "FlyKey", KEY_CROUCH);
    //SetPVarInt(playerid, "LaserPointer", Lasers[random(sizeof(Lasers))]);
    SetPVarInt(playerid, "ChatColor", COLOR_WHITE);
    SetPVarInt(playerid, "NOS", 3);
	SetPVarInt(playerid, "FavWheel", 0);
    SetPVarInt(playerid, "DuelPlayer", INVALID_PLAYER_ID);
    SetPVarInt(playerid, "CDuelPlayer", INVALID_PLAYER_ID);
    SetPVarInt(playerid, "EXPLOSION_Type", 1);
    SetPVarFloat(playerid, "EXPLOSION_Type", 10);
	SetPVarInt(playerid, "ClanZone", -1);
	SetPVarInt(playerid, "VIPColor", -1);
		
	g_pClan{playerid} = 0xFF;
	g_pClanRank{playerid} = 0;
    g_pClanCreateState{playerid} = 0xFF;
    g_LastRaceStartTick[playerid] = 0;
    
    g_pNoClipObject[playerid] = INVALID_OBJECT_ID;

    for(i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
    	g_HoldingObject[playerid][i] = -1;
	}

    // DeathMatch (DM)
	g_pDMID[playerid] = -1;
	g_pDMCreation[playerid] = -1;
	g_pDeathMatchID[playerid] = -1;
	g_pDeathMatchTeam[playerid] = -1;

    // Póstás változók törlése
    ResetPostasVars(playerid);

    PlayerInfo[playerid][pRegYear] = -1;
    PlayerInfo[playerid][pRegMonth] = -1;
	PlayerInfo[playerid][pRegDay] = -1;
	PlayerInfo[playerid][pRegHour] = -1;
	PlayerInfo[playerid][pRegMinute] = -1;
	PlayerInfo[playerid][pRegSecond] = -1;
    PlayerInfo[playerid][pLastYear] = -1;
    PlayerInfo[playerid][pLastMonth] = -1;
	PlayerInfo[playerid][pLastDay] = -1;
	PlayerInfo[playerid][pLastHour] = -1;
	PlayerInfo[playerid][pLastMinute] = -1;
	PlayerInfo[playerid][pLastSecond] = -1;

	Bit_SetAll(g_pPhotos[playerid], false);
	Bit_SetAll(g_pHorseshoes[playerid], false);
	Bit_SetAll(g_pOysters[playerid], false);
	Bit_SetAll(g_pJumps[playerid], false);
	Bit_SetAll(g_pTags[playerid], false);
	Bit_SetAll(g_pIgnoreList[playerid], false);
	Bit_SetAll(g_pChatIgnoreList[playerid], false);

	Bit_SetAll(gPlayerShotPlayer[playerid], false);
	Bit_SetAll(gPlayerStatsTDs[playerid], false);
	for(i = 0; i != sizeof(g_pStatsRow[]); i++)
	{
        g_pStatsRow[playerid][i] = 0;
	}

	g_pDriveByWarn{playerid}                = 0;
	g_pSzint{playerid}                      = 1;
	g_pJumpTick[playerid]                   = 0;
	g_pDebug{playerid}                      = 0;
    SetPlayerScore(playerid, 1);
    SetPVarInt(playerid, "ZoneAttacked", INVALID_GANG_ZONE);
	SetPVarInt(playerid, "ConTick", GetTickCount());

    g_pDuelCaller[playerid] = INVALID_PLAYER_ID;
    g_pDuelPlayer[playerid] = INVALID_PLAYER_ID;
    g_pDuelLocation{playerid} = 0xFF;
    g_pDuelID{playerid} = 0xFF;

    g_pKijelzoTimer[playerid]               = 0;
	g_pKijelzoText[playerid] 				= "~b~~h~NULL";

	// Játékos bitek beállítása alapértékre
	g_PlayerFlags[playerid] = DEFAULT_PLAYER_FLAGS;
	g_PlayerFlags2[playerid] = DEFAULT_PLAYER_FLAGS2;
	g_PlayerData[playerid] = e_PlayerData:0;
    g_pOtherFlags[playerid] = e_pOtherFlags:0;
    g_pGamesData[playerid] = e_GamesData:0;
    g_pTDFlags[playerid] = e_TD_Flags:0;

    g_pSelectTDFlags[playerid] = e_pTDFlags:0;
    if(g_ConsolePlayer == playerid) g_ConsolePlayer = -1;

    for(i = 0; i != sizeof(g_pWeaponShots[]); i++)
    {
        g_pWeaponShots[playerid][i] = 0;
	}
	for(i = 0; i != PING_MAX_EXCEEDS; i++)
	{
		PlayerInfo[playerid][pPing][i] = 0;
		g_pMinigameJoins[playerid][i] = 0;
	}
	for(i = 0; i != FPS_MAX_EXCEEDS; i++)
	{
		PlayerInfo[playerid][pLekertFPS][i] = 0;
	}

	for(i = 0; i != sizeof(g_pKijelzoCount[]); i++)
	{
		g_pKijelzoCount[playerid][i] = 0;
	}
	for(i = 0; i != MAX_STUNTS; i++)
	{
        g_pSC_StuntCount[playerid][i] = 0;
		g_pSC_Count[playerid]{i} = 0;
	}

	for(i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
        g_pSavedObject[playerid][i] = 0;
	}
	for(i = 0; i != 30; i++)
	{
        g_pRaktar[playerid][i] = 0;
	}
	for(i = 0; i != 13; i++)
	{
		g_pWeaponSlot[playerid][i] = 0;
		g_pWeaponAmmo[playerid][i] = 0;
        g_pDuelWeapon[playerid]{i} = 0xFF;
	}
	for(i = 0; i != 11; i++)
	{
        g_pWeaponSkill[playerid][i] = 999;
	}
	for(i = 0; i != MAX_VEH_OBJECT; i++)
	{
        gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
        gPlayerVehicleObjectID[playerid][i] = 0;
	}
/*
	for(i = 0; i != MAX_PLAYERS; i++)
	{
 		g_pHealthObject[playerid][i] = INVALID_OBJECT_ID;
	}
*/
	InfoTD_MSG(playerid, 10000, LANG(playerid, "MSG_RBEHTOHLTHESRWG"));
	//ShowKezdoTextdraws(playerid);
    g_pQueryQueue[playerid]++;

    #if defined YSF
    SetPlayerGravity(playerid, 0.008);
    #endif

    if(!bIsNPC)
    {
		mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `pass`, `color`, `flags` FROM `players` WHERE `name` = '%s'", pName(playerid));
		mysql_function_query(1, query, true, "THREAD_OnPlayerConnect", "dd", playerid, g_pQueryQueue[playerid]);
	}
	else
	{
        #if defined YSF
		// Itt nem lehet meghívni a SetMaxPlayers-t mert NPC: Bad player id-t fogunk kapni a konzolba
		if(g_iMaxPlayerSetTimer == -1)
			SetTimer("SetMaxPlayers_AfterConnect", 1000, false);
		#endif
	}
	return 1;
}
#if defined YSF
forward SetMaxPlayers_AfterConnect();
public SetMaxPlayers_AfterConnect()
{
	// Max slotok 60ra állítása
	new
	    value;

	for(new i; i != MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerNPC(i))
		    value++;
	}

	//SetMaxPlayers(60 + value);
	g_iMaxPlayerSetTimer = -1;
}
#endif

forward SerialBan_MSG(playerid, serialid, playername[]);
public SerialBan_MSG(playerid, serialid, playername[])
{
	GetGVarString("SerialBan", i_str, 50, serialid);
	GetGVarString("SerialComment", country, 42, serialid);
	GetGVarString("SBanName", name, sizeof(name), playerid);

    format(tmp, 144, "SerialBan (%s) -> %s(%d) [%s]", i_str, name, playerid, country);
	foreach(Player, i)
	{
		if(GetPVarInt(i, "Level") > 0 || IsPlayerAdmin(i))
		{
			SendClientMessage(i, COLOR_WHITE, tmp);
		}
	}
	DeleteGVar("SBanName", playerid);
}

forward THREAD_OnPlayerConnect(playerid, queue);
public THREAD_OnPlayerConnect(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_OnPlayerConnect);

	new
	    iRegID,
	    color,
	    szSerial[64];
	if(cache_get_row_count())
	{
	    cache_get_row_int(0, 0, iRegID);
		cache_get_row(0, 1, name); SetPVarString(playerid, "Pass", name);
	    if((color = cache_get_row_int_ex(0, 2))) SetPlayerColor(playerid, color);
	 	SetPVarInt(playerid, "pFlags", cache_get_row_int_ex(0, 3));
	}
	else
	{
		iRegID = 0;
	}
	SetPVarInt(playerid, "LineID", iRegID);

	//printf("iRegID: %d", iRegID);
	gpci(playerid, szSerial, sizeof(szSerial));

	// Ha van serial ban, akkor végigfutunk rajtuk..
	if(g_iMaxSerialBan)
	{
		for(new i; i != g_iMaxSerialBan; i++)
		{
			GetGVarString("SerialBan", i_str, sizeof(i_str), i);
			if(!strcmp(szSerial, i_str, true) && szSerial[0] && i_str[0])
			{
			    if(iRegID == 16484 || iRegID == 72) continue; //Serialban kivételek.. Ben, Raynor
				GetGVarString("SerialComment", country, sizeof(country), i);
				SetGVarString("SBanName", pName(playerid), playerid); // SetTimerEx-ben nem mûködik az "s", ennek a javítására szükséges

				SetTimerEx("SerialBan_MSG", 3000, false, "dd", playerid, i);
				format(tmp, 128, "SerialBan (%s) -> %s", i_str, country);
				print(tmp);

				GetPlayerIp(playerid, ip, sizeof(ip));
                BlockIpAddress(ip, 0);
                Kick(playerid);
				return 1;
			}
		}
	}

	// http://www.mfrserverom.com/SAMP/She_Makes_Me_Go.mp3
	// http://www.mfrserver.com/SAMP/Eminem_Survival.mp3
	PlayAudioStreamForPlayer(playerid, !"http://mfrserver.net/up/music/SCARCITYBP-INTRO.mp3");

    PreloadAnimLib(playerid, "DANCING");
    PreloadAnimLib(playerid, "BOMBER");
    PreloadAnimLib(playerid, "RAPPING");
    PreloadAnimLib(playerid, "SHOP");
    PreloadAnimLib(playerid, "BEACH");
    PreloadAnimLib(playerid, "SMOKING");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "ON_LOOKERS");
    PreloadAnimLib(playerid, "DEALER");
    PreloadAnimLib(playerid, "CRACK");
    PreloadAnimLib(playerid, "CARRY");
    PreloadAnimLib(playerid, "COP_AMBIENT");
    PreloadAnimLib(playerid, "PARK");
    PreloadAnimLib(playerid, "INT_HOUSE");
    PreloadAnimLib(playerid, "FOOD");
    PreloadAnimLib(playerid, "PED");
    PreloadAnimLib(playerid, "HEIST9");

	ApplyAnimation(playerid, "DANCING", RandAnims[random(sizeof(RandAnims))], 4.0, 1, 1, 1, 1, -1);
	EnableStuntBonusForPlayer(playerid, true);
    EnablePlayerCameraTarget(playerid, true);

	// Egyéb dolgok NEWS:
	SendClientMessage(playerid, 0x48DF44FF, LANG(playerid, "MSG_UDVOZOLLEK_A_MAXXIMUM_FREEROAMON"));
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JATEK_ELOTT_OLVASD_EL_A_HELPET"));
	SendClientMessage(playerid, COLOR_DARKBLUE, LANG(playerid, "MSG_FRISSITESEKROL_ES_A_SZERVERROL"));
	//SendClientMessage(playerid, 0xFFAA00FF, "HUD kikapcsolási lehetõség - /allowhud (csak akkor mûködik hogyha beállításokba a widescreen be van kapcsolva)");
	//SendClientMessage(playerid, 0x17C000AA, "AntiDB továbbfejlesztve. Mostantól nem látod ha más lõ a jármûvel");
	SendClientMessage(playerid, 0x0FF0FFAA, LANG(playerid, "MSG_CONNECTMSG_1"));
	SendClientMessage(playerid, 0x5fd624AA, LANG(playerid, "MSG_CONNECTMSG_2"));
	SendClientMessage(playerid, 0x5fd624AA, LANG(playerid, "MSG_CONNECTMSG_3"));
	
	
	
	//SendClientMessage(playerid, 0xFFFF00FF, "3.9.9: Portal lehetõség, ami segítségével könyebbé válik a teleportálás. Használhatáshoz /portal, és kövesd az utasításokat.");
	//SendClientMessage(playerid, 0xFFAA00FF, "/fpsmod - Teszt verzió!");
//	SendClientMessage(playerid, 0x17C000AA, LANG(playerid, "MSG_BOLDOG_KARACSONYT_AJANDEKHELP"));




	GetPlayerIp(playerid, ip, sizeof(ip));
	if(!strcmp(ip, "255.255.255.255", true))
	{
		KickEx(playerid, "255.255.255.255");
        return 1;
	}
	getdate(year, month, day);
	gettime(hour, minute, second);

    RemoveBuildings(playerid);
    CreatePlayerObjects(playerid);
    CreateTextDraws(playerid);

	new
	    szVersion[24];
    GetPlayerVersion(playerid, szVersion, sizeof(szVersion));

	// Ha nem ad vissza országot, akkor az ország = N/A
	if(!GetCountryName(ip, country, sizeof(country))) country = "N/A";

	// Rekord játékosok utánn ellenõrzés
	if(ServerInfo[CurrPlayers] < Iter_Count(Player))
	{
		ServerInfo[CurrPlayers] = Iter_Count(Player);
		session[curr_maxplayers_time] = CurrentTimestamp();

		if(ServerInfo[RecordPlayers] < Iter_Count(Player) && ServerInfo[RecordPlayers] != 0) // Ha nulla, akkor valószínûleg még nem töltötte be a beállításokat
		{
		    ServerInfo[RecordPlayers] = Iter_Count(Player);
			mysql_format(1, query, sizeof(query), "UPDATE `config` SET `recordplayers` = %d WHERE `id` = 1", Iter_Count(Player));
		    mysql_function_query(1, query, false, "", "");
			SendClientMessageToAllf(COLOR_PROPGREEN, "MSG__UJ_JATEKOS_REKORD__A_JATEKOS", Iter_Count(Player) - 1, Iter_Count(Player));
		}
	}
	
    if(!GetCityLongitude(ip, V[0]))
		V[0] = 0xFF;
    else
        V[0] = floatround(V[0] / 15.0);

	mysql_format(1, query, sizeof(query), "INSERT INTO `connections`(id, name, reg_id, ip, serial, country, gmt, version, playercount, time) VALUES(0, '%s', %d, '%s', '%s', '%s', %d, '%s', %d, '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), (!iRegID) ? (-1) : (iRegID), ip, szSerial, country, V[0], szVersion, Iter_Count(Player), year, month, day, hour, minute, second);
	mysql_function_query(1, query, true, "THREAD_GetConnectionID", "dd", playerid, g_pQueryQueue[playerid]);

	if(country[1] != '/') // Ha sikeresen lekérte a játékos országát
	{
		// Anonymous Proxy nem engedélyezett
		if(!strcmp(country, "Anonymous Proxy", true))
		{
			KickEx(playerid, "Anonymous Proxy");
	        return 1;
		}
	}

	// BanCheck
	if(iRegID)
	{
		mysql_format(1, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%s' OR `player` = '%s' OR `reg_id` = %d", ip, pName(playerid), iRegID);
	}
	else
	{
        mysql_format(1, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%s' OR `player` = '%s'", ip, pName(playerid));
	}
	mysql_function_query(1, query, true, "THREAD_CheckBan", "dsssd", playerid, ip, country, szVersion, g_pQueryQueue[playerid]);
	//printf("OnPlayerConnect(playerid = %s(%d)) <END>", pName(playerid), playerid);
	return 1;
}

forward THREAD_CheckBan(playerid, ipadress[], orszag[], version[], queue);
public THREAD_CheckBan(playerid, ipadress[], orszag[], version[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CheckBan);
//	printf("THREAD_CheckBan(playerid = %d)", playerid);

	//id 	player 	reg_id 	admin 	admin_id 	ip 	serial 	reason 	time 	unban_time
	// print("Not logged in, send the query");
	if(cache_get_row_count())
	{
        // print("If nun rows is 0");
		new
		    ban_time,
		    ban_id,
		    playerip[16],
		    bool:bElfogadva,
		    bool:bShowAdmin;
		cache_get_row_int(0, 0, ban_id);
		cache_get_row_int(0, 2, vID);
		cache_get_row(0, 3, country);
		cache_get_row_int(0, 4, player1);
		cache_get_row(0, 5, playerip);
		cache_get_row(0, 7, query);
		cache_get_row(0, 8, tmp);
		cache_get_row_int(0, 9, ban_time);
		bShowAdmin = !!cache_get_row_int_ex(0, 10);
		cache_get_row(0, 1, name);

        date(ban_time, day, month, year, hour, minute, second);
		if(ban_time != 0)
		{
            if(ban_time < CurrentTimestamp())
            {
                SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_IDEJE_LETELT_UNBANNOLVA"));
				bElfogadva = true;

				mysql_format(1, query, sizeof(query), "DELETE FROM `bans` WHERE `id` = %d", ban_id);
				mysql_function_query(1, query, false, "", "");
			}
		}
		if(!bElfogadva)
		{
		    /*
		    dline[0] = EOS;
			i_str[0] = EOS;
		    strcat(dline, "{FFFFFF}Bannolva vagy a szerverröl!\n\n");

			format(i_str, sizeof(i_str), "{FFFFFF}Felhasználó név: {FF0000}%s(%d)\n", name, vID);
   			strcat(dline, i_str);

            format(i_str, sizeof(i_str), "{FFFFFF}BanID: {FF0000}%d\n", ban_id);
   			strcat(dline, i_str);

			format(i_str, sizeof(i_str), "{FFFFFF}IP: {FF0000}%s\n", playerip);
			strcat(dline, i_str);

            if(bShowAdmin) format(i_str, sizeof(i_str), "{FFFFFF}Admin: {FF0000}%s(%d)\n", country, player1);
			else format(i_str, sizeof(i_str), "{FFFFFF}Admin: {FF0000}Rejtett\n");
			strcat(dline, i_str);

			format(i_str, sizeof(i_str), "{FFFFFF}Indok: {FF0000}%s\n", query);
   			strcat(dline, i_str);

			format(i_str, sizeof(i_str), "{FFFFFF}Idõpont: {FF0000}%s\n", tmp);
   			strcat(dline, i_str);

		    strcat(dline, "\n{FFFFFF}Ha a bant jogtalannak érzed, akkor nyiss egy unban kérelmet.\n");
      		strcat(dline, "Csinálj egy print screent erröl az üzenetröl (F8)!");
		    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Baninfo", dline, "Bezárás");
		    */

			for(new i; i != 20; i++) SendClientMessage(playerid, COLOR_YELLOW, " ");
			if(bShowAdmin)
			{
				SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__BANNOLT__REGID__BAN"), country, player1, ban_id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__BANNOLT_NA"));
			}
			SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__INDOK_"), query);
			SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__IDOPONT_"), tmp);
			if(!ban_time)
			{
				SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__BAN_FELOLDASA_SOHA_KIVEV"));
			}
			else
			{
				SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__BAN_FELOLDASA_2D2D"), year, month, day, hour, minute, second);
			}
			SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__BAN__UNBAN_KERELEM__WEB_ADDR"));

			format(tmp, 144, ":: {" #XCOLOR_DEFAULT "}BAN :: {" #XCOLOR_YELLOW "}%s(%d) {" #XCOLOR_WHITE "}kickelve lett, mivel bannolva van a szerverrõl! (BanID: %d)", pName(playerid), playerid, ban_id);
			foreach(new i: Player)
			{
				if(GetPVarInt(i, "Level") > 0 || IsPlayerAdmin(i))
				{
					SendClientMessage(i, COLOR_WHITE, tmp);
				}
			}
	        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHEZ_A_FELHASZNALONEV_BANNOLVA"));

			KickEx(playerid, "Banned - serverside");
	        return 1;
		}
	}
	else
	{
        if(e_PlayerFlags:GetPVarInt(playerid, "pFlags") & e_AUTOLOGIN)
        {
			new
			    szSerial[64];
			gpci(playerid, szSerial, sizeof(szSerial));

			printf("autologin on: %s", szSerial);
			mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%s' AND (`ip` = '%s' OR `serial` = '%s')", pName(playerid), ipadress, szSerial);
		}
		else
		{
			mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%s' AND `ip` = '%s'", pName(playerid), ipadress);
		}

        mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%s' AND `ip` = '%s'", pName(playerid), ipadress);
		mysql_function_query(1, query, true, "THREAD_Autologin", "dd", playerid, g_pQueryQueue[playerid]);
	}

	SetPVarString(playerid, "Orszag", orszag);
	SetPVarInt(playerid, "ConnectTimer", SetTimerEx("THREAD_ConnectMSG", 500, false, "dd", playerid, GetPVarInt(playerid, "LineID")));
	return 1;
}

#if defined YSF
forward OnMFRClientConnect(playerid, version, versionstr[]);
public OnMFRClientConnect(playerid, version, versionstr[])
{
//	printf("GM - OnMFRClientConnect %d - %s (%x)", playerid, versionstr, version);

	// Kliens beállítása
	g_pOtherFlags[playerid] |= e_HAVE_CLIENT;
	g_ClientVersion[playerid] = version;

	// Gépadatok frissítése
    SendRPC(playerid, 240, BS_INT, playerid);

	// Ha csatlakozott a kliensel és a csatlakozási üzentet még nem küldtük el akkor megszakítjuk a timert és elküldjük az üzenetet
	if(GetPVarType(playerid, "ConnectTimer"))
	{
		KillTimer(GetPVarInt(playerid, "ConnectTimer"));
	    THREAD_ConnectMSG(playerid, GetPVarInt(playerid, "LineID"));
	}

	PlayerTextDrawSetPos(playerid, TD_pArmour[playerid], 566.000000, 48.20000);
	PlayerTextDrawSetPos(playerid, TD_pHealth[playerid], 541.000000, 77.000000);

	UpdateConnectionTable(playerid);
	return 1;
}

forward OnPlayerChatStateChange(playerid, chatstate);
public OnPlayerChatStateChange(playerid, chatstate)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	if(chatstate)
	{
		SetPlayerChatBubble(playerid, 0xff4b14AA, 20.0, 3000, "MSG_CHATBUBBLE_WRITING");
	}
	return 1;
}

stock UpdateConnectionTable(playerid)
{
	if(!(g_pOtherFlags[playerid] & e_CLIENT_CHECKED) && IsClient(playerid))
	{
        mysql_format(1, query, sizeof(query), "UPDATE `connections` SET `clientversion` = '%e', `clientversion_x` = %d WHERE `id` = %d", GetClientVersion(playerid), g_ClientVersion[playerid], GetPVarInt(playerid, "ConnectID"));
		mysql_function_query(1, query, true, "THREAD_Autologin", "dd", playerid, g_pQueryQueue[playerid]);

		g_pOtherFlags[playerid] |= e_CLIENT_CHECKED;
	}
}

forward THREAD_GetConnectionID(playerid, queue);
public THREAD_GetConnectionID(playerid, queue)
{
	//printf("THREAD_GetConnectionID");
	//if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_GetConnectionID);

	SetPVarInt(playerid, "ConnectID", cache_insert_id());
	//printf("ConnectID: %d", GetPVarInt(playerid, "ConnectID"));

	UpdateConnectionTable(playerid);
	return 1;
}

stock GetPlayerClientVersion(playerid)
{
	new
		asd = g_ClientVersion[playerid],//0x043,
		ret[16];
	if(!(asd & 0xF)) // Ha az utolsó tag üres, akkor csak az elsõ kettõt írjuk ki. 0.4, 0.3
	{
		format(ret, sizeof(ret), "%d.%d", asd >> 8 & 0xF, asd >> 4 & 0xF);
	}
	else // 0.3.5, 0.4.1
	{
		format(ret, sizeof(ret), "%d.%d.%d", asd >> 8 & 0xF, asd >> 4 & 0xF, asd & 0xF);
	}
	return ret;
}

CMD:client(playerid, params[], 0, 0)
{
	new
	    count;
	dline[0] = EOS;
	foreach(Player, i)
	{
		if(IsClient(i))
		{
			format(i_str, 64, "{%06x}%s(%d) - v{00FF00}%s\n", GetPlayerColor(i) >>> 8, pName(i), i, GetPlayerClientVersion(i));
			strcat(dline, i_str);
			count++;
		}
	}
	if(!count) format(dline, 128, "Nincs egy klienst használó játékos sem.");
	format(i_str, 64, "Klienset használó játékosok - %d", count);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, i_str, dline, "Oké");
	return 1;
}
#endif

forward THREAD_ConnectMSG(playerid, lineid);
public THREAD_ConnectMSG(playerid, lineid)
{
	// Ha valamilyen oknál fogva megvátozott a regid-je akkor már nem õ van fönt. Futás megszakítása
	if(GetPVarInt(playerid, "LineID") != lineid) return 1;

	new
	    szFormat[2][145],
	    orszag[45],
	    version[16],
	    contype;
	GetPVarString(playerid, "Orszag", orszag, sizeof(orszag));
	GetPlayerIp(playerid, ip, sizeof(ip));
	#if defined YSF
	if(IsClient(playerid))
	{
		contype = 2;
		strcpy(version, GetClientVersion(playerid));
	}
	else
	{
	    contype = 1;
		GetPlayerVersion(playerid, version, sizeof(version));
	}
	#else
	contype = 1;
	GetPlayerVersion(playerid, version, sizeof(version));
	#endif

	// Ha nem RakSamp
	if(strcmp(version, RAKSAMP_VERSION) != 0)
	{
		format(name, sizeof(name), "MSG_JOIN_TYPE_%d", contype);
		if(!GetCityLongitude(ip, V[0]))
	    {
			format(szFormat[0], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_1", 0), pName(playerid), playerid, GetGVarStringEx(name, 0), orszag, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
			format(szFormat[1], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_1", 1), pName(playerid), playerid, GetGVarStringEx(name, 1), orszag, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
		}
		else
		{
            g_pGMT{playerid} = floatround(V[0] / 15.0);
			if(!IsNegative(V[0]))
			{
				format(szFormat[0], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_2", 0), pName(playerid), playerid, GetGVarStringEx(name, 0), orszag, g_pGMT{playerid}, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
				format(szFormat[1], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_2", 1), pName(playerid), playerid, GetGVarStringEx(name, 1), orszag, g_pGMT{playerid}, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));

			}
			else
			{
				format(szFormat[0], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_3", 0), pName(playerid), playerid, GetGVarStringEx(name, 0), orszag, g_pGMT{playerid}, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
				format(szFormat[1], sizeof(szFormat[]), GetGVarStringEx("MSG_JOIN_3", 0), pName(playerid), playerid, GetGVarStringEx(name, 1), orszag, g_pGMT{playerid}, version, Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
			}
		}

	/*
		format(tmp, 192, "[%d] %s", playerid, szFormat);
		IRC_GroupSay(groupID, IRC_CHANNEL, tmp);
	*/
		//print(szFormat);

		format(name, sizeof(name), "%s(%d)", pName(playerid), playerid);
		SetPlayerName(playerid, name, false);

		// Ha kapcsolódási üzenet engedélyezve van
		if(e_PlayerFlags:GetPVarInt(playerid, "pFlags") & e_CON_MSG || !GetPVarInt(playerid, "LineID"))
		{
	        //SendDeathMessage(INVALID_PLAYER_ID, playerid, 200);

			// Ha van YSF, akkor a halál üzenetet elküldjük mindenkinek, kivéve annak aki feljött
			foreach(Player, i)
			{
				if(i == playerid) continue;
                SendClientMessage(i, COLOR_LIGHTBLUE, szFormat[g_pLang{i}]);
				SendDeathMessageToPlayer(i, INVALID_PLAYER_ID, playerid, 200);
	  		}
		}
		else
		{
			foreach(Player, i)
			{
				// Akiknek be van kapcoslva a rejtett játékosok láthatósága
				if(i == playerid) continue;
				if(IsOwner(i)) continue;
				if(g_PlayerFlags[i] & e_SHOW_HIDED_CON_MSG)
				{
					SendClientMessage(i, COLOR_LIGHTBLUE, szFormat[g_pLang{i}]);
					SendDeathMessageToPlayer(i, INVALID_PLAYER_ID, playerid, 200);
				}
			}
			/*
			#if defined YSF
			TogglePlayerOnPlayerList(playerid, false);
			#endif
			*/
		}
		SetPlayerName(playerid, pName(playerid), false);
	}
	else
	{
		// Raksamp verziójának rendes verzióra állítása
		SetPlayerVersion(playerid, FAKECLIENT_VERSION);

		// Bot!
		AddRakSamp(playerid);
	}

	DeletePVar(playerid, "pFlags");
	DeletePVar(playerid, "Orszag");
	DeletePVar(playerid, "ConnectTimer");
	return 1;
}

stock GetRankName_TD(playerid, rank)
{
	new asd[32], ret[128];
	format(asd, sizeof(asd), "MSG_INFOTD_RANK_%d", rank);
	GetGVarString(asd, ret, sizeof(ret), g_pLang{playerid});
	return ret;
}

forward THREAD_Autologin(playerid, queue);
public THREAD_Autologin(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Autologin);
//	printf("THREAD_Autologin(playerid = %d)", playerid);

	new
	    rows = cache_get_row_count();
	if(rows == 1)
	{
		ShowPlayerDialogEx(playerid, -1, 0, "a", "a", "a");
		LoginPlayer(playerid);
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHAUTOMATIKUSAN_HBEJELENTKEZTE"), GetRankName_TD(playerid, GetPVarInt(playerid, "Level")));
	}
	else if(rows > 1)
	{
		for(new i; i != 10; i++) SendClientMessage(playerid, -1, " ");
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_PROBLEMA_LEPETT_FEL_A_FELHASZNALODDA"));
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_UGYBEN_IRJ_A_FORUMRA_ES"));
		KickEx(playerid, "rows > 1");
		return 1;
	}
    g_PlayerData[playerid] |= e_THREADS_DONE;
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	#if defined YSF
	#endif
    SSCANF_Leave(playerid);
//    Audio_RemovePlayer(playerid);
    g_pQueryQueue[playerid]++;

	if(!IsPlayerNPC(playerid))
	{
		SavePlayer(playerid, true);
		// Ha valaki lefuttatta a /saveplayers parancsot és közben kilép egy játékos, akkor az ottani játékosok listáról is törüljük
    	if(gSavePlayerRuns) gSavePlayerCount--;

        if(g_PlayerFlags[playerid] & e_CON_MSG)
        {
			if(!(g_pOtherFlags[playerid] & e_RAKSAMP))
			{
				switch(reason)
				{
					case 0: SendClientMessageToAllf(COLOR_DARKGREEN, "MSG___KILEPETT_A_SZERVERROL_KI", pName(playerid), playerid, Iter_Count(Player) - 1, (GetMaxPlayers() - Iter_Count(Bot)));
					case 1: SendClientMessageToAllf(COLOR_DARKGREEN, "MSG___KILEPETT_A_SZERVERROL_KI_1", pName(playerid), playerid, Iter_Count(Player) - 1, (GetMaxPlayers() - Iter_Count(Bot)));
				}

				format(name, sizeof(name), "%s(%d)", pName(playerid), playerid);
				SetPlayerName(playerid, name, false);

				SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
				SetPlayerName(playerid, pName(playerid), false);
			}
		}

		new
		    duelid = g_pDuelID{playerid};
		if(duelid != 0xFF)
		{
			new
			    leave;
			if(g_pDuelCaller[playerid] == INVALID_PLAYER_ID)
			{
				leave = 0;
			}
			else leave = 1;

			SendClientMessageToAllf(-1, "MSG_DUEL___ES__KOZOTT_VEGET", pName(g_DuelPlayer[duelid][leave]), g_DuelPlayer[duelid][leave], pName(g_DuelPlayer[duelid][!leave]), g_DuelPlayer[duelid][!leave], pName(g_DuelPlayer[duelid][leave]), g_DuelPlayer[duelid][leave]);
	        ExitDuel(duelid);
		}

		if(g_PlayerData[playerid] & e_RECONNECT)
		{
			GetPVarString(playerid, "pIP", ip, sizeof(ip));
			SendRconCommandf("unbanip %s", ip);
			SendRconCommand("reloadbans");
		}
        EndFlash(playerid);

		new
			i;
		for( ; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
	        RemovePlayerAttachedObject(playerid, i);
		}

        CarDeleter(playerid);

	    if(GetPVarType(playerid, "Trucking")) FinishTrucking(playerid);
		if(g_pGamesData[playerid] & e_IN_RANGE) FinishShootingRange(playerid);

		if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
		{
			Delete3DTextLabel(PlayerInfo[playerid][p3DText]);
			PlayerInfo[playerid][p3DText] = Text3D:INVALID_3DTEXT_ID;
		}

		if(GetPVarType(playerid, "AttachVehicleID"))
		{
			vID = GetPVarInt(playerid, "AttachVehicleID");
			for(i = 0; i != MAX_VEH_OBJECT; i++)
			{
				if(gPlayerVehicleObject[playerid][i] == INVALID_OBJECT_ID) continue;

				DestroyDynamicObject(gPlayerVehicleObject[playerid][i]);
                gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
                gVehicleObject[vID][i] = INVALID_OBJECT_ID;
                gPlayerVehicleObjectID[playerid][i] = 0;
			}
		}

	 	foreachex(Player, i)
	    {
	        if(spectatorid[i] == playerid)
	        {
	            StopSpec(playerid);
	        }
	    }
	}

	else
	{
        #if defined YSF
		// Itt nem lehet meghívni a SetMaxPlayers-t mert NPC: Bad player id-t fogunk kapni a konzolba
		if(g_iMaxPlayerSetTimer == -1)
			SetTimer("SetMaxPlayers_AfterConnect", 1000, false);
		#endif
	}
	if(GetPVarType(playerid, "FalloutState"))
	{
		FalloutPlayers --;
		//printf("FalloutPlayers --  OnPlayerDisconnect %d", FalloutPlayers);

		if(g_ServerFlags & e_FALLOUT_STARTED)
		{
			if(FalloutPlayers < 2)
			{
				//printf("Disconnect FalloutPlayers = %d, g_ServerFlags = %d", FalloutPlayers, g_ServerFlags & e_FALLOUT_STARTED);
				SendClientMessageToAllf(COLOR_WHITE, "MSG_FALLOUT__FALLOUT_BEFEJEZODOTT", pName(playerid), playerid);
				EndFallout();
			}
		}
	}

	if(GetPVarType(playerid, "RaceParticipant"))
	{
		if(--Participants < 2 && VersenyIdo > 30)
		{
			SendClientMessageToAllf(COLOR_ORANGE, "MSG_MFR_A_LEGUTOLSO_VERSENYZO_AZ", g_szRaceName_);
   			VersenyIdo = 30;
		}
	}
	if(BuildRaceID[playerid] != -1)
	{
   	    DisablePlayerRaceCheckpoint(playerid);
	    for(new i; i != BuildRaceCPS[playerid]; i++)
	    {
	        DeleteGVar("BRaceCPX", i);
   	        DeleteGVar("BRaceCPY", i);
	        DeleteGVar("BRaceCPZ", i);
		}
		BuildRaceID[playerid] = -1;
	}

	if(GetPVarType(playerid, "ParticleObject"))
	{
		DestroyDynamicObject(GetPVarInt(playerid, "ParticleObject"));
	}

	if(GetPVarType(playerid, "Rocket"))
	{
		KillTimer(GetPVarInt(playerid, "Rocket"));

		DeletePVar(playerid, "RocketTime");
		DeletePVar(playerid, "Rocket");
	}

	new
	    dmid = g_pDeathMatchID[playerid];
    if(dmid != -1)
    {
		if(CurrKillStreakID[dmid] == playerid)
		{
		    CurrKillStreak[dmid] = 2;
		    CurrKillStreakID[dmid] = INVALID_PLAYER_ID;
		}
	}

	if(ZaszloOwner == playerid)
	{
		CallFlag();
	}

	if(g_BonusCarOwner == playerid)
	{
		g_BonusCarOwner = INVALID_PLAYER_ID;
		//g_BonusCarCount = 0;
 		//g_BonusCarRespawn = 0;
	}

	new
	    i;
	foreach(i: Player)
	{
		if(GetPVarInt(i, "lastPMer") == playerid)
		{
		    SetPVarInt(i, "lastPMer", INVALID_PLAYER_ID);
		}

		if(GetPVarInt(i, "DuelPlayer") == playerid)
		{
			SetPVarInt(i, "DuelPlayer", INVALID_PLAYER_ID);
		}
	}

 	if(g_PlayerData[playerid] & e_NOVOBJECTS)
 	{
		printf("e_NOVOBJECTS");
		for(i = 0; i != MAX_VEHICLES; i++)
		{
			for(new x; x != MAX_VEH_OBJECT; x++)
			{
				if(gVehicleObject[i][x] != INVALID_OBJECT_ID)
				{
					Streamer_AppendArrayData(STREAMER_TYPE_OBJECT, gVehicleObject[i][x], E_STREAMER_PLAYER_ID, playerid);
				}
			}
		}
	}

	g_szaPlayerNames[playerid][0] = EOS;
	g_PlayerData[playerid] = e_PlayerData:0;
	g_pOtherFlags[playerid] = e_pOtherFlags:0;
 	g_pGamesData[playerid] = e_GamesData:0;
    g_pSelectTDFlags[playerid] = e_pTDFlags:0;
    g_pGangwarTeam[playerid] = 0xF;

	if(g_ConsolePlayer == playerid) g_ConsolePlayer = -1;


	//printf("OnPlayerDisconnect(playerid = %d, reason = %d) <END>", playerid, reason);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

//    SendClientMessagef(playerid, -1, "OnPlayerStateChange(playerid = %d, newstate = %d, oldstate = %d)", playerid, newstate, oldstate);
	new
		bool:bAntiFall = !!(g_PlayerFlags[playerid] & e_ANTIFALL);
	if(bAntiFall)
	{
  		if(oldstate == PLAYER_STATE_DRIVER)
		{
			if(newstate == PLAYER_STATE_ONFOOT)
			{
				if((g_PlayerData[playerid] & e_FALLED) && !IsPlayerInWater(playerid))
				{
				    vID = GetPVarInt(playerid, "GetCarID");
				    new
						iModel = GetDynamicVehicleModel(vID),
						iType = GetVehicleType(iModel);
					if(iType != VEHICLE_TRAM && iType != VEHICLE_TRAIN)
					{
						if(iType == VEHICLE_BIKE || iType == VEHICLE_BMX)
						{
						    g_PlayerData[playerid] |= e_NOCARMSG;
							PutPlayerInDynamicVehicle(playerid, vID, 0);
						}
					}
					else
					{
					    if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
					    //SetCameraBehindPlayer(playerid);
						g_PlayerData[playerid] &= ~(e_FALLED | e_NOCARMSG);
					}
				}
			}
		}
		if(oldstate == PLAYER_STATE_PASSENGER)
		{
			if(newstate == PLAYER_STATE_ONFOOT)
			{
				if((g_PlayerData[playerid] & e_FALLED) && !IsPlayerInWater(playerid))
				{
				    vID = GetPVarInt(playerid, "GetCarID");
				    new
						iModel = GetDynamicVehicleModel(vID),
						iType = GetVehicleType(iModel);
					if(iType != VEHICLE_TRAM && iType != VEHICLE_TRAIN)
					{
						if(iType == VEHICLE_BIKE || iType == VEHICLE_BMX)
						{
						    g_PlayerData[playerid] |= e_NOCARMSG;
							PutPlayerInDynamicVehicle(playerid, vID, 0);
						}
					}
					else
					{
		   				if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
						//SetCameraBehindPlayer(playerid);
						g_PlayerData[playerid] &= ~(e_FALLED | e_NOCARMSG);
					}
				}
			}
		}
	}

    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)// If the player's state changes to a vehicle state we'll have to spec the vehicle.
    {
	    foreach(Player, i)
        {
            if(spectatorid[i] == playerid)
            {
                PlayerSpectateDynamicVehicle(i, GetPlayerDynamicVehicleID(playerid));// Letting the spectator, spectate the vehicle of the player being spectated (I hope you understand this xD)
            }
        }
    }

	if(newstate == PLAYER_STATE_ONFOOT)
    {
	    foreach(Player, i)
        {
            if(spectatorid[i] == playerid)
            {
                PlayerSpectatePlayer(i, playerid);// Letting the spectator, spectate the player who exited the vehicle.
            }
        }
    }

	// ExitVehicle
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_ONFOOT)
	{
		if(!bAntiFall)
		{
		    vID = GetPVarInt(playerid, "GetCarID");
		    new
				iModel = GetDynamicVehicleModel(vID),
				iType = GetVehicleType(iModel);

			if(iType == VEHICLE_TRAM || iType == VEHICLE_TRAIN)
			{
			    if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
				//SetCameraBehindPlayer(playerid);
				g_PlayerData[playerid] &= ~(e_FALLED | e_NOCARMSG);
				DeletePVar(playerid, "GetCarID");
			}
		}
	    if(g_pGamesData[playerid] & e_IN_DERBY)
	    {
			if(g_DerbyPlayerVehicle[playerid] != INVALID_VEHICLE_ID) PutPlayerInDynamicVehicle(playerid, g_DerbyPlayerVehicle[playerid], 0);
		}
		if(g_pGamesData[playerid] & e_IN_TAXI)
	    {
	        if(GetPVarInt(playerid,"TaxiVehicleID") != INVALID_VEHICLE_ID) PutPlayerInDynamicVehicle(playerid, GetPVarInt(playerid,"TaxiVehicleID"), 0);
	        SendClientMessagef(playerid,-1,"vid %d",GetPVarInt(playerid,"TaxiVehicleID"));
	        SetPVarInt(playerid,"TaxiKiszalt",1);
	    
		//	if(g_DerbyPlayerVehicle[playerid] != INVALID_VEHICLE_ID) PutPlayerInDynamicVehicle(playerid, g_DerbyPlayerVehicle[playerid], 0);
		}
		if(GetPlayerWeapon(playerid) == WEAPON_SNIPER)
		{
			SetPlayerArmedWeapon(playerid, 0);
			SetTimerEx("ReChangeWeapon", 450, false, "d", playerid);
		}
		if(GetPVarInt(playerid, "Trucking") > 1)
		{
			SetPVarInt(playerid, "TruckKiszalt", 1);
			//InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RKAMIONOZAS_BEFEJEZVE_MIVEL"));
		}
		AntiDB(playerid, false);
		/*if(g_pGamesData[playerid] & 5)
	    {
	        cmd_leave(playerid,"");
		}*/
	}

	// EnterVehicle
	if((newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) && oldstate == PLAYER_STATE_ONFOOT)
	{
        vID = GetPlayerDynamicVehicleID(playerid);

		if(bAntiFall) g_PlayerData[playerid] |= e_FALLED;

		SetPVarInt(playerid, "GetCarID", vID);
		if(newstate == PLAYER_STATE_PASSENGER)
		{
			if(GetPVarType(playerid, "Trucking"))
			{
				for(new i; i != sizeof(gTruck); i++)
				{
					if(IsPlayerInDynamicVehicle(playerid, gTruck[i]))
					//if(IsPlayerInDynamicVehicle(playerid, gTruck[i]))
			    	{
						ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_ULHETSZ_BE_UTASNAKW"));
                        RemovePlayerFromVehicleEx(playerid);
						break;
					}
				}
			}
			else
			{
			    new
					iModel = GetDynamicVehicleModel(vID),
					iType = GetVehicleType(iModel);
				switch(iType)
				{
					case VEHICLE_CAR, VEHICLE_BIKE, VEHICLE_MONSTERTRUCK, VEHICLE_QUADBIKE: ShowWelcome(playerid, LANG(playerid, "MSG_FEGYVERVALTAS_RQWRE"));
				}
			}
		}

		else if(newstate == PLAYER_STATE_DRIVER)
		{
			if(vID == g_BonusCarID)
			{
			    if(g_BonusCarOwner != playerid)
			    {
					new
					    bool:bKickOut;
					    
					if(g_pGamesData[playerid] & e_GRAV)
					{
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_AT_VAN_ALLITVA_A_GRAVITACIOD"));
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_ALLITSD_VISSZA_ALAPRA_MYGRAV"));
                        bKickOut = true;
					}

					if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_SZALLHATSZ_BELE_A"));
                        bKickOut = true;
					}

					if(g_pGamesData[playerid] & e_GHOSTMODE)
					{
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_CANT_ENTER_GHOSTMODE_BCAR"));
                        bKickOut = true;
					}

					// Ha nem szállhat bele, akkor kidbojuk belõle
					if(bKickOut)
					{
						GetPlayerPos(playerid, X, Y, Z);
						SetPlayerPos(playerid, X, Y, Z + 2.0);
						g_PlayerData[playerid] &= ~e_FALLED;
						return 1;
					}
                    g_BonusCarOwner = INVALID_PLAYER_ID;
					g_BonusCarOwner = playerid;
					g_pGamesData[playerid] |= e_BCAR_OWNER;
					//g_BonusCarRespawn = 0;
					
                    foreach(Player, i)
					{
					    if(g_pChatMSGFlags[i] & e_BonusCar_MSG) continue;
					    
					    GetDynamicVehiclePos(g_BonusCarID, X, Y, Z);
					    format(i_str, 128, "%s", GetZoneName(X, Y, Z));
						SendClientMessagef(i, COLOR_ORANGE, LANG(i, "MSG__BONUSZAUTO___MEGSZEREZTE_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str, GetClosestBonusCarPos());
					}
				}
			}
		 	if(g_pGamesData[playerid] & e_IN_TAXI)
			{
   				for(new i; i != sizeof(g_TaxiVehicle); i++)
				{
					if(IsPlayerInDynamicVehicle(playerid, g_TaxiVehicle[i])) //Ha beszált az egyik taxiba
					{
					    if(GetPVarInt(playerid,"TaxiKiszalt") == 0)
					    {
					        UjFuvar(playerid, 0, randomex(3000,10000)); //5 és 15mp között
					    	SetPVarInt(playerid,"TaxiVehicleID", g_TaxiVehicle[i]);
					    }
					    DeletePVar(playerid, "TaxiKiszalt");
					}
				}
			}
			else
			{
				if(GetDynamicVehicleModel(vID) == 520 || GetDynamicVehicleModel(vID) == 425)
				{
	                SetPlayerArmedWeapon(playerid, 0);
				}
				if(GetPVarType(playerid, "Trucking"))
				{
					for(new i; i != sizeof(gTruck); i++)
					{
						if(IsPlayerInDynamicVehicle(playerid, gTruck[i]))
				    	{
							if(GetPVarInt(playerid, "Trucking") != 3)
							{
								ShowWelcome(playerid, LANG(playerid, "MSG_RVEDD_FEL_A_TRAILERTW"));
								SetPVarInt(playerid, "TruckingVehicle", gTruck[i]);
		                       	SetPVarInt(playerid, "Trucking", 2);
							}
                            DeletePVar(playerid, "TruckKiszalt");
							break;
						}
					}
				}

				if(!((e_IN_GANGWAR | e_IN_CTC) & g_pGamesData[playerid]))
				{
					new
					    CarColor1 = GetPVarInt(playerid, "FavCarColor_1"),
					    CarColor2 = GetPVarInt(playerid, "FavCarColor_2"),
					    color1, color2;

					if(CarColor1 != -1 && CarColor2 == -1)
					{
						GetDynamicVehicleColor(vID, color1, color2);
						ChangeDynamicVehicleColor(vID, CarColor1, color2);
					}
					else if(CarColor1 == -1 && CarColor2 != -1)
					{
					    ChangeDynamicVehicleColor(vID, color1, CarColor2);
					}
					else if(CarColor1 != -1 && CarColor2 != -1)
					{
		                ChangeDynamicVehicleColor(vID, CarColor1, CarColor2);
					}
					if(GetPVarType(playerid, "AutoPaintjob"))
					{
						ChangeDynamicVehiclePaintjob(vID, GetPVarInt(playerid, "AutoPaintjob"));
					}
					switch(GetPVarInt(playerid, "HydType"))
					{
						case 1: AddDynamicVehicleComponent(vID, 1087);
						case 2: RemoveDynamicVehicleComponent(vID, 1087);
					}

					new
					    iNosModel;
					switch(GetPVarInt(playerid, "NOS"))
					{
						case 4:
						{
		                    iNosModel = 1009;
						}
						case 5:
						{
		                    iNosModel = 1008;
						}
						case 6:
						{
		                    iNosModel = 1010;
						}
					}
					if(iNosModel)
					{
						new
							iCarModel = GetDynamicVehicleModel(vID);
						for(new i; i != 29; i++)
						{
						    if(iCarModel == InvalidNosVehicles[i]) break;
							AddDynamicVehicleComponent(vID, iNosModel);
							break;
						}
					}
				}
				else if(g_pGamesData[playerid] & e_IN_CTC)
				{
					new
						red,
						blue;
					foreach(Player, i)
					{
				        if(g_pGamesData[i] & e_IN_CTC)
						{
							if(!GetPlayerTeam(i)) red++;
							else blue++;
						}
					}

					if((red < 2 || blue < 2) && !(g_ServerFlags & e_RACEDEBUG))
					{
						SendClientMessage(playerid, -1, LANG(playerid, "MSG_KEVESEN_VAGYTOK_LEGALABB_MINDKET"));
						RemovePlayerFromVehicleEx(playerid);
					}
				}
			}
		}
		if(gWJCar[0] <= vID <= gWJCar[1])
		{
			SetDynamicVehiclePos(vID, 2341.004, -227.822, 1148.081);
			SetDynamicVehicleZAngle(vID, 0);
        }

        if(g_PlayerData[playerid] & e_NOCARMSG) return 1;
		format(i_str, sizeof(i_str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~]~h~%s~b~]", VehName(vID));
		GameTextForPlayer(playerid, i_str, 3000, 3);
		AntiDB(playerid, true);
	}
 	return 1;
}


forward UjFuvar2(playerid, id);
public UjFuvar2(playerid, id)
{
    if(g_pGamesData[playerid] & e_IN_TAXI)
    {
	    //printf("UjFuvar2 playerid %d fuvarid %d", playerid, id);
	    new
			Float:distance;
			
		GetPVarString(playerid,"TaxiGPS", country, sizeof(country));

        GetPlayerPos(playerid,X,Y,Z);
		distance = GetDistance2D(X, Y, g_TaxiPos[id][0], g_TaxiPos[id][1]);
	    SetPVarFloat(playerid,"tDistance",distance);

		//g_TaxiActor[playerid] = CreateActor(random(310), g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2], g_TaxiPos[id][3]);
	   	//SetActorVirtualWorld(g_TaxiActor[playerid], GetPlayerVirtualWorld(playerid));

	//	ApplyActorAnimation(g_TaxiActor[playerid], "ped", "IDLE_taxi", 4.1, 0, 0, 0, 0, 0); // Pay anim

		SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi :: {AAAAAA}Valaki taxit hívott a közeledben, A helyszín meglett jelölve a térképeden.");
		SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi :: {AAAAAA}Helyszín: {FF0000}%s{AAAAAA} - Távolság:{FF0000} %0.2f{AAAAAA}méter", country, distance);

		g_TaxiCP[playerid] =  CreateDynamicCP(g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2], 3, 50010, -1, .playerid = playerid, .streamdistance = 100.0);
		g_TaxiMapIcon[playerid] = SetPlayerMapIcon(playerid, 99, g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2], 55, 0, MAPICON_GLOBAL);
	}
	return 1;
}

stock GetZoneName(Float: x, Float: y, Float: z)
{
    new zone[28];
    for(new i = 0; i < sizeof(gSAZones); i++)
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
        {
            strcat(zone, gSAZones[i][SAZONE_NAME]);
            return zone;
        }
    }

    strcat(zone, "Ismeretlen");
    return zone;
}

stock UjFuvar(playerid, type, time)
{
    Ide:
	new
		id = random(106),
  		Float:distance;

	GetPlayerPos(playerid,X,Y,Z);
	distance = GetDistance2D(X, Y, g_TaxiPos[id][0], g_TaxiPos[id][1]);
    SetPVarFloat(playerid,"tDistance",distance);

    switch(type)
	{
	    case 0:	if(distance > 500) goto Ide; //Új fuvar
        case 1:
		{
			if(distance < 100) goto Ide; //Kiszállítás
			if(distance > 1500) goto Ide;
		}
	}
	//if(GetPVarInt(playerid,"TaxiLastID") == id) goto Ide;

    format(i_str, 128, "%s", GetZoneName(g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2]));
    //printf(i_str);
	switch(type)
	{
	    case 0:
		{
			SetTimerEx("UjFuvar2", time, false, "dd", playerid, id);
			SetPVarInt(playerid,"TaxiType",0);
			SetPVarString(playerid,"TaxiGPS", i_str);
		}
	    case 1: //Cél állomás sorsolása
	    {
	        SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi :: {AAAAAA}Az úti cél megjelölve a térképen!");
	        SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi :: {AAAAAA}Helyszín: {FF0000}%s{AAAAAA} - Távolság: {FF0000}%0.2f{AAAAAA} méter", i_str, distance);
	        
	        SetPVarInt(playerid,"TaxiType",1);
	        //DestroyActor(g_TaxiActor[playerid]);
	        
	        DestroyDynamicCP(g_TaxiCP[playerid]);
			RemovePlayerMapIcon(playerid, 99);
	        
	        g_TaxiCP[playerid] =  CreateDynamicCP(g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2], 3, 50010, -1, .playerid = playerid, .streamdistance = 100.0);
			g_TaxiMapIcon[playerid] = SetPlayerMapIcon(playerid, 99, g_TaxiPos[id][0], g_TaxiPos[id][1], g_TaxiPos[id][2], 55, 0, MAPICON_GLOBAL);
			
			g_TaxiTime[playerid] = GetTickCount();
	    }
	}
	//printf("id %d",id);
	//SetPVarInt(playerid,"TaxiLastID", id);
}

/*forward OnPlayerVehicleChange(playerid, oldvehicleid, newvehicleid);
public OnPlayerVehicleChange(playerid, oldvehicleid, newvehicleid)
{
	SendClientMessagef(playerid,-1,"OnPlayerVehicleChange(playerid %d, oldvehicleid %d, newvehicleid %d",playerid, oldvehicleid, newvehicleid);
    if((GetTickCount() - gPlayerEnterTime[playerid]) < 220) //player entered and exited vehicle faster than 220 ms.
    {
		AntiCheatLog(playerid, "CarSpammer");
    }
}*/

forward ReChangeWeapon(playerid);
public ReChangeWeapon(playerid)
{
	return SetPlayerArmedWeapon(playerid, WEAPON_SNIPER);
}

CMD:lang(playerid, params[], 0, 0)
{
	TextDrawHideForPlayer(playerid, TD_DMInfoHelp[g_pLang{playerid}]);
 	if(g_pLang{playerid} == LANGUAGE_HU)
 	{
		g_pLang{playerid} = LANGUAGE_EN;
 	}
 	else g_pLang{playerid} = LANGUAGE_HU;

 	if(!(g_pTDFlags[playerid] & e_NOTD_DM_INFO_HELP))
	{
 		if(!(g_pOtherFlags[playerid] & e_NO_TEXTDRAWS))
		{
			TextDrawShowForPlayer(playerid, TD_DMInfoHelp[g_pLang{playerid}]);
		}
	}
 	SendClientMessagef(playerid, -1, "Language: %s", gLanguage[1][g_pLang{playerid}]);
    SetGVarInt(pName(playerid), g_pLang{playerid}, 0);

 	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `lang` = %d WHERE `reg_id` = %d", g_pLang{playerid}, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
 	return 1;
}

CMD:open(playerid, params[], 0, 0)
{
	CheckOpenCloseGates(playerid);
	return 1;
}

CMD:close(playerid, params[], 0, 0)
{
	CheckOpenCloseGates(playerid);
	return 1;
}

CMD:gzoneid(playerid, params[], 4, 0)
{
	new
	    id;
	if(sscanf(params, "d", id)) return SendUsage(playerid, "/gzoneid <ID>");

	SendClientMessagef(playerid, COLOR_PROPGREEN, "ID: %d, {" #XCOLOR_BLUE2 "}elõzõ: %d", id, GetPVarInt(playerid, "HEdit"));
    SetPVarInt(playerid, "HEdit", id);

    valstr(name, id);
    AdminCommandLog("GZONEID", playerid, -1, name);
	return 1;
}

CMD:housetype(playerid, params[], 4, 0)
{
    new
		type;
	if(sscanf(params, "dd", houseid, type))
	{
		SendUsage(playerid, "/housetype <houseid> <type>");
		dline[0] = EOS;
        for(new i; i != sizeof(g_szHouseTypes); i++)
        {
			format(i_str, 32, "%d: %s, ", i, g_szHouseTypes[i][e_szHouseName_HU]);
			strcat(dline, i_str);
			if((!(i % 5) && i != 0) || i == sizeof(g_szHouseTypes) - 1)
			{
				SendClientMessage(playerid, -1, dline);
				dline[0] = EOS;
			}
		}
		return 1;
	}

	if(!(0 <= type <= 8)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_FASZ_0__8"));
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_HAZ_ID_A_MEGADOTT_HAZ"), houseid);

	GetGVarString("PropName", i_str, sizeof(i_str), houseid);
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___TYPE___"), i_str, houseid, type, g_szHouseTypes[type]);

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `type` = %d WHERE `id` = %d", type, houseid);
	mysql_function_query(1, query, false, "", "");

    AdminCommandLog("HOUSETYPE", playerid, -1, "houseid: %d, type: %d", houseid, type);
	return 1;
}

CMD:biztype(playerid, params[], 4, 0)
{
    new
		type;
	if(sscanf(params, "d", type))
	{
		SendUsage(playerid, "/biztype <type>");
		dline[0] = EOS;
        for(new i; i != sizeof(g_szBiznisTypes); i++)
        {
			format(i_str, 32, "%d: %s, ", i, g_szBiznisTypes[i][e_szHouseName_HU]);
			strcat(dline, i_str);
			if((!(i % 5) && i != 0) || i == sizeof(g_szBiznisTypes) - 1)
			{
				SendClientMessage(playerid, -1, dline);
				dline[0] = EOS;
			}
		}
		return 1;
	}

	houseid = GetPVarInt(playerid, "HEdit");
	if(!(0 <= type <= 23)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_FASZ_0__24"));
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_BIZNISZ_ID_A_MEGADOTT"), houseid);

	GetGVarString("BizName", i_str, sizeof(i_str), houseid);
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___TYPE___"), i_str, houseid, type, g_szBiznisTypes[type]);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `type` = %d WHERE `id` = %d", type, houseid);
	mysql_function_query(1, query, false, "", "");

    AdminCommandLog("BIZTYPE", playerid, -1, "bizid: %d, type: %d", houseid, type);
	return 1;
}

stock ChangeKey(playerid,newkey)
{
	new
	    valamifasz[32],
	    SQLfasz[32];

	if(GetPVarInt(playerid, "KeyChange") != 2 || GetPVarInt(playerid, "KeyChange") != 6)
	{
		if(newkey == GetPVarInt(playerid, "SpeedBoostKey") ||
			newkey == GetPVarInt(playerid, "VehicleHoppingKey") ||
			newkey == GetPVarInt(playerid, "FlipKey") ||
			newkey == GetPVarInt(playerid, "TeleportMenuKey") ||
			newkey == GetPVarInt(playerid, "CarFlyKey") ||
			newkey == GetPVarInt(playerid, "FlyKey"))
			{
		        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_GOMB_MAR_HASZNALATBAN"));
		        cmd_keychange(playerid, "");
		        DeletePVar(playerid, "SelectKey");
		        DeletePVar(playerid, "KeyChange");
		        return 1;
			}
		}

 	switch(GetPVarInt(playerid, "KeyChange"))
 	{
		case 1: SetPVarInt(playerid, "SpeedBoostKey", newkey),     valamifasz = "~r~SpeedBoost",    SQLfasz = "speedboost_key";
     	case 2: SetPVarInt(playerid, "VehicleHoppingKey", newkey), valamifasz = "~r~VehicleJump",   SQLfasz = "vehiclejump_key";
     	case 3: SetPVarInt(playerid, "FlipKey", newkey),		   valamifasz = "~r~Flip", 		    SQLfasz = "flip_key";
     	case 4: SetPVarInt(playerid, "TeleportMenuKey", newkey),   valamifasz = "~r~Teleport",      SQLfasz = "teleportmenu_key";
     	case 5: SetPVarInt(playerid, "CarFlyKey", newkey),   	   valamifasz = "~r~CarFly",        SQLfasz = "carfly_key";
     	case 6: SetPVarInt(playerid, "FlyKey", newkey),  		   valamifasz = "~r~Fly", 		    SQLfasz = "fly_key";
 	}
 	DeletePVar(playerid, "KeyChange");
 	DeletePVar(playerid, "SelectKey");
  	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GOMJA_ATTALLITVAW"),valamifasz);
   	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `%s` = %d WHERE `reg_id` = %d",SQLfasz, newkey, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	//printf(query);
    return 1;
}

stock AntiDB(playerid, bool:type)
{
	if(g_ServerFlags & e_ANTIDB)
	{
	    if(type == true) //Tiltás
	    {
	        vID = GetPlayerDynamicVehicleID(playerid);
	        new
				iModel = GetDynamicVehicleModel(vID);
				
			if(iModel == 432 || iModel == 425 || iModel == 447 || iModel == 476 || iModel == 520) SetPlayerDisabledKeysSync(playerid, 8191);
	    }
	    else SetPlayerDisabledKeysSync(playerid, 0);
	}
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    if(g_pDebug{playerid} == 1) SendClientMessagef(playerid, COLOR_WHITE, "Oldkeys: %d | %b Newkeys: %d | %b", oldkeys, oldkeys, newkeys, newkeys);

    if(GetPVarInt(playerid, "KeyChange") != 0)
	{
	    if((GetTickCount() - GetPVarInt(playerid, "KeyChanged")) < 1000) return 1;

		SetPVarInt(playerid, "KeyChanged", GetTickCount());
		ChangeKey(playerid, newkeys);
		return 1;
	}
	//if(GetPlayerWeapon(playerid) > 1) return 0;
	if(!(IN_MINIGAME_AND_SHITS & g_pGamesData[playerid]))
	{
		if(newkeys & KEY_NO)
		{
	   		if(GetPlayerVehicleSeat(playerid) != 0)
		    {
	       		GetPlayerPos(playerid, X, Y, Z);
		        SetPlayerPos(playerid, X, Y, Z);
		    }
		    else
		    {
				SetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), 0.0, 0.0, 0.0);
			}
		}
    }
	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	if((newkeys & 131072) && g_pDebug{playerid} == 9)
    {
		SetPVarInt(playerid, "HEdit", GetPVarInt(playerid, "HEdit") + 1);
		valstr(name, GetPVarInt(playerid, "HEdit"));
		cmd_gotobiz(playerid, name);
		//cmd_gotoprop(playerid, name);

		ShowWelcome(playerid, name, .time = 10000);
	}

	if(GetPVarType(playerid, "FreezeTime"))
	{
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFAGYASZTVA_VAGY__MASODPERCIG"), GetPVarInt(playerid, "FreezeTime"));
		return 1;
	}
	if(newkeys & KEY_YES)
	{
		new
		    clanid = g_pClan{playerid};
		// Ha a játékos klánban van ÉS éppen õ rakja le a bankot
		if(clanid != 0xFF && g_pClanCreateState{playerid} == 15)
		{
			if(!IsPlayerInDynamicArea(playerid, gClanZone[clanid])) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANBANKOT_NEM_RAKHATOD"));

		    g_ClanFlags{clanid} &= ~e_CLAN_BANK_PLACING;
            g_pClanCreateState{playerid} = 0xFF;

			GivePlayerMoneyEx(playerid, -5000000, "BuyClanBank");
  			SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_KLAN_BANK_LERAKVA_ARA_5000000"));
			GetPlayerPos(playerid, X, Y, Z);

			gClanBankPos[clanid][0] = X;
			gClanBankPos[clanid][1] = Y;
			gClanBankPos[clanid][2] = Z;

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `is_bank` = 1, `bankx` = %f, `banky` = %f, `bankz` = %f WHERE `id` = %d", X, Y, Z, CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");

			gClanBankCP[clanid] = CreateDynamicCP(X, Y, Z, 5.0);
			gClanBankText[clanid] = CreateDynamic3DTextLabel("{" #XCOLOR_BLUE3 "}Klánbank!\n{" #XCOLOR_PROPGREEN "}Bank használata: 'N'", -1, X, Y, Z);
		}
	}

	if(newkeys & KEY_NO)
	{
		new
		    clanid = g_pClan{playerid};
		// Ha a játéko klánban van
		if(clanid != 0xFF)
		{
			// Ha éppen lerakja a bankot
			if(g_pClanCreateState{playerid} == 15)
			{
	            g_ClanFlags{clanid} &= ~e_CLAN_BANK_PLACING;
	            g_pClanCreateState{playerid} = 0xFF;

	  			SendClientMessage(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_KLAN_BANK_LERAKASA_MEGSZAKITVA"));
			}

			// Ha van klán bank és a közelében van
			if(gClanBankPos[clanid][0] != 0.0 && gClanBankPos[clanid][1] != 0.0 && (g_ClanFlags{clanid} & e_CLAN_ACTIVE) &&
				IsPlayerInRangeOfPoint(playerid, 3.0, gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2]))
			{
				ShowClanBankTD(playerid);
			    SelectTextDraw(playerid, CLAN_TD_SELECT_COLOR);
			}
		}

		// Ha derbyben van
		if(g_pGamesData[playerid] & e_IN_DERBY)
		{
			// Ha még a menetben van akkor nem engedélyezzük a freecamot
			if(g_DerbyPlayerVehicle[playerid] != INVALID_VEHICLE_ID) return 1;

			//printf("keystatechange N: %d", g_pNoClipObject[playerid]);
			if(g_pNoClipObject[playerid] == INVALID_PLAYER_ID)
			{
				//printf("1");
				if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
				//SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, true);

				GetPlayerPos(playerid, X, Y, Z);
				g_pNoClipObject[playerid] = CreatePlayerObject(playerid, 18641, X, Y, Z, 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, g_pNoClipObject[playerid]);
			}
			else
			{
				//printf("2");
				TogglePlayerControllable(playerid, false);

			    DestroyPlayerObject(playerid, g_pNoClipObject[playerid]);
			    g_pNoClipObject[playerid] = INVALID_OBJECT_ID;
			    SetDerbyCamera(playerid);

			}
		}

		// Ha DM-et hoz létre - vagy szerkeszt
		if(g_pDMCreation[playerid] != -1)
		{
			new
			    dmid = g_pDMID[playerid];
			switch(GetPVarInt(playerid, "CreatDMZone"))
			{
				case 0: // Spawn pontok lerakása
				{
					// Ha még nem érte el a maximumot - mentjük
			        if(g_pDMCreation[playerid] < sizeof(g_DMSpawns[]))
			        {
						new
						    count = g_pDMCreation[playerid],
						    sql_updateid,
							szText[128];
				        GetPlayerPos(playerid, X, Y, Z);
						GetPlayerFacingAngle(playerid, Angle);

						// Ha nincs a dm zónájában - nem rakhatja le a spawn pontot
						if(!IsPlayerInDynamicArea(playerid, g_DMAreaID[dmid]))
						{
							SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_A_DM_ZONAJABAN"));
							return 1;
						}

						// Ha TDM-et csinál akkor anyádba az apád fasza mer ezt kurva nehéz lesz megcsináni
						if(GetPVarType(playerid, "CreateTDM"))
						{
							new
							    id = GetPVarInt(playerid, "CreateTDM"),
								spawnid;

							if(id == 1)
							{
								if(g_DMUpperSpawnID{dmid} < 15)
								{
		                            sql_updateid = g_DMUpperSpawnID{dmid};
									g_DMUpperSpawnID{dmid}++;
		                            if(g_DMUpperSpawnID{dmid} == 15)
		                            {
										//ShowWelcome(playerid, LANG(playerid, "MSG_CSAPATVALTASNELSO_CSAPAT_MAX"));
										SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_AZ_ELSO_CSAPATNAK_ELERTED_A"));
										SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_KOVETKEZO_GOMBLENYOMASNAL_A"));

										SetPVarInt(playerid, "CreateTDM", 2);
									}
								}
							}
							else
							{
								if(g_DMUpperSpawnID_2{dmid} == 30) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__NEVU_CSAPATHOZ_NEM"), g_DMTeamColor[dmid][1] >>> 8, g_szDMTeams[dmid][1]);

								//printf("kettes bazmeg");
								if(!g_DMUpperSpawnID_2{dmid})
								{
									g_DMUpperSpawnID_2{dmid} = 15;
                                    //g_pDMCreation[playerid] = 14;
								}

		                        sql_updateid = g_DMUpperSpawnID_2{dmid};
								g_DMUpperSpawnID_2{dmid} ++;
							}

							// Változók miatt lent kell kiíratni mer másképp hülyeséget fog kapni..
							spawnid = (id == 1) ? g_DMUpperSpawnID{dmid} : g_DMUpperSpawnID_2{dmid} - 15;

							format(szText, sizeof(szText), "{%06x}%s {FFFFFF}- {33FF33}%d. {" #XCOLOR_ORANGE "}spawn {FFFFFF}[id: %d]", g_DMTeamColor[dmid][id - 1] >>> 8, g_szDMTeams[dmid][id - 1], spawnid, sql_updateid + 1);
				        	SendClientMessagef(playerid, -1, LANG(playerid, "MSG_LERAKTAD_AZ__SPAWNHELYET_AZ"), spawnid, g_DMTeamColor[dmid][id - 1] >>> 8, g_szDMTeams[dmid][id - 1], count + 1);
						}
						else
						{
							// g_DMUpperSpawnID_2 van véve alapnak, ha csak sima DM
							//if(!g_DMUpperSpawnID_2{dmid}) g_DMUpperSpawnID_2{dmid} = 14;
							g_DMUpperSpawnID_2{dmid} ++;
							sql_updateid = count;

							format(szText, sizeof(szText), "{33FF33}%d. {" #XCOLOR_ORANGE "}spawn", g_pDMCreation[playerid] + 1);
					    	SendClientMessagef(playerid, -1, LANG(playerid, "MSG_LERAKVA_AZ__SPAWNHELYET"), g_pDMCreation[playerid] + 1);
						}
						//SendClientMessagef(playerid, -1, "sql_updateid: %d", sql_updateid);

						g_DMSpawns[dmid][sql_updateid][0] = X;
						g_DMSpawns[dmid][sql_updateid][1] = Y;
						g_DMSpawns[dmid][sql_updateid][2] = Z;
						g_DMSpawns[dmid][sql_updateid][3] = Angle;

						mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `spawn_%d` = '%f,%f,%f,%f' WHERE `id` = %d", sql_updateid, X, Y, Z, Angle, DM_SQL(dmid));
						mysql_function_query(1, query, true, "", "");

						format(name, sizeof(name), "DMSO_%d", g_pDMCreation[playerid]);
				        SetPVarInt(playerid, name, CreatePlayerObject(playerid, 19130, X, Y, Z, 0.0, 0.0, 0.0));

						// TeamDM-hez is megcsinálni ezetet normálisan
				        format(name, sizeof(name), "DMST_%d", g_pDMCreation[playerid]);
				        format(i_str, sizeof(i_str), szText);
				        SetPVarInt(playerid, name, _:CreateDynamic3DTextLabel(i_str, -1, X, Y, Z, .playerid = playerid));

				        g_pDMCreation[playerid]++;
				        SendClientMessage(playerid, COLOR_BLUE3, LANG(playerid, "MSG_SPAWN_LERAKAS_BEFEJEZESEHEZ"));
						if(g_DMFlags[dmid] & e_IS_TDM)
						{
				        	SendClientMessage(playerid, COLOR_LIGHTPINK, LANG(playerid, "MSG_MASIK_CSAPAT_SPAWN_HELYEINEK"));
						}
					}
					else
					{
						SendClientMessage(playerid, -1, LANG(playerid, "MSG_ELERTED_A_MAXIMUM_SPAWN_HELYEK"));
					}
				}
				case 1: // MinXY lerakása
				{
					//printf("minxy - 1");
					GetPlayerPos(playerid, X, Y, Z);

					g_DMZone[dmid][0] = X;
					g_DMZone[dmid][1] = Y;

					SendClientMessagef(playerid, COLOR_KICK, LANG(playerid, "MSG_DM_ZONANAK_A_MINXY_KORDINATAI"), X, Y, Z);
					ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "DM zóne lerakása", "DM zónának a MinXY kordinátái beállítva! \nMost menj a JOBB FENTI sarkára, és rakd le oda a zónát.\nOttis szintén N gomb", "Oké");
					SetPVarInt(playerid, "CreatDMZone", 2);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `minx` = %f, `miny` = %f WHERE `id` = %d", X, Y, DM_SQL(dmid));
					mysql_function_query(1, query, true, "", "");
				}
				case 2: // MaxXY lerakása
				{
					GetPlayerPos(playerid, X, Y, Z);

					g_DMZone[dmid][2] = X;
					g_DMZone[dmid][3] = Y;

					if(X <= g_DMZone[dmid][0] || Y <= g_DMZone[dmid][1])
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZUL_RAKTAD_LE_A_DM"));
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ELSZOR_ESZAKNAK_FORDULVA"));

						GetPVarString(playerid, "DMStr", dline, sizeof(dline));
						ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_GOLD "}Infó..", dline, "Oké");
						SetPVarInt(playerid, "CreatDMZone", 1);
						return 1;
					}

					SendClientMessagef(playerid, COLOR_KICK, LANG(playerid, "MSG_DM_ZONANAK_A_MAXXY_KORDINATAI"), X, Y, Z);
					ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_ZONE_OK, DIALOG_STYLE_MSGBOX, "Zóna lerakás sikeres!", "Sikeresen leraktad a DM zónáját, Gratulálunk!\nA folytatáshoz nyomj a 'Tovább' gombra.", "Tovább");
					DeletePVar(playerid, "CreatDMZone");

					// Lehet törölni az elsõ dialg tartalmát, ha sikeresen lerakta a DM zónát
					DeletePVar(playerid, "DMStr");

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `maxx` = %f, `maxy` = %f WHERE `id` = %d", X, Y, DM_SQL(dmid));
					mysql_function_query(1, query, true, "", "");
				}
			}
		}
	}

	if(newkeys & 512)
	{
		switch(g_pClanCreateState{playerid})
		{
			case 1: // Spawnhely
			{
				GetPlayerPos(playerid, X, Y, Z);
				GetPlayerFacingAngle(playerid, Angle);
				SetPVarFloat(playerid, "ClanSpawnX", X);
				SetPVarFloat(playerid, "ClanSpawnY", Y);
				SetPVarFloat(playerid, "ClanSpawnZ", Z);
				SetPVarFloat(playerid, "ClanSpawnA", Angle);
				SetPVarInt(playerid, "ClanSpawnInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "ClanSpawnWorld", GetPlayerVirtualWorld(playerid));

				ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánkészítés - {33FF33}[3/6]", "2. lépésen már túlvagy!\nMost menj és add meg, hol legyen a klánod\nzónájának a {FF0000}BAL LENTI {" #XCOLOR_DEFAULT "}sarka!\nFordulj északra (N betû a térképen) és úgy add meg.\nMagasság is számít, tehát menj minél lejjebbre\nHa nem tudsz a map alá menni, akkor /dive -10\nÁllj oda, és nyomd le a görgõt.", "Tovább");
        		g_pClanCreateState{playerid} = 2;
			}
			case 2: // Bal lenti sarok
			{
				GetPlayerPos(playerid, X, Y, Z);
				SetPVarFloat(playerid, "ClanMinX", X);
				SetPVarFloat(playerid, "ClanMinY", Y);
				SetPVarFloat(playerid, "ClanMinZ", Z);

				ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánkészítés - {33FF33}[3/6]", "2. lépésen már túlvagy!\nMost menj és add meg, hol legyen a klánod\nzónájának a {FF0000}JOBB FENTI {" #XCOLOR_DEFAULT "}sarka!\nFordulj északra (N betû a térképen) és úgy add meg.\nMagasság is számít, tehát menj minél magasabbra\nItt adod meg, hogy max milyen magasan legyen a klánod zónája\nÁllj oda, és nyomd le a görgõt.", "Tovább");
        		g_pClanCreateState{playerid} = 3;
			}
			case 3: // Jobb fönti sarok
			{
				GetPlayerPos(playerid, X, Y, Z);
				SetPVarFloat(playerid, "ClanMaxX", X);
				SetPVarFloat(playerid, "ClanMaxY", Y);
				SetPVarFloat(playerid, "ClanMaxZ", Z);

				V[0] = GetPVarFloat(playerid, "ClanMinX");
				V[1] = GetPVarFloat(playerid, "ClanMinY");
				V[2] = GetPVarFloat(playerid, "ClanMinZ");

				//print("clanshit");
				//printf("%f, %f, %f - %f, %f, %f", X, Y, Z, V[0], V[1], V[2]);
				//printf("X <= V[0] = %d || Y <= V[1] = %d || Z <= V[2] = %d", X <= V[0], Y <= V[1], Z <= V[2]);

				// Ha rosszul rakta le a zónát, akkor nem engedjük létrehozni neki a klánt
				if(X <= V[0] || Y <= V[1] || Z <= V[2])
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZUL_RAKTAD_LE_A_KLAN"));
					SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_HIBA_ESZAKNAK_FORDULVA_A_BAL"));
					SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_BOVEBB_LEIRAST_A_SZERVER_LEIRASBAN"));
					CancelClanCreation(playerid);
					return 1;
				}
				ShowPlayerDialogEx(playerid, DIALOG_CLAN, DIALOG_STYLE_INPUT, "Klánkészítés - {33FF33}[5/6]", "4. lépésen már túlvagy!\nÍrj egy rövid leírást a klánodról;", "Tovább");
			}
		}
	}

	switch(GetPlayerState(playerid))
	{
	    case PLAYER_STATE_DRIVER:
	    {
			if(newkeys & 4)
			{
   				if(Bit_GetCount(gPlayerStatsTDs[playerid]))
   				{
				   	if((GetTickCount() - GetPVarInt(playerid, "StatsTick")) < 1000) return 1;
					Stats_Hide(playerid);
   				}
			}

			// Drift nitró
			if(GetPVarInt(playerid,"NOS") == 7)
			{
			    if(PRESSED(KEY_FIRE) || PRESSED(KEY_ACTION))
				{
					AddDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), 1010);
				}
				if(RELEASED(KEY_FIRE) || RELEASED(KEY_ACTION))
			 	{
		   			RemoveDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), 1010);
			 	}
			}

			if(newkeys & KEY_SECONDARY_ATTACK)
			{
				vID = GetPlayerDynamicVehicleID(playerid);
				if(IsVehicleToy(vID))
				{
					new
						iType = GetVehicleType(GetDynamicVehicleModel(vID));
					if(iType != VEHICLE_TRAM && iType != VEHICLE_TRAIN)
					{
					    // SendClientMessage(playerid, COLOR_WHITE, "IsVehicleToy Exit");
						RemovePlayerFromVehicleEx(playerid);
						if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
      					//SetCameraBehindPlayer(playerid);
					}
				}
			}
			else if((newkeys & KEY_SUBMISSION) && (newkeys & KEY_HANDBRAKE)) // Submission + Space
			{
				if(!GetPVarType(playerid, "Trucking"))
				{
					new
						vehicle;
					GetPlayerPos(playerid, X, Y, Z );
					GetVehicleWithinDistance(playerid, X, Y, Z, 30.0, vehicle);
					if(vehicle)
					{
						ShowWelcome(playerid, LANG(playerid, "MSG_PTRAINER_YHFELKAPCSOLVAW"), .time = 750);
						AttachTrailerToDynamicVehicle(GetPlayerDynamicVehicleID(playerid), vehicle);
					}
				}
			}
            if(g_pDeathMatchID[playerid] == -1 && !(g_pGamesData[playerid] & e_IN_DERBY) && !GetPVarType(playerid, "RaceParticipant"))
			{
				if(newkeys & KEY_SUBMISSION)
				{
					if(newkeys & KEY_SUBMISSION)
					{
						if(BuildRaceID[playerid] != -1)
						{
							return cmd_cp(playerid, "");
						}
						if(!NoTele(playerid))
	                    {
							if(!(g_PlayerFlags[playerid] & e_SPIN))
							{
								//if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BONUSZAUTOT_HNEM_RJAVITVATO"));

								/*switch(GetPVarInt(playerid, "AutoRepair"))
								{
									case 1, 3: RepairDynamicVehicle(vID);
									case 2: SetDynamicVehicleHealth(vID, 1000.0);
								}
								*/
								RepairDynamicVehicle(vID);
					            PlayerPlaySound(playerid, 1133);
				            }
				            else
				            {
				                SetDynamicVehAngularVelocity(GetPlayerDynamicVehicleID(playerid), GetPVarFloat(playerid, "SpinX"), GetPVarFloat(playerid, "SpinY"), GetPVarFloat(playerid, "SpinZ"));
							}
						}
					}
				}

				if(newkeys & GetPVarInt(playerid, "VehicleHoppingKey") && GetPVarType(playerid, "VehicleHopping"))
			    {
			        if(GetPVarInt(playerid,"VehicleHoppingKey") != -2)
	    			{
	                    if(!NoTele(playerid))
	                    {
				           	if(IsPlayerInDynamicArea(playerid, gCsikZone))
							{
								InfoTD_MSG(playerid, 1000, LANG(playerid, "MSG_RHNEM_HASZNALHATSZ_ITT_HVEHICL"));
								return 0;
						    }
						    if(GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 4.0 && ZaszloOwner != INVALID_PLAYER_ID) return 0;

							GetDynamicVehicleVelocity((vID = GetPlayerDynamicVehicleID(playerid)), V[0], V[1], V[2]);
							SetDynamicVehicleVelocity(vID, V[0], V[1], (V[2] + GetPVarFloat(playerid, "VehicleHopping")));
						}
					}
			    }
			    if(!NoTele(playerid))
                {
                    vID = GetPlayerDynamicVehicleID(playerid);
					if(newkeys & KEY_NO)
					{
						SetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), 0.0, 0.0, 0.0);
					}

					switch((datez = GetPVarInt(playerid, "FlipKey")))
					{
					    case -2:
					    {
							return 0;
						}
					    case -1:
					    {
							if(newkeys & KEY_ANALOG_LEFT) //num4
							{
	                            if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BONUSZAUTOT_HNEM_RALLITHATO"));

								GetPlayerPos(playerid, X, Y, Z);
								GetDynamicVehicleZAngle(vID, Angle);

								SetDynamicVehiclePos(vID, X, Y, Z);
								SetDynamicVehicleZAngle(vID, Angle);

                                RepairDynamicVehicle(vID);
                                SetDynamicVehicleHealth(vID, 1000.0);

								InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_PHJARMUVED_YH_BHHELY"), VehName(vID));
							}
						}
						case 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 65536, 131072, 262144:
						{
							if(newkeys & datez)
							{
	                            if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BONUSZAUTOT_HNEM_RALLITHATO"));

								GetPlayerPos(playerid, X, Y, Z);
								GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
								GetDynamicVehicleZAngle(vID, Angle);

								SetDynamicVehiclePos(vID, X, Y, Z);
								SetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
								SetDynamicVehicleZAngle(vID, Angle);

								RepairDynamicVehicle(vID);
                                SetDynamicVehicleHealth(vID, 1000.0);

								InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_PHJARMUVED_YH_BHHELY_1"), VehName(vID));
							}
						}
					}
	 			}
			}
		}
	    case PLAYER_STATE_PASSENGER:
	    {
			if(newkeys & 4)
			{
   				if(Bit_GetCount(gPlayerStatsTDs[playerid]))
   				{
				   	if((GetTickCount() - GetPVarInt(playerid, "StatsTick")) < 1000) return 1;
					Stats_Hide(playerid);
   				}
			}

			if(newkeys & KEY_CROUCH)
			{
				// Ha az utas ülésen a lõdöz, akkor a H gomb újra lenyomásával vissza tud menni a kocsiba
				if(GetPlayerCameraMode(playerid) == 55)
				{
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X + 200, Y + 300, Z);
					g_PlayerData[playerid] &= ~e_FALLED;

					if(GetPVarType(playerid, "PFireTimer"))
					{
						KillTimer(GetPVarInt(playerid, "PFireTimer"));
					}

					SetPVarInt(playerid, "PFireTimer", SetTimerEx("ResetPassengerFireMode", 1000, false, "ddd", playerid, GetPlayerDynamicVehicleID(playerid), GetPlayerVehicleSeat(playerid)));
				}
			}

			// Q-E fegyverváltás az utas ülésen  weaponswitch
			else if(newkeys & KEY_LOOK_LEFT | KEY_LOOK_RIGHT)
            {
				//print("wswitch started");
				new
					iWeap = GetPlayerWeapon(playerid),//GetPVarInt(playerid, "HoldenWeapon"),
//					iSlot = GetWeaponSlot(iWeap),
					aWeaponData[13][2],
					aWeapons[6],
					iStart,
					iEnd,
					i = 2;

				for( ; i != 8; i++) // 2, 3, 4, 5, 6, 7
				{
				    GetPlayerWeaponData(playerid, i, aWeaponData[i][0], aWeaponData[i][1]);
				}

                new
                    increment,
                    var;
				for(i = 2; i < 8; i++)
				{
					if(!aWeaponData[i][0])
					{
                        increment++;
						continue;
					}

                    var = (i - 2) - increment;
                    //if(!var) iStart = 0;
					aWeapons[var] = aWeaponData[i][0];

					//if(aWeapons[var] && !iStart) iStart = var;
				}

				// Szarságok beállítása
				new
				    iCurrPos,
					iNoSlot = 0xFF;
				for(i = 0; i != sizeof(aWeapons); i++)
				{
                    if(aWeapons[i] == iWeap)
                    {
                        iCurrPos = i;
					}

					if(35 <= aWeapons[i] <= 37)
					{
                        iNoSlot = i;
					}
				}

				// Utolsó slot kikeresése
				for(i = 5; i != 0; i--)
				{
                    if(aWeapons[i] && !iEnd && i != iNoSlot)
					{
						iEnd = i;
						break;
					}
				}

				// Rakétavetõ és lángszóró tiltása
				//printf("iWeap = %d, iSlot = %d | %d, %d, %d, %d, %d, %d, iStart: %d, iEnd: %d", iWeap, iSlot, aWeapons[0], aWeapons[1],
				//	aWeapons[2], aWeapons[3], aWeapons[4], aWeapons[5], iStart, iEnd);

				//printf("iCurrPos_: %d, iNoSlot = %d", iCurrPos, iNoSlot);
				//////////////////////////////////////////
				if(newkeys & KEY_LOOK_LEFT)
				{
					if(++iCurrPos == iNoSlot)
					{
                        iCurrPos++;
					}

					if(iCurrPos > iEnd)
					{
						iCurrPos = iStart;
					}
					//printf("iCurrPos: %d, %d", iCurrPos, aWeapons[iCurrPos]);

					SetPlayerArmedWeapon(playerid, aWeapons[iCurrPos]);
				}
				else if(newkeys & KEY_LOOK_RIGHT)
				{
					if(--iCurrPos == iNoSlot)
					{
						//printf("noslot right %d", iNoSlot);
					    iCurrPos--;
					}

					if(iCurrPos < iStart)
					{
                        iCurrPos = iEnd;
					}
					//printf("iCurrPos: %d", iCurrPos);

					SetPlayerArmedWeapon(playerid, aWeapons[iCurrPos]);
				}
			}
		}

	    case PLAYER_STATE_ONFOOT:
	    {
			if(newkeys == 131200)
			{
				new hitid = INVALID_VEHICLE_ID, hittype;
				if(GetPlayerCameraTargetVehicle(playerid) != INVALID_VEHICLE_ID)
				{
					hitid = GetPlayerCameraTargetVehicle(playerid);
					hittype = BULLET_HIT_TYPE_VEHICLE;
				}
				else if(GetPlayerCameraTargetObject(playerid) != INVALID_PLAYER_ID)
				{
				    hitid = GetPlayerCameraTargetPlayerObj(playerid);
					hittype = BULLET_HIT_TYPE_PLAYER_OBJECT;
				}

				if(hitid != INVALID_VEHICLE_ID)
				{
			    	GetObjectAndVehicleModel(playerid, hitid, hittype);
				}
			}
			//KEY_CROUCH
	    	else if(newkeys & GetPVarInt(playerid,"FlyKey") && (g_PlayerFlags[playerid] & e_FLY) && (g_pSzint{playerid} >= GetGVarInt("SZINT_CKEYJUMP", 0) || g_pDebug{playerid} == 0xFF))
	     	{
	     	    if(GetPVarInt(playerid,"FlyKey") != -2)
	    		{
					if(GetPlayerWeapon(playerid) > 1) return 0;
					if(!(IN_MINIGAME_AND_SHITS & g_pGamesData[playerid]))
					{
						GetPlayerVelocity(playerid, V[0], V[1], V[2]);
						if(floatabs(V[0]) < 3 && floatabs(V[1]) < 3 && floatabs(V[2]) < 3)
						{
	     					SetPlayerVelocity(playerid, V[0] * 1.1, V[1] * 1.1, V[2] + 1);
	        			}
        			}
				}
			}
	    	else if(newkeys & GetPVarInt(playerid,"FlyKey") && (g_PlayerFlags[playerid] & e_FLY) && g_pSzint{playerid} >= GetGVarInt("SZINT_CKEYJUMP", 0) && g_pDebug{playerid} != 0xFF)
	     	{
	     	    if(GetPVarInt(playerid,"FlyKey") != -2)
	     	    {
					if(GetPlayerWeapon(playerid) > 1) return 0;
					if(!g_pGamesData[playerid])
					{
				       SetPlayerVelocity(playerid, 0.0, 0.0, 0.0);
					}
				}
			}

			else if(newkeys & KEY_ANALOG_LEFT)
			{
				if(GetPVarType(playerid, "StartSkinID"))
				{
					new
						CurrSkinID = GetPVarInt(playerid, "StartSkinID");

					if(CurrSkinID <= 0) CurrSkinID = 311;
					if(--CurrSkinID == ADMIN_SKIN_ID)
					{
                        if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) CurrSkinID--;
					}
					SetPVarInt(playerid, "StartSkinID", CurrSkinID);
					SetPlayerSkin(playerid, CurrSkinID);

					InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_W_B_R_B_W"), CurrSkinID - 1, CurrSkinID, CurrSkinID + 1);
                    PlayerPlaySound(playerid, 1058);
				}
			}
			else if(newkeys & KEY_ANALOG_RIGHT)
			{
				if(GetPVarType(playerid, "StartSkinID"))
				{
					new
						CurrSkinID = GetPVarInt(playerid, "StartSkinID");

					if(CurrSkinID >= 312) CurrSkinID = 0;
					if(++CurrSkinID == ADMIN_SKIN_ID)
					{
                        if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) CurrSkinID++;
					}
					SetPVarInt(playerid, "StartSkinID", CurrSkinID);
					SetPlayerSkin(playerid, CurrSkinID);

					InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_W_B_R_B_W"), CurrSkinID - 1, CurrSkinID, CurrSkinID + 1);
                    PlayerPlaySound(playerid, 1058);
				}
			}
			else if(newkeys & 1024) //alt
			{
				if(GetPVarType(playerid, "OnHouse") && !g_pGamesData[playerid])
				{
					new
					    iHouseID = GetPVarInt(playerid, "OnHouse");
					if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("PropX", iHouseID), GetGVarFloat("PropY", iHouseID), GetGVarFloat("PropZ", iHouseID)) && GetPVarInt(playerid, "PlayerProp") != iHouseID && GetGVarType("PropLocked", houseid))
					{
					    SPAM_CHECK(HazFeltores, 15000) //15 másodperc
						//if(g_PlayerFlags[playerid] & e_GOD) return ShowWelcome(playerid, LANG(playerid, "MSG_RGODBAN_NEM_TORHETSZ_FEL_HAZATW"));

                        // God letiltása
						SetGoodAllowed(playerid, false);

						// Kijelzõ felmutatása
                        ShowKijelzo(playerid);
						SetPVarInt(playerid, "KijelzoHouseID", iHouseID);

						if(GetPVarType(playerid, "OnHouseTimer"))
							KillTimer(GetPVarInt(playerid, "OnHouseTimer"));

						DeletePVar(playerid, "OnHouseTimer");
						DeletePVar(playerid, "OnHouse");
					}
				}
			}
			else if(newkeys & KEY_SECONDARY_ATTACK)
			{
				new
				    bool:bNotCallEnter;
		        if(g_pGamesData[playerid] & e_POSTAS)
		        {
					if(g_pOnLevel{playerid} != 0xFF && g_pLevelHelyek[playerid]{g_pOnLevel{playerid}} != 0xFF)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][0], g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][1], g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][2]))
						{
                            bNotCallEnter = true;
							ClearAnimations(playerid);
			                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

							new
							    count,
								cash;
							for(new i; i != 5; i++)
							{
								if(g_pLevelHelyek[playerid]{i} != 0xFF) count++;
							}

							cash = floatround((GetDistance3D(POSTAS_KEZDOHELY, g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][0], g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][1], g_LevelPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][2]) * 10));
							if((cash -= (g_pPostasTime[playerid] * 3)) < 0)
							{
								cash = 0;
							}
							else
							{
		                        g_pPostaMoney[playerid] += cash;
							}

							if(count == 1)
							{
								SendClientMessagef(playerid, -1, LANG(playerid, "MSG_OSSZESEN_KERESETT_PENZ___ELFOGY"), g_pPostaMoney[playerid]);

								ShowWelcomef(playerid, LANG(playerid, "MSG_FIZETES_RGH"), FormatNumber(g_pPostaMoney[playerid]));
								GivePlayerMoneyEx(playerid, g_pPostaMoney[playerid], "Postas");

		                        g_pPostasTime[playerid] = 0;
		                        g_pPostaMoney[playerid] = 0;
		                        PlayerTextDrawSetString(playerid, TD_pPostasTime[playerid], "~p~Eltelt id§: 0 mp");
		                        PlayerTextDrawHide(playerid, TD_pPostasTime[playerid]);
							}
							else
							{
								SendClientMessagef(playerid, -1, LANG(playerid, "MSG_MEG__LEVEL_VAN_NALAD_PENZ_EZERT"), count-1, cash, g_pPostaMoney[playerid]);
							}
							GivePlayerXP(playerid, XP_POSTAS);

							// Változók nullázása
			                RemovePlayerMapIcon(playerid, 86 + g_pOnLevel{playerid});
		                    g_pLevelHelyek[playerid]{g_pOnLevel{playerid}} = 0xFF;

							g_pElvittLevel[playerid]{g_pOnLevel{playerid}} = 0xFF;

							PVarIntFel(playerid, "Postas");
							mysql_format(1, query, sizeof(query), "UPDATE `players` SET `postas` = `postas` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
							mysql_function_query(1, query, false, "", "");
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, POSTAS_KEZDOHELY))
					{
						cmd_levelek(playerid, "");
						ClearAnimations(playerid);
					}
				}
		        else if(g_pGamesData[playerid] & e_PIZZAS)
		        {
					if(g_pOnLevel{playerid} != 0xFF && g_pLevelHelyek[playerid]{g_pOnLevel{playerid}} != 0xFF)
					{
						if(IsPlayerInRangeOfPoint(playerid, 2.0, g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][0], g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][1], g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][2]))
						{
							ClearAnimations(playerid);
			                ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);

							new
							    count,
								cash;
							for(new i; i != 5; i++)
							{
								if(g_pLevelHelyek[playerid]{i} != 0xFF) count++;
							}

							cash = floatround((GetDistance3D(PIZZAS_KEZDOHELY, g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][0], g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][1], g_PizzaPos[g_pLevelHelyek[playerid]{g_pOnLevel{playerid}}][2]) * 10));
							if((cash -= (g_pPostasTime[playerid] * 3)) < 0)
							{
								cash = 0;
							}
							else
							{
		                        g_pPostaMoney[playerid] += cash;
							}

							if(count == 1)
							{
								SendClientMessagef(playerid, -1, LANG(playerid, "MSG_OSSZESEN_KERESETT_PENZ___ELFOGY_1"), g_pPostaMoney[playerid]);

								ShowWelcomef(playerid, LANG(playerid, "MSG_FIZETES_RGH"), FormatNumber(g_pPostaMoney[playerid]));
								GivePlayerMoneyEx(playerid, g_pPostaMoney[playerid], "Postas");

		                        g_pPostasTime[playerid] = 0;
		                        g_pPostaMoney[playerid] = 0;
		                        PlayerTextDrawSetString(playerid, TD_pPostasTime[playerid], "~p~Eltelt id§: 0 mp");
		                        PlayerTextDrawHide(playerid, TD_pPostasTime[playerid]);
							}
							else
							{
								SendClientMessagef(playerid, -1, LANG(playerid, "MSG_MEG__PIZZA_VAN_NALAD_PENZ_EZERT"), count-1, cash, g_pPostaMoney[playerid]);
							}
                            GivePlayerXP(playerid, XP_POSTAS);

							// Változók nullázása
			                RemovePlayerMapIcon(playerid, 86 + g_pOnLevel{playerid});
		                    g_pLevelHelyek[playerid]{g_pOnLevel{playerid}} = 0xFF;

							g_pElvittLevel[playerid]{g_pOnLevel{playerid}} = 0xFF;

							PVarIntFel(playerid, "Pizzas");
							mysql_format(1, query, sizeof(query), "UPDATE `players` SET `pizzas` = `pizzas` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
							mysql_function_query(1, query, false, "", "");
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 2.0, PIZZAS_KEZDOHELY))
					{
						cmd_pizzak(playerid, "");
						ClearAnimations(playerid);
					}
				}

                //printf("bNotCallEnter: %d", bNotCallEnter);
				if(!bNotCallEnter && !((e_POSTAS | e_PIZZAS |  e_FLAG_OWNER) & g_pGamesData[playerid]))
				{
					if(GetPVarType(playerid, "OnHouse")) // Zászlóval lese fusson, ha a háznál F gombot nyom
					{
						new
						    iHouseID = GetPVarInt(playerid, "OnHouse");
						if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("PropX", iHouseID), GetGVarFloat("PropY", iHouseID), GetGVarFloat("PropZ", iHouseID)))
						{
							cmd_enter(playerid, "");
							ClearAnimations(playerid);

							KillTimer(GetPVarInt(playerid, "OnHouseTimer"));
							DeletePVar(playerid, "OnHouseTimer");
							DeletePVar(playerid, "OnHouse");
						}
					}
					else if(GetPVarType(playerid, "OnHouseE"))
					{
						new
						    iHouseID = GetPVarInt(playerid, "OnHouseE");
						if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("InX", iHouseID), GetGVarFloat("InY", iHouseID), GetGVarFloat("InZ", iHouseID)) && GetPlayerVirtualWorld(playerid) == GetGVarInt("VirtualWorld", iHouseID))
						{
							cmd_exit(playerid, "");

							KillTimer(GetPVarInt(playerid, "OnHouseTimerE"));
							DeletePVar(playerid, "OnHouseTimerE");
							DeletePVar(playerid, "OnHouseE");
						}
					}
					else if(GetPVarType(playerid, "OnBiznis"))
					{
						new
						    iHouseID = GetPVarInt(playerid, "OnBiznis");

						if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("BizX", iHouseID), GetGVarFloat("BizY", iHouseID), GetGVarFloat("BizZ", iHouseID)))
						{
							cmd_enter(playerid, "");
							ClearAnimations(playerid);

							KillTimer(GetPVarInt(playerid, "OnBiznisTimerE"));
							DeletePVar(playerid, "OnBiznisTimerE");
							DeletePVar(playerid, "OnBiznisE");
						}
					}
					else if(GetPVarType(playerid, "OnBiznisE"))
					{
						new
						    iHouseID = GetPVarInt(playerid, "OnBiznisE");

						if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("BizInX", iHouseID), GetGVarFloat("BizInY", iHouseID), GetGVarFloat("BizInZ", iHouseID)) && GetPlayerVirtualWorld(playerid) == GetGVarInt("BizVirtualWorld", iHouseID))
						{
							cmd_exit(playerid, "");

							KillTimer(GetPVarInt(playerid, "OnBiznisTimerE"));
							DeletePVar(playerid, "OnBiznisTimerE");
							DeletePVar(playerid, "OnBiznisE");
						}
					}
				}
			}

			if(PRESSED(KEY_FIRE))
			{
				if(Bit_GetCount(gPlayerStatsTDs[playerid]))
   				{
				   	if((GetTickCount() - GetPVarInt(playerid, "StatsTick")) < 1000) return 1;
					Stats_Hide(playerid);
   				}
                //Weaponhack ellen...
				new
				    pWeap = GetPlayerWeapon(playerid);
				if(!Bit_Get(g_baAllowedWeapon[playerid], pWeap))
				{
	    			if(!(g_pOtherFlags[playerid] & e_RAKSAMP))
					{
						new
						    iCount = GetPVarInt(playerid, "WHack");
						SetPVarInt(playerid, "WHack", ++iCount);

						GetWeaponName(pWeap, country, 45);
						ShowWelcome(playerid, LANG(playerid, "MSG_RNE_HCSALJW"));
	                	PlayerPlaySound(playerid, 1009);

						AntiCheatLog(playerid, "WEAPON %s ( %d ) <%d>", country, pWeap, iCount);

						if(iCount == 4)
						{
							SendClientMessageToAdmins(COLOR_DEFAULT, 1, "MSG_ANTICHEAT_WEAPON_KICK", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, country, pWeap);
							KickEx(playerid, "fegyver cheat");
							return 1;
						}
	     				else if(iCount < 4)
					 	{
							SendClientMessageToAdmins(COLOR_DEFAULT, 1, "MSG_ANTICHEAT_WEAPON_WARN", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, country, pWeap, iCount);

							SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_FIGYELMEZTETVE_LETTEL_FEGYVER"));
							SetPlayerArmedWeapon(playerid, 0);
							SpawnPlayer(playerid);
						}
					}
				}


				//Ammo hack...
                new
					weaponid = GetPlayerWeapon(playerid),
                 	slot = GetWeaponSlot(weaponid),
                 	weap,
                 	ammo;


                GetPlayerWeaponData(playerid, slot, weap, ammo);

				if(g_pDeathMatchID[playerid] == -1 && ammo > g_pWeaponAmmo[playerid][slot]) //Ha több lõszer van nála mint amit elmentett a szerver akkor lehet hogy csal
				{
				    //SendClientMessage(playerid,-1,"ammo hack");
				}




/*
			                if(g_pDeathMatchID[playerid] == -1)
				{

					g_pWeaponAmmo[playerid][slot] --;
				}
*/

				if(pWeap == WEAPON_SPRAYCAN)
				{
					for(new i; i != sizeof(g_Tags); i++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 5.0, g_Tags[i][e_tPos][0], g_Tags[i][e_tPos][1], g_Tags[i][e_tPos][2]))
						{
							if(Bit_Get(g_pTags[playerid], i))
							{
								ShowWelcome(playerid, LANG(playerid, "MSG_PEZT_MAR_LEFUJTADW"));
							}
							else
							{
								//SendClientMessagef(playerid, -1, "Tag spray inrange: %d, sprayed: %d", i, Bit_Get(g_pTags[playerid], i));

								// Ha rá is céloz a lefújni kívánt spray tagra
								if(IsPlayerAiming(playerid, g_Tags[i][e_tPos][0], g_Tags[i][e_tPos][1], g_Tags[i][e_tPos][2], 2.5))
								{
	                                g_pSprayCount{playerid} = 0;
									SetPVarInt(playerid, "TagID", i);

									//SendClientMessagef(playerid, -1, "Tag spray aiming: %d", i);
									break;
								}
							}
						}
					}
				}

				// Fotók
				if(pWeap == WEAPON_CAMERA && GetPlayerCameraMode(playerid) == 46)
				{
					for(new i; i != sizeof(PhotoPos); i++)
					{
                        if(IsPlayerAiming(playerid, PhotoPos[i][0], PhotoPos[i][1], PhotoPos[i][2], 4.0))
                        {
		                    if(Bit_Get(g_pPhotos[playerid], i)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZT_MAR_LEFENYKEPEZTED"));

                            Bit_Set(g_pPhotos[playerid], i, true);

							new
							    Curr = UpdatePlayerPhotos(playerid);
							GivePlayerXP(playerid, 9);
							if(Curr == 50)
							{
								GivePlayerMoneyEx(playerid, 500000, "All_Photo");
								GivePlayerXP(playerid, 950);
								GameTextForPlayerf(playerid, 4000, 4, FixGameString(LANG(playerid, "LANG_PATKO_1")), Curr);
							}
							else
							{
                                GivePlayerXP(playerid, XP_FENYKEP);
								GivePlayerMoneyEx(playerid, 500, "Photo");
								GameTextForPlayerf(playerid, 4000, 4, FixGameString(LANG(playerid, "LANG_PATKO_2")), Curr);
							}
							break;
						}
					}
				}

				// Hallõdözés
		        if(g_pGamesData[playerid] & e_IN_RANGE)
		        {
					if(pWeap != GetPVarInt(playerid, "RangeWeapon"))
					{
						SendClientMessage(playerid, 0xFFBF00FF, LANG(playerid, "MSG_SHOOTING_RANGE_FEGYVERT_VALTOTTAL"));
						FinishShootingRange(playerid);
						PlayerTele(playerid, 795.8624, 1685.6016, 5.2813);
						return 1;
					}

					for(new i; i != 20; i++)
					{
						if(IsValidPlayerObject(playerid, A_Objects[i][playerid]))
					    {
					        static
								Float:oPos[3];
					        GetPlayerObjectPos(playerid, A_Objects[i][playerid], oPos[0], oPos[1], oPos[2]);
					        if(IsPlayerAiming(playerid, oPos[0], oPos[1], oPos[2], 0.2))
					        {
					            if(PlayerObjects{playerid} > 0)
					            {
					                DestroyPlayerObject(playerid, A_Objects[i][playerid]);

					                --PlayerObjects{playerid};
					                ++Objects_Hit2{playerid};

					                new
					                    TempTime[3];
					                ConvertTime(var1, PlayerInfo[playerid][pLastActive] - GetPVarInt(playerid, "RangeTick"), TempTime[0], TempTime[1], TempTime[2]);

									format(tmp, sizeof(tmp), "Hit: %d, Id§: %d:%02d.%03d, Record: %d:%02d.%03d", Objects_Hit2{playerid}, TempTime[0], TempTime[1], TempTime[2], Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);
									PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "ShotRangeTD"), tmp);

									GameTextForPlayer(playerid, "~b~~h~H~r~!~b~~h~T!", 250, 3);
					                if(PlayerObjects{playerid} == 0 && Objects_Hit2{playerid} != 20)
			    	  				{
			      						Objects_Missed{playerid} = 20 - Objects_Hit2{playerid};
			    	   	 				MoveObjectsForPlayerAgain(playerid);
									}

									else if(Objects_Hit2{playerid} == 20)
									{
										new
										    TotalTime = GetTickCount() - GetPVarInt(playerid, "RangeTick");

										if(TotalTime <= Range[e_rRecord] || !Range[e_rRecord])
										{
											new
											    minut,
											    sec,
											    ms,
											    curr = Range[e_rRecord] - TotalTime;

											ConvertTime(var2, curr, minut, sec, ms);

											SendClientMessageToAllf(COLOR_ORANGE, "MSG_HALLOVOLDE__UJ_REKORDOT_CSINA", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
											if(Range[RegID] != -1) SendClientMessageToAllf(COLOR_ORANGE, "MSG_AZ_UJ_REKORD2D3D_2D3D", TempTime[0], TempTime[1], TempTime[2], sec, ms, Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);

											Range[e_rRecord] = TotalTime;
											Range[e_ConvertedTime][0] = TempTime[0];
											Range[e_ConvertedTime][1] = TempTime[1];
											Range[e_ConvertedTime][2] = TempTime[2];
											Range[RegID] = PlayerInfo[playerid][pRegID];
											Range[Player][0] = EOS;
											strcat(Range[Player], pName(playerid), MAX_PLAYER_NAME);

											getdate(year, month, day);
											gettime(hour, minute, second);
											mysql_format(1, query, sizeof(query), "UPDATE `config` SET `name` = '%s', `reg_id` = %d, `record` = %d, `time` = %d WHERE `id` = 1", pName(playerid), PlayerInfo[playerid][pRegID], TotalTime, CurrentTimestamp());
											mysql_function_query(1, query, false, "", "");
										}
										else
										{
											new
											    minut,
											    sec,
											    ms,
											    curr = TotalTime - Range[e_rRecord];

											ConvertTime(var2, curr, minut, sec, ms);
											SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HALLOVOLDOZES_BEFEJEZVE_REKORD"), Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2], TempTime[0], TempTime[1], TempTime[2], minut, sec, ms);
										}

									    DestroyPlayerObject(playerid, A_Objects[i][playerid]);
					            		PlayerObjects{playerid} --;
										FinishShootingRange(playerid);

										ShowPlayerDialogEx(playerid, 2593, DIALOG_STYLE_MSGBOX, "{FFBF00}Hallövölde:{FFFFFF} Hallövölde befejezve!",\
										"{FFBF00}[ {FFFFFF}Nyereményed{FFBF00} ]\n\
										{00FF00}$3.000{FFFFFF} dollár\n\
										{00FF40}+5{FFFFFF} XP\n\n\
										Ez pont egy jó mód arra, hogy XP-t és pénzt szerezz :)", "Ok");
										LoadPlayerWeaponInfo(playerid);

										GivePlayerMoneyEx(playerid, 3000, "Range");
										GivePlayerXP(playerid, XP_RANGE);
										SetPVarInt(playerid, "G_Range", GetPVarInt(playerid, "G_Range") + 1);

										mysql_format(1, query, sizeof(query), "UPDATE `players` SET `rangeshots` = `rangeshots` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
										mysql_function_query(1, query, false, "", "");
									}
								}
							}
					    }
					}
				}
			}

		    if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
				|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
				|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT)))
			{
				if(!IsPlayerInWater(playerid)) SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
/*
		    if (((newkeys & KEY_SPRINT && newkeys & KEY_UP) || (newkeys & KEY_SPRINT && newkeys & KEY_DOWN) || (newkeys & KEY_SPRINT && newkeys & KEY_LEFT) || (newkeys & KEY_SPRINT && newkeys & KEY_RIGHT))
				|| ((oldkeys & KEY_SPRINT && newkeys & KEY_UP) || (oldkeys & KEY_SPRINT && newkeys & KEY_DOWN) || (oldkeys & KEY_SPRINT && newkeys & KEY_LEFT) || (oldkeys & KEY_SPRINT && newkeys & KEY_RIGHT))
				|| ((newkeys & KEY_SPRINT && oldkeys & KEY_UP) || (newkeys & KEY_SPRINT && oldkeys & KEY_DOWN) || (newkeys & KEY_SPRINT && oldkeys & KEY_LEFT) || (newkeys & KEY_SPRINT && oldkeys & KEY_RIGHT)))
			{
				if(!IsPlayerInWater(playerid)) SetTimerEx("SprintAnim", 100, false, "d", playerid);
			}
			*/
			if(newkeys & KEY_SECONDARY_ATTACK)
			{
				GetPlayerPos(playerid, X, Y, Z);
			    if(Y < -1301.4 && Y > -1303.2417 && X < 1786.2131 && X > 1784.1555)
			    {
			        ShowElevatorDialog(playerid);
					return 1;
				}
				else    // Is he in a floor button?
				{
				    if(Y > -1301.4 && Y < -1299.1447 && X < 1785.6147 && X > 1781.9902)
				    {
				        // He is most likely using it, check floor:
						new
							iCount = 20;
						while(Z < GetDoorsZCoordForFloor(iCount) + 3.5 && iCount > 0)
						    iCount --;

						if(iCount == 0 && Z < GetDoorsZCoordForFloor(0) + 2.0)
						    iCount = -1;

						if(iCount <= 19)
						{
							CallElevator(playerid, iCount + 1);
							GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_LIFT")), 3500, 4);
							return 1;
						}
				    }
				}

				new
					iVehicle;
				GetVehicleWithinDistance(playerid, X, Y, Z, 10.0, iVehicle);
				if(IsVehicleToy(iVehicle) && GetDynamicVehicleVirtualWorld(iVehicle) == GetPlayerVirtualWorld(playerid) && GetDynamicVehicleInterior(iVehicle) == GetPlayerInterior(playerid))
				{
				    PutPlayerInDynamicVehicle(playerid, iVehicle, 0);
				}
			}
			else if(newkeys & KEY_ANALOG_LEFT)
			{
				GetPlayerPos(playerid, X, Y, Z);
				if(GetDistance2D(X, Y, 1378.57, -1152.55) < 25.0)
				{
					StopDynamicObject(LiftObject[0]);
                    g_GateFlags ^= (1 << 11);
				}
				else if(GetDistance2D(X, Y, 1533.41, -1237.24) < 25.0)
				{
					StopDynamicObject(LiftObject[1]);
                    g_GateFlags ^= (1 << 12);
				}
				else if(GetDistance2D(X, Y, 1440.90, -1039.52) < 25.0)
				{
					StopDynamicObject(LiftObject[2]);
                    g_GateFlags ^= (1 << 13);
				}
				else if(GetDistance2D(X, Y, 1533.37, -1064.65) < 25.0)
				{
		        	StopDynamicObject(LiftObject[3]);
                    g_GateFlags ^= (1 << 14);
				}
				else if(GetDistance2D(X, Y, 1556.37, -1147.73) < 25.0)
				{
					StopDynamicObject(LiftObject[4]);
                    g_GateFlags ^= (1 << 15);
				}
				else if(GetDistance2D(X, Y, 355.44, -1467.19) < 25.0)
				{
					StopDynamicObject(LiftObject[5]);
                    g_GateFlags ^= (1 << 16);
				}
				else if(GetDistance2D(X, Y, 311.65, -1612.49) < 25.0)
				{
		        	StopDynamicObject(LiftObject[6]);
                    g_GateFlags ^= (1 << 17);
				}
				else if(GetDistance2D(X, Y, 311.65, -1612.49) < 25.0)
				{
		        	StopDynamicObject(LiftObject[6]);
                    g_GateFlags ^= (1 << 17);
				}
			}
		}

	    case PLAYER_STATE_SPECTATING:
	    {
			if(newkeys & KEY_ANALOG_RIGHT)
			{
		        printf("right: %d", spectatorid[playerid]);
				for(new x = spectatorid[playerid] + 1;  x <= MAX_PLAYERS; x++)
				{
					new count = 0;
					if(x == MAX_PLAYERS)
					{
						x = 0;
						if(++count == 2) break;
					}

					if(IsPlayerConnected(x) && x != playerid)
					{
						new bool:allow = false;
						if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
						{
							if(g_pVIP[playerid])
							{
					            if(GetPVarInt(x, "Level") < 1 && !IsPlayerAdmin(x))
					            {
									allow = true;
								}
								else
								{
									allow = !!(g_PlayerFlags[x] & e_ALLOW_SPEC);
								}
							}
							else
							{
					            allow = !!(g_PlayerFlags[x] & e_ALLOW_SPEC);
							}
						}
						else
						{
							allow = true;
						}

						if((GetPlayerState(x) == PLAYER_STATE_SPECTATING && spectatorid[x] != INVALID_PLAYER_ID) || !allow || (GetPlayerState(x) != PLAYER_STATE_ONFOOT && GetPlayerState(x) != PLAYER_STATE_DRIVER && GetPlayerState(x) != PLAYER_STATE_PASSENGER))
						{
							continue;
						}
						else
						{
							spectatorid[playerid] = x;
							SpecPlayer(playerid, x);
							printf("x: %d", x);
							break;
						}
					}
				}
			}
			else if(newkeys & KEY_ANALOG_LEFT)
			{
				new count = 0;
			    for(new x = spectatorid[playerid] -1; x >= -1; x--)
				{
			    	if(x == -1)
					{
						x = MAX_PLAYERS;
						if(++count == 2) break;
					}
			        if(IsPlayerConnected(x) && x != playerid)
					{
						new bool:allow = false;
						if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
						{
							if(g_pVIP[playerid])
							{
					            if(GetPVarInt(x, "Level") < 1 && !IsPlayerAdmin(x))
					            {
									allow = true;
								}
								else
								{
									allow = !!(g_PlayerFlags[x] & e_ALLOW_SPEC);
								}
							}
							else
							{
					            allow = !!(g_PlayerFlags[x] & e_ALLOW_SPEC);
							}
						}
						else
						{
							allow = true;
						}

						if((GetPlayerState(x) == PLAYER_STATE_SPECTATING && spectatorid[x] != INVALID_PLAYER_ID) || !allow || (GetPlayerState(x) != PLAYER_STATE_ONFOOT && GetPlayerState(x) != PLAYER_STATE_DRIVER && GetPlayerState(x) != PLAYER_STATE_PASSENGER))
						{
							continue;
						}
						else
						{
							spectatorid[playerid] = x;
							SpecPlayer(playerid, x);
							break;
						}
					}
				}
			}

		}
    }

	if(newkeys & KEY_HANDBRAKE)
	{
		if(g_PlayerData[playerid] & e_USE_LOOP_ANIM)
		{
			StopLoopingAnim(playerid);
		}
    }

	if(newkeys & GetPVarInt(playerid,"TeleportMenuKey"))
	{
	    if(GetPVarInt(playerid,"TeleportMenuKey") != -2)
	    {
			if(!GetPVarType(playerid, "fCamPosX") && !(g_pGamesData[playerid] & e_WORLDEDIT))
			{
				if(!NoTele(playerid))
				{
    				cmd_t(playerid, "");
				}
			}
			else
			{
				new
				    Float:fCamLookAt[3];
				GetPlayerPos(playerid, fCamLookAt[0], fCamLookAt[1], fCamLookAt[2]);
				SetPVarFloat(playerid, "fCamLookAtX", fCamLookAt[0]);
				SetPVarFloat(playerid, "fCamLookAtY", fCamLookAt[1]);
				SetPVarFloat(playerid, "fCamLookAtZ", fCamLookAt[2]);

				SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "fCamPosX"), GetPVarFloat(playerid, "fCamPosY"), GetPVarFloat(playerid, "fCamPosZ"));
				SetPlayerCameraLookAt(playerid, fCamLookAt[0], fCamLookAt[1], fCamLookAt[2]);
			}
		}
	}

	if(newkeys & KEY_NO)
	{
        if(GetPVarType(playerid, "fCamPosX"))
        {
			new
			    Float:fCamPos[3];
			GetPlayerPos(playerid, fCamPos[0], fCamPos[1], fCamPos[2]);
			SetPVarFloat(playerid, "fCamPosX", fCamPos[0]);
			SetPVarFloat(playerid, "fCamPosY", fCamPos[1]);
			SetPVarFloat(playerid, "fCamPosZ", fCamPos[2]);

			SetPlayerCameraPos(playerid, fCamPos[0], fCamPos[1], fCamPos[2]);
			SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "fCamLookAtX"), GetPVarFloat(playerid, "fCamLookAtY"), GetPVarFloat(playerid, "fCamLookAtZ"));
		}
	}

	if(newkeys & KEY_ANALOG_RIGHT)
	{
		if(g_pSzint{playerid} >= GetGVarInt("SZINT_KILLBOMB", 0))
		{
			foreach(new i: Player)
			{
				if(!GetPVarType(i, "BombX")) continue;
				if(IsPlayerInRangeOfPoint(playerid, 1.3, GetPVarFloat(i, "BombX"), GetPVarFloat(i, "BombY"), GetPVarFloat(i, "BombZ")))
				{
					if((GetTickCount() - GetPVarInt(i, "BombTick")) < 3000) return ShowWelcome(playerid, LANG(playerid, "MSG_RMEG_LESE_RAKTA_A_BOMBAT_WO"));

					DestroyDynamicObject(GetPVarInt(i, "BombObject"));
				    DeletePVar(i, "BombObject");

					DeletePVar(i, "BombX");
					DeletePVar(i, "BombY");
					DeletePVar(i, "BombZ");
					DeletePVar(i, "BombTick");

				    KillTimer(GetPVarInt(i, "BombTimer"));
				    DeletePVar(i, "BombTimer");

					if(playerid != i)
					{
					    ShowWelcomef(i, LANG(i, "MSG_YHFAILNB_HMEGSEMMISI"), pName(playerid), playerid);
					}

					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
					ShowWelcome(playerid, LANG(playerid, "MSG_WBOMBA_MEGSEMMISITVE"));
					return 1;
				}
			}
		}
		if(GetPVarType(playerid, "BombX"))
		{
			if(3.0 < GetPlayerDistanceFromPoint(playerid, GetPVarFloat(playerid, "BombX"), GetPVarFloat(playerid, "BombY"), GetPVarFloat(playerid, "BombZ")) < 76.0)
			{
				KillTimer(GetPVarInt(playerid, "BombTimer"));
				BombExplode(playerid);
				return 1;
			}
		}

		// Kapuk ellenõrzése
		CheckOpenCloseGates(playerid);
	}
	return 1;
}

stock CheckOpenCloseGates(playerid)
{
	// Kapuk
	if(IsPlayerInRangeOfPoint(playerid, 5.0, -647.6130, 950.9053, 12.1328)) // Hill House
	{
		if(g_GateFlags & (1 << 0))
		{
			MoveDynamicObject(ajtonyito[2],  -646.123,951.225,10.580, 2);
		}
		else
		{
			MoveDynamicObject(ajtonyito[2],  -646.074,951.244,7.958,  2);
		}
		g_GateFlags ^= (1 << 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 30, 1541.5928, -1628.2693, 13.3828)) // Rend LS
    {
		if(g_GateFlags & (1 << 1))
		{
			MoveDynamicObject(RendLSGate,  1540.663,-1621.081,12.208,  4);
		}
		else
		{
			MoveDynamicObject(RendLSGate,  1540.597,-1621.087,5.819,  4);
		}
		g_GateFlags ^= (1 << 1);
	}
    else if(IsPlayerInRangeOfPoint(playerid, 30, -1572.4279, 661.8345, 7.1875)) // Rend SF
    {
		if(g_GateFlags & (1 << 2))
		{
			MoveDynamicObject(RendSFGate[0],  -1571.966,655.259,6.335,  4);
		}
		else
		{
			MoveDynamicObject(RendSFGate[0],  -1572.062,655.265,-0.813,  4);
		}
		g_GateFlags ^= (1 << 2);
	}
    else if(IsPlayerInRangeOfPoint(playerid, 30, -1640.2043, 681.9672, 7.1875)) // Rend SF 2
    {
		if(g_GateFlags & (1 << 3))
		{
			MoveDynamicObject(RendSFGate[1],  -1640.786,676.508, 4.773,  4);
		}
		else
		{
			MoveDynamicObject(RendSFGate[1],  -1640.786,676.508,-0.744,  4);
		}
		g_GateFlags ^= (1 << 3);
	}
    else if(IsPlayerInRangeOfPoint(playerid, 30, 2237.1301, 2453.8628, 10.6823)) // Rend LV
    {
		if(g_GateFlags & (1 << 4))
		{
			MoveDynamicObject(RendLVGate,  2236.687,2459.184,9.584,  4);
		}
		else
		{
			MoveDynamicObject(RendLVGate,  2236.687,2459.184,2.737,  4);
		}
		g_GateFlags ^= (1 << 4);
	}
    else if(IsPlayerInRangeOfPoint(playerid, 30, -2681.7683, 1933.1801, 39.4459)) // Admincastle
    {
		if(g_GateFlags & (1 << 6))
		{
			MoveDynamicObject(g_AhouseGate, -2683.536,1934.226,42.418, 5);
		}
		else
		{
    		MoveDynamicObject(g_AhouseGate,  -2683.412,1932.766,26.000, 5);
		}
		g_GateFlags ^= (1 << 6);
	}
    else if(IsPlayerInRangeOfPoint(playerid, 30, 1003.2534, -643.8311, 121.5039)) // My House
    {
        if(GetPVarInt(playerid, "Level") != 4)
        {
			ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_OLYAN_KAPU"));
			return 1;
		}

		if(g_GateFlags & (1 << 7))
		{
			MoveDynamicObject(MyGate,  999.550,-645.140,120.788, 2);
		}
		else
		{
			MoveDynamicObject(MyGate,  991.671,-649.108,120.720, 2);
		}
		g_GateFlags ^= (1 << 7);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10, -2956.8542, -2016.0625, 33.4331)) // Sevile
    {
		if(GetPVarInt(playerid, "HQ") != 2 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEVILES"));

		if(g_GateFlags & (1 << 8))
		{
			MoveDynamicObject(seajto, -2956.8542, -2016.0625, 33.4331, 5.0);
		}
		else
		{
			MoveDynamicObject(seajto, -2947.9501,-2029.3343,33.4331, 5.0);
		}
		g_GateFlags ^= (1 << 8);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10, -2961.2128,-2012.5002,22.88210)) // Sevile
    {
		if(GetPVarInt(playerid, "HQ") != 2 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEVILES"));

		if(g_GateFlags & (1 << 9))
		{
			MoveDynamicObject(senagyajto,-2961.2128,-2012.5002,22.88210, 5.0);
		}
		else
		{
			MoveDynamicObject(senagyajto,-2950.8515,-2027.7138,22.88210, 5.0);
		}
		g_GateFlags ^= (1 << 9);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10, -3028.2836,-2013.9964,122.30279)) // Sevile
    {
		if(GetPVarInt(playerid, "HQ") != 2 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEVILES"));

        if(g_GateFlags & (1 << 10))
		{
			MoveDynamicObject(setoronyajto,-3028.2836,-2013.9964,122.30279, 5.0);
		}
		else
		{
			MoveDynamicObject(setoronyajto,-3028.2836,-2013.9964,116.30279, 5.0);
		}
		g_GateFlags ^= (1 << 10);

	}

	GetPlayerPos(playerid, X, Y, Z);
	if(GetDistance2D(X, Y, 1378.57, -1152.55) < 25)
	{
		if(g_GateFlags & (1 << 11)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[0], 1378.57, -1152.55, 23.05, (GetGVarType("LiftSpeed", 1)) ? (GetGVarFloat("LiftSpeed", 1)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[0], 1378.57, -1152.55, 185.50, (GetGVarType("LiftSpeed", 1)) ? (GetGVarFloat("LiftSpeed", 1)) : (5.0));
		}
		g_GateFlags ^= (1 << 11);
	}
	else if(GetDistance2D(X, Y, 1533.41, -1237.24) < 25)
	{
		if(g_GateFlags & (1 << 12)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[1], 1533.41, -1237.24, 16.00, (GetGVarType("LiftSpeed", 2)) ? (GetGVarFloat("LiftSpeed", 2)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[1], 1533.41, -1237.24, 249.12, (GetGVarType("LiftSpeed", 2)) ? (GetGVarFloat("LiftSpeed", 2)) : (5.0));
		}
		g_GateFlags ^= (1 << 12);
	}
	else if(GetDistance2D(X, Y, 1440.90, -1039.52) < 25)
	{
		if(g_GateFlags & (1 << 13)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[2], 1440.90, -1039.52, 23.10, (GetGVarType("LiftSpeed", 3)) ? (GetGVarFloat("LiftSpeed", 3)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[2], 1440.90, -1039.52, 211.90, (GetGVarType("LiftSpeed", 3)) ? (GetGVarFloat("LiftSpeed", 3)) : (5.0));
		}
		g_GateFlags ^= (1 << 13);
	}
	else if(GetDistance2D(X, Y, 1533.37, -1064.65) < 25)
	{
		if(g_GateFlags & (1 << 14)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[3], 1533.37, -1064.65, 23.82, (GetGVarType("LiftSpeed", 4)) ? (GetGVarFloat("LiftSpeed", 4)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[3], 1533.37, -1064.65, 179.58, (GetGVarType("LiftSpeed", 4)) ? (GetGVarFloat("LiftSpeed", 4)) : (5.0));
		}
		g_GateFlags ^= (1 << 14);
	}
	else if(GetDistance2D(X, Y, 1556.37, -1147.73) < 25)
	{
		if(g_GateFlags & (1 << 15)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[4], 1556.37, -1147.73, 22.58, (GetGVarType("LiftSpeed", 5)) ? (GetGVarFloat("LiftSpeed", 5)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[4], 1556.37, -1147.73, 134.28, (GetGVarType("LiftSpeed", 5)) ? (GetGVarFloat("LiftSpeed", 5)) : (5.0));
		}
		g_GateFlags ^= (1 << 15);
	}
	else if(GetDistance2D(X, Y, 355.44, -1467.19) < 25)
	{
		if(g_GateFlags & (1 << 16)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[5], 355.44, -1467.19, 34.57, (GetGVarType("LiftSpeed", 6)) ? (GetGVarFloat("LiftSpeed", 6)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[5], 355.44, -1467.19, 74.93, (GetGVarType("LiftSpeed", 6)) ? (GetGVarFloat("LiftSpeed", 6)) : (5.0));
		}
		g_GateFlags ^= (1 << 16);
	}
	else if(GetDistance2D(X, Y, 311.65, -1612.49) < 25)
	{
		if(g_GateFlags & (1 << 17)) // Fentvan, akk le
		{
			MoveDynamicObject(LiftObject[6], 311.65, -1612.49, 33.22, (GetGVarType("LiftSpeed", 7)) ? (GetGVarFloat("LiftSpeed", 7)) : (5.0));
		}
		else
		{
			MoveDynamicObject(LiftObject[6], 311.65, -1612.49, 112.28, (GetGVarType("LiftSpeed", 7)) ? (GetGVarFloat("LiftSpeed", 7)) : (5.0));
		}
		g_GateFlags ^= (1 << 17);
	}
	else if(GetDistance2D(X, Y, -1167.280273, -2201.509765) < 15.0)
	{
    	if(g_GateFlags & (1 << 5))
    	{
			MoveDynamicObject(gHeavenLift, -1167.280273, -2201.509765, 19.500000, 19.0);
		}
		else
		{
			MoveDynamicObject(gHeavenLift, -1167.280273, -2201.509765, 293.118469, 19.0);
		}
        g_GateFlags ^= (1 << 5);
	}
/*
	else if(GetDistance2D(X, Y, 2532.5757, -1647.7396) < 15.0)
	{
        if(GetPVarInt(playerid, "HQ") == 1 || GetPVarInt(playerid, "Level") == 4)
        {
        	if(g_GateFlags & (1 << 29))
        	{
				MoveDynamicObject(gGroveLift, 2534.44189453,-1637.06774902,45.93661118, 4.5);
				MoveDynamicObject(gGroveLift + 1, 2534.44531250,-1645.64550781,45.92460632, 4.5);
			}
			else
			{
				MoveDynamicObject(gGroveLift, 2534.44189453,-1637.06774902,12.934694290161, 4.5);
				MoveDynamicObject(gGroveLift + 1, 2534.44531250,-1645.64550781,12.934694290161, 4.5);
			}
            g_GateFlags ^= (1 << 29);
		}
	}

	else if(IsPlayerInRangeOfPoint(playerid, 32.0, 2443.9336, -1658.7274, 13.3047)) // Grove
    {
        if(GetPVarInt(playerid, "HQ") == 1 || GetPVarInt(playerid, "Level") == 4)
        {
			if(g_GateFlags & (1 << 18))
			{
				if(g_ServerFlags & e_AUTOGATE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_KAPU_AUTOMATARA_VAN_ALLITVA"));

				MoveDynamicObject(gGroveGate, 2442.12280273,-1659.05505371,16.20638084, 5.0);
			}
			else
			{
				MoveDynamicObject(gGroveGate, 2442.12207031,-1659.05468750,7.46841621, 5.0);
				if(g_ServerFlags & e_AUTOGATE)
				{
					SetTimer("Vissza", 8000, false);
			        ShowWelcome(playerid, LANG(playerid, "MSG_HQ_KAPU_KINYITVA_6_MASODPERC"));
				}
				else
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_HQ_KAPU_KINYITVA"));
				}

			}
            g_GateFlags ^= (1 << 18);
		}
	}
*/
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, 2143.5, 1292, 14.800000190735)) // Spawnhely kõ
    {
		if(g_GateFlags & (1 << 19))
		{
			MoveDynamicObject(gSpawnKo, 2143.5, 1292, 14.800000190735, 5.0);
		}
		else
		{
			MoveDynamicObject(gSpawnKo, 2143.1000976563, 1294.5999755859, 14.800000190735, 5.0);
		}
        g_GateFlags ^= (1 << 19);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 10.0, -205.687744, -2285.106933, 30.657760)) // Lux Gate
	{
		if(g_GateFlags & (1 << 20)) // Nyitva, akkor csukni
		{
			MoveDynamicObject(gLuxGate, -205.687744, -2285.106933, 30.657760, 3.0);
		}
		else
		{
			MoveDynamicObject(gLuxGate, -212.831069, -2275.576416, 30.637243, 3.0);
		}
		g_GateFlags ^= (1 << 20);
	}

	/*else if(IsPlayerInRangeOfPoint(playerid, 15.0, 815.79998779297, -1700.0 , 8.0)) // Buzikapu
	{
		if(g_GateFlags & (1 << 21)) // Nyitva, akkor csukni
		{
			MoveDynamicObject(gBuzikapu, 815.79998779297, -1700.0, 8.0, 3.0);
		}
		else
		{
			MoveDynamicObject(gBuzikapu, 815.79998779297, -1700.0, 15.300000190735, 3.0);
		}
		g_GateFlags ^= (1 << 21);
	}*/

/*
	else if(IsPlayerInRangeOfPoint(playerid, 50.0, 933.209777, -2380.161621, 20.430033)) // L&M Lift
	{
		if(g_GateFlags & (1 << 21)) // Fentvan, akk le
		{
			MoveDynamicObject(LMLift, 933.209777, -2380.161621, 11.430033, 5.0, 0.00, 0.00, 0.00);
		}
		else
		{
			MoveDynamicObject(LMLift, 933.209777, -2380.161621, 39.390018, 5.0, 0.00, 0.00, 0.00);
		}
		g_GateFlags ^= (1 << 21);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 20, -3960.88, -3269.58, 1.71)) // L&M Lift
	{
		if(g_GateFlags & (1 << 22)) // Fentvan, akk le
		{
			MoveDynamicObject(LMBelsoKapu, -3960.88, -3269.58, 1.71, 3.5, 0.00, 0.00, 0.00);
		}
		else
		{
			MoveDynamicObject(LMBelsoKapu, -3960.88, -3269.58, 1.0229, 3.5, 90.00, 0.00, 0.00);
		}
		g_GateFlags ^= (1 << 22);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 17, 1332.4695,733.8425,10.8203)) // SWAT Gate
	{
        if(GetPVarInt(playerid, "HQ") == 4 || GetPVarInt(playerid, "Level") == 4)
        {
			if(g_GateFlags & (1 << 23)) // Nyitva, akkor csukni
			{
				MoveDynamicObject(gSWATGate[0], 1342.2529296875, 729.34436035156, 9.8203125, 5);
				MoveDynamicObject(gSWATGate[1], 1323.4090576172, 740.96716308594, 9.9820775985718, 5);
			}
			else
			{
				MoveDynamicObject(gSWATGate[0], 1342.2529296875, 729.34436035156, 3, 5);
				MoveDynamicObject(gSWATGate[1], 1323.4090576172, 740.96716308594, 3, 5);
			}
			g_GateFlags ^= (1 << 23);
		}
	}
*/
	else if(IsPlayerInRangeOfPoint(playerid, 25, 2499.4912, 2772.5830, 10.8203) && g_pDeathMatchID[playerid] == -1) // MGM Kapu
	{
		if(g_GateFlags & (1 << 24)) // Fentvan, akk le
		{
			MoveDynamicObject(MGMGate[0], 2497.4063, 2777.0703, 11.5313, 5);
			MoveDynamicObject(MGMGate[1], 2497.4063, 2769.1094, 11.5313, 5);
		}
		else
		{
			MoveDynamicObject(MGMGate[0], 2497.2212, 2784.9668, 11.5313, 5);
			MoveDynamicObject(MGMGate[1], 2497.4578, 2761.2329, 11.5313, 5);
		}
		g_GateFlags ^= (1 << 24);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 25, 135.0370, 1941.6718, 19.3184) && g_pDeathMatchID[playerid] == -1) // Area51 Kapu Külsõ
	{
		if(g_GateFlags & (1 << 25)) // Fentvan, akk le
		{
			MoveDynamicObject(A51Gate[0], 135.23, 1941.32, 20.97, 5);
		}
		else
		{
			MoveDynamicObject(A51Gate[0], 135.23, 1941.32, 13.00, 5);
		}
		g_GateFlags ^= (1 << 25);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 10, 286.0214, 1821.5029, 17.64064)) // Area51 Kapu Belsõ
	{
		if(g_GateFlags & (1 << 26)) // Fentvan, akk le
		{
			MoveDynamicObject(A51Gate[1], 285.67, 1821.17, 19.22, 5);
		}
		else
		{
			MoveDynamicObject(A51Gate[1], 285.67, 1821.17, 13.00, 5);
		}
		g_GateFlags ^= (1 << 26);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 30, -2046.0968,-101.8634,35.1641)) // SF Autóiskola
	{
		if(g_GateFlags & (1 << 27)) // Fentvan, akk le
		{
			MoveDynamicObject(DriverSchool[0], -2057.09, -102.41, 35.84, 3.5, 0.00, 0.00, 0.00);
			MoveDynamicObject(DriverSchool[1], -2041.13, -102.42, 35.84, 3.5, 0.00, 0.00, 0.00);
			MoveDynamicObject(DriverSchool[2], -2049.08, -102.42, 35.84, 3.5, 0.00, 0.00, 0.00);
		}
		else
		{
			MoveDynamicObject(DriverSchool[0], -2057.09, -102.41, 33.5, 3.5, 90.00, 0.00, 0.00);
			MoveDynamicObject(DriverSchool[1], -2041.13, -102.42, 33.5, 3.5, 90.00, 0.00, 0.00);
			MoveDynamicObject(DriverSchool[2], -2049.08, -102.42, 33.5, 3.5, 90.00, 0.00, 0.00);
		}
		g_GateFlags ^= (1 << 27);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 30, 1141.6295,1362.6282,10.7616)) // LV Motorkaiskola
	{
		if(g_GateFlags & (1 << 28)) // Fentvan, akk le
		{
			MoveDynamicObject(BikeSchool, 1142.03, 1362.50, 12.48, 3.5, 0.00, 0.00, 0.00);
		}
		else
		{
			MoveDynamicObject(BikeSchool, 1153.1174, 1351.5192, 12.4844, 3.5, 0.00, 0.00, 90.00);
		}
		g_GateFlags ^= (1 << 28);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 30.0, -2304.4727, 161.8827, 35.3125)) // Rocket 2
	{
		if(g_GateFlags & (1 << 31) == (1 << 31))
		{
			MoveDynamicObject(RocketObject, -2303.08, 161.94, 31.52, 5);
		}
		else
		{
			MoveDynamicObject(RocketObject, -2303.08, 161.94, 43.52, 5);
		}
		g_GateFlags ^= (1 << 31);
	}

	if(IsPlayerInDynamicArea(playerid, gVidamparkZone))
	{
		new
		    Float:dist = FLOAT_INFINITY,
		    id;
		for(new i; i != sizeof(g_HintakPos); i++)
		{
			if((Angle = GetDistance2D(X, Y, g_HintakPos[i][0], g_HintakPos[i][1])) < dist)
			{
				dist = Angle;
				id = i;
			}
		}

		switch(id)
		{
			case 0: cmd_roller(playerid, "");
			case 1: cmd_carousel(playerid, "");
			case 2: cmd_revolution(playerid, "");
			case 3: cmd_observer(playerid, "");
			case 4: cmd_topgun(playerid, "");
			case 5: cmd_cow(playerid, "");
			case 6: cmd_projekt(playerid, "");
			case 7: cmd_thejail(playerid, "");
			case 8: cmd_viking(playerid, "");
			case 9: cmd_caida(playerid, "");
		}
	}
	return 1;
}

forward ResetPassengerFireMode(playerid, vehicleid, seatid);
public ResetPassengerFireMode(playerid, vehicleid, seatid)
{
	PutPlayerInDynamicVehicle(playerid, vehicleid, seatid);
	DeletePVar(playerid, "PFireTimer");
	return 1;
}

//==============================================================================
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    // printf("OnEnterExitModShop(playerid = %d, enterexit = %d, interiorid = %d)", playerid, enterexit, interiorid);
    // SendClientMessagef(playerid, COLOR_RED, "enterexit = %d", enterexit);

	if(!enterexit)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
		houseid = GetPVarInt(playerid, "PlayerProp");
		if(vID == GetGVarInt("HouseCar", houseid))
		{
			new
				iCompID[14];
			for(new i; i != 14; i++)
			{
				format(name, sizeof(name), "CarComponent_%d", i);
				iCompID[i] = GetDynamicVehComponentInSlot(vID, i);

				SetGVarInt(name, iCompID[i], houseid);
			}
			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `comp_0` = %d, `comp_1` = %d, `comp_2` = %d, `comp_3` = %d, `comp_4` = %d, `comp_5` = %d, `comp_6` = %d, `comp_7` = %d, `comp_8` = %d, `comp_9` = %d, `comp_10` = %d, `comp_11` = %d, `comp_12` = %d, `comp_13` = %d WHERE `id` = %d", iCompID[0], iCompID[1], iCompID[2], iCompID[3], iCompID[4], iCompID[5], iCompID[6], iCompID[7], iCompID[8], iCompID[9], iCompID[10], iCompID[11], iCompID[12], iCompID[13], houseid);
			mysql_function_query(1, query, false, "", "");
		}
	}
	else
	{
		if(g_BonusCarOwner == playerid)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_TUNINGOLHATOD_A_BONUSZAUTOT"));
			BonusCar();
		}
	}
	return 1;
}
#if defined UVS
public OnDynamicVehicleRespray(playerid, vehicleid, color1, color2)
#else
public OnVehicleRespray(playerid, vehicleid, color1, color2)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    //SendClientMessagef(playerid, COLOR_WHITE, "OnVehicleRespray(playerid = %d, vehicleid =%d, color1 = %d, color2 = %d)", playerid, vehicleid, color1, color2);
    houseid = GetPVarInt(playerid, "PlayerProp");
	if(vehicleid == GetGVarInt("HouseCar", houseid))
	{
        SetGVarInt("CarColor1", color1, houseid);
        SetGVarInt("CarColor2", color2, houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_color_1` = %d, `car_color_2` = %d WHERE `id` = %d", color1, color2, houseid);
		mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

#if defined UVS
public OnDynamicVehiclePaintjob(playerid, vehicleid, paintjobid)
#else
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    // printf("OnVehiclePaintjob(playerid = %d, vehicleid = %d, paintjobid = %d)", playerid, vehicleid, paintjobid);
    houseid = GetPVarInt(playerid, "PlayerProp");
	if(vehicleid == GetGVarInt("HouseCar", houseid))
	{
        SetGVarInt("Paintjob", paintjobid, houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `paintjob` = %d WHERE `id` = %d", paintjobid, houseid);
		mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

#if defined UVS
public OnDynamicVehicleStreamIn(vehicleid, forplayerid)
#else
public OnVehicleStreamIn(vehicleid, forplayerid)
#endif
{
	if(g_pOtherFlags[forplayerid] & e_KICKED) return 0;

	if(g_pGamesData[forplayerid] & e_IN_CTC)
	{
		new
		    pTeam = GetPlayerTeam(forplayerid);
		if(pTeam == 0xFF)
		{
			printf("CTC team bug! %s(%d)", pName(forplayerid), forplayerid);
			return 1;
		}

		if(!g_RoundType)
		{
			SetDynamicVehParamsForPlayer(g_CTC_Auto[pTeam], forplayerid, false, true);
			SetDynamicVehParamsForPlayer(g_CTC_Auto[!pTeam], forplayerid, true, false);
		}
		else
		{
			SetDynamicVehParamsForPlayer(g_CTC_Hajo[pTeam], forplayerid, false, true);
			SetDynamicVehParamsForPlayer(g_CTC_Hajo[!pTeam], forplayerid, true, false);

		}
	}
	return 1;
}

#if defined UVS
public OnDynamicVehicleMod(playerid, vehicleid, componentid)
#else
public OnVehicleMod(playerid, vehicleid, componentid)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    //printf("OnDynamicVehicleMod(playerid = %d, vehicleid = %d, componentid = %d)", playerid, vehicleid, componentid);
	new
	    vModel = GetDynamicVehicleModel(vehicleid);

	if(!IsUpgradeCompatible(vModel, componentid))
	{
/*
		RemoveDynamicVehicleComponent(vehicleid, componentid);

		GetPlayerPos(playerid, X, Y, Z);
		AntiCheatLog(playerid, "INVALID CARMOD model: %d, componentid: %d, interior: %d, pos: %.0f, %.0f, %.0f", vModel, componentid, GetPlayerInterior(playerid), X, Y, Z);
*/
		return 0;
	}
    return 1;
}

#if defined UVS
public OnDynamicVehicleSpawn(vehicleid)
#else
public OnVehicleSpawn(vehicleid)
#endif
{
	new
		j,
		i,
		flags;

	// Bitek alapértékre állítása
	//g_iVehicleFlags[vehicleid] = (g_iVehicleFlags[vehicleid] & 0x7FFF8063) | (g_iVehicleFlags[vehicleid] & e_RESPAWNED);

	flags = GetVehicleFlags(vehicleid);
	flags &= ~(e_BONNET_STATUS | e_BOOT_STATUS | e_STEREO_STATUS | e_NO_TELE);

	ResetExplodeTimer(vehicleid);

	if(gTunedCar[0] <= vehicleid <= gTunedCar[1])
	{
		AddDynamicVehicleComponent(vehicleid, 1026);
		AddDynamicVehicleComponent(vehicleid, 1027);
		AddDynamicVehicleComponent(vehicleid, 1028);
		AddDynamicVehicleComponent(vehicleid, 1033);
		AddDynamicVehicleComponent(vehicleid, 1139);
		AddDynamicVehicleComponent(vehicleid, 1141);
		AddDynamicVehicleComponent(vehicleid, 1169);
		AddDynamicVehicleComponent(vehicleid, 1010);
		//ChangeDynamicVehiclePaintjob(vehicleid, random(3));
    }
    
#if !defined UVS
	if(g_iVehicleSpawnWorld[vehicleid])
	{
		SetVehicleVirtualWorld(vehicleid, g_iVehicleSpawnWorld[vehicleid]);
	}
#endif
	/*
	if(gTruck[0] <= vehicleid <= gTruck[sizeof(gTruck)-1])
	{
		SetVehicleVirtualWorld(vehicleid, 5);
	    return 1;
	}
	*/

	if(Bit_Get(gIsHouseCar, vehicleid))
	{
		foreach(houseid: houses)
		{
			if(GetGVarInt("HouseCar", houseid) != vehicleid) continue;
			break;
		}

		new
			iOutInterior = GetGVarInt("OutInt", houseid);
		if(iOutInterior) LinkDynamicVehicleToInterior(vehicleid, iOutInterior);

		ChangeDynamicVehicleColor(vehicleid, GetGVarInt("CarColor1", houseid), GetGVarInt("CarColor2", houseid));
		ChangeDynamicVehiclePaintjob(vehicleid, GetGVarInt("Paintjob", houseid));

		for(j = 0; j != 14; j++)
		{
			format(name, sizeof(name), "CarComponent_%d", j);
			datez = GetGVarInt(name, houseid);

			if(!datez) continue;
			AddDynamicVehicleComponent(vehicleid, datez);
		}

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);
        SetVehicleParamsCarDoors(vehicleid, !!(g_HouseFlags[houseid] & e_CAR_DOORS_D), !!(g_HouseFlags[houseid] & e_CAR_DOORS_P), !!(g_HouseFlags[houseid] & e_CAR_DOORS_BL), !!(g_HouseFlags[houseid] & e_CAR_DOORS_BR));
		SetVehicleParamsCarWindows(vehicleid, !(!!(g_HouseFlags[houseid] & e_CAR_WINDOWS_D)), !(!!(g_HouseFlags[houseid] & e_CAR_WINDOWS_P)), !(!!(g_HouseFlags[houseid] & e_CAR_WINDOWS_BL)), !(!!(g_HouseFlags[houseid] & e_CAR_WINDOWS_BR)));

		if(g_HouseFlags[houseid] & e_RANDOM_WHEEL)
		{
			if(IsValidRaceVehicle(GetDynamicVehicleModel(vehicleid)))
			{
			    AddDynamicVehicleComponent(vehicleid, wheels[random(sizeof(wheels))]);
			}
		}
	}
	else
	{
		// Ha nem házautó, akkor simán töröljük róla az objecteket
		if(!(flags & e_RESPAWNED))
		{
			for( ; i != MAX_VEH_OBJECT; i++) // Minden objectra vonatkozik
			{
		        if(gVehicleObject[vehicleid][i] == INVALID_OBJECT_ID) continue; // Ha a slot nem foglalt, akkor továbbmegyünk

				DestroyDynamicObject(gVehicleObject[vehicleid][i]);
		        gVehicleObject[vehicleid][i] = INVALID_OBJECT_ID;
			}

			foreach(new xx: Player) // Minden játékosra vonatkozk
			{
                if(GetPVarInt(xx, "AttachVehicleID") != vehicleid) continue; // Ha a játékos által rárkott változó nem a kocsira mutat akkor tovább megyünk

				for(i = 0; i != MAX_VEH_OBJECT; i++)
				{
					gPlayerVehicleObjectID[xx][i] = 0;
					gPlayerVehicleObject[xx][i] = INVALID_OBJECT_ID;
				}
			}
            flags &= ~e_RESPAWNED;
		}

		if(IsValidRaceVehicle(GetDynamicVehicleModel(vehicleid)))
		{
  			if(g_TaxiVehicle[0] <= vehicleid <= g_TaxiVehicle[11]) return 1;
			AddDynamicVehicleComponent(vehicleid, wheels[random(sizeof(wheels))]);
		}

		new color1, color2;
		GetVehicleSpawnColor(vehicleid, color1, color2);
		//printf("%d - col %d, %d - %d, %d", vehicleid, color1, color2, (flags & e_NO_RAND_COLOR_1), (flags & e_NO_RAND_COLOR_2));
		LinkDynamicVehicleToInterior(vehicleid, GetVehicleSpawnInterior(vehicleid));
		ChangeDynamicVehicleColor(vehicleid, (flags & e_NO_RAND_COLOR_1) ? (color1) : (RandomColor), (flags & e_NO_RAND_COLOR_2) ? (color2) : (RandomColor));
	}
	SetVehicleFlags(vehicleid, flags);
	return 1;
}

#if defined UVS
public OnDynamicVehicleDeath(vehicleid, killerid)
#else
public OnVehicleDeath(vehicleid, killerid)
#endif
{
	if(g_pOtherFlags[killerid] & e_KICKED) return 0;
	new
	    playerid = INVALID_PLAYER_ID;
	foreach(Player, i)
	{
		if(GetPlayerDynamicVehicleID(i) == vehicleid)
		{
			//printf("death: %d", i);
            playerid = i;
            break;
		}
	}

	if(playerid != INVALID_PLAYER_ID)
	{
		if(g_pGamesData[playerid] & e_IN_DERBY)
		{
			if(!g_DerbyStartTime && !g_DerbyVote && g_DerbyPlayerVehicle[playerid] != INVALID_VEHICLE_ID)
			{
				//printf("OnVehicleDeath vehicleid: %d, player: %s(%d), g_DerbyPlayers: %d", vehicleid, pName(playerid), playerid, g_DerbyPlayers);

				RemovePlayerFromVehicleEx(playerid);
				SetDerbyCamera(playerid);

				DestroyDynamicVehicle(g_DerbyPlayerVehicle[playerid]);
				g_DerbyPlayerVehicle[playerid] = INVALID_VEHICLE_ID;
				g_DerbyPlayers--;

				format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %d", g_DerbyPlayers, g_DerbyTime);
				TextDrawSetString(TD_Derby, FixGameString(i_str));

				TogglePlayerControllable(playerid, false);
				SendClientMessage(playerid, -1, LANG(playerid, "MSG_KIESTEL_A_DERBYBOL_FELROBBANT"));
				return 1;
			}
		}
		else if(g_pGamesData[playerid] & e_IN_TRUCKING)
		{
			FinishTrucking(playerid);
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RELCSESZTED_A_KAMIONOZASTW"));
			return 1;
		}
	}

//	SendClientMessageToAllf(COLOR_WHITE, "MSG_ONVEHICLEDEATHVEHICLEID___KILLE", vehicleid, killerid);
	if(vehicleid == g_BonusCarID)
	{
		BonusCar();
		return 1;
	}

	if(gTruck[0] <= vehicleid <= gTruck[sizeof(gTruck)-1] || gWJCar[0] <= vehicleid <= gWJCar[1] || gTunedCar[0] <= vehicleid <= gTunedCar[1] || gTrailers[0] <= vehicleid <= gTrailers[1] || g_CTC_Auto[0] <= vehicleid <= (g_CTC_Auto[1] + 43))
	{
		SetDynamicVehicleToRespawn(vehicleid);
	}
	return 1;
}

#define damage9mm 			24
#define damages9mm          16
#define damagedeagle   		50
#define damageshotgun       60
#define damagesawnoff       80
#define damagecombat   		90
#define damageuzi           15
#define damagemp5 			17
#define damageak47          18
#define damagem4            19
#define damagetec9          12
#define damagerifle         30
#define damagesniper        40
#define damageminigun 		70

stock UpdateUnoccupiedVehicleDamage(playerid, vehicleid, Float:fX = 0.0, Float:fY = 0.0, Float:fZ = 0.0)
{
	// Weapon shot
	new
		key,
		ud,
		lr;

	if(vehicleid == g_BonusCarID) return 1;
	switch(GetPlayerVirtualWorld(playerid)) // Kamionozásban, CTC-ben, póstás és a pizzás munkában nem sérülnek a kocsik!
	{ // CTC-ben ráadásul bugos volt, mer mozgott a hajó és amint lõttél rajta a semmibe sérülésnek vette
		case 5, 10, 12, 13: return 1;
	}
	GetPlayerKeys(playerid, key, ud, lr);
	if(key & KEY_FIRE && GetPlayerAnimationIndex(playerid) != 1231)
	{
		new index = GetDynamicVehicleModel(vehicleid) - 400;
        new Float:fPos[3], Float:h;

		GetDynamicVehicleHealth(vehicleid, h);
		if(h > 0.0)
		{
			if(gVehiclePetrolCapOffsets[index][0] != 0.0 && gVehiclePetrolCapOffsets[index][1] != 0.0 && gVehiclePetrolCapOffsets[index][2] != 0.0 && fX >= gVehiclePetrolCapOffsets[index][0] - 0.15 && fX <= gVehiclePetrolCapOffsets[index][0] + 0.15 && fY >= gVehiclePetrolCapOffsets[index][1] - 0.15 && fY <= gVehiclePetrolCapOffsets[index][1] + 0.15 && fZ >= gVehiclePetrolCapOffsets[index][2] - 0.15 && fZ <= gVehiclePetrolCapOffsets[index][2] + 0.15)
	        {
				GetDynamicVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
				SetDynamicVehicleHealth(vehicleid, 0.0);
				CreateExplosion(fPos[0], fPos[1], fPos[2], 11, 10, GetDynamicVehicleVirtualWorld(vehicleid));

				if(GetVehicleExplodeTimer(vehicleid) != -1)
				{
					KillTimer(GetVehicleExplodeTimer(vehicleid));
				}
			    SetVehicleExplodeTimer(vehicleid, SetTimerEx("KillVehicle", 3500, false, "dd", vehicleid, 0));
			}
			else
			{
			    new
					Float:xf,
					Float:yf,
					Float:xz,
					Float:hp,
					Float:fVehicle[3];
				GetPlayerPos(playerid, xf, yf, xz);
				GetXYInFrontOfPlayer(playerid, xf, yf, 100);
				GetDynamicVehiclePos(vehicleid, fVehicle[0], fVehicle[1], fVehicle[2]);

				if(GetDynamicVehDistanceFromPoint(vehicleid, xf, yf, xz) < 100)
				{
					switch(GetPlayerWeapon(playerid))
					{
						case 22: hp = damage9mm;
						case 23: hp = damages9mm;
						case 24: hp = damagedeagle;
						case 25: hp = damageshotgun;
						case 26: hp = damagesawnoff;
						case 27: hp = damagecombat;
						case 28: hp = damageuzi;
						case 29: hp = damagemp5;
						case 30: hp = damageak47;
						case 31: hp = damagem4;
						case 32: hp = damagetec9;
						case 33: hp = damagerifle;
						case 38: hp = damageminigun;
						case 0..8, WEAPON_DILDO..WEAPON_CANE: hp = random(20) + 15;
						case WEAPON_CHAINSAW: hp = 30;
						default: hp = 0;
					}

					UpdateDynamicVehDamageStatus(vehicleid,
														encode_panels(random(4), random(4), random(4), random(4), random(4), random(4), random(4)),
														encode_doors(random(4), random(4), random(4), random(4), random(4), random(4)),
														encode_lights(random(4), random(4), random(4), random(4)),
														encode_tires(random(4), random(4), random(4), random(4)));
			        SetDynamicVehicleHealth(vehicleid, h - hp);
				}
				if(h < 250.0 && GetVehicleExplodeTimer(vehicleid) == -1)
				{
					SetVehicleExplodeTimer(vehicleid, SetTimerEx("KillVehicle", 3500, false, "dd", vehicleid, 1));
				}
			}
		}
	}
	return 1;
}

#if defined UVS
public OnUnoccupiedDynamicVehUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
#else
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if((new_x > WB_MAX_X || new_x < WB_MIN_X) || (new_y > WB_MAX_Y || new_y < WB_MIN_Y) || (new_z > 99999.0 || new_z < -99999.0))
	{
		AntiCheatLog(playerid, "UNOCCUPIED VEHICLE CRASH");
		Kick(playerid);
		return 0;
	}

	if(g_pDebug{playerid} == 11)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnUnoccupiedVehicleUpdate(vehicleid = %d, passenger = %d, new_x = %.2f, new_y = %.2f, new_z = %.2f)", vehicleid, passenger_seat, new_x, new_y, new_z);
	}

	// Hajókkal ez nem épp mûködik normálisan..
	if(GetVehicleType(GetDynamicVehicleModel(vehicleid)) != VEHICLE_BOAT)
	{
		// Kézi fegyverekkel ha megnyomja a kocsit vagy valami, akkor frissítsük a kocsi sérülését - további ellenõrzések a funkción bévül
		if(0 <= GetPlayerWeapon(playerid) <= WEAPON_CANE)
			UpdateUnoccupiedVehicleDamage(playerid, vehicleid);
	}
	return 1;
}

#if defined UVS
public OnDynamicTrailerUpdate(playerid, vehicleid)
#else
public OnTrailerUpdate(playerid, vehicleid)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(g_pDebug{playerid} == 11)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnTrailerUpdate(playerid = %s(%d), vehicleid = %d)", pName(playerid), playerid, vehicleid);
	}
	return 1;
}

#if defined UVS
public OnDynamicVehSirenStateChange(playerid, vehicleid, newstate)
#else
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(g_pDebug{playerid} == 8)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnVehicleSirenStateChange(playerid = %s(%d), vehicleid = %d, newstate = %d)", pName(playerid), playerid, vehicleid, newstate);
	}
	return 1;
}

#if defined UVS
public OnDynamicVehDamageStatusUpdate(vehicleid, playerid)
#else
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
	/*if(GetPVarInt(playerid, "AutoRepair") == 3)
	{
		if(vehicleid == g_BonusCarID || g_pGamesData[playerid]) return 1;
		if(!GetPVarType(playerid, "RaceParticipant"))
		{
			RepairDynamicVehicle(vehicleid);
		}
	}*/
	//if(!IsPlayerNPC(playerid)) VehicleRepair(playerid);
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    //Lõszer frissítése
	if(g_pDeathMatchID[playerid] == -1)
	{
		new slot = GetWeaponSlot(weaponid);
		g_pWeaponAmmo[playerid][slot] --;
	}

	// Crash kivédése
	if(weaponid == 0)
		return 0;

	new bReturn;
	if(!(-20000.0 <= fX <= 20000.0) || !(-20000.0 <= fY <= 20000.0) || !(-20000.0 <= fZ <= 20000.0))
	    bReturn = 1;

	switch(weaponid)
	{
		case WEAPON_COLT45, WEAPON_SILENCED, WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SAWEDOFF, WEAPON_SHOTGSPA,
		    WEAPON_UZI, WEAPON_MP5, WEAPON_AK47, WEAPON_M4, WEAPON_TEC9, WEAPON_RIFLE, WEAPON_SNIPER, WEAPON_MINIGUN:
		{
			// Minden oké
		}
		default:
		{
			// Nem bullet sync fegyverrel lõtt, 99%, hogy csal
			bReturn = 2;
		}
	}

	// Ha csalt, vagy crasheltetni próbált, logoljuk és nem küldjük tovább
	if(bReturn)
	{
        g_DisallowedBulletSync{playerid}++;
        // Ha pár perc alatt több, mint 100 hamis lövést csinált, kickeljük a picsába
        if(g_DisallowedBulletSync{playerid} > 100)
        {
			//Kick(playerid);
            return 1;
		}

		if(bReturn == 1) AntiCheatLog(playerid, "WEAPONSHOT CRASH (%d) weaponid: %d", bReturn, weaponid);
		return 0;
	}
	// Debugolás
	if(g_pDebug{playerid} == 10)
	{
		SendClientMessagef(playerid, COLOR_WHITE, "OnPlayerWeaponShot(playerid = %d, weaponid = %d, hittype = %d, hitid = %d, fX = %f, fY = %f, fZ = %f)", playerid, weaponid, hittype, hitid, fX, fY, fZ);

		GetPlayerLastShotVectors(playerid, X, Y, Z, V[0], V[1], V[2]);
		SendClientMessagef(playerid, COLOR_WHITE, "Last Vectors: [%.2f, %.2f, %.2f] [%.2f, %.2f, %.2f]", X, Y, Z, V[0], V[1], V[2]);
	}

	if(g_pOtherFlags[playerid] & e_FINDMODE)
	{
	    GetObjectAndVehicleModel(playerid, hitid, hittype);
	}

	new keys;
	GetPlayerKeys(playerid, keys, datez, datez);
	if((g_PlayerFlags2[playerid] & e_PORTAL) && weaponid == WEAPON_M4)
	{
		if((keys & 128) && !(IN_MINIGAME_AND_SHITS & g_pGamesData[playerid]))
		{
			if(keys & KEY_JUMP) // SHIFT
			{
			    //GetPlayerPos(playerid, X, Y, Z);
				GetPlayerLastShotVectors(playerid, X, Y, Z, X, Y, Z);
				GetPlayerFacingAngle(playerid, Angle);
			    if(fX != 0)
				{
					new obj[2];
					if(GetPVarInt(playerid, "Portal_Obj_1"))
					{
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_1"));
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_2"));
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_3"));
						DestroyDynamicArea(GetPVarInt(playerid, "Portal_Area"));
						DestroyDynamicMapIcon(GetPVarInt(playerid, "Portal_Icon"));
					}

					obj[0] = CreateDynamicObject(2189, X, Y, Z+1.2, 0, 0-90, Angle+90, .playerid = playerid);
					SetPVarInt(playerid, "Portal_Obj_1", obj[0]);

					obj[1] = CreateDynamicObject(2189, X, Y, Z+1.2, 0, 0+90, Angle+90, .playerid = playerid);
					SetPVarInt(playerid, "Portal_Obj_2", obj[1]);

					for(new i; i != 2; i++)
					{
						SetDynamicObjectMaterial(obj[i], 0, 1000, "none", "none", ShiftRGBAToARGB(0x00BFFF99));
						SetDynamicObjectMaterial(obj[i], 1, 1000, "none", "none", ShiftRGBAToARGB(0x0000FFFF));
					}

					SetPVarInt(playerid, "Portal_Obj_3", CreateDynamicObject(18728, X, Y, Z-0.45, 0, 0, 0, .playerid = playerid));
					SetPVarInt(playerid, "Portal_Area", CreateDynamicSphere(X, Y, Z + 1.2, 1.7, .playerid = playerid));
					SetPVarInt(playerid, "Portal_Icon", CreateDynamicMapIcon(X, Y, Z, 56, 0, .playerid = playerid, .streamdistance = 600.0));

					Streamer_Update(playerid);
					ShowWelcome(playerid, "~w~Portal 1. teleport lerakva.");
					PlayerPlaySound(playerid, 5202);
				}
			}
			else if(keys & KEY_WALK) // ALT
			{
			    //GetPlayerPos(playerid, X, Y, Z);
				GetPlayerLastShotVectors(playerid, X, Y, Z, X, Y, Z);
				GetPlayerFacingAngle(playerid, Angle);
			    if(fX != 0)
				{
					new obj[2];
					if(GetPVarInt(playerid, "Portal_Obj2_1"))
					{
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj2_1"));
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj2_2"));
						DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj2_3"));
						DestroyDynamicArea(GetPVarInt(playerid, "Portal_Area2"));
						DestroyDynamicMapIcon(GetPVarInt(playerid, "Portal_Icon2"));
					}
					
					obj[0] = CreateDynamicObject(2189, X, Y, Z+1.2, 0, 0-90, Angle+90, .playerid = playerid);
					SetPVarInt(playerid, "Portal_Obj2_1", obj[0]);

					obj[1] = CreateDynamicObject(2189, X, Y, Z+1.2, 0, 0+90, Angle+90, .playerid = playerid);
					SetPVarInt(playerid, "Portal_Obj2_2", obj[1]);

					for(new i; i != 2; i++)
					{
						SetDynamicObjectMaterial(obj[i], 0, 1000, "none", "none", ShiftRGBAToARGB(0x00FF0099));
						SetDynamicObjectMaterial(obj[i], 1, 1000, "none", "none", ShiftRGBAToARGB(0x008000FF));
					}

					SetPVarInt(playerid, "Portal_Obj2_3", CreateDynamicObject(18728, X, Y, Z-0.45, 0, 0, 0, .playerid = playerid));
					SetPVarInt(playerid, "Portal_Area2", CreateDynamicSphere(X, Y, Z + 1.2, 1.7, .playerid = playerid));
					SetPVarInt(playerid, "Portal_Icon2", CreateDynamicMapIcon(X, Y, Z, 56, 0, .playerid = playerid, .streamdistance = 600.0));

					Streamer_Update(playerid);
					ShowWelcome(playerid, "~w~Portal 2. teleport lerakva.");
					PlayerPlaySound(playerid, 5202);
				}
			}
		}
	}

	// Robbanó töltények
	if((g_PlayerData[playerid] & e_EXPLOSION_AMMO) || g_pDeathMatchID[playerid] != -1)
	{
		if(fX != 0.0 && fY != 0.0 && fZ != 0.0)
		{
			if((g_PlayerData[playerid] & e_EXPLOSION_AMMO) || (g_DMFlags[g_pDeathMatchID[playerid]] & e_EXPLOSIVE_AMMO))
			{
				GetPlayerLastShotVectors(playerid, X, Y, Z, V[0], V[1], V[2]);
				if(g_pDeathMatchID[playerid] == -1)
				{
					if(IsFOOwner(playerid)) CreateExplosion(V[0], V[1], V[2], GetPVarInt(playerid, "EXPLOSION_Type"), GetPVarFloat(playerid, "EXPLOSION_Rad"));
					else CreateExplosionForPlayer(playerid, V[0], V[1], V[2], GetPVarInt(playerid, "EXPLOSION_Type"), GetPVarFloat(playerid, "EXPLOSION_Rad"));
				}
				else
				{
					if(g_DMFlags[g_pDeathMatchID[playerid]] & e_EXPLOSIVE_AMMO)
						CreateExplosion(V[0], V[1], V[2], 1, 10, GetPlayerVirtualWorld(playerid));
				}
			}
		}
	}

	// Ellõtt töltényekre statisztika
	new
	    id = GetWeaponShotSQLIdFromWeaponid(weaponid);
	if(id != -1)
	{
		gWeaponShots[id] ++;
        g_pWeaponShots[playerid][id] ++;

		// Használaton kívüli jármûvek sérülésének megoldás
		if(hittype == BULLET_HIT_TYPE_VEHICLE)
		{
			#if defined UVS
			vID = Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_VEHICLE, hitid);
			#else
			vID = hitid;
			#endif
			UpdateUnoccupiedVehicleDamage(playerid, vID, fX, fY, fZ);
		}
	}

	// Ha AFK-ban van, akkor nem sérül - ha nincs, akkor igen
    if(hittype == BULLET_HIT_TYPE_PLAYER)
    {
		return !GetPVarType(hitid, "AFKTime");
	}
	return 1;
}

stock GetObjectAndVehicleModel(playerid, hitid, hittype)
{
	new
		type,
		modelid,
		streamerid;
	switch(hittype)
	{
		case BULLET_HIT_TYPE_OBJECT:
		{
			modelid = GetObjectModel(hitid);
			type = 0;
		}
		case BULLET_HIT_TYPE_PLAYER_OBJECT:
		{
			modelid = GetPlayerObjectModel(playerid, hitid);
			type = 0;
		}
		case BULLET_HIT_TYPE_VEHICLE:
		{
			#if defined UVS
			streamerid = Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_VEHICLE, hitid);
			#else
			streamerid = hitid;
			#endif
			modelid = GetDynamicVehicleModel(streamerid);
			type = 1;
		}
		default:
		{
			modelid = -1;
		}
	}

	if(modelid != -1)
	{
		if(!type)
		{
			format(i_str, sizeof(i_str), "~g~ModelID: ~h~%d ~g~- ObjectID: ~h~%d", modelid, Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, hitid));
		}
		else
		{
			format(i_str, sizeof(i_str), "~b~ModelID: ~h~%d ~b~- VehicleID: ~h~%d", modelid, streamerid);
		}
		InfoTD_MSG(playerid, 2500, i_str);
	}
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(g_pDebug{playerid} == 8)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnPlayerGiveDamage(playerid = %s(%d), damagedid = %d, Float:amount = %f, weaponid = %d, bodypart = %d)", pName(playerid), playerid, damagedid, amount, weaponid, bodypart);
	}

	// Lángószóróná, tûzoltópalackná nem csinálunk semmit, túl sok meghívás
	if(weaponid == WEAPON_FLAMETHROWER || weaponid == WEAPON_FIREEXTINGUISHER) return;

    new
		pTeam = GetPlayerTeam(playerid),
		dTeam = GetPlayerTeam(damagedid),
	    bool:bTeamMate = (!(pTeam == NO_TEAM && dTeam == NO_TEAM) && pTeam == dTeam);
	if(bTeamMate)
	{
		if(g_pDeathMatchTeam[playerid] != -1)
		{
			InfoTD_MSG(playerid, 500, LANG(playerid, "MSG_YNE_LODD_A_HCSAPATTARSADW"));
			return;
		}
	}
	else
	{
    	if(g_ServerFlags & e_INSTAGIB)
		{
			SetPlayerHealth(damagedid, 0.0);
			return;
		}
	}
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(g_pDebug{playerid} == 8)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnPlayerTakeDamage(playerid = %s(%d), issuerid = %d, Float:amount = %f, weaponid = %d, bodypart = %d)", pName(playerid), playerid, issuerid, amount, weaponid, bodypart);
	}

	if(issuerid != INVALID_PLAYER_ID)
	{
		if(g_pOtherFlags[issuerid] & e_KICKED) return 0;

		Bit_Let(gPlayerShotPlayer[issuerid], playerid);

		new
		    dmid = g_pDeathMatchID[playerid];
		if(dmid != -1)
		{
			if(g_DMFlags[dmid] & e_ONE_HIT_KILL)
			{
				// Ha még Anti SK alatt van akkor nem adjuk be a hitet
				if(GetPVarType(playerid, "SpawnKill"))
				    return 1;

                if(g_pDeathMatchTeam[playerid] == g_pDeathMatchTeam[issuerid] && g_pDeathMatchTeam[playerid] != -1)
                    return 1;

				SetPlayerHealth(playerid, 0.0);
			}
			else
			{
				if(bodypart == 9 && (g_DMFlags[dmid] & e_HEADSHOT))
				{
					// Ha még Anti SK alatt van akkor nem adjuk be a hitet
					if(GetPVarType(playerid, "SpawnKill"))
					    return 1;

                    if(g_pDeathMatchTeam[playerid] == g_pDeathMatchTeam[issuerid] && g_pDeathMatchTeam[playerid] != -1)
                        return 1;

					SetPlayerHealth(playerid, 0.0);

					PVarIntFel(issuerid, "Headshot_Kill");
					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `headshot_kill` = `headshot_kill` + 1 WHERE `reg_id` = %d", PlayerInfo[issuerid][pRegID]);
					mysql_function_query(1, query, false, "", "");

					PVarIntFel(issuerid, "Headshot_Death");
					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `headshot_death` = `headshot_death` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
			}
		}
	}

	// Lángószóróná, tûzoltópalackná nem csinálunk semmit, túl sok meghívás
	if(weaponid == WEAPON_FLAMETHROWER || weaponid == WEAPON_FIREEXTINGUISHER) return 1;

	switch(GetPlayerState(issuerid))
	{
		case PLAYER_STATE_ONFOOT:
		{
			GetPlayerHealth(playerid, Health);
			if(Health == 0.0 || amount == 0.0 || IsPlayerInDynamicArea(playerid, gRangeZone)) return 1;

			if(issuerid != INVALID_PLAYER_ID)
			{
				// Annak mutassuk fel a textrawot, aki meglõtte a másikat.
				new
				    PlayerText:TextID = PlayerText:GetPVarInt(issuerid, "DamageTD"),
				    pTeam = GetPlayerTeam(playerid);
				if(pTeam != NO_TEAM && pTeam == GetPlayerTeam(issuerid)) return 1;

				if(!(g_pTDFlags[issuerid] & e_NOTD_GIVEDAMAGE))
				{
				    g_pLastDamgeTick[issuerid] = GetTickCount();
				    //printf("tdtick: %d", g_pLastDamgeTick[issuerid]);
					if(GetPVarType(issuerid, "DamageTDshown"))
					{
					    PlayerTextDrawHide(issuerid, TextID);
					    KillTimer(GetPVarInt(issuerid, "DamageTDshown"));
					}

				    g_pShots[issuerid] ++;
				    format(i_str, sizeof(i_str), "~w~+%d hit ~g~-%.2f dmg", g_pShots[issuerid], amount);
					PlayerTextDrawSetString(issuerid, TextID, i_str);
					PlayerTextDrawShow(issuerid, TextID);

				    SetPVarInt(issuerid, "DamageTDshown", SetTimerEx("DamageTD_Hide", 1300 + random(500), false, "i", issuerid));
				}
			}

			if(!(g_pTDFlags[playerid] & e_NOTD_GIVEDAMAGE))
			{

				// A játékosnak, aki megsérült..
				if(GetPVarType(playerid, "TDamageTDshown"))
				{
				    PlayerTextDrawHide(playerid, TDamageTD[playerid]);
				    KillTimer(GetPVarInt(playerid, "TDamageTDshown"));
				}

			    format(i_str, sizeof(i_str), "~r~Damage: ~h~-%.2f", amount);
				PlayerTextDrawSetString(playerid, TDamageTD[playerid], i_str);
				PlayerTextDrawShow(playerid, TDamageTD[playerid]);

			    SetPVarInt(playerid, "TDamageTDshown", SetTimerEx("TDamageTD_Hide", 700 + random(500), false, "d", playerid));
			}
			/*
			if(g_pHealthObject[playerid] != INVALID_OBJECT_ID)
			{
			    KillTimer(GetPVarInt(playerid, "DamageHealth"));
				DestroyObject(g_pHealthObject[playerid]);
			}
			SetPVarInt(playerid, "DamageHealth", SetTimerEx("DamageHealth_Hide", 600, false, "d", playerid));

			foreach(Player, i)
			{
				if(i == playerid) continue;
	            g_pHealthObject[i][playerid] = CreatePlayerObject(i, 1240, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
				AttachPlayerObjectToPlayer(i, g_pHealthObject[i][playerid], playerid, 0.0, 0.0, 1.2, 0.0, 0.0, 0.0);
			}
			*/
		}
		
		
        //AntiDB
		case PLAYER_STATE_DRIVER:
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || IsPlayerNPC(issuerid)|| IsPlayerNPC(playerid)) return 1;
		    if(g_pDeathMatchID[issuerid] == -1 && !g_pGamesData[issuerid])
			{
			    if(weaponid == 37) return 1; // Ha felgyújtasz valakit és kocsiba szálsz akkor DB-nek veszi, javítva
			    if(++g_pShots[issuerid] > 5)
				{
				    g_pShots[issuerid] = 0;

					GetPlayerPos(playerid, X, Y, Z);
					SimpleTele(playerid, X, Y, Z + 3.0);
					SetPlayerHealth(playerid, 100.0);
					
					// Ha már 3mp-e nem DB-zett
					if((GetPVarInt(issuerid, "LastAntiDB") - GetTickCount()) > 3000)
					{
						switch(++g_pDriveByWarn{issuerid})
						{
							case 1:
							{
								SendClientMessagef(issuerid, COLOR_DEFAULT, LANG(issuerid, "MSG_NE_DBZZ_ELSO_FIGYELMEZTETES"));

								GetPlayerPos(issuerid, X, Y, Z);
								SimpleTele(issuerid, X, Y, Z + 7.0);

								SetPVarInt(issuerid, "LastAntiDB", GetTickCount());
							}
							case 2:
							{
       							SendClientMessagef(issuerid, COLOR_YELLOW, LANG(issuerid, "MSG_MASODIK_DRIVERBY_FIGYELMEZTETES"));

								SetPVarInt(issuerid, "JailTime", 120);

								cmd_exitdm(issuerid, "295375");

								UpdatePlayerSpawnInfo(issuerid);
								SpawnPlayer(issuerid);

								SetPVarInt(issuerid, "LastAntiDB", GetTickCount());
							}
							case 3:
							{
							    SetPVarInt(issuerid, "JailTime", 600);

								cmd_exitdm(issuerid, "295375");

								UpdatePlayerSpawnInfo(issuerid);
								SpawnPlayer(issuerid);

								SetPVarInt(issuerid, "LastAntiDB", GetTickCount());
							
								g_pDriveByWarn{playerid} = 0;
								return 1;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerGiveDamageActor(playerid, damaged_actorid, Float:amount, weaponid, bodypart)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(g_pDebug{playerid} == 8)
	{
		SendClientMessagef(playerid, COLOR_DEFAULT, "OnPlayerGiveDamageActor(playerid = %s(%d), damaged_actorid = %d, Float:amount = %f, weaponid = %d, bodypart = %d)", pName(playerid), playerid, damaged_actorid, amount, weaponid, bodypart);
	}

	GetActorHealth(damaged_actorid, Health);
	SetActorHealth(damaged_actorid, Health - amount);
	return 1;
}

stock UpdatePlayerHealthTD(playerid)
{
	new
	    Float:___fHealth,
	    ___szStr[4];

	// Ha TD-k tilva vannak, akk egyiket se mutatjuk fel
	if(g_pOtherFlags[playerid] & e_NO_TEXTDRAWS)
		return;

	if(!(g_pTDFlags[playerid] & e_NOTD_HEALTH))
	{
		GetPlayerHealth(playerid, ___fHealth);
		if(___fHealth == 0.0 || ___fHealth > 180)
		{
            ___szStr = "GOD";
		}
		else
		{
			valstr(___szStr, floatround(___fHealth));
		}
		PlayerTextDrawSetString(playerid, TD_pHealth[playerid], ___szStr);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_ARMOUR))
	{
		GetPlayerArmour(playerid, ___fHealth);
		if(___fHealth == 0.0)
		{
            PlayerTextDrawHide(playerid, TD_pArmour[playerid]);
		}
		else
		{
			valstr(___szStr, floatround(___fHealth));
			PlayerTextDrawSetString(playerid, TD_pArmour[playerid], ___szStr);
			PlayerTextDrawShow(playerid, TD_pArmour[playerid]);
		}
	}
}

/*
forward DamageHealth_Hide(playerid);
public DamageHealth_Hide(playerid)
{
	foreach(Player, i)
	{
        g_pHealthObject[i][playerid] != INVALID_OBJECT_ID);
		DestroyPlayerObject(i, g_pHealthObject[i][playerid]);
		g_pHealthObject[i][playerid] = INVALID_OBJECT_ID;
	}
	return 1;
}
*/
forward DamageTD_Hide(playerid);
public DamageTD_Hide(playerid)
{
	DeletePVar(playerid, "DamageTDshown");
	PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "DamageTD"));
	return 1;
}

forward TDamageTD_Hide(playerid);
public TDamageTD_Hide(playerid)
{
	DeletePVar(playerid, "TDamageTDshown");
	PlayerTextDrawHide(playerid, TDamageTD[playerid]);
	return 1;
}

stock HideGangwarTextdraw(playerid)
{
	TextDrawHideForPlayer(playerid, TD_SelectGrove);
	TextDrawHideForPlayer(playerid, TD_SelectGrove + Text:1);

	TextDrawHideForPlayer(playerid, TD_SelectBallas);
	TextDrawHideForPlayer(playerid, TD_SelectBallas + Text:1);

	TextDrawHideForPlayer(playerid, TD_SelectVagos);
	TextDrawHideForPlayer(playerid, TD_SelectVagos + Text:1);

	TextDrawHideForPlayer(playerid, TD_SelectAztecas);
	TextDrawHideForPlayer(playerid, TD_SelectAztecas + Text:1);

	TextDrawHideForPlayer(playerid, TD_SelectMessage);
    g_pSelectTDFlags[playerid] &= ~e_SELECT_GANGWAR;
    CancelSelectTextDraw(playerid);
}

CMD:ganginfo(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, -1, "%d, %d, %d, %d", g_GangwarPlayerCount[0], g_GangwarPlayerCount[1], g_GangwarPlayerCount[2], g_GangwarPlayerCount[3]);
	return 1;
}

stock HideCMDList(playerid)
{
	CancelSelectTextDraw(playerid);
	g_pSelectTDFlags[playerid] &= ~e_SELECT_CMDLIST;

	ShowPlayerDialogEx(playerid, -1, 0, "a", "a", "a");
	TextDrawHideForPlayer(playerid, TD_CMDListAlatt[0]);
	TextDrawHideForPlayer(playerid, TD_CMDListAlatt[1]);
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	if(g_pDebug{playerid} == 5) SendClientMessagef(playerid, COLOR_ORANGE, "OnPlayerClickTextDraw(playerid = %s(%d), clickedid = %d)", pName(playerid), playerid, int:clickedid);

	if(g_pSelectTDFlags[playerid] & e_SELECT_GANGWAR)
	{
		if(clickedid == Text:0xFFFF)
		{
            HideGangwarTextdraw(playerid);
			return 1;
		}

		// Ha a banda területe (vagy fõ területe) már el van teljesen foglalva
		new
		    gangid,
		    bool:elfoglaltak[4],
		    bool:teli[4];
		if(clickedid == TD_SelectGrove) gangid = TEAM_GROVE;
		else if(clickedid == TD_SelectBallas) gangid = TEAM_BALLAS;
		else if(clickedid == TD_SelectVagos) gangid = TEAM_VAGOS;
		else if(clickedid == TD_SelectAztecas) gangid = TEAM_AZTECAS;

		for(new i; i != 4; i++)
		{
			elfoglaltak[i] = !!(g_ZoneOwner[i * 10] != GetGangwarZoneID(i * 10));
		}

		if(elfoglaltak[gangid])
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EHHEZ_A_BANDAHOZ_NEM_CSATLAKOZHATSZ"));
            HideGangwarTextdraw(playerid);
            return 1;
		}

		for(new i; i != 4; i++)
		{
			for(new x; x != 4; x++)
			{
				if(g_GangwarPlayerCount[i] > g_GangwarPlayerCount[x]+2 && x != i && !elfoglaltak[i] && !elfoglaltak[x])
				{
					teli[i] = true;
					break;
				}
			}
		}

		if(teli[gangid])
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_CSAPAT_MAR_TELE_VAN_VALASSZ"));
            HideGangwarTextdraw(playerid);
            return 1;
		}
		g_GangwarPlayerCount[gangid]++;

		new
		    id = random(sizeof(g_fGANGWAR_Grove));
		switch(gangid)
		{
			case TEAM_GROVE:
			{
				SetSpawnInfo(playerid, TEAM_GROVE, randomex(105, 108), g_fGANGWAR_Grove[id][0], g_fGANGWAR_Grove[id][1], g_fGANGWAR_Grove[id][2], g_fGANGWAR_Grove[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_BALLAS:
			{
				SetSpawnInfo(playerid, TEAM_BALLAS, randomex(102, 105), g_fGANGWAR_Ballas[id][0], g_fGANGWAR_Ballas[id][1], g_fGANGWAR_Ballas[id][2], g_fGANGWAR_Ballas[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_VAGOS:
			{
				SetSpawnInfo(playerid, TEAM_VAGOS, randomex(108, 111), g_fGANGWAR_Vagos[id][0], g_fGANGWAR_Vagos[id][1], g_fGANGWAR_Vagos[id][2], g_fGANGWAR_Vagos[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_AZTECAS:
			{
				SetSpawnInfo(playerid, TEAM_AZTECAS, randomex(114, 117), g_fGANGWAR_Aztecas[id][0], g_fGANGWAR_Aztecas[id][1], g_fGANGWAR_Aztecas[id][2], g_fGANGWAR_Aztecas[id][3], 0, 0, 0, 0, 0, 0);
			}
		}

		g_pGamesData[playerid] |= e_IN_GANGWAR;
		g_PlayerData[playerid] &= ~e_CLEARWORLD;
		g_pMinigameJoins[playerid][e_Count_GANGWAR] ++;

		g_pGangwarTeam[playerid] = gangid;
        ShowGangwarZones(playerid);

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `gangwar_team` = %d WHERE `reg_id` = %d", gangid, PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");

	    HideGangwarTextdraw(playerid);
        SpawnPlayer(playerid);
        return 1;
	}
	else if(g_pSelectTDFlags[playerid] & e_SELECT_WEAPON)
	{
		if(clickedid == Text:0xFFFF)
		{
			// Ha a törlésre, vagy kezdésre állítására ment, nem tüntetjük el a textdrawot
			if(GetPVarType(playerid, "WMeunSel"))
			{
			    DeletePVar(playerid, "WMeunSel");
			    SelectTextDraw(playerid, 0xFF0000AA);
			    return 1;
			}

			for(new i = _:TD_WMenu_WStart-3; i != _:TD_WMenu_PEnd+1; i++)
			{
				TextDrawHideForPlayer(playerid, Text:i);
			}
			g_pSelectTDFlags[playerid] &= ~e_SELECT_WEAPON;
			return 1;
		}

		else if(TD_WMenu_WStart <= clickedid <= TD_WMenu_WEnd)
		{
			new
			    id = _:clickedid - _:TD_WMenu_WStart,
			    slot = GetWeaponSlot(g_WeaponData[id][e_WeaponID]),
			    select = GetPVarInt(playerid, "WMeunSel");

			//printf("id: %d, slot: %d", id, slot);
			switch(select)
			{
				case 0:
				{
					if(GetPlayerMoneyEx(playerid) < g_WeaponData[id][e_WeaponPrice])
						return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_1"), FormatNumber(g_WeaponData[id][e_WeaponPrice]));

					new
						level;
					switch(g_WeaponData[id][e_WeaponID])
					{
					    case WEAPON_GRENADE: level = 30;
						case WEAPON_ROCKETLAUNCHER: level = 40;
						case WEAPON_HEATSEEKER: level = 45;
						case WEAPON_FLAMETHROWER: level = 37;
						case WEAPON_MINIGUN:
						{
						    if(!IsOwner(playerid) && !IsPlayerAdmin(playerid))
							{
							    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
							}
							else level = 50;
						}
						default: level = 1;
					}
			        CHECK_SZINT_EX(playerid, level);

					GivePlayerMoneyEx(playerid, -g_WeaponData[id][e_WeaponPrice], "BuyWeapon");

					// Ha a C4 távirányítót vesz, akkor már adja oda neki a C4-et is (C4 & Távirányító)
					if(g_WeaponData[id][e_WeaponID] == WEAPON_BOMB)
					{
                        //SetPlayerWeaponInfo(playerid, 8, WEAPON_SATCHEL, 15, "a");
					}
		            //SetPlayerWeaponInfo(playerid, slot, g_WeaponData[id][e_WeaponID], g_WeaponData[id][e_WeaponAmmo], "a");
		            UpdatePlayerWeaponInfo(playerid);

					InfoTD_MSGf(playerid, 6000, LANG(playerid, "MSG_RGHW_PENZED__B"), g_WeaponData[id][e_WeaponPrice], GetPlayerMoneyEx(playerid), g_WeaponData[id][e_WeaponAmmo], g_pWeaponAmmo[playerid][slot]);

					// Logolás
					GetWeaponName(g_WeaponData[id][e_WeaponID], country, sizeof(country));
					mysql_format(1, query, sizeof(query), "INSERT INTO `weaponbuy`(id, player, reg_id, weaponid, ammo, price, weaponname, time) VALUES(0, '%e', %d, %d, %d, %d, '%e', %d)",
						pName(playerid), PlayerInfo[playerid][pRegID], g_WeaponData[id][e_WeaponID], g_WeaponData[id][e_WeaponAmmo], g_WeaponData[id][e_WeaponPrice], country, CurrentTimestamp());
					mysql_function_query(1, query, false, "", "");
				}
				case 1:
				{
					DeletePlayerWeaponInfo(playerid, slot);

					InfoTD_MSGf(playerid, 6000, LANG(playerid, "MSG_YHAZ_BHH_YHSLOTVAN"), slot);

                    DeletePVar(playerid, "WMeunSel");
				}
				case 2:
				{
					valstr(name, g_pWeaponSlot[playerid][slot]);
					cmd_armedweap(playerid, name);

					DeletePVar(playerid, "WMeunSel");
				}
			}
		}
		else if(TD_WMenu_WStart - Text:2 <= clickedid <= TD_WMenu_WStart - Text:1)
		{
			// Törlés
			if(clickedid == TD_WMenu_WStart - Text:2)
			{
				SetPVarInt(playerid, "WMeunSel", 1);
			}
			else // Kezdésre állítás
			{
                SetPVarInt(playerid, "WMeunSel", 2);
			}
		}
        return 1;
	}
	else if(g_pSelectTDFlags[playerid] & e_SELECT_CLAN)
	{
		new
		    clanid = g_pClan{playerid};
		if(clickedid == Text:0xFFFF)
		{
			// Ha nyitva van neki a dialóg, akkor nem a textdrawot rejtük el, hanem csak a dialógot és a TD-t haggyuk
			if(g_pClanTDSelect{playerid} != 0xFF)
			{
				ShowPlayerDialogEx(playerid, -1, 0, "a", "a", "a");
                SelectTextDraw(playerid, CLAN_TD_SELECT_COLOR);
			}
			else // Elllentétben a textdrawot is elrejtjük
			{
                HideClanBankTD(playerid);
			}
   			g_pClanTDSelect{playerid} = 0xFF;
		}

		if(TD_CLAN_Log <= clickedid <= TD_CLAN_Balance + Text:3)
		{
			switch(clickedid - TD_CLAN_Log)
			{
				case 0: // log
				{
					if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_INVITE_MEMBERS) && !IsOwner(playerid))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGTEKINTENI"));
					    return 1;
					}

					mysql_format(1, query, sizeof(query), "SELECT `id`, `type`, `player`, `amount`, `newamount`, FROM_UNIXTIME(time) FROM `clans_banklog` WHERE clanid = %d ORDER BY id DESC LIMIT 0, 30", CLAN_SQL(clanid));
					mysql_function_query(1, query, false, "THREAD_ClanBankLog", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 1: // Egyenleg megtekintése
				{
	                g_pClanTDSelect{playerid} = 1;

					format(dline, 1024, "Klánbankban lévõ pénz egyenleg: {" #XCOLOR_YELLOW "}%s", FormatNumber(gClanBankMoney[clanid]));
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_BANK, DIALOG_STYLE_MSGBOX, "Klánbank - {00FF00}Egyenleg", dline, "Oké", "Vissza");

					//SendClientMessage(playerid, -1, LANG(playerid, "MSG_EGYENLEG"));
				}
				case 2: // Pénz betétele
				{
	                g_pClanTDSelect{playerid} = 2;

					format(dline, 1024, "Klánbankban lévõ pénz egyenleg: {" #XCOLOR_YELLOW "}%s\n{" #XCOLOR_PINK "}Írd be lentre, mennyi pénzt szeretnél betenni\n\n{" #XCOLOR_RED "}Csak saját felelõséggel használd ezt a funkciót!", FormatNumber(gClanBankMoney[clanid]));
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_BANK, DIALOG_STYLE_INPUT, "Klánbank - {00FF00}Egyenleg", dline, "Oké", "Vissza");

					//SendClientMessage(playerid, -1, LANG(playerid, "MSG_BETETEL"));
				}
				case 3: // Pénz kivétele
				{
	                g_pClanTDSelect{playerid} = 3;

					format(dline, 1024, "Klánbankban lévõ pénz egyenleg: {" #XCOLOR_YELLOW "}%s\n{" #XCOLOR_PINK "}Írd be lentre, mennyi pénzt szeretnél kivenni;", FormatNumber(gClanBankMoney[clanid]));
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_BANK, DIALOG_STYLE_INPUT, "Klánbank - {00FF00}Egyenleg", dline, "Oké", "Vissza");

					//SendClientMessage(playerid, -1, LANG(playerid, "MSG_KIVETEL"));
				}
			}
		}
        return 1;
	}
	else if(g_pSelectTDFlags[playerid] & e_SELECT_CMDLIST)
	{
		if(clickedid == Text:0xFFFF)
		{
			HideCMDList(playerid);
			return 1;
		}

		new
		    id = GetPVarInt(playerid, "ParancsID");
		if(clickedid == TD_CMDListAlatt[0])
		{
			if(id) id--;
		}
		else
		{
			id++;
		}

		valstr(name, id);
		cmd_cmds(playerid, name);
	}

	if(g_pGamesData[playerid] & e_IN_CTC)
	{
		if(clickedid == Text:0xFFFF)
		{
			if(g_VoteCount)
			{
				for(new j; j != 5; j++)
				{
					TextDrawShowForPlayer(playerid, TD_SelectAuto + Text:j);
				}
				SelectTextDraw(playerid, 0x33FF33AA);
			}
			else
			{
				for(new j; j != 5; j++)
				{
					TextDrawHideForPlayer(playerid, TD_SelectAuto + Text:j);
				}
				CancelSelectTextDraw(playerid);
			}
			return 1;
		}

		if(g_PlayerData[playerid] & e_CTC_VOTED)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_MAR_SZAVAZTAL"));
			return 1;
		}

		else if(clickedid == TD_SelectAuto)
		{
            g_CTC_Votes[0] ++;
            g_LastVote = 0;
		}
		else if(clickedid == TD_SelectHajo)
		{
            g_CTC_Votes[1] ++;
            g_LastVote = 1;
		}
		g_PlayerData[playerid] |= e_CTC_VOTED;

		//////////////////////////////////
		format(tmp, 128, "{%06x}%s(%d) szavazata: %s (%d szavazat)", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid,
			(!g_LastVote) ? ("Betonkeverõ") : ("Hajó"), g_CTC_Votes[g_LastVote]);

		foreach(Player, x)
		{
			if(!(g_pGamesData[x] & e_IN_CTC)) continue;
			SendClientMessage(x, -1, tmp);
		}
        return 1;
	}
	if(GetPVarType(playerid, "KijelzoHouseID"))
	{
		if(clickedid == Text:0xFFFF)
		{
			if(GetPVarType(playerid, "StartFeltores"))
			{
				KillTimer(GetPVarInt(playerid, "StartFeltores"));
				DeletePVar(playerid, "StartFeltores");
			}
			HideKijelzo(playerid);
			return 1;
		}

		if(g_KijelzoStartTD <= _:clickedid < g_KijelzoStartTD + 36) // Számok
		{
			static const
				MindenGombok[] = "0123456789QWERTZUIOPASDFGHJKLYXCVBNM";

			new
			    id = _:clickedid - g_KijelzoStartTD,
			    asd[2];

	        if(g_pKijelzoCount[playerid][1] < 10)
	        {
	            g_pKijelzoCount[playerid][1]++;
				format(asd, sizeof(asd), "%s", MindenGombok[id]);

				if(strlen(g_pKijelzoText[playerid]) > (6 + 9) || !strcmp(g_pKijelzoText[playerid], "~b~~h~NULL"))
				{
					g_pKijelzoText[playerid] = "~b~~h~";
				}

				strcat(g_pKijelzoText[playerid], asd, sizeof(g_pKijelzoText[]));
				PlayerTextDrawSetString(playerid, TD_pKijelzo[playerid], g_pKijelzoText[playerid]);

				SetPVarInt(playerid, "KijelzoTick", GetTickCount());

				// Ha arra a gombra kattintot, amit a PVar-ban tárolunk, akkor eltaláta
				if(GetPVarInt(playerid, "KijelzoChar") == MindenGombok[id])
				{
				    g_pKijelzoCount[playerid][2] ++;
				    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 10.0, 0, 0, 0, 0, 0);

				    SetPVarInt(playerid, "KijelzoLastChar", MindenGombok[id]);
				}
				else
				{
		            g_pKijelzoCount[playerid][3] ++;
					SendClientMessage(playerid, 0xFF0000, LANG(playerid, "MSG_ROSSZ_KATTINTAS_ELCSESZTED"));

					ApplyAnimation(playerid, "PED", "KO_skid_front", 10.0, 0, 0, 0, 0, 0);
				}

			}
			else
		    {
		        EndFlash(playerid, false);
				SendClientMessage(playerid, -1, LANG(playerid, "MSG_BEIRTAD_A_KODOT_KATTINTS_AZ"));
			}
		}
		else if(clickedid == Text:(g_KijelzoStartTD - 3)) // OK
		{
			new
			    minclicks;
   			switch(GetGVarInt("HouseRiaszto", houseid))
   			{
				case 0: minclicks = 7;
				case 1: minclicks = 9;
				case 2: minclicks = 10;
				default: minclicks = 10;
	   		}

			if(g_pKijelzoCount[playerid][0] < minclicks && g_pKijelzoCount[playerid][1] < minclicks)
			{
				SendClientMessagef(playerid, -1, LANG(playerid, "MSG_MEG_NINCS_MEG_A_KELLO__KATTINTAS"), minclicks, g_pKijelzoCount[playerid][0], g_pKijelzoCount[playerid][1]);
				return 1;
			}

			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_KATTINTASOK__SIKERES__ELRONT"), g_pKijelzoCount[playerid][1], g_pKijelzoCount[playerid][2], g_pKijelzoCount[playerid][3]);
			if(g_pKijelzoCount[playerid][2] == minclicks)
			{
			    if(houseid == 456) return SendClientMessagef(playerid, -1, LANG(playerid, "MSG_MEG_NINCS_MEG_A_KELLO__KATTINTAS"), 11);

				cmd_enter(playerid, "258852");
    			ShowWelcome(playerid, LANG(playerid, "MSG_GSIKERES_BETORESE"));

				if(GetGVarType("Hackdetector", houseid))
				{
					switch(GetGVarInt("HouseRiaszto", houseid))
					{
						case 0: SendClientMessageToAll(0xFF5200AA, "MSG__NEVTELEN_BEJELENTES__VALAKI");
						case 1: SendClientMessageToAllf(0xFF5200AA, "MSG__RIASZTO___EPPEN_BETORT_EG", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
						case 2:
						{
      						GetGVarString("PropName", i_str, sizeof(i_str), houseid);
       						RemoveHexColorFromString(i_str);
							SendClientMessageToAllf(0xFF5200AA, "MSG__RIASZTO___EPPEN_BETORT_A", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str);
						}
					}
				}
			}
			else
			{
				ShowWelcome(playerid, LANG(playerid, "MSG_RSIKERTELEN_FELTORES"));
				GivePlayerXP(playerid, XP_FAIL_HAZFELTORES);
			}

            HideKijelzo(playerid);
		}
        return 1;
	}
	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	//SendClientMessagef(playerid, COLOR_ORANGE, "OnPlayerPlayerClickTextDraw(playerid = %s(%d), clickedid = %d)", pName(playerid), playerid, int:playertextid);
	return 0;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(g_PlayerFlags[playerid] & e_CLICKTELE)
	{
        if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
        if(g_pRobCount{playerid}) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
		if(GetDistance2D(fX, fY, goldpot[gLocX], goldpot[gLocY]) < IN_RANGE_DISTANCE && goldpot[gLocX]) return ShowWelcome(playerid, LANG(playerid, "MSG_RARANYTOJASHOZ_NEM_TELEZHETSZW"));
		if(g_pDeathMatchID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_TELEPORTALHATSZ"));

		if(GetDistance2D(fX, fY, ZaszloPos[0], ZaszloPos[1]) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RZASZLOHOZ_NEM_TELEZHETSZW"));
		if(GetDynamicVehDistanceFromPoint(g_BonusCarID, fX, fY, fZ) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RBONUSZAUTOHOZ_NEM_TELEZHETSZW"));

        if(!CheckHQZone(playerid, fX, fY))
        {
			MapAndreas_FindZ_For2DCoord(fX, fY, Z);
			NormalTele(playerid, fX, fY, Z + 2.5, .worldid = GetPlayerVirtualWorld(playerid));
		}
	}
	return 1;
}

forward THREAD_ClanBankLog(playerid, queue);
public THREAD_ClanBankLog(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ClanBankLog);

	g_pClanTDSelect{playerid} = 0;

	new
	    rows = cache_get_row_count(),
	    id,
		Amount,
		NewAmount,
		Time[24];
	dline[0] = EOS;
	i_str[0] = EOS;
	//static
	//	sActionType[][] = {{"{" #XCOLOR_WHITE "}Log"}, {"{" #XCOLOR_BLUE "}Balance"}, {"{" #XCOLOR_YELLOW "}Deposit"}, {"{" #XCOLOR_RED "}Withdraw"}};

	// `id`, `type`, `player`, `amount`, `newamount`, FROM_UNIXTIME(time)
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, country);
		cache_get_row(i, 2, name);

		cache_get_row_int(i, 3, Amount);
		cache_get_row_int(i, 4, NewAmount);
		cache_get_row(i, 5, Time);

		format(tmp, 200, "{" #XCOLOR_PINK "}%d. %s {" #XCOLOR_DEFAULT "}-> %s - Összeg: {" #XCOLOR_GREEN "}%d{" #XCOLOR_DEFAULT "}, Új egyenleg: %d{" #XCOLOR_DEFAULT "} --- %s\n", id, country, name, Amount, NewAmount, Time);
		strcat(dline, tmp, sizeof(dline));
	}

	ShowPlayerDialogEx(playerid, DIALOG_CLAN_BANK, DIALOG_STYLE_MSGBOX, "Klánbank - {00FF00}Log", dline, "Oké", "Vissza");
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return;

	if(GetPlayerVirtualWorld(playerid) != 200)
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
		{
			SendClientMessagef(playerid, COLOR_DEFAULT, "ObjectID: %d, ModelID: %d, {" #XCOLOR_YELLOW "}%f, %f, %f", objectid, modelid, x, y, z);
	        CancelEdit(playerid);
		}
		else
		{
			GetDynamicObjectRot(objectid, X, Y, Z);
			SendClientMessagef(playerid, COLOR_DEFAULT, "ObjectID: %d, ModelID: %d, {" #XCOLOR_YELLOW "}%f, %f, %f, {" #XCOLOR_BLUE "}%f, %f, %f", objectid, modelid, x, y, z, X, Y, Z);
			EditDynamicObject(playerid, objectid);
		}
	}
	else
	{
        EditDynamicObject(playerid, objectid);
	}
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return;

	switch(response)
	{
		case EDIT_RESPONSE_FINAL:
		{
			SelectObject(playerid);
		}
		case EDIT_RESPONSE_UPDATE:
		{
			if(GetPlayerVirtualWorld(playerid) != 200)
				MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
		}
	}
/*
	if(response)
	{

		vID = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_ATTACHED_VEHICLE);
		if(vID != INVLID
		Streamer_GetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_X, X);
		Streamer_GetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Y, Y);
		Streamer_GetFloatData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_Z, Z);

		SendClientMessagef(playerid, COLOR_WHITE, "%.4f %.4f %.4f %d %.4f %.4f %.4f", x, y, z, vID, X, Y, Z);
		AttachDynamicObjectToVehicle(objectid, vID, X - x, Y - y, Z - z, rx, ry, rz);

		MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
	}
*/
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	if(!IsValidObjectModel(modelid))
	{
        AntiCheatLog(playerid, "ATTACHED OBJECT CRASH %d", modelid);
		Kick(playerid);
		return 1;
	}

	if(response == EDIT_RESPONSE_FINAL)
	{
		StoreHoldingObjectData(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ,
			gAOColor1[playerid][index], gAOColor2[playerid][index]);

		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ,
			gAOColor1[playerid][index], gAOColor2[playerid][index]);

		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_OBJECT_SZERKESZTESE_BEFEJEZVE"), index);
	}
	return 1;
}

forward UnFreezeHeadshot(playerid);
public UnFreezeHeadshot(playerid)
{
    TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "HSTimer");
	return SpawnPlayer(playerid);
}

forward KillVehicle(vehicleid, explode);
public KillVehicle(vehicleid, explode)
{
	if(explode)
	{
		new
		    Float:fPos[3];
		GetDynamicVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
		CreateExplosion(fPos[0], fPos[1], fPos[2], 11, 10, GetDynamicVehicleVirtualWorld(vehicleid));
	}
	return SetDynamicVehicleToRespawn(vehicleid);
}

#if defined UVS
public OnPlayerEnterDynamicVehicle(playerid, vehicleid, ispassenger)
#else
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    /*if(IsPlayerInAnyVehicle(playerid))
    {
        SetPlayerVirtualWorld(playerid,playerid+1);
        AntiCheatLog(playerid, "CarFlood");
        KickEx(playerid, "CarFlood");
    }*/
    g_pLastVehicleEnterTick[playerid] = GetTickCount();
	if(ispassenger)
	{
		if(GetVehicleType(GetDynamicVehicleModel(vehicleid)) == VEHICLE_BIKE || GetPlayerSurfingDynamicVehID(playerid) == vehicleid)
		{
			new
				engine,
				alarm,
				bonnet,
				boot,
				objective;
			GetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors == 1)
			{
				TogglePlayerControllable(playerid, false);
				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);
				return 1;
			}
		}
	}
	return 1;
}

#if defined UVS
public OnPlayerExitDynamicVehicle(playerid, vehicleid)
#else
public OnPlayerExitVehicle(playerid, vehicleid)
#endif
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    // SendClientMessagef(playerid, COLOR_RED, "OnPlayerExitVehicle(playerid = %d, vehicleid = %d)", playerid, vehicleid);
    g_pLastVehicleEnterTick[playerid] = GetTickCount();

    if(g_pGamesData[playerid] & e_IN_DERBY)
    {
		PutPlayerInDynamicVehicle(playerid, vehicleid, 0);
	}
	DeletePVar(playerid, "A_CurrWeap");
	g_PlayerData[playerid] &= ~(e_FALLED | e_NOCARMSG);
	return 1;
}

stock UpdateDMNametags(dmid)
{
	foreach(Player, i)
	{
		foreach(Player, x)
		{
			if(g_pDeathMatchID[i] != -1 && g_pDeathMatchID[x] != -1)
			{
				printf("%s - %s", pName(i), pName(x));
				if(g_DMFlags[dmid] & e_NO_NAMETAGS)
				{
			        if(g_DMFlags[dmid] & e_IS_TDM)
			        {
						// Ha a stream zónába bejövõ játékos nem az õ csapatában van akkor rejtjük neki a nevét
						if(g_pDeathMatchTeam[i] != g_pDeathMatchTeam[x])
						{
						    ShowPlayerNameTagForPlayer(x, i, false);
					    	SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i) & 0xFFFFFF00);
						}
					}
					else
					{
						// Sima DM-ben mindekinek a nevét elrejtjük mindenkinek
					    ShowPlayerNameTagForPlayer(x, i, false);
				    	SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i) & 0xFFFFFF00);
					}
				}
				else
				{
			        if(g_DMFlags[dmid] & e_IS_TDM)
			        {
						// Ha a stream zónába bejövõ játékos nem az õ csapatában van akkor rejtjük neki a nevét
						if(g_pDeathMatchTeam[i] == g_pDeathMatchTeam[x])
						{
							ShowPlayerNameTagForPlayer(x, i, true);
					    	SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i));
						}
					}
					else
					{
						ShowPlayerNameTagForPlayer(x, i, true);
				    	SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i));
					}
				}
			}
		}
	}
}

stock UpdateNametagsForPlayer(playerid)
{
	new
	    dmid = g_pDeathMatchID[playerid];
	foreach(Player, x)
	{
		if(dmid != -1 && g_pDeathMatchID[playerid] == g_pDeathMatchID[x]) //Ha DM-be van
		{
			if(g_DMFlags[dmid] & e_NO_NAMETAGS)
			{
		        if(g_DMFlags[dmid] & e_IS_TDM)
		        {
					// Ha a stream zónába bejövõ játékos nem az õ csapatában van akkor rejtjük neki a nevét
					if(g_pDeathMatchTeam[playerid] != g_pDeathMatchTeam[x])
					{
					    ShowPlayerNameTagForPlayer(playerid, x, false);
				    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x) & 0xFFFFFF00);
					}
				}
				else
				{
					// Sima DM-ben mindekinek a nevét elrejtjük mindenkinek
				    ShowPlayerNameTagForPlayer(playerid, x, false);
			    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x) & 0xFFFFFF00);
				}
			}
			else
			{
		        if(g_DMFlags[dmid] & e_IS_TDM)
		        {
					// Ha a stream zónába bejövõ játékos nem az õ csapatában van akkor rejtjük neki a nevét
					if(g_pDeathMatchTeam[playerid] == g_pDeathMatchTeam[x])
					{
						ShowPlayerNameTagForPlayer(playerid, x, true);
				    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x));
					}
				}
				else
				{
					ShowPlayerNameTagForPlayer(playerid, x, true);
			    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x));
				}
			}
		}
		else //Ha nincs DM-be
		{
			// Ha nincs nametag a játékosnak, aki bemegy neked a stream zónába
			if(g_PlayerFlags[x] & e_NO_NAMETAG)
			{
				// Ha bevan kapcsolva neki a törölt játékos nevek mutatása -> Mutassuk neki a nevét
				if(g_PlayerFlags[playerid] & e_SEENAMETAG && PlayerInfo[x][pRegID] != 3)
		        {
					ShowPlayerNameTagForPlayer(playerid, x, true); //Mutatás
			    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x));
					continue;
				}

				// Ha nincs minigameben -> Töröljük a nevét
			    if(g_pDeathMatchID[x] == -1 && !(g_pGamesData[x] & e_IN_DERBY) && !(g_pGamesData[x] & e_IN_CTC) && !(g_pGamesData[x] & e_IN_GANGWAR) && !(g_pGamesData[x] & e_POSTAS) && !(g_pGamesData[x] & e_PIZZAS) && !GetPVarType(x, "RaceParticipant") && !GetPVarType(x, "FalloutState"))
				{
			        ShowPlayerNameTagForPlayer(playerid, x, false); //Rejtés
			    	SetPlayerMarkerForPlayer(playerid, x, GetPlayerColor(x) & 0xFFFFFF00);
				}
			}
		}
	}
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED || g_pOtherFlags[forplayerid] & e_KICKED) return 0;
	SetPlayerTeam(playerid, GetPlayerTeam(playerid));
	SetPlayerTeam(forplayerid, GetPlayerTeam(forplayerid));
	
	UpdateNametagsForPlayer(playerid);
	UpdateNametagsForPlayer(forplayerid);
    return 1;
}
/*
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED || g_pOtherFlags[forplayerid] & e_KICKED) return 0;

	SetPlayerTeam(playerid, GetPlayerTeam(playerid));
	SetPlayerTeam(forplayerid, GetPlayerTeam(forplayerid));

	// Ha DM-ben van (mind a kett játékos biztonság kedvéért
	if(g_pDeathMatchID[playerid] != -1 && g_pDeathMatchID[forplayerid] != -1)
	{
		//printf("elsõ: %d - %d", g_pDeathMatchID[playerid], g_pDeathMatchID[forplayerid]);

		new
		    dmid = g_pDeathMatchID[playerid];
		if(g_DMFlags[dmid] & e_NO_NAMETAGS)
		{
	        if(g_DMFlags[dmid] & e_IS_TDM)
	        {
				// Ha a stream zónába bejövõ játékos nem az õ csapatában van akkor rejtjük neki a nevét
				if(g_pDeathMatchTeam[playerid] != g_pDeathMatchTeam[forplayerid])
				{
				    ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
			    	SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
				}
			}
			else
			{
				// Sima DM-ben mindekinek a nevét elrejtjük mindenkinek
			    ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
		    	SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
			}
		}
	}

	// Ha nincs nametag a játékosnak, aki bemegy neked a stream zónába
	if(g_PlayerFlags[playerid] & e_NO_NAMETAG)
	{
		if(PlayerInfo[playerid][pRegID] == 3) return 0;
		if(PlayerInfo[forplayerid][pRegID] == 3) return 0;
		// Ha bevan kapcsolva neki a törölt játékos nevek mutatása -> Mutassuk neki a nevét
		if(g_PlayerFlags[forplayerid] & e_SEENAMETAG)
        {
			ShowPlayerNameTagForPlayer(forplayerid, playerid, true);
	    	SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid));
			return 1;
		}

		// Ha nincs minigameben -> Töröljük a nevét
	    if(g_pDeathMatchID[playerid] == -1 && !(g_pGamesData[playerid] & e_IN_DERBY) && !(g_pGamesData[playerid] & e_IN_CTC) && !(g_pGamesData[playerid] & e_IN_GANGWAR) && !(g_pGamesData[playerid] & e_POSTAS) && !(g_pGamesData[playerid] & e_PIZZAS) && !GetPVarType(playerid, "RaceParticipant") && !GetPVarType(playerid, "FalloutState"))
		{
	        ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	    	SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
			return 1;
		}
	}
	return 1;
}*/

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED || g_pOtherFlags[forplayerid] & e_KICKED) return 0;

    if(spectatorid[forplayerid] == playerid)
    {
        TogglePlayerSpectating(playerid, false);
		SetTimerEx("SpecPlayer", 500, false, "dd", forplayerid, playerid);
		//SpecPlayer(forplayerid, playerid);
    }
	return 1;
}

#if defined IRC_ASD
CMD:groupsay(playerid, params[], 4, 0)
{
    IRC_GroupSay(groupID, IRC_CHANNEL, params);
    SendClientMessagef(playerid, COLOR_LIGHTBLUE, "GroupID: %d, Ch: " #IRC_CHANNEL " - %s", groupID, params);
	return 1;
}

public IRC_OnConnect(botid, _ip[], port)
{
//	printf("*** IRC_OnConnect: Bot ID %d connected to %s:%d", botid, ip, port);
	// Join the channel
	IRC_JoinChannel(botid, IRC_CHANNEL);
	// Add the bot to the group
	IRC_AddToGroup(groupID, botid);
	return 1;
}

/*
	This callback is executed whenever a current connection is closed. The
	plugin may automatically attempt to reconnect per user settings. IRC_Quit
	may be called at any time to stop the reconnection process.
*/

public IRC_OnDisconnect(botid, _ip[], port, reason[])
{
//	printf("*** IRC_OnDisconnect: Bot ID %d disconnected from %s:%d (%s)", botid, ip, port, reason);
	// Remove the bot from the group
	IRC_RemoveFromGroup(groupID, botid);
	return 1;
}

/*
	This callback is executed whenever a connection attempt begins. IRC_Quit may
	be called at any time to stop the reconnection process.
*/

public IRC_OnConnectAttempt(botid, _ip[], port)
{
//	printf("*** IRC_OnConnectAttempt: Bot ID %d attempting to connect to %s:%d...", botid, ip, port);
	return 1;
}

/*
	This callback is executed whenever a connection attempt fails. IRC_Quit may
	be called at any time to stop the reconnection process.
*/

public IRC_OnConnectAttemptFail(botid, _ip[], port, reason[])
{
//	printf("*** IRC_OnConnectAttemptFail: Bot ID %d failed to connect to %s:%d (%s)", botid, ip, port, reason);
	return 1;
}

/*
	This callback is executed whenever a bot joins a channel.
*/

public IRC_OnJoinChannel(botid, channel[])
{
//	printf("*** IRC_OnJoinChannel: Bot ID %d joined channel %s", botid, channel);
	return 1;
}

/*
	This callback is executed whenevever a bot leaves a channel.
*/

public IRC_OnLeaveChannel(botid, channel[], message[])
{
//	printf("*** IRC_OnLeaveChannel: Bot ID %d left channel %s (%s)", botid, channel, message);
	return 1;
}

/*
	This callback is executed whenevever a bot is invited to a channel.
*/

public IRC_OnInvitedToChannel(botid, channel[], invitinguser[], invitinghost[])
{
//	printf("*** IRC_OnInvitedToChannel: Bot ID %d invited to channel %s by %s (%s)", botid, channel, invitinguser, invitinghost);
	IRC_JoinChannel(botid, channel);
	return 1;
}

/*
	This callback is executed whenevever a bot is kicked from a channel. If the
	bot cannot immediately rejoin the channel (in the event, for example, that
	the bot is kicked and then banned), you might want to set up a timer here
	for rejoin attempts.
*/

public IRC_OnKickedFromChannel(botid, channel[], oppeduser[], oppedhost[], message[])
{
//	printf("*** IRC_OnKickedFromChannel: Bot ID %d kicked by %s (%s) from channel %s (%s)", botid, oppeduser, oppedhost, channel, message);
	IRC_JoinChannel(botid, channel);
	return 1;
}

public IRC_OnUserDisconnect(botid, user[], host[], message[])
{
//	printf("*** IRC_OnUserDisconnect (Bot ID %d): User %s (%s) disconnected (%s)", botid, user, host, message);
	return 1;
}

public IRC_OnUserJoinChannel(botid, channel[], user[], host[])
{
//	printf("*** IRC_OnUserJoinChannel (Bot ID %d): User %s (%s) joined channel %s", botid, user, host, channel);
	return 1;
}

public IRC_OnUserLeaveChannel(botid, channel[], user[], host[], message[])
{
//	printf("*** IRC_OnUserLeaveChannel (Bot ID %d): User %s (%s) left channel %s (%s)", botid, user, host, channel, message);
	return 1;
}

public IRC_OnUserKickedFromChannel(botid, channel[], kickeduser[], oppeduser[], oppedhost[], message[])
{
//	printf("*** IRC_OnUserKickedFromChannel (Bot ID %d): User %s kicked by %s (%s) from channel %s (%s)", botid, kickeduser, oppeduser, oppedhost, channel, message);
}

public IRC_OnUserNickChange(botid, oldnick[], newnick[], host[])
{
//	printf("*** IRC_OnUserNickChange (Bot ID %d): User %s (%s) changed his/her nick to %s", botid, oldnick, host, newnick);
	return 1;
}

public IRC_OnUserSetChannelMode(botid, channel[], user[], host[], mode[])
{
//	printf("*** IRC_OnUserSetChannelMode (Bot ID %d): User %s (%s) on %s set mode: %s", botid, user, host, channel, mode);
	return 1;
}

public IRC_OnUserSetChannelTopic(botid, channel[], user[], host[], topic[])
{
//	printf("*** IRC_OnUserSetChannelTopic (Bot ID %d): User %s (%s) on %s set topic: %s", botid, user, host, channel, topic);
	return 1;
}

public IRC_OnUserSay(botid, recipient[], user[], host[], message[])
{
//	printf("*** IRC_OnUserSay (Bot ID %d): User %s (%s) sent message to %s: %s", botid, user, host, recipient, message);

	// Someone sent the bot a private message
	if (!strcmp(recipient, "MFRBot"))
	{
		IRC_Say(botid, user, "You sent me a PM!");
	}
	return 1;
}

public IRC_OnUserNotice(botid, recipient[], user[], host[], message[])
{
//	printf("*** IRC_OnUserNotice (Bot ID %d): User %s (%s) sent notice to %s: %s", botid, user, host, recipient, message);
	// Someone sent the bot a notice (probably a network service)

	if (!strcmp(recipient, "MFRBot"))
	{
		IRC_Notice(botid, user, "You sent me a notice!");
	}
	return 1;
}

public IRC_OnUserRequestCTCP(botid, user[], host[], message[])
{
//	printf("*** IRC_OnUserRequestCTCP (Bot ID %d): User %s (%s) sent CTCP request: %s", botid, user, host, message);
	// Someone sent a CTCP VERSION request
	if (!strcmp(message, "VERSION"))
	{
		IRC_ReplyCTCP(botid, user, "VERSION SA-MP IRC Plugin v1.4.4");
	}
	return 1;
}

public IRC_OnUserReplyCTCP(botid, user[], host[], message[])
{
//	printf("*** IRC_OnUserReplyCTCP (Bot ID %d): User %s (%s) sent CTCP reply: %s", botid, user, host, message);
	return 1;
}

public IRC_OnReceiveNumeric(botid, numeric, message[])
{
	// Check if the numeric is an error defined by RFC 1459/2812
	if (numeric >= 400 && numeric <= 599)
	{
		const ERR_NICKNAMEINUSE = 433;
		if (numeric == ERR_NICKNAMEINUSE)
		{
			// Check if the nickname is already in use
			if (botid == gIRCBot)
			{
				IRC_ChangeNick(botid, "MFRBot2");
			}
		}
//		printf("*** IRC_OnReceiveNumeric (Bot ID %d): %d (%s)", botid, numeric, message);
	}
	return 1;
}

/*
	This callback is useful for logging, debugging, or catching error messages
	sent by the IRC server.
*/

public IRC_OnReceiveRaw(botid, message[])
{
	new File:file;
	if (!fexist("irc_log.txt"))
	{
		file = fopen("irc_log.txt", io_write);
	}
	else
	{
		file = fopen("irc_log.txt", io_append);
	}
	if (file)
	{
		fwrite(file, message);
		fwrite(file, "\r\n");
		fclose(file);
	}
	return 1;
}


IRCCMD:say(botid, channel[], user[], host[], params[])
{
	// Check if the user has at least voice in the channel
	if (IRC_IsVoice(botid, channel, user))
	{
		// Check if the user entered any text
		if (!isnull(params))
		{
			new msg[128];
			// Echo the formatted message
			format(msg, sizeof(msg), "02*** %s on IRC: %s", user, params);
			IRC_GroupSay(groupID, channel, msg);
			format(msg, sizeof(msg), "*** %s on IRC: %s", user, params);
			SendClientMessageToAll(0x0000AAFF, msg);
		}
	}
	return 1;
}
#endif

stock SelectLanguage(playerid)
{
    //RegisterDialog(playerid);
    if(g_pLang{playerid} == LANGUAGE_HU) return RegisterDialog(playerid);
    else ShowPlayerDialogEx(playerid, DIALOG_SELECT_LANG, DIALOG_STYLE_LIST, "Select your language", "Hungarian - Magyar\nEnglish - Angol", "Select");
    return 1;
}

// Register & Login dialog
stock RegisterDialog(playerid)
{
    if(g_pOtherFlags[playerid] & e_RAKSAMP) return 0;
    
    strmid(i_str, pName(playerid), 0, 1);
    if(strfind(i_str, "{", true) != -1) //Ha van benne "{" karakter
	{
		SendClientMessage(playerid, COLOR_RED, "HIBA: \"{\" karakter nem szerepelhet az elsõ helyen! Változtass nevet!");
		KickEx(playerid, "{}", 4500);
		return 1;
	}
    
    
	/*
    for(new i; i != 10; i++) SendClientMessage(playerid, COLOR_YELLOW, "\n");

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_REGISZTRACIO_JUNIUS_15IG_ZARVA"));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_REGISZTRACIO_ERDEKEBEN_FELMESZ"));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_FORUM__REGISZTRACIO_KERESEK"));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HA_MEGNYITOTTAD_A_TEMAT_ES"));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_EZUTAN_MAR_BE_IS_LEPHETSZ_AZ"));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_ADMIN_ALTAL_ADOTT_JELSZAVAT"));

	KickEx(playerid, "antireg");

	return 1;
	*/

    format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Regisztráció: {" #XCOLOR_RED "}%s{" #XCOLOR_GREEN "}(%d)", pName(playerid), playerid);
    SetGVarString("DIALOG_REG_TITLE", i_str,  g_pLang{playerid});
 	return ShowPlayerDialogEx(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, DIALOG(playerid, "DIALOG_REG"));
}

stock LoginDialog(playerid)
{
    if(g_pOtherFlags[playerid] & e_RAKSAMP) return 0;
	format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Bejelentkezés: {" #XCOLOR_RED "}%s{" #XCOLOR_GREEN "}(%d)", pName(playerid), playerid);
	SetGVarString("DIALOG_LOGIN2_TITLE", i_str,  g_pLang{playerid});
	return ShowPlayerDialogEx(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, DIALOG(playerid, "DIALOG_LOGIN2"));
}

// Forum Register
stock ForumRegisterDialog(playerid)
{
	format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Fórum Regisztráció: {" #XCOLOR_RED "}%s{" #XCOLOR_GREEN "}(%d)", pName(playerid), playerid);
	SetGVarString("DIALOG_FORUM_REG_TITLE", i_str,  g_pLang{playerid});
	return ShowPlayerDialogEx(playerid, DIALOG_FORUM_REGISTER, DIALOG_STYLE_INPUT, DIALOG(playerid, "DIALOG_FORUM_REG"));
}

stock ForumRegisterDialog2(playerid)
{
	format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Fórum Regisztráció: {" #XCOLOR_RED "}%s{" #XCOLOR_GREEN "}(%d)", pName(playerid), playerid);
	SetGVarString("DIALOG_FORUM_REG2_TITLE", i_str,  g_pLang{playerid});
    return ShowPlayerDialogEx(playerid, DIALOG_FORUM_REGISTER + 1, DIALOG_STYLE_INPUT, DIALOG(playerid, "DIALOG_FORUM_REG2"));
}

// SetAccount dialog
stock ForumChangeDialog(playerid)
{
	format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Fórum Account beállítás: {" #XCOLOR_RED "}%s{" #XCOLOR_GREEN "}(%d)", pName(playerid), playerid);
	SetGVarString("DIALOG_FORUM_CHANGE_TITLE", i_str,  g_pLang{playerid});
	return ShowPlayerDialogEx(playerid, DIALOG_FORUM_SETACC, DIALOG_STYLE_INPUT, DIALOG(playerid, "DIALOG_FORUM_CHANGE"));
}

stock ForumChangeDialog2(playerid)
{
	new
	    CurStr[128];
	GetPVarString(playerid, "ForumAcc", CurStr, sizeof(CurStr));
	format(i_str, sizeof(i_str), "{" #XCOLOR_PINK "}Fórum Account beállítás: {" #XCOLOR_RED "}%s", CurStr);
	format(tmp, 256, "{48df44}Üdvözöllek a \n\n{EE5555}MaXXiMuM FreeRoam{FFFFFF} Szerveren, \n\n{" #XCOLOR_BLUE2 "}Itt hozzáköthetsz egy fórum felhasználót a szerverhez\n{" #XCOLOR_YELLOW "}Lentre írd be a {" #XCOLOR_BLUE3 "}%s{" #XCOLOR_YELLOW "} felhasználó jelszavát!", CurStr);
	return ShowPlayerDialogEx(playerid, DIALOG_FORUM_SETACC + 1, DIALOG_STYLE_INPUT, i_str, tmp, "Kapcsol", "Mégse");
}

stock BanmanagerDialog(playerid)
{
	GetPVarString(playerid, "DialogBanName", name, sizeof(name));
	new
	    banid = GetPVarInt(playerid, "DialogBanID");

	format(i_str, sizeof(i_str), "Banmanager {" #XCOLOR_GREEN "}%s {" #XCOLOR_ORANGE "}(BanID: %d)", name, banid & 0xFFFFFF);
	format(tmp, sizeof(tmp), "{" #XCOLOR_LIGHTGREEN "}Információ\n{" #XCOLOR_BLUE2 "}Unban idõ állítása\n{" #XCOLOR_BLUE "}Feloldás\n{" #XCOLOR_YELLOW "}Indok átállítása\n{" #XCOLOR_RED "}RCON Bannolás\n%s\n{FFAA00}Stats", (banid >> 24 & 0x1) ? ("Admin mutatása") : ("Admin elrejtése"));
	ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 1, DIALOG_STYLE_LIST, i_str, tmp, "Ok", "Mégse");
	return 1;
}

forward THREAD_DialogLogin(playerid, password[], queue);
public THREAD_DialogLogin(playerid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_DialogLogin);
//	printf("THREAD_DialogLogin(playerid = %d)", playerid);

	new
		lineid = GetPVarInt(playerid, "LineID");
	if(cache_get_row_count() != 1)
	{
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHHIBAS_BEJELENTKEZESNWROSS"));

		PVarIntFel(playerid, "FailLogin");

		getdate(year, month, day);
		gettime(hour, minute, second);

		GetPlayerIp(playerid, ip, sizeof(ip));
		gpci(playerid, tmp, 128);

		mysql_format(1, query, sizeof(query), "INSERT INTO `faillogins`(id, name, reg_id, password, ip, serial, time) VALUES(0, '%s', %d, '%e', '%s', '%s', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), (!lineid) ? (-1) : (lineid), password, ip, tmp, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");

		if(GetPVarInt(playerid, "FailLogin") >= 5)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__FAIL_LOGIN__5_ALKALOMMAL_IS"));
			SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_A_SZERVER_WEBOLDALAN__WEB_ADDRESS"));

			format(i_str, sizeof(i_str), "*** {%06x}%s(%d) {" #XCOLOR_BLUE "}kickelve lett, mivel hibás jelszót adott meg {" #XCOLOR_RED "}5 {" #XCOLOR_BLUE "}alkalommal!", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
			SendClientMessageToAllEx(playerid, COLOR_BLUE, i_str);

            InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHHIBAS_BEJELENTKEZESNWKICK"));
			TogglePlayerSpectating(playerid, true);
			KickEx(playerid, "faillogin");
			return 1;
		}

		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__FAIL_LOGIN__ROSSZ_JELSZOT"), GetPVarInt(playerid, "FailLogin"));

		LoginDialog(playerid);
		return 1;
	}
	else
	{
		LoginPlayer(playerid);
		GetPlayerIp(playerid, ip, sizeof(ip));

		switch(GetPVarInt(playerid, "Level"))
		{
		    case 0: format(name, 16,"%s",LANG(playerid, "MSG_INFOTD_RANK_0"));
		   	case 1: format(name, 16,"%s",LANG(playerid, "MSG_INFOTD_RANK_1"));
			case 2: format(name, 16,"%s",LANG(playerid, "MSG_INFOTD_RANK_2"));
			case 3: format(name, 16,"%s",LANG(playerid, "MSG_INFOTD_RANK_3"));
			case 4: format(name, 16,"%s",LANG(playerid, "MSG_INFOTD_RANK_4"));
		}

		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHSIKERESEN_HBEJELENTKEZTELW"), name);

		//if(PlayerInfo[playerid][fRegID] == -1) cmd_forumhelp(playerid, "");
		if(g_PlayerData[playerid] & e_MUST_LOGIN)
		{
            g_PlayerData[playerid] &= ~e_MUST_LOGIN;

			if(GetPVarType(playerid, "FavSkinID"))
			{
			    SetPlayerSkin(playerid, GetPVarInt(playerid, "FavSkinID"));
		    }

		  	if(GetPVarType(playerid, "JailTime"))
			{
				ResetPlayerWeapons(playerid);
				PlayerTele(playerid, 6519.1816, 562.2757, 1.5871, 0, 63.9206);
				SetPlayerHealth(playerid, HEALTH_GOD);

				SetPlayerWeather(playerid, 19);
				SetPlayerTime(playerid, 24, 0);
				ShowWelcome(playerid, LANG(playerid, "MSG_RUDV_UJRA_A_BORTONBENW"));
				return 1;
			}

			for(new i; i != 11; i++)
			{
				SetPlayerSkillLevel(playerid, i, g_pWeaponSkill[playerid][i]);
			}

			if(GetPVarType(playerid, "PlayerTime_Hour"))
			{
				SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
			}

			SetPlayerHealth(playerid, 100);
            vID = GetPVarInt(playerid, "Color");
			if(!IsBlack(vID))
			{
				SetPlayerColor(playerid, vID);
		    }
			if(GetPVarType(playerid, "PlayerWeather"))
			{
				SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
			}
			LoadPlayerWeaponInfo(playerid);
		}

		gpci(playerid, i_str, sizeof(i_str));
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `ip` = '%s', `serial` = '%s' WHERE `reg_id` = %d", ip, i_str, PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");

		getdate(year, month, day);
		gettime(hour, minute, second);
		mysql_format(1, query, sizeof(query), "INSERT INTO `faillogins_s`(id, name, reg_id, password, ip, serial, time) VALUES(0, '%s', %d, '%e', '%s','%s', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), (!lineid) ? (-1) : (lineid), password, ip, i_str, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

forward THREAD_Register_1(playerid, password[], queue);
public THREAD_Register_1(playerid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Register_1);
//	printf("THREAD_Register_1(playerid = %d)", playerid);

	if(cache_get_row_count())
	{
		SendClientMessageToAllf(COLOR_BLUE, "MSG__REG___KICKELVE_LETT_MERT_A", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		printf("MySQL rosw > 1 (%d, %s)", playerid, password);
		KickEx(playerid, "rows > 1");
		return 1;
	}

	GetPlayerIp(playerid, ip, sizeof(ip));
	mysql_format(1, query, sizeof(query), "SELECT `name` FROM  `players` WHERE `ip` = '%s' GROUP BY `name` ORDER BY MAX( `reg_id` )", ip);
	mysql_function_query(1, query, true, "THREAD_Register_2", "dsd", playerid, password, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Register_2(playerid, password[], queue);
public THREAD_Register_2(playerid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Register_2);
	new
		rows = cache_get_row_count(),
		count;

	// Ha több, mint 6 regisztrált neve van - kiírjük neki a regisztráltakat és kickeljük
	printf("ipcount %d | megengedett: %d", rows, gIP_Count);
	if(rows > gIP_Count)
	{
		format(dline, sizeof(dline), "Maximum {" #XCOLOR_RED "}%d nevet regisztrálhatsz {" #XCOLOR_DEFAULT "}a szerveren, de te már elérted ezt a számot!\nJelenleg {" #XCOLOR_ORANGE "}%d{" #XCOLOR_GREEN "}db {" #XCOLOR_DEFAULT "}regisztrált neved van errõl az IP címrõl.\nItt egy lista a regisztrált neveidrõl, ezek közül lépj be egyikkel!\nHa esetleg egyikre sem tudod a jelszavat, akkor a szerver weboldalán írj egy adminnak!\nHa betudod bizonyítani, hogy te vagy az, megmondják a jelszavad\n\n",gIP_Count, rows);
		for(new i; i != rows; i++)
		{
			cache_get_row(i, 0, name);
			strcat(dline, name);
			strcat(dline, "\n");
			//if(i != (rows - 1)) strcat(dline, ", ");

			if(++count >= 15)
			{
				strcat(dline, "\n");
				count = 0;
			}
		}
		SetPVarString(playerid, "RegFail", dline);
		KickEx(playerid, "lot of reg | %d", gIP_Count);
		
		ShowPlayerDialogEx(playerid, DIALOG_REGLOTOFIP, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_YELLOW "}Túl sok regisztrált név..", dline, "Relogolok");
		return 1;
	}

	getdate(year, month, day);
	gettime(hour, minute, second);

    PlayerInfo[playerid][pRegYear] = year;
    PlayerInfo[playerid][pRegMonth] = month;
	PlayerInfo[playerid][pRegDay] = day;
	PlayerInfo[playerid][pRegHour] = hour;
	PlayerInfo[playerid][pRegMinute] = minute;
	PlayerInfo[playerid][pRegSecond] = second;
    PlayerInfo[playerid][pLastYear] = year;
    PlayerInfo[playerid][pLastMonth] = month;
	PlayerInfo[playerid][pLastDay] = day;
	PlayerInfo[playerid][pLastHour] = hour;
	PlayerInfo[playerid][pLastMinute] = minute;
	PlayerInfo[playerid][pLastSecond] = second;

	// Ha be AFk-zik valaki akkor beveheti raksamp botnak - random score bugot itt javítjuk
	SetPlayerScore(playerid, 2);
	g_pOtherFlags[playerid] &= ~e_RAKSAMP;

	SetGVarInt(pName(playerid), g_pLang{playerid}, 0);

    GetPlayerIp(playerid, ip, sizeof(ip));
	gpci(playerid, i_str, sizeof(i_str));

	new
	    datum = CurrentTimestamp();
    mysql_format(1, query, sizeof(query), "INSERT INTO `players`(reg_id, name, ip, pass, flags, reg_date, laston, serial) VALUES(0, '%e', '%s', '%e', %d, %d, %d, '%s')", pName(playerid), ip, password, g_PlayerFlags[playerid], datum, datum, i_str);
	mysql_function_query(1, query, false, "THREAD_Register_3", "dsd", playerid, password, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Register_3(playerid, password[], queue);
public THREAD_Register_3(playerid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Register_3);
//	printf("THREAD_Register_2(playerid = %d)", playerid);

    PlayerInfo[playerid][pRegID] = cache_insert_id();
    session[registrations][0] ++;

    g_PlayerData[playerid] |= e_LOGGED_IN;
	GivePlayerMoneyEx(playerid, 500000, "Register");
    SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
    GivePlayerScore(playerid, 1);

	// Beállítások
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_SIKERESEN_REGISZTRALTAL_REGISZTRACI"), PlayerInfo[playerid][pRegID], password);
	SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_KEZDETNEK_KAPTAL_500000ET_JO"));
	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_HA_ELOSZOR_JARSZ_A_SZERVEREN"));

	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__REGISZTRALJ_BE_A_SZERVER_FORUMARA"));
    SendClientMessageToAllf(COLOR_BLUE, "MSG__REG___REGISZTRALT_A_SZERVER", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, PlayerInfo[playerid][pRegID]);

	SetPVarInt(playerid,"MostRegisztralt", 1);
	// Spawn infó tábla frissítése
	CallRemoteFunction("UpdateSpawnPlane", "dd", PlayerInfo[playerid][pRegID], Itter_Count(Teleports));
    if(g_PlayerData[playerid] & e_MUST_LOGIN)
	{
		g_PlayerData[playerid] &= ~e_MUST_LOGIN;
		ResetPlayerWeapons(playerid);
	}
	else
	{
//		g_pInRegTick[playerid] = GetTickCount();
//		cmd_help(playerid, "");
	}
	mysql_format(1, query, sizeof(query), "UPDATE `connections` SET `reg_id` = %d WHERE `id` = %d", PlayerInfo[playerid][pRegID], GetPVarInt(playerid, "ConnectID") );
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_ForumRegister_1(playerid, email[], queue);
public THREAD_ForumRegister_1(playerid, email[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ForumRegister_1);

	new
	    rows = cache_get_row_count();
	if(rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_EMAIL_CIM__MAR_REGISZTA"), email);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HASZNALD_A_MYFORUMACC_PARANCSOT"));
        ForumRegisterDialog2(playerid);
		return 1;
	}

    GetPlayerIp(playerid, ip, sizeof(ip));
	GetPVarString(playerid, "ForumPass", tmp, sizeof(tmp));
	name[0] = EOS;
	strcat(name, pName(playerid), MAX_PLAYER_NAME);

	new
		hash[128];
 	for(new i, j = strlen(name); i != j; i++)
	{
		name[i] = tolower(name[i]);
	}

	strmid(hash, tmp, 0, strlen(tmp), sizeof(hash));
	strins(hash, name, 0, sizeof(hash));

	getdate(year, month, day);
	gettime(hour, minute, second);

    mysql_format(ForumSQLConnect, query, sizeof(query), "INSERT INTO `smf_members`(id_member, member_name, real_name, date_registered, passwd, email_address, member_ip, member_ip2, id_post_group) VALUES(0, '%s', '%s', %d, sha1('%s'), '%s', '%s', '%s', 4)", pName(playerid), pName(playerid), CurrentTimestamp(), hash, email, ip, ip);
	mysql_function_query(ForumSQLConnect, query, false, "THREAD_ForumRegister_2", "dsd", playerid, email, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_ForumRegister_2(playerid, email[], queue);
public THREAD_ForumRegister_2(playerid, email[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ForumRegister_2);

    PlayerInfo[playerid][fRegID] = cache_insert_id();
    session[registrations][1] ++;

	GetPVarString(playerid, "ForumPass", tmp, sizeof(tmp));
	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_SIKERESEN_REGISZTRALTAL_A_SZERVER"));
	SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_RENGETEG_DOLOG_ZENEK_ES_EGYEB"));

	SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG_NEVED___JELSZAVAD___SHA1EL"), pName(playerid), tmp, email);
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_KOSZONJUK_HOGY_BEREGISZTRALTAL"));
	DeletePVar(playerid, "ForumPass");
    SendClientMessageToAllf(COLOR_BLUE, "MSG__FORUM_REG___REGISZTRALT_A", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, PlayerInfo[playerid][fRegID]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `forumid` = %d WHERE `reg_id` = %d", PlayerInfo[playerid][fRegID], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(2, query, sizeof(query), "UPDATE `smf_settings` SET `value` = %d WHERE `variable` = 'latestMember'", PlayerInfo[playerid][fRegID]);
    mysql_function_query(2, query, false, "", "");

	mysql_format(2, query, sizeof(query), "UPDATE `smf_settings` SET `value` = '%s' WHERE `variable` = 'latestRealName'", pName(playerid));
    mysql_function_query(2, query, false, "", "");
	return 1;
}

forward THREAD_ForumSetAcc_1(playerid, accountname[], queue);
public THREAD_ForumSetAcc_1(playerid, accountname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ForumSetAcc_1);

	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_A_BEIRT_NEV__NEM_LETZIK_LEHET"), accountname);
        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_ESETLEG_REGISZTALHATSZ_IS_A"));
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BEIRT_GHFELHASZNALO_RHN"));

		ForumChangeDialog(playerid);
		return 1;
	}

    SetPVarString(playerid, "ForumAcc", accountname);
    ForumChangeDialog2(playerid);
	return 1;
}

forward THREAD_ForumSetAcc_2(playerid, queue);
public THREAD_ForumSetAcc_2(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ForumSetAcc_2);

	if(!cache_get_row_count())
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_JELSZO_NEM_EGYEZIK"));
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BEIRT_YHJELSZO_RHNEM_R"));
		ForumChangeDialog2(playerid);
	}
	else
	{
		PlayerInfo[playerid][fRegID] = cache_get_row_int_ex(0, 0, 2);

        GetPVarString(playerid, "ForumAcc", i_str, sizeof(i_str));
    	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_A_FELHASZNALOD_HOZZAKAPCSOLVA"), i_str);
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHFELHASZNALO_HHOZZAKAPCSOLVA"));

		DeletePVar(playerid, "ForumAcc");

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `forumid` = %d WHERE `reg_id` = %d", PlayerInfo[playerid][fRegID], PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	// Crash javítása a % jel használatánál (%s, %d)
	if(inputtext[0])
	{
		for(new i, j = strlen(inputtext); i != j; i++)
		{
			if(inputtext[i] == '%') inputtext[i] = '#';
  		}
	}
	// printf("OnDialogResponse(playerid, = %d, dialogid = %d, response = %d, listitem = %d, inputtext = %s", playerid, dialogid, response, listitem, inputtext);
    switch(dialogid)
    {
        case DIALOG_LOGIN:
        {
			if(!response)
				return (g_PlayerData[playerid] & e_MUST_LOGIN) ? (LoginDialog(playerid)) : (0);

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				LoginDialog(playerid);
				return 1;
			}

			if(!strcmp(inputtext, !RCON_PASSWORD, true))
			{
				GetPVarString(playerid, "Pass", i_str, 30);
				//DeletePVar(playerid, "Pass");
			}
			else
			{
				strcpy(i_str, inputtext);
			}

			mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%e' AND `pass` COLLATE `utf8_bin` LIKE '%e'", pName(playerid), i_str);
	        mysql_function_query(1, query, true, "THREAD_DialogLogin", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_REGISTER:
		{
			if(!response)
				return (g_PlayerData[playerid] & e_MUST_LOGIN) ? (RegisterDialog(playerid)) : (0);

         	if(g_PlayerData[playerid] & e_LOGGED_IN) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RMAR_BE_VAGY_JELENTKEZVE"));

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				RegisterDialog(playerid);
				return 1;
			}

			if(!(3 <= strlen(inputtext) <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				RegisterDialog(playerid);
				return 1;
			}

			mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `players` WHERE `name` = '%s'", pName(playerid));
			mysql_function_query(1, query, true, "THREAD_Register_1", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_REGLOTOFIP:
		{
			GetPVarString(playerid, "RegFail", dline, sizeof(dline));
			ShowPlayerDialogEx(playerid, DIALOG_REGLOTOFIP, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_YELLOW "}Túl sok regisztrált név..", dline, "Relogolok");
			return 1;
		}
		case DIALOG_FORUM_REGISTER:
		{
			if(!response)
				return 0;

            if(PlayerInfo[playerid][fRegID] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_MAR_REGISZTRALTAL_A_FORUMON"));

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				ForumRegisterDialog(playerid);
				return 1;
			}

			if(!(3 <= strlen(inputtext) <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				ForumRegisterDialog(playerid);
				return 1;
			}

			SetPVarString(playerid, "ForumPass", inputtext);
            ForumRegisterDialog2(playerid);
		}
		case DIALOG_FORUM_REGISTER + 1:
		{
			if(!response)
				return 0;

			if(!IsValidEmail(inputtext))
			{
                SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_EMAIL_CIM_NEM_MEGFELELO"));
                ForumRegisterDialog2(playerid);
				return 1;
			}

			mysql_format(ForumSQLConnect, query, sizeof(query), "SELECT `id_member` FROM `smf_members` WHERE `email_address` = '%s'", inputtext);
			mysql_function_query(ForumSQLConnect, query, true, "THREAD_ForumRegister_1", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_FORUM_SETACC:
		{
			if(!response)
				return 0;

            if(PlayerInfo[playerid][fRegID] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_MAR_REGISZTRALTAL_A_FORUMON"));
			// forumsetacc
			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_IRTAL_BE_SEMILYEN_NEVET"));
                InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_IRTAL_BE_YHSEMILYEN_RJE"));

				ForumChangeDialog(playerid);
				return 1;
			}

			mysql_format(ForumSQLConnect, query, sizeof(query), "SELECT `id_member` FROM `smf_members` WHERE `member_name` = '%s'", inputtext);
			mysql_function_query(ForumSQLConnect, query, true, "THREAD_ForumSetAcc_1", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_FORUM_SETACC + 1:
		{
			if(!response)
				return 0;

            if(PlayerInfo[playerid][fRegID] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_MAR_REGISZTRALTAL_A_FORUMON"));

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_IRTAL_BE_SEMILYEN_NEVET"));
                InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_IRTAL_BE_HSEMILYEN_GNEVET"));
				ForumChangeDialog2(playerid);
				return 1;
			}

	        new
                len = strlen(inputtext);
			if(!(3 <= len <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				ForumChangeDialog2(playerid);
				return 1;
			}

			GetPVarString(playerid, "ForumAcc", i_str, sizeof(i_str));

			new
				hash[128];
		 	for(new i, j = strlen(i_str); i != j; i++)
			{
				i_str[i] = tolower(i_str[i]);
			}

		 	strmid(hash, inputtext, 0, len, sizeof(hash));
		 	strins(hash, i_str, 0, sizeof(hash));

			mysql_format(ForumSQLConnect, query, sizeof(query), "SELECT `id_member` FROM `smf_members` WHERE `member_name` = '%s' AND `passwd` = sha1('%s')", i_str, hash);
			mysql_function_query(ForumSQLConnect, query, true, "THREAD_ForumSetAcc_2", "dd", playerid, g_pQueryQueue[playerid]);
		}
		case CHANGEPASS:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 24) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			if(!(3 <= strlen(inputtext) <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));

                ShowPlayerDialogEx(playerid, CHANGEPASS, DIALOG_STYLE_INPUT, "Jelszóváltás", "Lentre írd be az új jelszavad! \n\n", "Változtatás", "Mégse");
				return 1;
			}

			mysql_format(1, query, sizeof(query), "SELECT `pass` FROM `players` WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, true, "THREAD_Changepass", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_CHANGENAME:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 23) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);
				
            if(IPCheck(playerid, inputtext, "/changename"))
				return 1;

            strmid(i_str, inputtext, 0, 1);
            if(strfind(i_str, "{", true) != -1) //Ha van benne "{" karakter
			{
		 		SendClientMessage(playerid, COLOR_RED, "HIBA: \"{\" karakter nem szerepelhet az elsõ helyen!");
		 		ChangeName(playerid);
		 		return 1;
			}
			if(!(3 <= strlen(inputtext) <= 20))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_HOSSZU_A_NEVED"));
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_MEGFELELO_HOSSZUSAGU_A"));

				ChangeName(playerid);
				return 1;
            }

			if(!IsValidNickName(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VALID_NAME_CHARS"));
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BEIRT_NEV_HIBAS_KARAKTEREKET"));

				ChangeName(playerid);
				return 1;
            }

		    if(!strcmp(inputtext, pName(playerid), true))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_IS_EZ_A_NEVED_IRJ"));

				ChangeName(playerid);
				return 1;
            }

			for(new i; i != sizeof(g_szTiltottSzavak); i++)
			{
				if(strfind(inputtext, g_szTiltottSzavak[i], true) != -1)
				{
					SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO"), g_szTiltottSzavak[i]);

					ChangeName(playerid);
					return 1;
				}
            }
            datez = CurrentTimestamp();
            mysql_format(1, query, sizeof(query), "SELECT `time_` FROM `namechanges` WHERE `time_` > %d AND `reg_id` = %d ORDER by id DESC",datez - 604800, PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, true, "THREAD_Changename", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
			//printf(query);
		}
		case STYLES:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 1) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			switch(listitem)
			{
				case 0: SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
				case 1: SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				case 2: SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
				case 3: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				case 4: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				case 5: SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
			}

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RUTES_HHSTILUSOD_YATALLITVA"), inputtext);

			new
			    Style = GetPlayerFightingStyle(playerid);
			SetPVarInt(playerid, "Style", Style);
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `fightingstyle` = '%d' WHERE `reg_id` = %d", Style, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");

			if(GetPVarInt(playerid, "CPanelRe") == 1) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
		}
		case WEAPONMENU: // weaponbuy
		{
			if(!response)
			{
				if(GetPVarType(playerid, "InDuel"))
				{
                    DeletePVar(playerid, "InDuel");
                    DeletePVar(playerid, "DuelRounds");
                    DeletePVar(playerid, "DuelHealth");
                    DeletePVar(playerid, "DuelArmour");

					g_pDuelCaller[g_pDuelPlayer[playerid]] = INVALID_PLAYER_ID;
					g_pDuelPlayer[playerid] = INVALID_PLAYER_ID;

                    SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_PARBAJRA_VALO_KIHIVAS_MEGSZAKITVA"));
				}
				return 0;
			}

			switch(listitem)
			{
				case 0: // Kézi
				{
                    MakeWeaponDialog(1, g_pWeaponSlot[playerid][1] && !GetPVarType(playerid, "InDuel"));
                    ShowPlayerDialogEx(playerid, WEAPONMENU + 1500, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Kézi Fegyverek ( 1 )", dline, !"Ok", !"Vissza");
				}
				case 1: // Mûfasz
				{
                    MakeWeaponDialog(10, g_pWeaponSlot[playerid][10] && !GetPVarType(playerid, "InDuel"));
                    ShowPlayerDialogEx(playerid, WEAPONMENU + 1501, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Mûfaszok ( 10 )", dline, !"Ok", !"Vissza");
				}
				case 2: // Gránát
				{
					MakeWeaponDialog(2, (g_pWeaponSlot[playerid][8] != WEAPON_SATCHEL) && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1502, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Gránátok ( 8 )", dline, !"Ok", !"Vissza");
				}
				case 3: // Pistol
				{
                    MakeWeaponDialog(3, g_pWeaponSlot[playerid][2] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1503, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Pisztolyok ( 2 )", dline, !"Ok", !"Vissza");
				}
				case 4: // Shotgun
				{
                    MakeWeaponDialog(4, g_pWeaponSlot[playerid][3] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1504, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Shotgunok ( 3 )", dline, !"Ok", !"Vissza");
				}
				case 5: // Gépfegyverek
				{
                    MakeWeaponDialog(5, g_pWeaponSlot[playerid][4] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1505, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Gépfegyverek ( 4 )", dline, !"Ok", !"Vissza");
				}
				case 6: // Gépkarabélyok
				{
                    MakeWeaponDialog(6, g_pWeaponSlot[playerid][5] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1506, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Gépkarabélyok ( 5 )", dline, !"Ok", !"Vissza");
				}
				case 7: // Mesterlövész
				{
                    MakeWeaponDialog(7, g_pWeaponSlot[playerid][6]);
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1507, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Mesterlövész ( 6 )", dline, !"Ok", !"Vissza");
				}
				case 8: // Speciális Fegyverek
				{
               		MakeWeaponDialog(8, g_pWeaponSlot[playerid][7] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1508, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Speciális Fegyverek ( 7 )", dline, !"Ok", !"Vissza");
				}
				case 9: // C4 & Távirányító
				{
					if(g_pWeaponSlot[playerid][8] != WEAPON_SATCHEL)
					{
						ShowPlayerDialogEx(playerid, WEAPONMENU + 1509, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}C4 & Távirányító ( 8 & 12 )", "{" #XCOLOR_GREEN "}C4 {" #XCOLOR_YELLOW "}& {" #XCOLOR_GREEN2 "}Távirányító\t\t $30.000", !"Ok", !"Vissza");
					}
					else
					{
						ShowPlayerDialogEx(playerid, WEAPONMENU + 1509, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}C4 & Távirányító ( 8 & 12 )", "{" #XCOLOR_GREEN "}C4 {" #XCOLOR_YELLOW "}& {" #XCOLOR_GREEN2 "}Távirányító\n{" #XCOLOR_WHITE "}Kezdésre állítás\n{" #XCOLOR_RED "}Törlés", !"Ok", !"Vissza");
					}
				}
				case 10: // Egyéb Fegyverek
				{
           			MakeWeaponDialog(9, g_pWeaponSlot[playerid][9] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1510, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Egyéb Fegyverek ( 9 )", dline, !"Ok", !"Vissza");
				}
				case 11: // Éjjellátók
				{
                    MakeWeaponDialog(11, g_pWeaponSlot[playerid][11] && !GetPVarType(playerid, "InDuel"));
					ShowPlayerDialogEx(playerid, WEAPONMENU + 1511, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Fegyverek {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_YELLOW "}Éjjellátók ( 11 )", dline, !"Ok", !"Vissza");
				}
				case 12:
				{
					if(GetPVarType(playerid, "InDuel"))
					{
                        ShowDuelLocationSelect(playerid);
					}
					else
					{
						cmd_wskill(playerid, "");
					}
				}
				case 13:
				{
                    if(g_pDeathMatchID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_TOLTHETED_UJRA_A"));

					LoadPlayerWeaponInfo(playerid);
					cmd_weapons(playerid, "");
				}
				case 14:
				{
                    if(g_pDeathMatchID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_TOROLHETED_FEGYVEREIDET"));

					ResetPlayerWeapons(playerid);
					cmd_weapons(playerid, "");
				}
				case 15:
				{
                    if(g_pDeathMatchID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_TOROLHETED_FEGYVEREIDET"));

					for(new i; i != 13; i++)
					{
                        g_pWeaponSlot[playerid][i] = 0;
						g_pWeaponAmmo[playerid][i] = 0;
					}

					ResetPlayerWeapons(playerid);
					cmd_weapons(playerid, "");

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weapons` = '0,0,0,0,0,0,0,0,0,0,0,0,0', `ammo` = '0,0,0,0,0,0,0,0,0,0,0,0,0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
			}
		}
		case WEAPONMENU + 1500:
		{
            if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

            switch(listitem)
			{
			    case 0: GivePlayerWeaponEx(playerid, WEAPON_BRASSKNUCKLE,0);
			    case 1: GivePlayerWeaponEx(playerid, WEAPON_GOLFCLUB,1);
			    case 2: GivePlayerWeaponEx(playerid, WEAPON_NITESTICK,1);
			    case 3: GivePlayerWeaponEx(playerid, WEAPON_KNIFE,1);
			    case 4: GivePlayerWeaponEx(playerid, WEAPON_BAT,1);
			    case 5: GivePlayerWeaponEx(playerid, WEAPON_POOLSTICK,1);
			    case 6: GivePlayerWeaponEx(playerid, WEAPON_KATANA,1);
			    case 7: GivePlayerWeaponEx(playerid, WEAPON_CHAINSAW,1);
			    case 8:
			    {
			        if(!g_pWeaponSlot[playerid][1]) DeletePlayerWeaponInfo(playerid, 1);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][1]);
						cmd_armedweap(playerid, name);
					}
				}
				case 9: DeletePlayerWeaponInfo(playerid, 1); //Törlés
			}
		}
		case WEAPONMENU + 1501:
		{
		    if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

            switch(listitem)
			{
            	case 0: GivePlayerWeaponEx(playerid, WEAPON_DILDO,10);
            	case 1: GivePlayerWeaponEx(playerid, WEAPON_DILDO2,10);
            	case 2: GivePlayerWeaponEx(playerid, WEAPON_VIBRATOR,10);
            	case 3: GivePlayerWeaponEx(playerid, WEAPON_VIBRATOR2,10);
            	case 4: GivePlayerWeaponEx(playerid, WEAPON_FLOWER,10);
            	case 5: GivePlayerWeaponEx(playerid, WEAPON_CANE,10);
            	case 6:
            	{
            	    if(!g_pWeaponSlot[playerid][10]) DeletePlayerWeaponInfo(playerid, 10);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][10]);
						cmd_armedweap(playerid, name);
					}
            	}
            	case 7: DeletePlayerWeaponInfo(playerid, 10); //Törlés
   			}
		}
		case WEAPONMENU + 1502:
		{
		    if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

		    switch(listitem)
			{
			    case 0: GivePlayerWeaponEx(playerid, WEAPON_GRENADE,8);
			    case 1: GivePlayerWeaponEx(playerid, WEAPON_TEARGAS,8);
			    case 2: GivePlayerWeaponEx(playerid, WEAPON_MOLTOV,8);
			    case 3:
			    {
			        if(!g_pWeaponSlot[playerid][8]) DeletePlayerWeaponInfo(playerid, 8);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][8]);
						cmd_armedweap(playerid, name);
					}
			    }
			    case 4: DeletePlayerWeaponInfo(playerid, 8); //Törlés
		    }
		}
		case WEAPONMENU + 1503:
		{
		    if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

		    switch(listitem)
			{
			    case 0: GivePlayerWeaponEx(playerid, WEAPON_COLT45,2);
		        case 1: GivePlayerWeaponEx(playerid, WEAPON_SILENCED,2);
		        case 2: GivePlayerWeaponEx(playerid, WEAPON_DEAGLE,2);
		        case 3: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][2]) DeletePlayerWeaponInfo(playerid, 2);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][2]);
						cmd_armedweap(playerid, name);
					}
				}
				case 4: DeletePlayerWeaponInfo(playerid, 2);
			}
  		}
        case WEAPONMENU + 1504:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
				case 0: GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN,3);
				case 1: GivePlayerWeaponEx(playerid, WEAPON_SAWEDOFF,3);
				case 2: GivePlayerWeaponEx(playerid, WEAPON_SHOTGSPA,3);
				case 3: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][3]) DeletePlayerWeaponInfo(playerid, 3);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][3]);
						cmd_armedweap(playerid, name);
					}
				}
				case 4: DeletePlayerWeaponInfo(playerid, 3);
			}
		}
		case WEAPONMENU + 1505:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
		        case 0: GivePlayerWeaponEx(playerid, WEAPON_UZI,4);
		        case 1: GivePlayerWeaponEx(playerid, WEAPON_TEC9,4);
		        case 2: GivePlayerWeaponEx(playerid, WEAPON_MP5,4);
		        case 3: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][4]) DeletePlayerWeaponInfo(playerid, 4);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][4]);
						cmd_armedweap(playerid, name);
					}
				}
				case 4: DeletePlayerWeaponInfo(playerid, 4);
   			}
		}
		case WEAPONMENU + 1506:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
				case 0: GivePlayerWeaponEx(playerid, WEAPON_AK47,5);
				case 1: GivePlayerWeaponEx(playerid, WEAPON_M4,5);
				case 2: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][5]) DeletePlayerWeaponInfo(playerid, 5);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][5]);
						cmd_armedweap(playerid, name);
					}
				}
				case 3: DeletePlayerWeaponInfo(playerid, 5);
			}
		}
        case WEAPONMENU + 1507:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
		        case 0: GivePlayerWeaponEx(playerid, WEAPON_RIFLE,6);
		        case 1: GivePlayerWeaponEx(playerid, WEAPON_SNIPER,6);
		        case 2: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][6]) DeletePlayerWeaponInfo(playerid, 6);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][6]);
						cmd_armedweap(playerid, name);
					}
				}
				case 3: DeletePlayerWeaponInfo(playerid, 6);
		    }
		}
		case WEAPONMENU + 1508:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
		        case 0: GivePlayerWeaponEx(playerid, WEAPON_ROCKETLAUNCHER,7);
		        case 1: GivePlayerWeaponEx(playerid, WEAPON_HEATSEEKER,7);
		        case 2: GivePlayerWeaponEx(playerid, WEAPON_FLAMETHROWER,7);
		        case 3:
				{
				    if(!IsOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
					GivePlayerWeaponEx(playerid, WEAPON_MINIGUN,7);
				}
		        case 4: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][7]) DeletePlayerWeaponInfo(playerid, 7);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][7]);
						cmd_armedweap(playerid, name);
					}
				}
				case 5: DeletePlayerWeaponInfo(playerid, 7);
			}
		}
		case WEAPONMENU + 1509:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
		        case 0: GivePlayerWeaponEx(playerid, WEAPON_BOMB, 12), GivePlayerWeaponEx(playerid, WEAPON_SATCHEL, 8);

		        case 1: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][1]) DeletePlayerWeaponInfo(playerid, 12), DeletePlayerWeaponInfo(playerid, 8);
					else cmd_armedweap(playerid, "8");
				}
				case 3: DeletePlayerWeaponInfo(playerid, 12), DeletePlayerWeaponInfo(playerid, 8);
		    }
		}
		case WEAPONMENU + 1510:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

		    switch(listitem)
			{
				case 0: GivePlayerWeaponEx(playerid, WEAPON_SPRAYCAN,9);
				case 1: GivePlayerWeaponEx(playerid, WEAPON_FIREEXTINGUISHER,9);
				case 2: GivePlayerWeaponEx(playerid, WEAPON_CAMERA,9);
		        case 3: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][9]) DeletePlayerWeaponInfo(playerid, 9);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][9]);
						cmd_armedweap(playerid, name);
					}
				}
				case 4: DeletePlayerWeaponInfo(playerid, 9);
			}
		}
		case WEAPONMENU + 1511:
		{
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
            if(GetPVarType(playerid, "InDuel")) ShowDuelWeaponSelect(playerid);

			switch(listitem)
			{
		        case 0: GivePlayerWeaponEx(playerid, WEAPON_NIGHTVISION,11);
		        case 1: GivePlayerWeaponEx(playerid, WEAPON_INFRARED,11);
		        case 2: // Delete || Armed Weapon
				{
                    if(!g_pWeaponSlot[playerid][11]) DeletePlayerWeaponInfo(playerid, 11);
					else
					{
						valstr(name, g_pWeaponSlot[playerid][11]);
						cmd_armedweap(playerid, name);
					}
				}
				case 3: DeletePlayerWeaponInfo(playerid, 11);
			}
		}
		case WEAPONMENU + 1512:
		{
		    if(!response)
				return 0;
			if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
		
			new
				ammo_ = strval(inputtext) * GetPVarInt(playerid,"BuyWeaponAmmo"), //Beírt érték megszorozva egy tár árával
	            price = GetPVarInt(playerid,"BuyWeaponPrice") * strval(inputtext); //Végösszeg (talán)
	     
    		//VIP-nek 20%-al olcsóbbak a fegyverek
			if(g_pVIP[playerid])
				price = (price / 100) * 80;

	        GetWeaponName(GetPVarInt(playerid,"BuyWeaponID"), country, 45);
	        
	        if(GetPVarInt(playerid,"BuyWeaponType") == 0) format(i_str, 128, "Biztos megszeretnéd vásárolni a(z) %s darab %s lõszert?\nVégösszeg: %s$",FormatNumber(ammo_), country, FormatNumber(price));
	        else format(i_str, 128, "Biztos megszeretnéd vásárolni a(z) %s darab %s gránátot?\nVégösszeg: %s$",FormatNumber(ammo_), country, FormatNumber(price));
			ShowPlayerDialogEx(playerid, WEAPONMENU + 1513, DIALOG_STYLE_MSGBOX, "Fegyvervásárlás", i_str, "Oké","Mégse");
		    SetPVarInt(playerid,"BuyWeaponPrice",price);
			SetPVarInt(playerid,"BuyWeaponAmmo",ammo_);
		}
	    case WEAPONMENU + 1513:
	    {
	        if(!response)
				return 0;
	        new
	            price = GetPVarInt(playerid,"BuyWeaponPrice"),
	            ammo = GetPVarInt(playerid,"BuyWeaponAmmo"),
	            slot = GetPVarInt(playerid,"BuyWeaponSlot"),
	            weaponid = GetPVarInt(playerid,"BuyWeaponID");

	        if(!response) return (GetPVarType(playerid, "InDuel")) ? (ShowDuelWeaponSelect(playerid)) : (cmd_weapons(playerid, ""));
	        if(GetPlayerMoneyEx(playerid) < price) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_6"), FormatNumber(price));
			GivePlayerMoneyEx(playerid, - price, "BuyWeapon");

			if(g_pWeaponSlot[playerid][slot] != weaponid)
			{
			    g_pWeaponAmmo[playerid][slot] = ammo;
			}
			else g_pWeaponAmmo[playerid][slot] = g_pWeaponAmmo[playerid][slot] + ammo; //Lõszer
			g_pWeaponSlot[playerid][slot] = weaponid;
            GivePlayerWeapon(playerid, weaponid, ammo);

            DeletePVar(playerid,"BuyWeaponPrice");
            DeletePVar(playerid,"BuyWeaponAmmo");
            DeletePVar(playerid,"BuyWeaponSlot");
			DeletePVar(playerid,"BuyWeaponID");
			DeletePVar(playerid,"BuyWeaponType");
	    }
		case DIALOG_RADIO + 3:
		{
			if(!response)
				return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>ds[45]", iVal, country);
            SetPVarInt(playerid, "MusicID", iVal);
			//printf("musicid: %d", iVal);
			mysql_format(1, query, sizeof(query), "SELECT `activated`, players.name, `url`, musiclist.`time` FROM `musiclist` LEFT JOIN players ON (players.reg_id = musiclist.reg_id) WHERE musiclist.`id` = %d", iVal);
		    mysql_function_query(1, query, true, "THREAD_MusicListPlay", "dsd", playerid, country, g_pQueryQueue[playerid]);
		    //printf(query);
		}

		case DIALOG_RADIO_SQL:
		{
 			if(!response)
				return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>ds[45]", iVal, country);
            SetPVarInt(playerid, "RadioID", iVal);
			//printf("musicid: %d", iVal);

			mysql_format(1, query, sizeof(query), "SELECT * FROM `radio` WHERE `id` = '%d'", iVal);
		    mysql_function_query(1, query, true, "THREAD_RadioPlay", "dd", playerid, g_pQueryQueue[playerid]);
		}

		case DIALOG_RADIO + 4:
		{
			if(!response)
			{
				DeletePVar(playerid, "MusicID");
				DeletePVar(playerid, "MusicName");
				return 0;
			}

			new
			    id = GetPVarInt(playerid, "MusicID");
			GetPVarString(playerid, "MusicName", country, sizeof(country));

			switch(listitem)
			{
				case 0:
				{
					DeletePVar(playerid, "MusicID");
					DeletePVar(playerid, "MusicName");
				}
				case 1:
				{
					SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MEGEROSITETTED_AZ__CIMU_ZENET"), country, id);

					mysql_format(1, query, sizeof(query), "UPDATE musiclist SET activated = 1 WHERE id = %d", id);
					mysql_function_query(1, query, true, "", "");

					DeletePVar(playerid, "MusicID");
					DeletePVar(playerid, "MusicName");
				}
				case 2:
				{
					SendClientMessagef(playerid, COLOR_SAMP, LANG(playerid, "MSG_TOROLTED_AZ__CIMU_ZENET_ID"), country, id);

					mysql_format(1, query, sizeof(query), "DELETE FROM musiclist WHERE id = %d", id);
					mysql_function_query(1, query, true, "", "");
					
					format(i_str, 128, "Name: %s | ID: %d",country, id);
					AdminCommandLog("DeleteMusic", playerid, -1, i_str);
					
					DeletePVar(playerid, "MusicID");
					DeletePVar(playerid, "MusicName");
				}
				case 3:
				{
                    DeletePVar(playerid, "ZeneLink");
				 	format(tmp, 256, "Írd be lentre a zene új címét.\nJelengi cím: {" #XCOLOR_LIGHTGREEN "}%s", country);
					ShowPlayerDialogEx(playerid, DIALOG_RADIO + 5, DIALOG_STYLE_INPUT, "Cím szerkesztése", tmp, "Átnevez", "Vissza");
				}
				case 4:
				{
					SetPVarInt(playerid, "ZeneLink", 1);
				 	format(tmp, 256, "Írd be lentre a zene új linkjét.\nZene címe: {" #XCOLOR_BLUE "}%s", country);
					ShowPlayerDialogEx(playerid, DIALOG_RADIO + 5, DIALOG_STYLE_INPUT, "Link szerkesztése", tmp, "Átnevez", "Vissza");
				}
			}
		}
		case DIALOG_RADIO + 5:
		{
			if(!response)
			{
				DeletePVar(playerid, "MusicID");
				DeletePVar(playerid, "MusicName");
				DeletePVar(playerid, "ZeneLink");
				return 0;
			}

			new
			    id = GetPVarInt(playerid, "MusicID");
			GetPVarString(playerid, "MusicName", country, sizeof(country));

			DeletePVar(playerid, "MusicID");
			DeletePVar(playerid, "MusicName");


			// A cím szerkesztése
			if(!GetPVarType(playerid, "ZeneLink"))
			{
				if(strlen(inputtext) > 44) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_CIM_MAXIMUM")),

				mysql_format(1, query, sizeof(query), "UPDATE musiclist SET name = '%e' WHERE id = %d", inputtext, id);
				mysql_function_query(1, query, true, "", "");

				SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__ZENE_CIME_MEGVALTOZTATVA_"), inputtext);
			}
			else
			{
			    if(strfind(inputtext, "mfrserver.net/up/", true) == -1)
				{
					SendClientMessage(playerid, COLOR_RED, "HIBA: Csak a szerver weboldalára feltöltött zenéket rakhatod be a zenelistába.");
					SendClientMessage(playerid, COLOR_RED, "HIBA: Ide töltsd fel a zenét, végül a megjelent linket add meg: {" #XCOLOR_WHITE "}" #WEB_ADDRESS "/upload.php");
					return 1;
				}
                mysql_format(1, query, sizeof(query), "UPDATE musiclist SET url = '%e' WHERE id = %d", inputtext, id);
    			mysql_function_query(1, query, true, "", "");

				SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__ZENE_LINKJE_MEGVALTOZTATVA"), inputtext);
                DeletePVar(playerid, "ZeneLink");
			}
		}
		case WEAPONSKILL:
		{
			if(!response)
			{
                if(GetPVarType(playerid, "NotNormalMenu"))
                    return DeletePVar(playerid, "NotNormalMenu"), DeletePVar(playerid, "FirstW");

				if(GetPVarType(playerid, "FirstW"))
				{
                    DeletePVar(playerid, "FirstW");
					return 0;
				}
                DeletePVar(playerid, "FirstW");
			}

            if(GetPVarType(playerid, "NotNormalMenu"))
            {
				switch(GetPVarInt(playerid, "NotNormalMenu"))
				{
					case 0: i_str = "Colt";
					case 1: i_str = "Silenced";
					case 2: i_str = "Desert";
					case 3: i_str = "Shotgun";
		  			case 4: i_str = "Sawn-off";
					case 5: i_str = "Combat";
					case 6: i_str = "Uzi";
					case 7: i_str = "MP5";
		  			case 8: i_str = "AK47";
					case 9: i_str = "M4";
					case 10: i_str = "Sniper";
				}

				SetPlayerSkillLevelEx(playerid, GetWeaponSkillIDFromWeaponID(GetWeaponIDFromName(i_str)), (!listitem) ? (0) : (999));
				DeletePVar(playerid, "NotNormalMenu");

				InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFEGYVERTAPASZTALAT_YH_G"), i_str);

				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weaponskill` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pWeaponSkill[playerid][0], g_pWeaponSkill[playerid][1], g_pWeaponSkill[playerid][2], g_pWeaponSkill[playerid][3], g_pWeaponSkill[playerid][4], g_pWeaponSkill[playerid][5], g_pWeaponSkill[playerid][6], g_pWeaponSkill[playerid][7], g_pWeaponSkill[playerid][8], g_pWeaponSkill[playerid][9], g_pWeaponSkill[playerid][10], PlayerInfo[playerid][pRegID]);
				mysql_function_query(1, query, false, "", "");
			}
			else
			{
			    SetPVarInt(playerid, "NotNormalMenu", listitem);
				switch(listitem)
				{
					case 0: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Colt 45", "{" #XCOLOR_LIGHTBLUE "}Egykezes\n{" #XCOLOR_GOLD "}Kétkezes", "Elfogad", "Mégse");
					case 1: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Silenced", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
					case 2: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Desert Eagle", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
					case 3: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Shotgun", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
		  			case 4: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Sawn-off", "{" #XCOLOR_LIGHTBLUE "}Egykezes\n{" #XCOLOR_GOLD "}Kétkezes", "Elfogad", "Mégse");
					case 5: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Combat Shotgun", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
					case 6: ShowPlayerDialogEx(playerid, WEAPONSKILL , DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Micro UZI", "{" #XCOLOR_LIGHTBLUE "}Egykezes\n{" #XCOLOR_GOLD "}Kétkezes", "Elfogad", "Mégse");
					case 7: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}MP5", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
		  			case 8: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}AK47", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
					case 9: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}M4", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
					case 10: ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás - {" #XCOLOR_GREEN "}Sniper", "{" #XCOLOR_LIGHTBLUE "}Amatõr\n{" #XCOLOR_GOLD "}Bérgyilkos", "Elfogad", "Mégse");
				}
			}
        }
		case SPAWNCHANGE:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 20) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			switch(listitem)
			{
			    case 0:
			    {
					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_DEFAULT);
	                SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_ALAP_KEZDOHELYRE"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_DEFAULT ",*' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 1:
			    {
					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_RANDOM);
	                SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_VELETLENSZERURE_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_RANDOM ",*' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 2: // Klán
			    {
		            if(g_pClan{playerid} == 0xFF) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_CLAN);
		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_KLAN_SPAWNRA_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_CLAN ",*' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 3:
			    {
		            if(GetPVarInt(playerid, "HQ") != 3) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_VAGOSOS")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_HQ);
					SetPVarInt(playerid, "SpawnLocation2", 0);
		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_LM_HQRA_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_HQ ",0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 4:
			    {
		            if(GetPVarInt(playerid, "HQ") != 2) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEVILES")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_HQ);
					SetPVarInt(playerid, "SpawnLocation2", 1);
		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_SEVILE_HQRA_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_HQ ",1' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 5:
			    {
					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_BEFORE_DEATH);
		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_HALAL_ELOTTI_POZICIORA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_BEFORE_DEATH ",*' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 6:
			    {
		            ShowPlayerDialogEx(playerid, SPAWNCHANGE + 3, DIALOG_STYLE_INPUT, "Spawnhely -> Mentett pozíció", "Írd be, hogy hányadik mentett pozíciódra szeretnél spawnolni.", "Ok", "Vissza");
				}
			    case 7:
			    {
		            if(!GetPVarType(playerid, "PlayerProp")) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_HOUSE);
					SetPVarInt(playerid, "SpawnLocation2", 0);

		            SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_A_HAZAD_ELE_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_HOUSE ",0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 8:
			    {
		            if(!GetPVarType(playerid, "PlayerProp")) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_HOUSE);
					SetPVarInt(playerid, "SpawnLocation2", 1);

		            SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_A_HAZAD_BELSEJEBE"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_HOUSE ",1' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
			    case 9:
			    {
		            if(!GetPVarType(playerid, "PlayerBiz")) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_BIZNISZED")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_BIZNIS);
					SetPVarInt(playerid, "SpawnLocation2", 0);

		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_A_BIZNISZED_ELE_ALLITVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_BIZNIS ",0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			    case 10:
			    {
		            if(!GetPVarType(playerid, "PlayerBiz")) return (GetPVarInt(playerid, "CPanelRe") == 20) ? ((cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe"))) : (SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_BIZNISZED")));

					SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_BIZNIS);
					SetPVarInt(playerid, "SpawnLocation2", 1);

		            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_A_BIZNISZED_BELSEJEBE"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_BIZNIS ",1' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
			    case 11:
			    {
		            ShowPlayerDialogEx(playerid, SPAWNCHANGE + 1, DIALOG_STYLE_INPUT, "Spawnhely -> Admin pozícióra", "Írj be egy számot, hogy melyik pozícióra szeretnéd állítani < {" #XCOLOR_PROPGREEN "}1 - 300 {" #XCOLOR_DEFAULT "}>\nHa nemtudod, hogy melyik milyen, akkor nézegess!\n\n{" #XCOLOR_LIGHTRED "}/lp {" #XCOLOR_PROPGREEN "}<Slot>", "Ok", "Vissza");
				}
			    case 12:
			    {
		            ShowPlayerDialogEx(playerid, SPAWNCHANGE + 2, DIALOG_STYLE_INPUT, "Spawnhely -> Meglévõ teleportra", "Írd be a teleport parancsát, ahova szeretnéd állítani a spawnhelyet!\n\nSok teleportnál elõfordulhat spawnnál, hogy leesel.\nEzenkívül nem minden teleportnál jó a forgás állítása (csak spawnplcenál)\nTeleportokat keresni Y gombal, vagy a /findtele parancsl tudsz.", "Ok", "Vissza");
				}
			}

			switch(listitem)
			{
				case 0..9: UpdatePlayerSpawnInfo(playerid);
			}
			if(GetPVarInt(playerid, "CPanelRe") == 20) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
		}

		case SPAWNCHANGE + 1:
		{
			if(!response)
			    return cmd_spawnplace(playerid, "");

			new
			    slot = strval(inputtext);
			if(!(1 <= slot <= 1000))
			{
                SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));
	            ShowPlayerDialogEx(playerid, SPAWNCHANGE + 2, DIALOG_STYLE_INPUT, "Spawnhely -> Meglévõ teleportra", "Írd be a teleport parancsát, ahova szeretnéd állítani a spawnhelyet!\n\nSok teleportnál elõfordulhat spawnnál, hogy leesel.\nEzenkívül nem minden teleportnál jó a forgás állítása (csak spawnplcenál)\nTeleportokat keresni Y gombal, vagy a /findtele parancsl tudsz.", "Ok", "Vissza");
				return 1;
			}

			mysql_format(1, query, sizeof(query), "SELECT `x`, `y`, `z`, `angle` FROM `savepositions` WHERE `id` = %d", slot);
			mysql_function_query(1, query, true, "THREAD_SpawnPlaceSP", "ddd", playerid, slot, g_pQueryQueue[playerid]);
		}
		
	
		
		case SPAWNCHANGE + 2:
		{
			if(!response)
			    return cmd_spawnplace(playerid, "");
			    
			new
			    id = -1;
           	foreach(Teleports, i)
			{
			    if(!strcmp(inputtext, g_szTeleportCommand[i], true))
		        {
                    id = i;
		            break;
				}
			}

			if(id == -1)
			{
				SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_EGY_TALALAT_SEM_A__RESZLETRE"), inputtext);
				ShowPlayerDialogEx(playerid, SPAWNCHANGE + 2, DIALOG_STYLE_INPUT, "Spawnhely -> Meglévõ teleportra", "Írd be a teleport parancsát, ahova szeretnéd állítani a spawnhelyet!\n\nSok teleportnál elõfordulhat spawnnál, hogy leesel.\nTeleportokat keresni Y gombal, vagy a /findtele parancsl tudsz.", "Ok", "Vissza");
				return 1;
			}

			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELYED_ATALLITVA_AZ__NEVU"), inputtext);
			SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_TELEPORT);
			SetPVarInt(playerid, "SpawnLocation2", id);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_TELEPORT ",%e' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");

		}
		case SPAWNCHANGE + 3:
		{
			if(!response)
			    return cmd_spawnplace(playerid, "");

			new
			    slot = strval(inputtext);
			if(!(0 <= slot < MAX_PLAYER_POS)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SLOT_0___MAX_PLAYER"));

		    if(g_pSavedPosition[playerid][slot][0] == 0.0 && g_pSavedPosition[playerid][slot][1] == 0.0 && g_pSavedPosition[playerid][slot][2] == 0.0)
			{
				InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_MENTETTEL_EL_KOORDINATAT"), slot);
				return 1;
			}

			SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_SAVED_POSITION);
			SetPVarInt(playerid, "SpawnLocation2", slot);

            SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SPAWNHELY_AZ__MENTETT_POZICIORA"), slot);
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_SAVED_POSITION ",%d' WHERE `reg_id` = %d", slot, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
        }

		case CMDMENU:
		{
			HideCMDList(playerid);
		}
/*
		case CMDMENU + 1:
		{
			if(response) cmd_cmdlist3(playerid, "");
		}
*/
		case DIALOG_BUY:
		{
			if(!response)
				return 0;

			MoneyCheck(playerid, 10);

			switch(listitem)
			{
			    case 0:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_UVEG"));
	    			cmd_bor(playerid, "");
				}
				case 1:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_UVEG_1"));
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				}
				case 2:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_UVEG_2"));
					cmd_bor(playerid, "");
				}
				case 3:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_CSOMAG"));
					cmd_cigi(playerid, "");
				}
				case 4:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_PIZZATW"));
	                ClearAnimations(playerid);
					cmd_eat(playerid, "");
				}
				case 5:
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHVETTEL_MAGADNAK_EGY_TYUKOTW"));
					ClearAnimations(playerid);
					cmd_eat(playerid, "");
				}
			}
		}
		case DIALOG_DAMAGE:
		{
			if(!response)
				return 0;

			GetDynamicVehicleDamageStatus((vID = GetPlayerDynamicVehicleID(playerid)), panels, doors, lights, tires);
			switch(listitem)
			{
				case 0:
				{
					lights = encode_lights(1, 1, 1, 1);

					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMUVED_LAMPAI_OSSZETORVEW"));
				}
				case 1:
				{
					tires = encode_tires(1, 1, 1, 1);

					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMUVED_KEREKEI_KILYUKSZTVAW"));
				}
				case 2:
				{
					doors = encode_doors(3, 3, 3, 3, 0, 0);

					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMUVED_AJTOI_OSSZETORVEW"));
				}
				case 3:
				{
	                panels = encode_panels(1, 1, 1, 1, 3, 3, 3);

					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMUVED_PANELJA_OSSZETORVEW"));
				}
				case 4:
				{
					tires = encode_tires(1, 1, 1, 1);
					lights = encode_lights(1, 1, 1, 1);
					doors = encode_doors(3, 3, 3, 3, 0, 0);
	                panels = encode_panels(1, 1, 1, 1, 3, 3, 3);

					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMUVED_OSSZETORVEW"));
				}
			}
            UpdateDynamicVehDamageStatus(vID, panels, doors, lights, tires);
	    }
	    case DIALOG_FPS:
	    {
 	       if(response) cmd_fps(playerid, "");
		}
		case DIALOG_FPS + 5789:
		{
            // if(response) cmd_akliens(playerid, "");
		}
        case DIALOG_KEYCHANGE:
		{
        	if(!response)
				return 0;
            switch(listitem)
		    {
				case 0..5: SetPVarInt(playerid, "SelectKey", listitem+1), ShowPlayerDialogEx(playerid, DIALOG_KEYCHANGE2 , DIALOG_STYLE_LIST, "Gomb beállítása", "{00FF00}Átállítás\n{FF0000}Kikapcsolás","Ok", "Mégse");
				case 6:
				{
					SetPVarInt(playerid, "SpeedBoostKey", KEY_ACTION);
    				SetPVarInt(playerid, "VehicleHoppingKey", KEY_CROUCH);
		    		SetPVarInt(playerid, "FlipKey", KEY_ANALOG_LEFT);
			    	SetPVarInt(playerid, "TeleportMenuKey", KEY_YES);
			    	SetPVarInt(playerid, "CarFlyKey",KEY_FIRE );
			    	SetPVarInt(playerid, "FlyKey", KEY_CROUCH);
			    	//cmd_keychange(playerid, "");
					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `speedboost_key` = 1, `vehiclejump_key` = 2,\
					`flip_key` = 8192, `teleportmenu_key` = 65536,\
					`carfly_key` = 4, `fly_key` = 2 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    			mysql_function_query(1, query, false, "", "");
				}
			}
		}

		case DIALOG_KEYCHANGE2:
		{
		    if(!response)
				return 0;
            new
	    		valamifasz[32],
	    		SQLfasz[32];

			switch(listitem)
		    {
		        case 0:
				{
				    new key = GetPVarInt(playerid, "SelectKey");

				    if(key == 1 || key == 2 || key == 3 || key == 5)
				    {
				        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
				        SetPVarInt(playerid, "KeyChange", GetPVarInt(playerid, "SelectKey")) ,SendClientMessage(playerid,-1,"Nyomd le azt a gombot amire beszeretnéd állítani");
					}
					else
					{
 	   		 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CSAK_GYALOG"));
 	   		 			SetPVarInt(playerid, "KeyChange", GetPVarInt(playerid, "SelectKey")) ,SendClientMessage(playerid,-1,"Nyomd le azt a gombot amire beszeretnéd állítani");
 					}
				}

		        case 1:
		        {
		            switch(GetPVarInt(playerid, "SelectKey"))
				 	{
						case 1: SetPVarInt(playerid, "SpeedBoostKey", -2),     valamifasz = "~r~SpeedBoost",    SQLfasz = "speedboost_key", DeletePVar(playerid, "VehicleboostValue");
				     	case 2: SetPVarInt(playerid, "VehicleHoppingKey", -2), valamifasz = "~r~VehicleJump",   SQLfasz = "vehiclejump_key", DeletePVar(playerid, "VehicleHopping");
				     	case 3: SetPVarInt(playerid, "FlipKey", -2),		   valamifasz = "~r~Flip", 		    SQLfasz = "flip_key";
				     	case 4: SetPVarInt(playerid, "TeleportMenuKey", -2),   valamifasz = "~r~Teleport",      SQLfasz = "teleportmenu_key";
				     	case 5: SetPVarInt(playerid, "CarFlyKey", -2),   	   valamifasz = "~r~CarFly",        SQLfasz = "carfly_key";
				     	case 6: SetPVarInt(playerid, "FlyKey", -2),  		   valamifasz = "~r~Fly", 		    SQLfasz = "fly_key";
				 	}
				 	DeletePVar(playerid, "KeyChange");
				 	DeletePVar(playerid, "SelectKey");
				  	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GOMJA_KIKAPCSOLVA"),valamifasz);
				   	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `%s` = -2 WHERE `reg_id` = %d",SQLfasz, PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
					//printf(query);
		        }
			}
		}
		case 3434:
		{
			if(!response)
				return 0;

	    	switch(listitem)
			{
				case 0:
				{
				    if(ZaszloOwner == playerid) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
				 	ShowPlayerDialogEx(playerid, 3435, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Repülõk", "Andromada\nAT-400\nBeagle\nCropdust\nDodo\nNevada\nRustler\nShamal\nSkimmer\nStuntplane", "Választ", "Vissza");
				}
				case 1:
				{
				    if(ZaszloOwner == playerid) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
					ShowPlayerDialogEx(playerid, 3436, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Helikopterek", "Cargobob\nLeviathan\nMaverick\nNews Maverick\nPolice Maverick\nRaindance\nSparrow", "Választ", "Vissza");
				}
				case 2: ShowPlayerDialogEx(playerid, 3437, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Motorok", "BF-400\nBike\nBMX\nFaggio\nFCR-900\nFreeway\nMountain Bike\nNRG-500\nPCJ-600\nPizzaboy\nQuad\nSanchez\nWayfarer", "Választ", "Vissza");
				case 3: ShowPlayerDialogEx(playerid, 3438, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Minden féle", "Comet\nFeltzer\nStallion\nWindsor", "Választ", "Vissza");
				case 4: ShowPlayerDialogEx(playerid, 3439, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Munka Jármûvek", "Benson\nBobcat\nBurrito\nBoxville\nBoxburg\nCement Truck\nDFT-30\nFlatbed\nLinerunner\nMule\nNewsvan\nPacker\nTanker\nPony\nRoadtrain\nRumpo\nSadler\nSadler Shit\nTopfun\nTractor\nTrashmaster\nUtility Van\nWalton\nYankee\nYosemite", "Választ", "Vissza");
				case 5: ShowPlayerDialogEx(playerid, 3440, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Lowriderek", "Blade\nBroadway\nRemington\nSavanna\nSlamvan\nTahoma\nTornado\nVoodoo", "Választ", "Vissza");
				case 6: ShowPlayerDialogEx(playerid, 3441, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Terepjárók", "Bandito\nBF Injection\nDune\nHuntley\nLandstalker\nMesa\nMonster\nMonster A\nMonster B\nPatriot\nRancher A\nRancher B\nSandking", "Választ", "Vissza");
				case 7: ShowPlayerDialogEx(playerid, 3442, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Szerviz jármûvek", "Ambulance\nBarracks\nBus\nCabbie\nCoach\nHPV-1000\nFBI Rancher\nFBI Truck\nFiretruck\nFiretruck LA\nCop Car LS\nCop Car LV\nCop Car SF\nRanger\nS.W.A.T\nTaxi", "Választ", "Vissza");
				case 8: ShowPlayerDialogEx(playerid, 3443, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Szalon jármûvek", "Admiral\nBloodring Banger\nBravura\nBuccaneer\nCadrona\nClover\nElegant\nElegy\nEmperor\nEsperanto\nFortune\nGlendale Shit\nGlendale\nGreenwood\nHermes\nIntruder\nMajestic\nManana\nMerit\nNebula\nOceanic\nPicador\nPremier\nPrevion\nPrimo\nSentinel\nStafford\nSultan\nSunrise\nTampa\nVincent\nVirgo\nWillard\nWashington", "Választ", "Vissza");
				case 9: ShowPlayerDialogEx(playerid, 3444, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Sportautók", "Alpha\nBanshee\nBlista Compact\nBuffalo\nBullet\nCheetah\nClub\nEuros\nFlash\nHotring Racer\nHotring Racer A\nHotring Racer B\nInfernus\nJester\nPhoenix\nSabre\nSuper GT\nTurismo\nUranus\nZR-350", "Választ", "Vissza");
				case 10: ShowPlayerDialogEx(playerid, 3445, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Nagy Csomagtartósok", "Moonbeam\nPerenniel\nRegina\nSolair\nStratum", "Választ", "Vissza");
				case 11:
				{
					if(ZaszloOwner == playerid) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));

					ShowPlayerDialogEx(playerid, 3446, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Hajók", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSqualo\nTropic", "Választ", "Vissza");
				}
				case 12: ShowPlayerDialogEx(playerid, 3447, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Egyedi Jármûvek", "Baggage\nCaddy\nCamper\nCamper A\nCombine\nDozer\nDumper\nForklift\nHotknife\nHustler\nHotdog\nKart\nMower\nMr Whoopee\nRomero\nSecuricar\nStretch\nSweeper\nTow Truck\nTug\nVortex", "Választ", "Vissza");
				case 13: ShowPlayerDialogEx(playerid, 3448, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Trailerek", "Artic Trailer 1\nArtic Trailer 2\nArtic Trailer 3\nPetro Trailer\nBag Box A\nBag Box B\nStair Trailer\nFarm Plow\nUtility Trailer", "Választ", "Vissza");
				case 14: ShowPlayerDialogEx(playerid, 3449, DIALOG_STYLE_LIST,
					"{" #XCOLOR_GREEN3 "}Tuningolt Jármûvek", "Sultan\nSultan 2\nJester\nFlash\nUranus\nStratum\nElegy\nSavanna\nRemington\nMonster B\nSlamvan\nElegy\nBlade\nTornado\nBlista Compact\nBobcat\nBravura\nBuccaneer\nCadrona\nIntruder\nPrimo\nSunrise\nVincent\nWillard\nPhoenix", "Választ", "Vissza");
				case 15:
				{
		    		ShowPlayerDialogEx(playerid, DIALOG_CARSPAWNER, DIALOG_STYLE_INPUT, "{" #XCOLOR_BLUE "}Jármû keresése", "Lentre írj be egy névrészletet\n\n{" #XCOLOR_LIGHTRED "}Például: {" #XCOLOR_PROPGREEN "}inf, tur, a", "Keresés", "Mégse");
					SetPVarInt(playerid, "BackForSpawner", 1);
				}
			}
		}
		case 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448:
		{
			if(!response)
				return cmd_car(playerid, "");

			new
			    iModel = GetVehicleModelIDFromName(inputtext);
		    if(GetPVarType(playerid, "RaceParticipant"))
		    {
				switch(RaceType)
				{
					case 0:
					{
						switch(GetVehicleType(iModel))
						{
							case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET"));
						}
					}
					case 1:
					{
						if(GetVehicleType(iModel) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
					}
					case 2:
					{
						new
						    iType = GetVehicleType(iModel);
						if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
						{
		                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
							return 1;
						}
					}
				}
			}

			if(CarSpawner(playerid, iModel))
				InfoTD_MSGf(playerid, 3500, LANG(playerid, "MSG_WSPAWNOLTAL_EGY_YHWT"), inputtext);
		}
		case 3449:
		{
			if(!response)
				return cmd_car(playerid, "");

			format(name, sizeof(name), "/ltc%d", listitem + 2);
            CallLocalFunction("OnPlayerCommandText", "is", playerid, name);
		}
		case DIALOG_ELEVATOR:
		{
			if(!response)
				return 0;

	        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
	        {
	            GameTextForPlayer(playerid, LANG(playerid, "MSG_GAMETEXT_LIFT_HERE"), 3500, 4);
			}
			else if(DidPlayerRequestElevator(playerid))
			{
			    GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_LIFT_GO_ALREADY")), 3500, 4);
			}
			else
			{
		        CallElevator(playerid, listitem);
			}
		}
		case DIALOG_INTERIORS:
		{
			if(!response)
   			{
				if(GetPVarType(playerid, "BackForTeles"))
				{
					DeletePVar(playerid, "BackForTeles");
					cmd_t(playerid, "");
				}
				return 0;
			}

			DeletePVar(playerid, "BackForTeles");
			PlayerTele(playerid, g_Interiors[listitem][e_fIntPos][0], g_Interiors[listitem][e_fIntPos][1], g_Interiors[listitem][e_fIntPos][2], g_Interiors[listitem][e_IntInterior], g_Interiors[listitem][e_fIntPos][3], 9999);
		}
		case DIALOG_COLORS:
		{
			if(!response)
   			{
                if(IsBlack(GetPlayerColor(playerid)))
                {
                    SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
				}

				if(GetPVarInt(playerid, "CPanelRe") == 21)
				{
					cmd_cpanel(playerid, "");
					DeletePVar(playerid, "CPanelRe");
				}
				return 0;
			}

			switch(listitem)
			{
			    case 0:
			    {
                    SetPlayerColor(playerid, 0x02B70C96);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_GH"));
				}
			    case 1:
			    {
                    SetPlayerColor(playerid, 0x0B4B0596);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_GSO"));
				}
			    case 2:
			    {
                    SetPlayerColor(playerid, COLOR_RED);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_RH"));
				}
			    case 3:
			    {
                    SetPlayerColor(playerid, 0x4361EF96);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_BH"));
				}
			    case 4:
			    {
                    SetPlayerColor(playerid, 0x132CD596);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_BSO"));
				}
			    case 5:
			    {
                    SetPlayerColor(playerid, 0xFAFA0196);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_YSA"));
				}
			    case 6:
			    {
                    SetPlayerColor(playerid, 0xF58B0A96);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_YNA"));
				}
			    case 7:
			    {
                    SetPlayerColor(playerid, 0x57DB99966);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_GKE"));
				}
			    case 8:
			    {
                    SetPlayerColor(playerid, 0xC0C0C096);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_WSZ"));
				}
			    case 9:
			    {
                    SetPlayerColor(playerid, 0x91000096);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_RVE"));
				}
			    case 10:
			    {
                    SetPlayerColor(playerid, 0x63DCF196);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_BH_1"));
				}
			    case 11:
			    {
                    SetPlayerColor(playerid, 0xBE0EBA96);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_PLI"));
				}
			    case 12:
			    {
                    SetPlayerColor(playerid, COLOR_BROWN);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_WBA"));
				}
			    case 13:
			    {
                    SetPlayerColor(playerid, COLOR_PINK);
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZINED_BHMEGVALTOZTATVA_PRO"));
				}
				case 14:
			    {
    				ShowPlayerDialogEx(playerid, DIALOG_COLORS + 1, DIALOG_STYLE_INPUT, "{" #XCOLOR_PINK "}Színválasztás", "{" #XCOLOR_BLUE "}Lentre írj be egy {" #XCOLOR_WHITE "}hexadecimális {" #XCOLOR_BLUE "} számokból álló színt", "Ok", "Mégse");
					return 1;
				}
			}
			if(GetPVarInt(playerid, "CPanelRe") == 21)
			{
				cmd_cpanel(playerid, "");
				DeletePVar(playerid, "CPanelRe");
			}
		}
		case DIALOG_COLORS + 1:
		{
			if(!response)
				return 0;

			if(sscanf(inputtext, "n", datez))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_SZINKOD"));
				ShowPlayerDialogEx(playerid, DIALOG_COLORS + 1, DIALOG_STYLE_INPUT, "{" #XCOLOR_PINK "}Színválasztás", "{" #XCOLOR_BLUE "}Lentre írj be egy {" #XCOLOR_WHITE "}hexadecimális {" #XCOLOR_BLUE "} számokból álló színt", "Ok", "Mégse");
				return 1;
			}

			if(IsBlack(datez))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_LEHET_FEKETE"));
				ShowPlayerDialogEx(playerid, DIALOG_COLORS + 1, DIALOG_STYLE_INPUT, "{" #XCOLOR_PINK "}Színválasztás", "{" #XCOLOR_BLUE "}Lentre írj be egy {" #XCOLOR_WHITE "}hexadecimális {" #XCOLOR_BLUE "} számokból álló színt", "Ok", "Mégse");
                SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
				return 1;
			}
			//format(i_str,128,"%d99",datez); SendClientMessage(playerid,datez,i_str);
			SetPlayerColor(playerid, datez);
		}
		case DIALOG_WHEELS:
		{
			if(!response)
   				return 0;

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

			AddDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), wheels[listitem]);

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RJARMUVED_HKEREKE_HKICSERELVE"), inputtext);
		}
		case DIALOG_WHEELS + 528:
		{
			if(!response)
   				return (GetPVarInt(playerid, "CPanelRe") == 26) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			switch(listitem)
			{
				case 0:
				{
					DeletePVar(playerid, "FavWheel");

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `wheel` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
				case 1:
				{
					SetPVarInt(playerid, "FavWheel", -1);

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `wheel` = -1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
				case 2..18:
				{
					SetPVarInt(playerid, "FavWheel", wheels[listitem - 2]);

					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
						AddDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), wheels[listitem - 2]);
					}

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `wheel` = %d WHERE `reg_id` = %d", wheels[listitem - 2], PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			}

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RKEDVENC_HKEREKED_HKICSERELVE"), inputtext);

            if(GetPVarInt(playerid, "CPanelRe") == 26) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
		}
		case DIALOG_HOLIST:
		{
			if(!response)
   				return 0;

            SetPVarString(playerid, "VO_Slot", inputtext);
			ShowPlayerDialogEx(playerid, DIALOG_FINDOBJECT + 1, DIALOG_STYLE_INPUT, !"Írd be a slotot!", !"Lentre írd be az object slotját!", !"Oké", !"Mégse");
		}
		case DIALOG_VOLIST:
		{
			if(!response)
   				return 0;

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
			if(GetPlayerDynamicVehicleID(playerid) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTORA_NEM_RAKHATSZ"));

            SetPVarString(playerid, "VO_Slot", inputtext);
			ShowPlayerDialogEx(playerid, DIALOG_VOLIST + 1, DIALOG_STYLE_INPUT, !"Írd be a slotot!", !"Lentre írd be az object slotját!", !"Oké", !"Mégse");
		}
		case DIALOG_VOLIST + 1:
		{
			if(!response)
   				return DeletePVar(playerid, "VO_Slot");

			new
			    slot;
	        if(!IsNumeric(inputtext) || isnull(inputtext))
			{
				slot = 0;
			}
			else
			{
				slot = strval(inputtext);
            	if(!(0 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__"), MAX_VEH_OBJECT - 1);
			}

			GetPVarString(playerid, "VO_Slot", i_str, sizeof(i_str));
			mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", i_str);
			mysql_function_query(1, query, true, "THREAD_LoadAttachedObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);

			DeletePVar(playerid, "VO_Slot");
		}
		case DIALOG_VOLIST + 2:
		{
			if(!response)
   				return 0;

			cmd_lvoset(playerid, inputtext);
		}
		case DIALOG_VOLIST + 5:
		{
			if(!response)
   				return DeletePVar(playerid, "VO_Slot");
			new
				iVal;
				
			sscanf(inputtext, "p<.>d", iVal);
			SetPVarInt(playerid, "VO_Slot", iVal);

            if(gPlayerVehicleObject[playerid][iVal] == INVALID_OBJECT_ID)
            {
	            SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_URES"));
	            return 1;
			}
			else
			{
	            ShowPlayerDialogEx(playerid, DIALOG_VOLIST + 6, DIALOG_STYLE_LIST, !"{" #XCOLOR_GREEN "}Kocsidon lévõ objectek", "Object Törlése", !"Ok", !"Mégse");
			}
		}
		case DIALOG_VOLIST + 6:
		{
			if(!response)
   				return DeletePVar(playerid, "VO_Slot");

			valstr(name, GetPVarInt(playerid, "VO_Slot"));
			cmd_removeobject(playerid, name);
		}
		case DIALOG_HOLIST + 2:
		{
			if(!response)
   				return 0;

			switch(listitem)
			{
			    case 0..9:
			    {
					if(listitem == 9 && ZaszloOwner == playerid)
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_9ES_SLOTBA"));
                        cmd_myobjects(playerid, "");
					    return 1;
					}

					if(g_pSavedObject[playerid][listitem])
					{
						ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Átállítása\nObject Törlése\nKészítõ Megtekintése\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
					}
					else
					{
                        if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
                        {
							ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
						}
						else
						{
							ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása", "Ok", "Mégse");
						}
					}
                    SetPVarInt(playerid, "HO_ID", listitem);
				}
				case 10:
				{
					mysql_format(1, query, sizeof(query), "SELECT `id`, `object_id`, `bone_id`, `offset_x`, `offset_y`, `offset_z`, `rotation_x`, `rotation_y`, `rotation_z`, `scale_x`, `scale_y`, `scale_z`, `materialcolor1`, `materialcolor2` FROM `holdingobjects` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
					g_pSavedObject[playerid][0], g_pSavedObject[playerid][1], g_pSavedObject[playerid][2], g_pSavedObject[playerid][3], g_pSavedObject[playerid][4], g_pSavedObject[playerid][5], g_pSavedObject[playerid][6], g_pSavedObject[playerid][7], g_pSavedObject[playerid][8], g_pSavedObject[playerid][9]);
					mysql_function_query(1, query, true, "THREAD_LoadPlayerHObjects", "dd", playerid, g_pQueryQueue[playerid]);
				}
			}
		}
		case DIALOG_HOLIST + 3:
		{
			if(!response)
				return cmd_myobjects(playerid, "");

			switch(listitem)
			{
			    case 0: // Beállítás dialog
			    {
					ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 4, DIALOG_STYLE_INPUT, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "Lentre írd be a felcsatolni kívánt object nevét!\n\nHa nemtudsz neveket, akkor itt találhatsz: {" #XCOLOR_SAMP "}/holist & /findobject", "Ok", "Mégse");
				}
			    case 1: // Szerkesztés vagy Törlés
			    {
					new
					    slot = GetPVarInt(playerid, "HO_ID");
                    if(g_pSavedObject[playerid][slot])
                    {
					    g_pSavedObject[playerid][slot] = 0;

						RemovePlayerAttachedObject(playerid, slot);
					    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_FELCSATOLT_OBJECT_TOROLVE_SLOT"), slot);

						mysql_format(1, query, sizeof(query), "UPDATE `players` SET `savedobjects` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pSavedObject[playerid][0], g_pSavedObject[playerid][1], g_pSavedObject[playerid][2], g_pSavedObject[playerid][3], g_pSavedObject[playerid][4], g_pSavedObject[playerid][5], g_pSavedObject[playerid][6], g_pSavedObject[playerid][7], g_pSavedObject[playerid][8], g_pSavedObject[playerid][9], PlayerInfo[playerid][pRegID]);
					    mysql_function_query(1, query, false, "", "");
					}
					else
					{
                        EditAttachedObject(playerid, slot);
                        SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_OBJECT_SZKERKESZTESE_"), slot);
					}
				}
			    case 2: // Készítõ megtekintése
			    {
					mysql_format(1, query, sizeof(query), "SELECT `name`, `time` FROM `holdingobjects` WHERE `id` = %d", g_pSavedObject[playerid][GetPVarInt(playerid, "HO_ID")]);
				    mysql_function_query(1, query, true, "THREAD_MyObjects_Creator", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 3: // Szerkesztés
				{
					new
					    slot = GetPVarInt(playerid, "HO_ID");
	                EditAttachedObject(playerid, slot);
                    SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_OBJECT_SZKERKESZTESE_"), slot);
				}
			}
		}
		case DIALOG_HOLIST + 4:
		{
			new
			    slot = GetPVarInt(playerid, "HO_ID");
			if(!response)
   			{
				if(g_pSavedObject[playerid][slot])
				{
					ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Átállítása\nObject Törlése\nKészítõ Megtekintése\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
				}
				else
				{
                    if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
                    {
						ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
					}
					else
					{
						ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása", "Ok", "Mégse");
					}
				}
				return 0;
			}

			mysql_format(1, query, sizeof(query), "SELECT `id` FROM `holdingobjects` WHERE `objectname` = '%e'", inputtext);
			mysql_function_query(1, query, true, "THREAD_MyObjects_Apply", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}

		case DIALOG_HOLIST + 5:
		{
		   if(!response)
   				return 0;
			cmd_lhoset(playerid, inputtext);
  		}
		case DIALOG_LOCKPROP:
		{
			if(!response)
   			{
				if(g_pOtherFlags[playerid] & e_HOUSEMENU)
				    cmd_housemenu(playerid, "");
				return 0;
			}

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				return 1;
			}

			new len = strlen(inputtext);
			if(!(3 <= len <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				return 1;
			}

			// Ház lezárás pénzbe kerül
			MoneyCheck(playerid, len * PRICE_LOCKPROP);

			houseid = GetPVarInt(playerid, "PlayerProp");

			SetGVarString("PropLocked", inputtext, houseid);
		    GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
		    RemoveHexColorFromString(tmp);
			SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_BEZARTAD_A_HAZAD_JELSZO_"), inputtext);

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_locked` = '%e' WHERE `id` = %d", inputtext, houseid);
			mysql_function_query(1, query, false, "", "");

			if(g_pOtherFlags[playerid] & e_HOUSEMENU)
			    cmd_housemenu(playerid, "");
		}
		case DIALOG_LOCKPROP + 1:
		{
			if(!response)
   				return 0;

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				return 1;
			}

			if(!(3 <= strlen(inputtext) <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				return 1;
			}

			houseid = GetPVarInt(playerid, "CurrHouseid");
		    GetGVarString("PropLocked", name, 21, houseid);

			if(!strcmp(inputtext, name, false))
			{
				cmd_enter(playerid, "258852");
				DeletePVar(playerid, "CurrHouseid");
			}
			else
			{
                return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_JELSZO_NEM_MEGFELO"));
			}
		}

		case DIALOG_LOCKBIZ:
		{
			if(!response)
   				return 0;

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				return 1;
			}

			new len = strlen(inputtext);
			if(!(3 <= len <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				return 1;
			}

			// Biznisz lezárás pénzbe kerül
			MoneyCheck(playerid, len * PRICE_LOCKBIZ);

			houseid = GetPVarInt(playerid, "PlayerBiz");

			SetGVarString("BizLocked", inputtext, houseid);
		    GetGVarString("BizName", tmp, 129, houseid);
		    RemoveHexColorFromString(tmp);
			SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_BEZARTAD_A__NEVU_BIZNISZT_JEL"), tmp, inputtext);

			mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `locked` = '%e' WHERE `id` = %d", inputtext, houseid);
			mysql_function_query(1, query, false, "", "");
		}
		case DIALOG_LOCKBIZ + 1:
		{
			if(!response)
   				return 0;

			if(isnull(inputtext))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_PASSWORD"));
				return 1;
			}

			if(!(3 <= strlen(inputtext) <= 20))
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WRONG_PASSWORD_LENGTH"));
				return 1;
			}

			houseid = GetPVarInt(playerid, "CurrBizid");
		    GetGVarString("BizLocked", name, 21, houseid);

			if(!strcmp(inputtext, name, false))
			{
				cmd_enter(playerid, "258852");
				DeletePVar(playerid, "CurrBizid");
			}
			else
			{
			    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_JELSZO_NEM_MEGFELO"));
			}
		}

		case DIALOG_BANLIST:
		{
			if(!response)
   				return DeletePVar(playerid, "BanString");

			sscanf(inputtext, "'.'s[24]{c}ds[24]", name, vID, country);
			SetPVarInt(playerid, "DialogBanID", (strlen(country) < 3) ? (vID) : (vID | 1 << 24));
			SetPVarString(playerid, "DialogBanName", name);

			BanmanagerDialog(playerid);
		}
		case DIALOG_BANLIST + 1: // Alap dolgok..
		{
			if(!response)
			{
				DeletePVar(playerid, "DialogBanID");
                DeletePVar(playerid, "DialogBanName");

				GetPVarString(playerid, "BanString", query, sizeof(query));
				mysql_function_query(1, query, true, "THREAD_BansList", "dd", playerid, g_pQueryQueue[playerid]);
				return 1;
			}

			switch(listitem)
			{
			    case 0:
				{
					if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
						return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

					mysql_format(1, query, sizeof(query), "SELECT * FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
					mysql_function_query(1, query, true, "THREAD_Baninfo", "ddd", playerid, g_pQueryQueue[playerid],0);
				}
				case 1:
				{
					if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return 0;

					mysql_format(1, query, sizeof(query), "SELECT `unban_time`, `admin_id` FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
					mysql_function_query(1, query, true, "THREAD_Bantime", "dd", playerid, g_pQueryQueue[playerid]);
				}
			    case 2:
				{
					if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
					{
						mysql_format(1, query, sizeof(query), "SELECT `admin_id` FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
						mysql_function_query(1, query, true, "THREAD_CheckBanAdmin", "dd", playerid, g_pQueryQueue[playerid]);
						return 1;
					}

					if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return 0;

					new
					    iBanID = GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF;
                    GetPVarString(playerid, "DialogBanName", name, sizeof(name));
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_FELOLDVA_NEV__ID_"), name, iBanID);

					DeletePVar(playerid, "DialogBanID");
					DeletePVar(playerid, "DialogBanName");

		            mysql_format(1, query, sizeof(query), "DELETE FROM `bans` WHERE `id` = %d", iBanID);
					mysql_function_query(1, query, false, "", "");

					format(i_str,128,"Név: %s | BanID: %d",name,iBanID);
					AdminCommandLog("UNBAN", playerid, -1, i_str);
					printf("Ban feloldva! %s(%d) -> %s(%d)", pName(playerid), playerid, name, iBanID);
				}
				case 3:
				{
					if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return 0;

					ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 3, DIALOG_STYLE_INPUT, "Banmanager -> Ban indok állítása", "Lentre írd be az új indokot a bannak!\n\nAz indoknak max 45 karakter lehet!", "Ok", "Mégse");
				}
				case 4:
				{
					if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return 1;

					mysql_format(1, query, sizeof(query), "SELECT `ip`, `admin_id` FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
					mysql_function_query(1, query, true, "THREAD_Ban_AddRCON", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 5:
				{
					if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return 1;

					new
					    banid = GetPVarInt(playerid, "DialogBanID"),
					    bool:showadmin = !!(banid >> 24 & 0x1);
                    banid = banid & 0xFFFFFF;
					printf("showadmin = %d", showadmin);

                    GetPVarString(playerid, "DialogBanName", name, sizeof(name));
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_SHOWBANADMIN___NEV__ID_"), showadmin, name, banid);

					DeletePVar(playerid, "DialogBanID");
					DeletePVar(playerid, "DialogBanName");

					mysql_format(1, query, sizeof(query), "UPDATE `bans` SET `show_admin` = %d WHERE `id` = %d", showadmin, banid);
				    mysql_function_query(1, query, false, "", "");
				}
				case 6:
				{
				    if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
						return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

					mysql_format(1, query, sizeof(query), "SELECT * FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
					mysql_function_query(1, query, true, "THREAD_Baninfo", "ddd", playerid, g_pQueryQueue[playerid],1);
				}
			}
		}
		case DIALOG_BANLIST + 2: // Ban idõ állítása
		{
			if(!response)
				return BanmanagerDialog(playerid);

			new
			    iBanID = GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF;
			if(isnull(inputtext))
			{
				if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_RROSSZ_DATUMW"));
					ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 2, DIALOG_STYLE_INPUT, "Banmanager -> Ban idõ állítás", "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!", "Ok", "Mégse");
					return 1;
				}

                GetPVarString(playerid, "DialogBanName", name, sizeof(name));
				SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_IDEJE_ATTALLITVA_NEV__"), name, iBanID);

				DeletePVar(playerid, "DialogBanID");
                DeletePVar(playerid, "DialogBanName");

				mysql_format(1, query, sizeof(query), "UPDATE `bans` SET `unban_time` = 0 WHERE `id` = %d", iBanID);
			    mysql_function_query(1, query, false, "", "");
			}
			else
			{
				if(sscanf(inputtext, "p<.>dddddd", year, month, day, hour, minute, second))
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_RROSSZ_FORMATUMW"));
					ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 2, DIALOG_STYLE_INPUT, "Banmanager -> Ban idõ állítás", "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!", "Ok", "Mégse");
					return 1;
				}

				new
				    iDate = mktime(hour, minute, second, day, month, year);
				if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid))
				{
					if(iDate - gettime() > 60 * 60 * 24 * 7) // 60*60*24*5, azaz 5 nap
					{
						ShowWelcome(playerid, LANG(playerid, "MSG_RROSSZ_DATUMWNTOBB_MIND_5_NA"));
						ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 2, DIALOG_STYLE_INPUT, "Banmanager -> Ban idõ állítás", "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!", "Ok", "Mégse");
						return 1;
					}
				}

                GetPVarString(playerid, "DialogBanName", name, sizeof(name));
				SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_IDEJE_ATTALLITVA_NEV___1"), name, iBanID, year, month, day, hour, minute, second);

				DeletePVar(playerid, "DialogBanID");
                DeletePVar(playerid, "DialogBanName");

				mysql_format(1, query, sizeof(query), "UPDATE `bans` SET `unban_time` = %d WHERE `id` = %d", iDate, iBanID);
			    mysql_function_query(1, query, false, "", "");
			}
		}
		case DIALOG_BANLIST + 3: // Ban indok állítása
		{
			if(!response)
				return BanmanagerDialog(playerid);

			if(strlen(inputtext) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_AZ_INDOK_MAXIMUM"));
            if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid)) return 1;

			mysql_format(1, query, sizeof(query), "SELECT `reason`, `admin_id` FROM `bans` WHERE `id` = %d", GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF);
            mysql_function_query(1, query, true, "THREAD_Banindok", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_BANLIST + 5000: // Információ dialóg..
		{
			if(!response)
				return BanmanagerDialog(playerid);
		}
		case DIALOG_DMKILLS:
		{
			if(!response)
				return DeletePVar(playerid, "TopNoBack");

			new
				iVal;
			sscanf(inputtext, "p<.>d{s[64]}", iVal);
			mysql_format(1, query, sizeof(query), "SELECT killer, killer_id, COUNT( killer_id ) as top FROM killlist WHERE dm_zone = %d AND killer_id != -1 GROUP BY killer_id ORDER BY top DESC LIMIT 30", DM_SQL(iVal));
			mysql_function_query(1, query, true, "THREAD_TopDialog", "ddsd", playerid, 0, "DM Kills", g_pQueryQueue[playerid]);
		}
		case DIALOG_DMKILLS + 1:
		{
			if(!response)
				return DeletePVar(playerid, "TopNoBack");

			new
				iVal;
			sscanf(inputtext, "p<.>d{s[64]}", iVal);
			mysql_format(1, query, sizeof(query), "SELECT player, player_id, COUNT( player_id ) as top FROM killlist WHERE dm_zone = %d GROUP BY player_id ORDER BY top DESC LIMIT 30", DM_SQL(iVal));
			mysql_function_query(1, query, true, "THREAD_TopDialog", "ddsd", playerid, 0, "DM Deaths", g_pQueryQueue[playerid]);
		}
		// ----------------------
		case DIALOG_DMKILLS + 2:
		{
			if(!response)
				return DeletePVar(playerid, "TopNoBack");

			mysql_format(1, query, sizeof(query), "SELECT player, player_id, COUNT( player_id ) as top FROM killlist WHERE reason = %d GROUP BY player_id ORDER BY top DESC LIMIT 30", WeaponList_MySQL[listitem][e_WeaponID]);

			format(i_str, sizeof(i_str), "Aki a legtöbbször megdögût ezzel: %s", inputtext);
			mysql_function_query(1, query, true, "THREAD_TopDialog", "ddsd", playerid, 0, i_str, g_pQueryQueue[playerid]);
		}
		case DIALOG_DMKILLS + 3:
		{
			if(!response)
				return DeletePVar(playerid, "TopNoBack");

			mysql_format(1, query, sizeof(query), "SELECT killer, killer_id, COUNT( killer_id ) as top FROM killlist WHERE reason = %d GROUP BY killer_id ORDER BY top DESC LIMIT 30", WeaponList_MySQL[listitem][e_WeaponID]);

			format(i_str, sizeof(i_str), "Aki a legtöbbször ölt ezzel: %s", inputtext);
			mysql_function_query(1, query, true, "THREAD_TopDialog", "ddsd", playerid, 0, i_str, g_pQueryQueue[playerid]);
		}
		case 9457:
		{
			if(!response)
				return 0;

			static const
				aRangeWeapons[] =
				{
				    WEAPON_AK47,
				    WEAPON_M4,
        			WEAPON_RIFLE,
					WEAPON_SNIPER,
				    
			        //WEAPON_COLT45, WEAPON_SILENCED, WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SAWEDOFF, WEAPON_SHOTGSPA, WEAPON_UZI,
				//	WEAPON_MP5, WEAPON_AK47, WEAPON_M4, WEAPON_TEC9, WEAPON_RIFLE, WEAPON_SNIPER, WEAPON_MINIGUN
				};

		    ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, aRangeWeapons[listitem], 5000);
			SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_FEGYVER_KIVALASZTVA_"), inputtext);

			GetPlayerPos(playerid, OnArrow[0][playerid], OnArrow[1][playerid], OnArrow[2][playerid]);
	        g_pGamesData[playerid] |= e_IN_RANGE;
	        PlayerObjects{playerid} = 20;
	        Objects_Hit2{playerid} = 0;

	        LoadAimObjects(playerid);

		    for(new i; i <= 20; i++)
			{
			    MovePlayerObject(playerid, A_Objects[i][playerid], 790.6284, AimObject[i][pObjectY][playerid], AimObject[i][pObjectZ][playerid], Random_Object_Speed[random(sizeof(Random_Object_Speed))]);
			}

			format(tmp, sizeof(tmp), "Hit: 0, Id§: 0:00.000, Record: %d:%02d.%03d", Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);
			PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "ShotRangeTD"), tmp);
			PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "ShotRangeTD"));

			GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_LETS_GO")), 2000, 3);
			SetPVarInt(playerid, "RangeTick", GetTickCount());
			SetPVarInt(playerid, "RangeWeapon", aRangeWeapons[listitem]);

			SendClientMessageToAllf(COLOR_WHITE, "MSG__HALLOVOLDE___ELMENT_HALAK", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		}
		case DIALOG_WALKSTYLE:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 22) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			SetPlayerWalkingStyle(playerid, listitem);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHSETA_STILUSOD_RHATTALLITVA"), inputtext);

            if(GetPVarInt(playerid, "CPanelRe") == 22) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `walkstyle` = %d WHERE `reg_id` = %d", listitem, PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");
		}
		case DIALOG_TOP:
		{
		    if(!response) return 0;
			dline[0] = EOS;
			switch(listitem)
			{
			    case 0:
			    {
			        for(new i; i != sizeof(g_szTopDialog_0); i++)
					{
						if(IsEven(i)) strcat(dline, "{" #XCOLOR_GOLD "}");
						else strcat(dline, "{" #XCOLOR_ORANGE "}");

						strcat(dline, g_szTopDialog_0[i]);
						strcat(dline, "\n");
					}
			    }
			    case 1:
			    {
			        for(new i; i != sizeof(g_szTopDialog_1); i++)
					{
						if(IsEven(i)) strcat(dline, "{" #XCOLOR_GOLD "}");
						else strcat(dline, "{" #XCOLOR_ORANGE "}");

						strcat(dline, g_szTopDialog_1[i]);
						strcat(dline, "\n");
					}
			    }
			    case 2:
			    {
			        for(new i; i != sizeof(g_szTopDialog_2); i++)
					{
						if(IsEven(i)) strcat(dline, "{" #XCOLOR_GOLD "}");
						else strcat(dline, "{" #XCOLOR_ORANGE "}");

						strcat(dline, g_szTopDialog_2[i]);
						strcat(dline, "\n");
					}
			    }
			    case 3:
			    {
			        for(new i; i != sizeof(g_szTopDialog_3); i++)
					{
						if(IsEven(i)) strcat(dline, "{" #XCOLOR_GOLD "}");
						else strcat(dline, "{" #XCOLOR_ORANGE "}");

						strcat(dline, g_szTopDialog_3[i]);
						strcat(dline, "\n");
					}
			    }
			    case 4:
			    {
			        for(new i; i != sizeof(g_szTopDialog_4); i++)
					{
						if(IsEven(i)) strcat(dline, "{" #XCOLOR_GOLD "}");
						else strcat(dline, "{" #XCOLOR_ORANGE "}");

						strcat(dline, g_szTopDialog_4[i]);
						strcat(dline, "\n");
					}
			    }
			}
			SetPVarInt(playerid,"TopListID",listitem);
			ShowPlayerDialogEx(playerid, DIALOG_TOP_1, DIALOG_STYLE_LIST, "{" #XCOLOR_PINK "}Top Játékosok", dline, "Ok", "Mégse");
		}
		case DIALOG_TOP_1:
		{
		    if(!response) return cmd_top(playerid,"");
		    
		    new
				id = GetPVarInt(playerid,"TopListID"),
				iList = (!GetPVarType(playerid, "TopList")) ? (1) : (GetPVarInt(playerid, "TopList"));
				
            switch(id)
			{
   				case 0:
				{
				    switch(listitem)
					{
					    case 0: ShowTopListForPlayer(playerid, e_TOP_XP, iList, "XP");
					    case 1: ShowTopListForPlayer(playerid, e_TOP_SZINT, iList, "Szint");
					    case 2: ShowTopListForPlayer(playerid, e_TOP_MONEY, iList, "Pénz");
					    case 3: ShowTopListForPlayer(playerid, e_TOP_BANK, iList, "Bankban lévõ pénz");
					    case 4: ShowTopListForPlayer(playerid, e_TOP_TIME, iList, "Játszott óra");
					    case 5: ShowTopListForPlayer(playerid, e_TOP_FLAGTIME, iList, "Flag Time (Óra)");
					    case 6: ShowTopListForPlayer(playerid, e_TOP_BCARTIME, iList, "BonusCar Time (Óra)");
					    case 7: ShowTopListForPlayer(playerid, e_TOP_AFK, iList, "AFK-ban töltött idõ [2012.05.23 óta]");
					    case 8: ShowTopListForPlayer(playerid, e_TOP_RECORDAFK, iList, "AFK rekord [2014.02.04 óta]");
					    case 9: ShowTopListForPlayer(playerid, e_TOP_FORUMTIME, iList, "Fórumon eltöltött idõ");
					    case 10:ShowTopListForPlayer(playerid, e_TOP_FORUMPOSTS, iList, "Fórum hozzászólás");
					    case 11:ShowTopListForPlayer(playerid, e_TOP_RABLO, iList, "Rablások");
					    case 12:ShowTopListForPlayer(playerid, e_TOP_POSTS, iList, "Chatbe elküldött üzenetek");
					    case 13:ShowTopListForPlayer(playerid, e_TOP_STUNTBONUS, iList, "Stuntbónusz");
				    	case 14: ShowTopListForPlayer(playerid, e_TOP_VEHICLE_KM, iList, "Jármûben megtett távolság [2016.10.16 óta]");
			    		case 15: ShowTopListForPlayer(playerid, e_TOP_ONFOOT_KM, iList, "Gyalog megtett távolság [2016.10.16 óta]");
					}
				}
				case 1:
				{
                    switch(listitem)
					{
						case 0: ShowTopListForPlayer(playerid, e_TOP_RANGE, iList, "Hallövölde");
						case 1: ShowTopListForPlayer(playerid, e_TOP_RACES, iList, "Megnyert versenyek");
						case 2: ShowTopListForPlayer(playerid, e_TOP_RACERECORDS, iList, "Versenyrekordok");
						case 3: ShowTopListForPlayer(playerid, e_TOP_FUVAROK, iList, "Fuvart Szállító");
						case 4: ShowTopListForPlayer(playerid, e_TOP_FALLOUT, iList, "Fallout nyertes");
						case 5: ShowTopListForPlayer(playerid, e_TOP_POSTAS, iList, "Leszállított levelek [2013.10.15 óta]");
						case 6: ShowTopListForPlayer(playerid, e_TOP_PIZZAS, iList, "Leszállított pizzák [2013.10.15 óta]");
						case 7: ShowTopListForPlayer(playerid, e_TOP_DERBY, iList, "Derby nyerések [2013.10.15 óta]");
						case 8: ShowTopListForPlayer(playerid, e_TOP_CTC_AUTO, iList, "CTC Autó leadások [2013.10.15 óta]");
						case 9: ShowTopListForPlayer(playerid, e_TOP_CTC_HAJO, iList, "CTC Hajó leadások [2013.10.15 óta]");
						case 10: ShowTopListForPlayer(playerid, e_TOP_TAXI, iList, "Elszállított utasok [2016.09.13 óta]");
						//case 11: ShowTopListForPlayer(playerid, e_TOP_TAXI_KM, iList, "Taxiban megtett távolság [2016.10.16 óta]");
						case 11: ShowTopListForPlayer(playerid, e_TOP_GOLDPOTS, iList, "Aranytojás");
						case 12: ShowTopListForPlayer(playerid, e_TOP_REACTIONS, iList, "Reakcióteszt");
						case 13: ShowTopListForPlayer(playerid, e_TOP_MATHS, iList, "Matek");
						case 14: ShowTopListForPlayer(playerid, e_TOP_TELES, iList, "Teleportteszt");
						case 15: ShowTopListForPlayer(playerid, e_TOP_LOTTO, iList, "Lottó találatok");
					}
				}
				case 2:
				{
                    switch(listitem)
					{
					    case 0: ShowTopListForPlayer(playerid, e_TOP_KILLS, iList, "Ölések");
					    case 1: ShowTopListForPlayer(playerid, e_TOP_DEATHS, iList, "Halálok");
					    case 2: ShowTopListForPlayer(playerid, e_TOP_KILLSTREAK, iList, "Ölésrekord");
					    case 3: ShowTopListForPlayer(playerid, e_TOP_BOUNTY, iList, "Vérdíj");
					    case 4: ShowTopListForPlayer(playerid, e_TOP_HEADSHOT_KILL, iList, "Fejlövéssel ölõk [2013.10.15 óta]");
					    case 5: ShowTopListForPlayer(playerid, e_TOP_HEADSHOT_DEATH, iList, "Fejlövéstõl halottak [2013.10.15 óta]");
					}
				}
				case 3:
				{
                    switch(listitem)
					{
					    case 0: ShowTopListForPlayer(playerid, e_TOP_ADMIN, iList, "Adminok");
					    case 1: ShowTopListForPlayer(playerid, e_TOP_MOST_WARNADMIN, iList, "Legtöbb warnt adó admin");
					    case 2: ShowTopListForPlayer(playerid, e_TOP_MOST_UNWARNADMIN, iList, "Legtöbb warn levevõ admin");
					    case 3: ShowTopListForPlayer(playerid, e_TOP_MOST_WARNPLAYER, iList, "Legtöbb warnt kapó játékos");
					    case 4: ShowTopListForPlayer(playerid, e_TOP_MOST_UNWARNPLAYER, iList, "Legtöbb warn levett játékos");
					    case 5: ShowTopListForPlayer(playerid, e_TOP_MOST_KICKADMIN, iList, "Legtöbb kicket adó admin");
					    case 6: ShowTopListForPlayer(playerid, e_TOP_MOST_KICKEDPLAYER, iList, "Legtöbbet kickelt játékos");
					    case 7: ShowTopListForPlayer(playerid, e_TOP_MOST_RCON, iList, "Legtöbb RCON Login");
					    case 8: ShowTopListForPlayer(playerid, e_TOP_MOST_FAILRCON, iList, "Legtöbb RCON Fail Login");
					    case 9: ShowTopListForPlayer(playerid, e_TOP_MOST_BANADMIN, iList, "Legtöbb bant adó admin");
					    case 10: ShowTopListForPlayer(playerid, e_TOP_MOST_BANNEDPLAYER, iList, "Legtöbbet bannolt játékos");
					}
				}
				case 4:
				{
				    switch(listitem)
				    {
        				case 0: ShowTopListForPlayer(playerid, e_TOP_VIP, iList, "VIP játékosok");
		          		case 1: ShowTopListForPlayer(playerid, e_TOP_CLAN_BANK, iList, "Klán bank");
			           	case 2: ShowTopListForPlayer(playerid, e_TOP_MOST_CONNECTED, iList, "Legtöbbször csatlakozott játékos");
			            case 3: ShowTopListForPlayer(playerid, e_TOP_MOST_FAILLOGIN, iList, "Legtöbbször hibásan bejelenkezett");
		             	case 4: ShowTopListForPlayer(playerid, e_TOP_MOST_OBJECTMAKER, iList, "Legtöbb holdingobject készítõ");
		              	case 5: ShowTopListForPlayer(playerid, e_TOP_MOST_CHANGENAME, iList, "Legtöbb névváltó");
		               	case 6: ShowTopListForPlayer(playerid, e_TOP_MOST_CHANGEPASS, iList, "Legtöbb jelszóváltó");
					   	case 7: ShowTopListForPlayer(playerid, e_TOP_MOST_PMSENDER, iList, "Legtöbb PM-et küldõ");
                        case 8: ShowTopListForPlayer(playerid, e_TOP_MOST_PMRECEIVER, iList, "Legtöbb PM-et fogadó");
                        case 9: ShowTopListForPlayer(playerid, e_TOP_MOST_VOBJECT, iList, "Legtöbb jármû object készítõ");
                        case 10: ShowTopListForPlayer(playerid, e_TOP_MOST_VOBJECTSET, iList, "Legtöbb jármû objectset készítõ");
                        case 11: ShowTopListForPlayer(playerid, e_TOP_MOST_HOSET, iList, "Legtöbb hoset készítõ");
                        case 12: ShowTopListForPlayer(playerid, e_TOP_DM_CREATOR, iList, "Legtöbb DM készítõt");
                        case 13: ShowTopListForPlayer(playerid, e_TOP_MUSIC_UPLOADER, iList, "Legtöbb zene feltöltõ");
                        case 14: ShowTopListForPlayer(playerid, e_TOP_RACE_CREATOR, iList, "Legtöbb verseny készítõ");
                        case 15: ShowTopListForPlayer(playerid, e_TOP_TELEPORT, iList, "Legtöbbet használt teleportok");
						case 16: ShowTopListForPlayer(playerid, e_TOP_MUSIC, iList, "Legtöbbszõr lejátszott zene");
						case 17: ShowTopListForPlayer(playerid, e_TOP_GIVECASH, iList, "Legtöbb pénzt küldõ");
                        case 18: ShowTopListForPlayer(playerid, e_TOP_ACCEPTCASH, iList, "Legtöbb pénzt fogadó");
						case 19: ShowTopListForPlayer(playerid, e_TOP_BUG, iList, "Legtöbb hibajelentõ (/bugs)");
						case 20: ShowTopListForPlayer(playerid, e_TOP_REPORT, iList, "Legtöbb panaszjelentõ (/reports)");
						case 21: ShowTopListForPlayer(playerid, e_TOP_IDEA, iList, "Legtöbb ötlet beküldõ (/ideas)");
				    }
		    	}
			}
		}
		case DIALOG_TOP + 1:
		{
			if(GetPVarType(playerid, "TopNoBack"))
				return DeletePVar(playerid, "TopNoBack");
				
			printf("asd %s",inputtext);
            OnDialogResponse(playerid, DIALOG_TOP, 1, GetPVarInt(playerid,"TopListID"), "asd");
			//cmd_top(playerid, "");
		}

		// controlpanel
		case DIALOG_CPANEL:
		{
			if(!response)
				return DeletePVar(playerid, "CPanelRe");

			switch(listitem)
			{
				case 0: cmd_styles(playerid, ""), SetPVarInt(playerid, "CPanelRe", 1);
				case 1:
				{
//					cmd_carradio(playerid, "");
					SetPVarInt(playerid, "CPanelRe", 2);
				}
				case 2:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 1, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Lézes", "Be\nKi\nPiros\nKék\nRózsaszín\nNarancssárga\nZöld\nSárga", "Ok", "Vissza");
				}
				case 3: cmd_readcmds(playerid,""), cmd_cpanel(playerid,"");
				case 4: cmd_antifall(playerid,""), cmd_cpanel(playerid,"");
				case 5:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 4, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Autofix", "KIkapcsolás\nMotor javítás\nKülsõ javítás\nTeljes javítás", "Ok", "Vissza");
				}
				//case 6: cmd_speedo(playerid,""), cmd_cpanel(playerid,"");
				case 7: cmd_fly(playerid,""), cmd_cpanel(playerid,"");
				case 8: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 7, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Szivárvány", "Lassú\nGyors\nKi", "Ok", "Vissza");

				case 9:
				{
					SetPVarInt(playerid, "CPanelRe", 8);
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 8, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> SpeedBoost", "Be\nKi\nErõsség Állítása", "Ok", "Vissza");
				}
				case 10:
				{
					SetPVarInt(playerid, "CPanelRe", 9);
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 10, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> VehicleJump", "Be\nKi\nErõsség Állítása", "Ok", "Vissza");
				}
				case 11: cmd_allowgoto(playerid,""), cmd_cpanel(playerid,"");
				case 12: cmd_allowspec(playerid,""), cmd_cpanel(playerid,"");
				case 13: cmd_allowtime(playerid,""), cmd_cpanel(playerid,"");
				case 14: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 14, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Idõ", "Véletlenszerû\nBeállítás", "Ok", "Vissza");
				case 15: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 16, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Idõjárás", "Véletlenszerû\nBeállítás", "Ok", "Vissza");
				case 16: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 18, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Autószín 1", "Törlés\nBeállítás", "Ok", "Vissza");
				case 17: SetPVarInt(playerid, "CPanelRe", 20), cmd_spawnplace(playerid, "");
				case 18: SetPVarInt(playerid, "CPanelRe", 21), cmd_colors(playerid, "");
				case 19: SetPVarInt(playerid, "CPanelRe", 22), cmd_walkstyle(playerid, "");
				case 20: SetPVarInt(playerid, "CPanelRe", 23), cmd_changename(playerid, "");
				case 21: SetPVarInt(playerid, "CPanelRe", 24), cmd_changepass(playerid, "");
				case 22: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");
				case 23: cmd_nametag(playerid,""), cmd_cpanel(playerid,"");
				case 24: cmd_allownametag(playerid,""), cmd_cpanel(playerid,"");
				case 25: cmd_stuntbonus(playerid,""), cmd_cpanel(playerid,"");
				case 26: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 27, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Clicktele", "Be\nKi", "Ok", "Vissza");
				case 27: cmd_togglevel(playerid,""), cmd_cpanel(playerid,"");
				case 28: cmd_fastrespawn(playerid,""), cmd_cpanel(playerid,"");
				case 29: cmd_god(playerid,""), cmd_cpanel(playerid,"");
				case 30: SetPVarInt(playerid, "CPanelRe", 27), cmd_textdraws(playerid, "");
				//case 31: cmd_antidb(playerid,""), cmd_cpanel(playerid,"");
				case 32: cmd_telemsg(playerid,""), cmd_cpanel(playerid,"");
				case 33: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 34, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Hydraulika típus", "Alap\nBe\nTörlése", "Ok", "Vissza");
				case 34: cmd_nitrostate(playerid, ""), SetPVarInt(playerid, "CPanelRe", 25);
				case 35: cmd_favwheel(playerid, ""), SetPVarInt(playerid, "CPanelRe", 26);
				case 36: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 35, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Autószín 2", "Törlés\nBeállítás", "Ok", "Vissza");
				case 37: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 37, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Paintjob", "Lentre írd be a paintjob ID-t! (0 - 3)!\n4 = Paintjob törlése!", "Ok", "Vissza");
				case 38: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 38, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Chat Üzenet Szín", "Lentre írj egy számot, amire be szeretnéd állítani a chat színed!\nPl: 0xFF0000AA, 0x33FF33AA\n0 = Chat szín törlése!", "Ok", "Vissza");
				case 39: ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 39, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Chat ID Szín", "Lentre írj egy számot, amire be szeretnéd állítani a chat id színed!\nPl: 0xFF0000AA, 0x33FF33AA\n0 = Chat id szín törlése!", "Ok", "Vissza");
				case 40: cmd_nomusic(playerid, ""), cmd_cpanel(playerid,"");
				case 41: cmd_nostunts(playerid, ""), cmd_cpanel(playerid,"");
				case 42: cmd_autologin(playerid, ""), cmd_cpanel(playerid,"");
				case 43: cmd_autospawn(playerid, ""), cmd_cpanel(playerid,"");
				case 44: cmd_seepms(playerid, ""), cmd_cpanel(playerid,"");
			}
		}
		case DIALOG_CPANEL + 27:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			switch(listitem)
			{
				case 0: cmd_teleon(playerid, "");
				case 1: cmd_teleoff(playerid, "");
			}
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 34:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			/*switch(listitem)
			{
				case 0:
                {
                    cmd_hydtype(playerid, "default");
				}
				case 1:
				{
					cmd_hydtype(playerid, "add");
				}
				case 2:
				{
					cmd_hydtype(playerid, "remove");
				}
			}*/
            cmd_cpanel(playerid, "");
		}

		case DIALOG_CPANEL + 37:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			if('0' <= inputtext[0] <= '3')
			{
				cmd_autopaintjob(playerid, inputtext);
			}
			else
			{
                cmd_disableautopaintjob(playerid, "");
			}
            cmd_cpanel(playerid, "");
		}

		case DIALOG_CPANEL + 38:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			new
				val;
			if(sscanf(inputtext, "n", val)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZAM_NEM_MEGFELELO"));
			if(IsBlack(val))
			{
				cmd_removechatcolor(playerid, "");
			}
			else
			{
                cmd_chatcolor(playerid, inputtext);
			}
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 39:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			new
				val;
			if(sscanf(inputtext, "n", val)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZAM_NEM_MEGFELELO"));
			if(IsBlack(val))
			{
				cmd_removeidcolor(playerid, "");
			}
			else
			{
                cmd_idcolor(playerid, inputtext);
			}
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 1:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			switch(listitem)
			{
				case 0:
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_RHLEZER_GHBEKAPCSOLVAW"));
					SetPVarInt(playerid, "LaserPointer", Lasers[random(sizeof(Lasers))]);

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
                    mysql_function_query(1, query, false, "", "");
				}
				case 1:
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_RHLEZER_RHKIKAPCSOLVAW"));
					RemovePlayerAttachedObject(playerid, 3);
                    DeletePVar(playerid, "LaserPointer");

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
				case 2..7:
				{
			        SetPVarInt(playerid, "LaserPointer", Lasers[listitem - 2]);

					format(i_str, sizeof(i_str), "Lézer ~y~~h~kicserélve~w~: %s", inputtext);
					ShowWelcome(playerid, i_str);

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = %d WHERE `reg_id` = %d", Lasers[listitem - 2], PlayerInfo[playerid][pRegID]);
			        mysql_function_query(1, query, false, "", "");
				}
			}
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 4:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			switch(listitem)
			{
				case 0: //Kikapcsolva
				{
				    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS_1"));
				    SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_KIKAPCSOLV"));
				}
				case 1: //Motor javítáa
				{
				    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
			   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
				}
				case 2: // Külsõ
				{
                    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
			   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
				}
				case 3: //Teljes
				{
				    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
			   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
				}
			}
			SetPVarInt(playerid, "AutoRepair", listitem);
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `autorepair` = %d WHERE `reg_id` = %d", GetPVarInt(playerid, "AutoRepair"), PlayerInfo[playerid][pRegID]);
   			mysql_function_query(1, query, false, "", "");
            cmd_cpanel(playerid, "");
		}

		case DIALOG_CPANEL + 7:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			switch(listitem)
			{
				case 0:
				{
					cmd_avc(playerid, "slow");
				}
				case 1:
				{
					cmd_avc(playerid, "fast");
				}
				case 2:
				{
					cmd_avc(playerid, "off");
				}
			}
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 8:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 8);
			switch(listitem)
			{
				case 0:
				{
					cmd_speedboost(playerid, "on");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
					cmd_speedboost(playerid, "off");
                    cmd_cpanel(playerid, "");
				}
				case 2:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 9, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> SpeedBoost", "Lentre írj be egy számot {" #XCOLOR_PROPGREEN "}1.0 {" #XCOLOR_DEFAULT "}és {" #XCOLOR_PROPGREEN "}2.0 {" #XCOLOR_DEFAULT "}között!\n\nAlapérték: {" #XCOLOR_WHITE "}1.2", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 9:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			cmd_speedboost(playerid, inputtext);
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 10:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 8);
			switch(listitem)
			{
				case 0:
				{
					cmd_jump(playerid, "on");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
					cmd_jump(playerid, "off");
                    cmd_cpanel(playerid, "");
				}
				case 2:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 11, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> VehicleJump", "Lentre írj be egy számot {" #XCOLOR_PROPGREEN "}0.1 {" #XCOLOR_DEFAULT "}és {" #XCOLOR_PROPGREEN "}0.6 {" #XCOLOR_DEFAULT "}között!\n\nAlapérték: {" #XCOLOR_WHITE "}0.2", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 11:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			cmd_jump(playerid, inputtext);
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 14:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 14);
			switch(listitem)
			{
				case 0:
				{
     				cmd_resettime(playerid, "");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 15, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Idõ", "Lentre írj be egy számot ebben a formában: Óra:Perc\n{" #XCOLOR_GREEN "}Pl: 12:53, 23:59!", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 15:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			if(sscanf(inputtext, "p<:>dd", hour, minute) || !(0 <= hour <= 23) || !(0 <= minute <= 59))
			{
   				ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 15, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Idõ", "Lentre írj be egy számot ebben a formában: Óra:Perc\n{" #XCOLOR_GREEN "}Pl: 12:53, 23:59!", "Ok", "Vissza");
				return 1;
			}

			format(name, sizeof(name), "%d %d 1", hour, minute);
			cmd_mytime(playerid, name);
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 16:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 14);
			switch(listitem)
			{
				case 0:
				{
     				cmd_resetweather(playerid, "");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 17, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Idõjárás", "Lentre írj be egy számot {" #XCOLOR_PROPGREEN "}0 {" #XCOLOR_DEFAULT "}és {" #XCOLOR_PROPGREEN "}50 {" #XCOLOR_DEFAULT "}között!\n\nIdõjárás ID-ket a fórumon elérheted!", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 17:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			format(name, sizeof(name), "%d 1", strval(inputtext));
			cmd_myweather(playerid, name);
            cmd_cpanel(playerid, "");
		}
		case DIALOG_CPANEL + 18:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 14);
			switch(listitem)
			{
				case 0:
				{
     				cmd_disableautocolor(playerid, "0");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 19, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Autószín 1", "Lentre írj be egy autószín ID-t!\n\nAutószín ID-ket a fórumon elérheted!\nVagy: {" #XCOLOR_PROPGREEN "}GTA San Andreas/data/carcols.dat", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 19:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			cmd_autocolor(playerid, inputtext);
            cmd_cpanel(playerid, "");
		}

		case DIALOG_CPANEL + 35:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			SetPVarInt(playerid, "CPanelRe", 14);
			switch(listitem)
			{
				case 0:
				{
     				cmd_disableautocolor(playerid, "1");
                    cmd_cpanel(playerid, "");
				}
				case 1:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 36, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Kedvenc Autószín 2", "Lentre írj be egy autószín ID-t!\n\nAutószín ID-ket a fórumon elérheted!\nVagy: {" #XCOLOR_PROPGREEN "}GTA San Andreas/data/carcols.dat", "Ok", "Vissza");
				}
			}
		}
		case DIALOG_CPANEL + 36:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			format(name, sizeof(name), "%d 1", strval(inputtext));
			//print(name);
			cmd_autocolor(playerid, name);
            cmd_cpanel(playerid, "");
		}

		case DIALOG_CPANEL + 20:
		{
			if(!response)
				return cmd_cpanel(playerid, "");

			switch(listitem)
			{
				case 0:
				{
					ShowWelcome(playerid, LANG(playerid, "MSG_JARMUVEL_VALO_FORGAS_KIKAPCSOLVA"));
					g_PlayerFlags[playerid] &= ~e_SPIN;
				}
				case 1:
				{
				    g_PlayerFlags[playerid] |= e_SPIN;
					ShowWelcome(playerid, LANG(playerid, "MSG_JARMUVEL_VALO_FORGAS_BEKAPCSOLVA"));
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YERTEKEK_MODOSITASAWNGHH"));
				}
				case 2:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 21, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás ) -> X", "Lentre írd be, hogy mekkorát forduljon a kocsi!\n\nPl: {" #XCOLOR_PROPGREEN "}0.15, 1.2, 0.5", "Ok", "Vissza");
				}
				case 3:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 22, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás ) -> Y", "Lentre írd be, hogy mekkorát forduljon a kocsi!\n\nPl: {" #XCOLOR_PROPGREEN "}0.15, 1.2, 0.5", "Ok", "Vissza");
				}
				case 4:
				{
                    ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 23, DIALOG_STYLE_INPUT, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás ) -> Z", "Lentre írd be, hogy mekkorát forduljon a kocsi!\n\nPl: {" #XCOLOR_PROPGREEN "}0.15, 1.2, 0.5", "Ok", "Vissza");
				}
			}
			SaveFlags(playerid);
		}
		case DIALOG_CPANEL + 21:
		{
			if(!response)
				return ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");

			cmd_spinx(playerid, inputtext);
            ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");
		}
		case DIALOG_CPANEL + 22:
		{
			if(!response)
				return ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");

			cmd_spiny(playerid, inputtext);
            ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");
		}
		case DIALOG_CPANEL + 23:
		{
			if(!response)
				return ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");

			cmd_spinz(playerid, inputtext);
            ShowPlayerDialogEx(playerid, DIALOG_CPANEL + 20, DIALOG_STYLE_LIST, "{" #XCOLOR_YELLOW "}CPanel -> Spin ( Forgás )", "Kikapcsolás\nBekapcsolás\nX -> Áttállítása\nY -> Áttállítása\nZ -> Áttállítása", "Ok", "Vissza");
		}

   		case 14291:
		{
			if(!response)
				return 0;

			ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!",  szItems, "Választ", "Mégse");
		}
		case DeleteItem2:
		{
			if(!response)
				return 0;

			ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!",  szItems, "Választ", "Mégse");
		}

		case DeleteItem:
		{
		    if(!response)
				return ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!",  szItems, "Választ", "Mégse");

		    switch(listitem)
		    {
		        case 0:
				{
                    PlayerInfo[playerid][P_GlassesCount] = -1;
					ShowPlayerDialogEx(playerid, DeleteItem2, DIALOG_STYLE_MSGBOX, "Szemüveg törlése", "{" #XCOLOR_LIGHTRED "}Törölted a {FFFFFF}\"Szemüveg\" {" #XCOLOR_LIGHTRED "}nevû tárgyat.", "Vissza");
				}
				case 1:
				{
					PlayerInfo[playerid][P_WatchesCount] = -1;
					ShowPlayerDialogEx(playerid, DeleteItem2, DIALOG_STYLE_MSGBOX, "Óra törlése", "{" #XCOLOR_LIGHTRED "}Törölted az {FFFFFF}Óra {" #XCOLOR_LIGHTRED "}nevû tárgyat.", "Vissza");
				}
				case 2:
				{
					PlayerInfo[playerid][P_HatsCount] = -1;
					ShowPlayerDialogEx(playerid, DeleteItem2, DIALOG_STYLE_MSGBOX, "Sapka törlése", "{" #XCOLOR_LIGHTRED "}Törölted a {FFFFFF}Sapka {" #XCOLOR_LIGHTRED "}nevû tárgyat.", "Vissza");
				}
                case 3:
				{
					PlayerInfo[playerid][P_WeaponsCount] = -1;
					ShowPlayerDialogEx(playerid, DeleteItem2, DIALOG_STYLE_MSGBOX, "Fegyver törlése", "{" #XCOLOR_LIGHTRED "}Törölted a {FFFFFF}Fegyver {" #XCOLOR_LIGHTRED "}nevû tárgyat.", "Vissza");
				}
				case 4:
				{
					PlayerInfo[playerid][P_OthersCount] = -1;
					ShowPlayerDialogEx(playerid, DeleteItem2, DIALOG_STYLE_MSGBOX, "Egyéb tárgy törlése", "{" #XCOLOR_LIGHTRED "}Törölted a {FFFFFF}Egyéb {" #XCOLOR_LIGHTRED "}nevû tárgyat.", "Vissza");
				}
			}
            RemovePlayerAttachedObject(playerid, listitem);
		}
		case WeaponsType:
		{
		    if(!response)
				return ShowPlayerDialogEx( playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!",  szItems, "Választ", "Mégse");

		    switch(listitem)
			{
			    case 0: SetPVarInt(playerid, "Weapons", 0);
			    case 1: SetPVarInt(playerid, "Weapons", 1);
			    case 2: SetPVarInt(playerid, "Weapons", 2);
			}
			PlayerInfo[playerid][P_StyleStage] = WEAPON;
		    SetPVarString(playerid, "Category", "Weapons");
		    SetPVarString(playerid, "Item", "Weapon");
		    SetPVarInt(playerid, "Slot", 3 );

		    UpdateStyleTD(playerid, "~w~Kategória: ~b~~h~Fegyverek~n~~w~Tárgy: ~b~~h~Fegyver 1~n~~w~Slot: ~g~~h~3~n~~n~~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd");
			PlayerTextDrawShow(playerid, StyleTD[playerid]);

			g_PlayerData[playerid] |= e_ON_STYLE;
			if(GetPVarInt(playerid, "Weapons") == 0)
			{
			    SetPlayerCameraPos( playerid, -2704.4009 + (2 * floatsin(-2704.4009, degrees)), 373.1788 + (2 * floatcos(182.6801, degrees)), 6.9795-1);
				SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 0.6);
			    SetPlayerFacingAngle(playerid, 90.6801);
			    SetPlayerAttachedObject(playerid, 3, 352, 7, 0.000000, 0.000000, -0.037418, 274.691467, 359.872344, 8.555528, 1.001325, 1.000000, 1.000000);
			}
			if (GetPVarInt(playerid, "Weapons") == 1)
			{
			    SetPlayerCameraPos(playerid, -2704.4009 + (3 * floatsin(-2704.4009, degrees)), 373.1788 + (3 * floatcos(182.6801, degrees)), 6.9795-0.5);
				SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 0.7);
			    SetPlayerFacingAngle(playerid, 2.6801);
			    SetPlayerAttachedObject(playerid, 3, 349, 1, 0.000000, -0.146130, 0.113561, 0.000000, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000);
			}
			if(GetPVarInt(playerid, "Weapons") == 2)
			{
			    SetPlayerCameraPos(playerid, -2704.4009 + (4 * floatsin(-2704.4009, degrees)), 373.1788 + (4 * floatcos(182.6801, degrees)), 6.9795);
				SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 0.7);
				SetPlayerFacingAngle(playerid, 92.6801 + 180);
			    SetPlayerAttachedObject(playerid, 3, 357, 6, -0.094173, -0.027371, -0.071345, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000);
			}
		}

	    case LeftRight:
		{
		    if(!response)
				return ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!",  szItems, "Választ", "Mégse");

		    switch(listitem)
			{
			    case 0: SetPVarInt(playerid, "wHand", LEFT);
			    case 1: SetPVarInt(playerid, "wHand", RIGHT);
			}
			PlayerInfo[playerid][P_StyleStage] = WATCHES;
		    SetPVarString(playerid, "Category", "Watches");
		    SetPVarString(playerid, "Item", "Watch");

			UpdateStyleTD(playerid, "~w~Kategória: ~b~~h~Órák~n~~w~Tárgy: ~b~~h~Óra 1~n~~w~Slot: ~g~~h~1~n~~n~~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd");
			PlayerTextDrawShow(playerid, StyleTD[playerid]);

			g_PlayerData[playerid] |= e_ON_STYLE;
			SetPVarInt(playerid, "Slot", 2);
			SetPlayerVirtualWorld(playerid, 150);
			if(GetPVarInt(playerid, "wHand") == LEFT)
			{
			    SetPlayerAttachedObject(playerid, 1, 19039 + PlayerInfo[ playerid ][ P_WatchesCount ], 5, 0.000000, -0.008285, -0.007307, 63.175521, 67.837768, 118.995666, 1.004594, 1.000000, 1.000000);
			}
			if(GetPVarInt(playerid, "wHand") == RIGHT)
			{
			    SetPlayerAttachedObject(playerid, 1, 19039 + PlayerInfo[playerid][P_WatchesCount], 6, 0.000000, -0.005132, 0.007088, 63.175521, 67.837768, 118.995666, 1.004594, 1.000000, 1.000000);
			}
		}

		case Style2:
		{
			if(!response)
				return ShowPlayerDialogEx( playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Órák",  szItems, "Választ", "Mégse");

			PlayerTele(playerid, -2704.4009, 373.1788, 5.9795, .worldid = 150 + playerid);
			TogglePlayerControllable(playerid, false);

		    switch(listitem)
		    {
				case 0:
				{
				    SetPlayerCameraPos(playerid, -2704.4009 + (1 * floatsin(-2704.4009, degrees)), 373.1788 + (1 * floatcos(182.6801, degrees)), 6.9795);
					SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 0.7 );
				    SetPlayerFacingAngle(playerid, 182.6801 );
					SetPVarString(playerid, "Category" , "Glasses");
					SetPVarString(playerid, "Item"     , "Glasses");
					UpdateStyleTD(playerid,    "~w~Kategória: ~b~~h~Szemüvegek~n~~w~\
												Tárgy: ~b~~h~Szemüveg 1~n~~w~\
												Slot: ~g~~h~0~n~~n~\
												~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd");
					PlayerTextDrawShow(playerid, StyleTD[playerid]);
					SetPlayerAttachedObject(playerid, 0, 19013, 2, 0.097931, 0.037977, -0.002010, 92.431961, 86.782577, 0.000000, 0.996234, 1.000000, 1.000000);
					PlayerInfo[playerid][P_StyleStage] = GLASSES;
					g_PlayerData[playerid] |= e_ON_STYLE;
					SetPVarInt(playerid, "Slot", 1 );
					SetPlayerVirtualWorld(playerid, 150 + playerid);
				}
				case 1:
				{
				    SetPlayerCameraPos(playerid, -2704.4009 + (2 * floatsin(-2704.4009, degrees)), 373.1788 + (2 * floatcos(182.6801, degrees)), 6.9795-1);
					SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 - 0.4 );
					ShowPlayerDialogEx(playerid, LeftRight, DIALOG_STYLE_LIST, "Válazd ki a kezet",  "{" #XCOLOR_WHITE "}Bal\n{" #XCOLOR_WHITE "}Jobb\n", "Választ", "Vissza");
				}
				case 2:
				{
				    SetPlayerCameraPos(playerid, -2704.4009 + (1 * floatsin(-2704.4009, degrees)), 373.1788 + (1 * floatcos(182.6801, degrees)), 6.9795-0.7);
					SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 1);
				    SetPlayerFacingAngle(playerid, 182.6801 );
					SetPVarString(playerid, "Category", "Hats");
					SetPVarString(playerid, "Item", "Hat");

					UpdateStyleTD(playerid,    "~w~Kategória: ~b~~h~Kalapok~n~~w~\
												Tárgy: ~b~~h~Kalap 1~n~~w~\
												Slot: ~g~~h~3~n~~n~\
												~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd");
					PlayerTextDrawShow(playerid, StyleTD[playerid]);
					SetPlayerAttachedObject(playerid, 2, 18639, 2, 0.145803, 0.002074, 0.002082, 0.000000, 0.000000, 351.335632, 1.000000, 1.000000, 1.000000);
					PlayerInfo[playerid][P_StyleStage] = HATS;
					g_PlayerData[playerid] |= e_ON_STYLE;
					SetPVarInt(playerid, "Slot", 3 );
					SetPlayerVirtualWorld(playerid, 150 + playerid);
			    }
				case 3:
				{
				    SetPlayerCameraPos(playerid, -2704.4009 + (2 * floatsin(-2704.4009, degrees)), 373.1788 + (2 * floatcos(182.6801, degrees)), 6.9795);
					SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 0.7 );

					ShowPlayerDialogEx(playerid, WeaponsType, DIALOG_STYLE_LIST, "Válazd ki a helyet",  "{" #XCOLOR_WHITE "}Kézen\n{" #XCOLOR_WHITE "}Háton\n{" #XCOLOR_WHITE "}Kézen (Nagy méretben)", "Választ", "Back");
				}
				case 4:
				{
					SetPlayerCameraPos(playerid, -2704.4009 + (3 * floatsin(-2704.4009, degrees)), 373.1788 + (3 * floatcos(182.6801, degrees)), 6.9795-0.7);
					SetPlayerCameraLookAt(playerid, -2704.4009,373.1788,5.9795 + 1 );
				    SetPlayerFacingAngle(playerid, 182.6801 );
					SetPVarString(playerid, "Category" , "Others");
					SetPVarString(playerid, "Item"     , "Parrot");

					UpdateStyleTD(playerid,    "~w~Kategória: ~b~~h~Egyéb~n~~w~\
												Tárgy: ~b~~h~Papagáj~n~~w~\
												Slot: ~g~~h~3~n~~n~\
												~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd");
					PlayerTextDrawShow(playerid, StyleTD[playerid] );
					SetPlayerAttachedObject(playerid, 4, 19079, 1, 0.337032, -0.092037, 0.171890, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
					PlayerInfo[playerid][P_StyleStage] = OTHERITEMS;
					g_PlayerData[playerid] |= e_ON_STYLE;
					SetPVarInt(playerid, "Slot", 5);
					SetPlayerVirtualWorld(playerid, 150 + playerid);
				}
				case 5:
				{
				    PlayerTextDrawSetString(playerid, StyleTD[playerid], " ");
				    PlayerTextDrawHide(playerid, StyleTD[playerid]);
				    TogglePlayerControllable(playerid, true);

				    PlayerTele(playerid, GetPVarFloat(playerid, "AfterClothesX"), GetPVarFloat(playerid, "AfterClothesY"), GetPVarFloat(playerid, "AfterClothesZ"), GetPVarInt(playerid, "AfterClothesInt"), GetPVarFloat(playerid, "AfterClothesA"), GetPVarInt(playerid, "AfterClothesWorld"));

					DeletePVar(playerid, "AfterClothesX");
					DeletePVar(playerid, "AfterClothesY");
					DeletePVar(playerid, "AfterClothesZ");
					DeletePVar(playerid, "AfterClothesA");
					DeletePVar(playerid, "AfterClothesInt");
					DeletePVar(playerid, "AfterClothesWorld");

				    g_PlayerData[playerid] &= ~e_ON_STYLE;
				}
				case 6:
				{
				    ShowPlayerDialogEx(playerid, DeleteItem, DIALOG_STYLE_LIST, "Ruha levetése", "{" #XCOLOR_LIGHTBLUE "}Szemüveg\n{" #XCOLOR_LIGHTBLUE "}Óra\n{" #XCOLOR_LIGHTBLUE "}Sapka\n{" #XCOLOR_LIGHTBLUE "}Fegyver\n{" #XCOLOR_LIGHTBLUE "}Egyéb dolog\n", "Levet", "Vissza");
				}
				case 7:
				{
					new
					    i;
					for( ; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
				    {
						if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) continue;
						RemovePlayerAttachedObject(playerid, i);
					}
					PlayerTextDrawSetString(playerid, StyleTD[playerid], " ");
					TogglePlayerControllable(playerid, true );
					PlayerTextDrawHide(playerid, StyleTD[playerid]);
					PlayerTele(playerid, GetPVarFloat(playerid, "AfterClothesX"), GetPVarFloat(playerid, "AfterClothesY"), GetPVarFloat(playerid, "AfterClothesZ"), GetPVarInt(playerid, "AfterClothesInt"), GetPVarFloat(playerid, "AfterClothesA"), GetPVarInt(playerid, "AfterClothesWorld"));

					DeletePVar(playerid, "AfterClothesX");
					DeletePVar(playerid, "AfterClothesY");
					DeletePVar(playerid, "AfterClothesZ");
					DeletePVar(playerid, "AfterClothesA");
                    g_PlayerData[playerid] &= ~e_SAVE_STYLE;

                    PlayerInfo[playerid][P_GlassesCount] = -1;
					PlayerInfo[playerid][P_WatchesCount] = -1;
					PlayerInfo[playerid][P_HatsCount] = -1;
					PlayerInfo[playerid][P_WeaponsCount] = -1;
					PlayerInfo[playerid][P_OthersCount] = -1;

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `clothes` = '0,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", PlayerInfo[playerid][P_GlassesCount], PlayerInfo[playerid][P_WatchesCount], PlayerInfo[playerid][P_WeaponsCount], PlayerInfo[playerid][P_OthersCount], PlayerInfo[playerid][P_HatsCount], GetPVarInt(playerid, "Weapons"), GetPVarInt(playerid, "wHand"), PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
				case 8:
				{
				    g_PlayerData[playerid] &= ~e_ON_STYLE;
                    g_PlayerData[playerid] |= e_SAVE_STYLE;

				    PlayerTextDrawSetString(playerid, StyleTD[playerid], " ");
				    PlayerTextDrawHide(playerid, StyleTD[playerid]);
				    TogglePlayerControllable(playerid, true);

				    PlayerTele(playerid, GetPVarFloat(playerid, "AfterClothesX"), GetPVarFloat(playerid, "AfterClothesY"), GetPVarFloat(playerid, "AfterClothesZ"), GetPVarInt(playerid, "AfterClothesInt"), GetPVarFloat(playerid, "AfterClothesA"), GetPVarInt(playerid, "AfterClothesWorld"));

					DeletePVar(playerid, "AfterClothesX");
					DeletePVar(playerid, "AfterClothesY");
					DeletePVar(playerid, "AfterClothesZ");
					DeletePVar(playerid, "AfterClothesA");
					DeletePVar(playerid, "AfterClothesInt");
					DeletePVar(playerid, "AfterClothesWorld");

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `clothes` = '1,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", PlayerInfo[playerid][P_GlassesCount], PlayerInfo[playerid][P_WatchesCount], PlayerInfo[playerid][P_WeaponsCount], PlayerInfo[playerid][P_OthersCount], PlayerInfo[playerid][P_HatsCount], GetPVarInt(playerid, "Weapons"), GetPVarInt(playerid, "wHand"), PlayerInfo[playerid][pRegID]);
				    mysql_function_query(1, query, false, "", "");
				}
			}
		}
		case DIALOG_CARSPAWNER:
		{
			if(!response)
				return 0;

			new
				count;
			dline[0] = EOS;
			for(new i; i != sizeof(g_szVehicleNames); i++)
			{
				if(strfind(g_szVehicleNames[i], inputtext, true) != -1)
				{
		            count ++;
					strcat(dline, g_szVehicleNames[i]);
					strcat(dline, "\n");
				}
			}

			if(count)
			{
				format(i_str, sizeof(i_str), "{" #XCOLOR_LIGHTBLUE "}Találtatok száma: {" #XCOLOR_LIGHTRED "}%d", count);
				ShowPlayerDialogEx(playerid, DIALOG_CARSPAWNER + 1, DIALOG_STYLE_LIST, i_str, dline, "Spawnol", "Mégse");
			}
			else
			{
				ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_LIGHTBLUE "}Találtatok száma: {" #XCOLOR_LIGHTRED "}0", "{" #XCOLOR_WHITE "}A megadott névrészletre nincs találat!", "Ok");
			}
		}
		case DIALOG_CARSPAWNER + 1:
		{
			if(!response)
			{
				if(GetPVarType(playerid, "BackForSpawner"))
				{
			 		ShowPlayerDialogEx(playerid, DIALOG_CARSPAWNER, DIALOG_STYLE_INPUT, "{" #XCOLOR_BLUE "}Jármû keresése", "Lentre írj be egy névrészletet\n\n{" #XCOLOR_LIGHTRED "}Például: {" #XCOLOR_PROPGREEN "}inf, tur, a", "Keresés", "Mégse");
			 		DeletePVar(playerid, "BackForSpawner");
				}
            	return 1;
			}

			new
			    iModel = GetVehicleModelIDFromName(inputtext);
            if(GetVehicleType(iModel) == VEHICLE_TRAIN) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VONATOT_NEM_SPAWNOLHATSZ"));

		    if(GetPVarType(playerid, "RaceParticipant"))
		    {
                if(iModel == 432) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VERSENYBEN_TANKOT_NEM"));
				switch(RaceType)
				{
					case 0:
					{
						switch(GetVehicleType(iModel))
						{
							case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET"));
						}
					}
					case 1:
					{
						if(GetVehicleType(iModel) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
					}
					case 2:
					{
						new
						    iType = GetVehicleType(iModel);
						if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
						{
		                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
							return 1;
						}
					}
					case 3: return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EBBE_A_VERSENYBE_CSAK_GYALOG"));
				}
			}

			if(CarSpawner(playerid, iModel))
				InfoTD_MSGf(playerid, 3500,  LANG(playerid, "MSG_WSPAWNOLTAL_EGY_YHWT"), inputtext);

			DeletePVar(playerid, "BackForSpawner");
		}

		case DIALOG_NETWORK :
		{
			if(!response)
				return DeletePVar(playerid, "NetWorkID");

            player1 = GetPVarInt(playerid, "NetWorkID");
      		GetPlayerNetworkStats(player1, dline, sizeof(dline));
			GetPlayerVersion(player1, name, sizeof(name));

		    strcat(dline, "Version: ");
		    strcat(dline, name);

		    format(i_str, sizeof(i_str), "Network Statisztika: {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
			ShowPlayerDialogEx(playerid, DIALOG_NETWORK, DIALOG_STYLE_MSGBOX, i_str, dline, "Felújít", "Kilépés");
		}
		case DIALOG_NETWORK + 1:
		{
			if(!response)
				return 0;

		    GetNetworkStats(dline, sizeof(dline));
			ShowPlayerDialogEx(playerid, DIALOG_NETWORK + 1, DIALOG_STYLE_MSGBOX, "Szerver Network Statisztika", dline, "Felújít", "Kilépés");
		}

		case DIALOG_FINDPLAYER:
		{
			if(!response)
			    return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>d{s[64]}", iVal);
            printf("findplayer: %d, %s", iVal, inputtext);
			SetPVarInt(playerid, "fPlayerID", iVal);

			dline = "Adatok Megtekintése\n{" #XCOLOR_GREEN "}A.K.A Megtekintése\n{" #XCOLOR_BLUE "}Berakás HQ-ba\n{" #XCOLOR_YELLOW "}Kidobás HQ-ból";

			if(GetPVarInt(playerid, "Level") > 2 || IsPlayerAdmin(playerid))
			{
				strcat(dline, "\n{" #XCOLOR_RED "}Kitiltás");
			}
			ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 1, DIALOG_STYLE_LIST, "Mit szeretnél csinálni?", dline, "Választ", "Mégse");
/*
			//printf("DIALOG_FINDPLAYER: %s", inputtext);
			mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `players` WHERE `name` = '%e'", inputtext);
			mysql_function_query(1, query, true, "THREAD_Findplayer_1", "dd", playerid, g_pQueryQueue[playerid]);
*/
		}
		case DIALOG_FINDPLAYER + 1:
		{
			if(!response)
			    return DeletePVar(playerid, "fPlayerID");

			switch(listitem)
			{
				case 0:
				{
					printf("geci regid: %d", GetPVarInt(playerid, "fPlayerID"));
					mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid, "fPlayerID"));
					mysql_function_query(1, query, true, "THREAD_Findplayer_2", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 1:
				{
					if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
						return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

					mysql_format(1, query, sizeof(query), "SELECT `name`, `ip`, `reg_id` FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid, "fPlayerID"));
					mysql_function_query(1, query, true, "THREAD_Findplayer_4", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 2:
				{
					ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 2, DIALOG_STYLE_LIST, "Játékos berakása HQ-ba", "Grove\nSevile\nL&M", "Választ", "Mégse");
				}
				case 3:
				{
					if(!response)
						return DeletePVar(playerid, "fPlayerID");

					mysql_format(1, query, sizeof(query), "SELECT `name`, `hq` FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid, "fPlayerID"));
 					mysql_function_query(1, query, true, "THREAD_RemoveHQ", "dd", playerid, g_pQueryQueue[playerid]);
				}
				case 4:
				{
					if(!response)
						return DeletePVar(playerid, "fPlayerID");

					mysql_format(1, query, sizeof(query), "SELECT `player` FROM `bans` WHERE `reg_id` = %d", GetPVarInt(playerid, "fPlayerID"));
					mysql_function_query(1, query, true, "THREAD_Findplayer_3", "dd", playerid, g_pQueryQueue[playerid]);
				}
			}
		}
		case DIALOG_FINDPLAYER + 2:
		{
			if(!response)
				return DeletePVar(playerid, "fPlayerID");

			mysql_format(1, query, sizeof(query), "SELECT `name`, `hq` FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid, "fPlayerID"));
			mysql_function_query(1, query, true, "THREAD_SetHQ", "ddsd", playerid, listitem + 1, inputtext, g_pQueryQueue[playerid]);
		}
		case DIALOG_FINDPLAYER + 50:
		{
			if(!response)
			    return 0;

			OnDialogResponse(playerid, DIALOG_FINDPLAYER, 1, 0, inputtext);
		}
		case DIALOG_MEMBERS:
		{
			if(!response)
			    return 0;

			mysql_format(1, query, sizeof(query), "SELECT `name` FROM `players` WHERE `hq` = %d", listitem + 1);
			mysql_function_query(1, query, true, "THREAD_Members", "dd", playerid, g_pQueryQueue[playerid]);
		}
		case DIALOG_MEMBERS + 1:
		{
			if(!response)
			{
				if(GetPVarType(playerid, "MembersNoBack"))
				{
					DeletePVar(playerid, "MembersNoBack");
				}
				else
				{
					cmd_members(playerid, "");
				}
				return 1;
			}

            OnDialogResponse(playerid, DIALOG_FINDPLAYER, 1, 0, inputtext);
		}
		case DIALOG_FINDOBJECT:
		{
			if(!response)
   				return 0;

            SetPVarString(playerid, "VO_Slot", inputtext);
			ShowPlayerDialogEx(playerid, DIALOG_FINDOBJECT + 1, DIALOG_STYLE_INPUT, !"Írd be a slotot!", !"Lentre írd be az object slotját!", !"Oké", !"Mégse");
		}
		case DIALOG_FINDOBJECT + 1:
		{
			if(!response)
   				return DeletePVar(playerid, "VO_Slot");

			new
			    slot;
	        if(!IsNumeric(inputtext) || isnull(inputtext))
			{
				slot = 0;
			}
			else
			{
            	if(!(0 <= (slot = strval(inputtext)) <= 9)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));

				if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_9ES_SLOTBA_1"));
			}

			GetPVarString(playerid, "VO_Slot", i_str, sizeof(i_str));
			mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `objectname` = '%e'", i_str);
			mysql_function_query(1, query, true, "THREAD_LoadHoldingObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);

			DeletePVar(playerid, "VO_Slot");
		}
		case DIALOG_FINDOBJECT + 2:
		{
			if(!response)
				return 0;

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
            if(IsPlayerInDynamicVehicle(playerid, g_BonusCarID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTORA_NEM_RAKHATSZ"));

			SetPVarString(playerid, "VO_Slot", inputtext);
			ShowPlayerDialogEx(playerid, DIALOG_VOLIST + 1, DIALOG_STYLE_INPUT, "Írd be a slotot!", "Lentre írd be az object slotját!", "Oké", "Mégse");
		}
		case DIALOG_NITROSTATE:
		{
			if(!response)
				return (GetPVarInt(playerid, "CPanelRe") == 25) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			new
				iNosModel;
			switch(listitem)
			{
				case 0:
				{
                    DeletePVar(playerid, "NOS");
					return 1;
				}
				case 1:
				{
                    iNosModel = 1009;
				}
				case 2:
				{
                    iNosModel = 1008;
				}
				case 3:
				{
                    iNosModel = 1010;
				}
				case 4:
				{
                    iNosModel = 1009;
				}
				case 5:
				{
                    iNosModel = 1008;
				}
				case 6:
				{
                    iNosModel = 1010;
				}
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				vID = GetPlayerDynamicVehicleID(playerid);
				new
					iCarModel = GetDynamicVehicleModel(vID);

				for(new i; i != 29; i++)
				{
				    if(iCarModel == InvalidNosVehicles[i]) break;
					AddDynamicVehicleComponent(vID, iNosModel);
					break;
				}

			}
			SetPVarInt(playerid, "NOS", listitem);

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHNITRO_TIPUS_ATTALLITVAW_Y"), inputtext);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `nitrostate` = %d WHERE `reg_id` = %d", listitem, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");

            if(GetPVarInt(playerid, "CPanelRe") == 25) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
		}
		case DIALOG_NEON:
		{
			if(!response)
				return 0;

            if(listitem != 6)
			{
			    valstr(name, listitem);
				cmd_neon2(playerid, name);
			}
			else
			{
	  			vID = GetPlayerDynamicVehicleID(playerid);
	            for(new i = MAX_VEH_OBJECT - 2; i != MAX_VEH_OBJECT; i++)
				{
					if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

					DestroyDynamicObject(gVehicleObject[vID][i]);
		            gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
		            gVehicleObject[vID][i] = INVALID_OBJECT_ID;
				}
			}
		}
		case DIALOG_HOUSERIASZTO:
		{
			if(!response)
				return (g_pOtherFlags[playerid] & e_HOUSEMENU) ? (cmd_housemenu(playerid, "")) : (0);

			houseid = GetPVarInt(playerid, "PlayerProp");
			switch(listitem)
			{
				case 0:
				{
					if(GetGVarInt("HouseRiaszto", houseid) == 0)
					{
		                SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_A_HAZADBAN_RIASZTO"));
						goto Ide;
					}

					SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TOROLTED_A_RIASZTOT_A_HAZADBOL"));
				}
				case 1:
				{
					if(GetGVarInt("HouseRiaszto", houseid))
					{
		                SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_HAZADBAN_MAR_VAN_RIASZTO"));
						goto Ide;
					}

					MoneyCheck(playerid, 250000);
					SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_VETTEL_RIASZTOT_A_HAZADBA_TIPUS"));
				}
				case 2:
				{
					if(GetGVarInt("HouseRiaszto", houseid) == 2)
					{
		                SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_HAZADBAN_MAR_VAN_EGY"));
						goto Ide;
					}

					MoneyCheck(playerid, 450000);
					SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_VETTEL_RIASZTOT_A_HAZADBA_TIPUS_1"));
				}
			}

			SetGVarInt("HouseRiaszto", listitem, houseid);
			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `riaszto` = %d WHERE `id` = %d", listitem, houseid);
			mysql_function_query(1, query, false, "", "");

			Ide:
			if(g_pOtherFlags[playerid] & e_HOUSEMENU) cmd_housemenu(playerid, "");
		}
		case DIALOG_HOUSEHACKDETECTOR:
		{
			if(!response)
				return 0;

			houseid = GetPVarInt(playerid, "PlayerProp");

			if(inputtext[0] == 'V') // Vásárlás
			{
				if(GetPlayerMoneyEx(playerid) < 500000)
				{
					SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_2"));
					goto Ide;
				}
				GivePlayerMoneyEx(playerid, -500000, "HackDetectorBuy");
				SetGVarInt("Hackdetector", 1, houseid);
				mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `hackdetector` = 1 WHERE `id` = %d", houseid);
				mysql_function_query(1, query, false, "", "");

				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHHACKDETECTOR_MEGVEVE_MOSTMAR"));
			}
			else // Eladás
			{
				GivePlayerMoneyEx(playerid, 250000, "HackDetectorSell");

				SetGVarInt("Hackdetector", 0, houseid);
				mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `hackdetector` = 0 WHERE `id` = %d", houseid);
				mysql_function_query(1, query, false, "", "");

				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHHACKDETECTOR_ELADVA_MOSTMAR"));

			}

			Ide:
			if(g_pOtherFlags[playerid] & e_HOUSEMENU) cmd_housemenu(playerid, "");
		}
		case DIALOG_HOUSEMENU - 1:
		{
			if(g_pOtherFlags[playerid] & e_HOUSEMENU)
			    cmd_housemenu(playerid, "");

		}
		case DIALOG_HOUSEMENU:
		{
			if(!response)
			{
                g_pOtherFlags[playerid] &= ~e_HOUSEMENU;
                return 0;
			}

            houseid = GetPVarInt(playerid, "PlayerProp");
			switch(listitem)
			{
				case 0:
				{
					cmd_prophelp(playerid, "");
				}
				case 1,2,3: cmd_housemenu(playerid, "");
				case 4: // Jelszó
				{
					if(!GetGVarType("PropLocked", houseid))
					{
						cmd_lockprop(playerid, "");
					}
					else
					{
						cmd_unlockprop(playerid, "");
					}
				}
				case 5: // Riasztó
				{
					cmd_riaszto(playerid, "");
				}
				case 6: // Hackdetector
				{
					cmd_hackdetector(playerid, "");
				}
				case 7: // Houseelements
				{
				    cmd_buyelements(playerid, "");
				}
				case 8: // Raktár
				{
                   cmd_myelements(playerid, "");
				}
				case 10:
				{
				    SendClientMessage(playerid,-1,"Jelenleg nem mûködik");
				    /*dline[0] = EOS;
				    strcat(dline, "{" #XCOLOR_BLUE "}Bútorok\n");
					strcat(dline, "{" #XCOLOR_BLUE "}Faliképek\n");
				    strcat(dline, "{" #XCOLOR_BLUE "}Szórakoztatás\n");
				    strcat(dline, "{" #XCOLOR_BLUE "}Falak & szõnyegek\n");
				    strcat(dline, "{" #XCOLOR_BLUE "}Fürdõszoba\n");
				    strcat(dline, "{" #XCOLOR_BLUE "}Konyha\n");

					ShowPlayerDialogEx(playerid, DIALOG_HOUSEMENU_BUTOROK, DIALOG_STYLE_LIST, "Lakberendezés", dline, "Oké", "Kilépés");*/
				}
			}
		}
		case DIALOG_HOUSEMENU + 1: // Jelszó
		{
			if(!response)
				return cmd_housemenu(playerid, "");

			cmd_lockprop(playerid, inputtext);
			cmd_housemenu(playerid, "");

			return 1;
		}
		case DIALOG_HOUSEELEMENTS:
		{
			if(!response)
			{
				if(g_pOtherFlags[playerid] & e_HOUSEMENU)
				    cmd_housemenu(playerid, "");
				return 0;
			}

//			CHECK_SZINT(playerid, SZINT_RABOL + listitem);

			houseid = GetPVarInt(playerid, "PlayerProp");
			strunpack(country, g_HouseElementStruct[listitem][e_ElementName]);

			if(g_HouseElements[houseid] & (1 << listitem))
			{
            	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_HAZADBAN_MAR_VAGY_EGY"), country);
				return 1;
			}

			MoneyCheck(playerid, g_HouseElementStruct[listitem][e_Price]);

			g_HouseElements[houseid] |= (1 << listitem);
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_RAKTAL_A_HAZADBA_EGY__NEVU"), country, g_HouseElementStruct[listitem][e_Price], g_HouseElementStruct[listitem][e_Price] / HOUSE_ELEMENT_OSZTO);

			cmd_buyelements(playerid, "");

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[houseid], houseid);
			mysql_function_query(1, query, false, "", "");
		}
		case DIALOG_HOUSEELEMENTS + 1:
		{
			if(!response)
				return 0;

			new
			    iID;
            sscanf(inputtext, "p<(>{s[32]}d", iID);

            //printf("iID: %d", iID);
			SetPVarInt(playerid, "ElementID", iID);

			format(i_str, 64, "{" #XCOLOR_BLUE "}Házadban lévõ dolgok -> %s", inputtext);
			ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 2, DIALOG_STYLE_LIST, i_str, "Raktárb helyezés\nEladás", !"Ok", !"Mégse");
		}
		case DIALOG_HOUSEELEMENTS + 2:
		{
			if(!response)
			{
				if(g_pOtherFlags[playerid] & e_HOUSEMENU)
				    cmd_housemenu(playerid, "");
				return 0;
			}

			new
			    iID = GetPVarInt(playerid, "ElementID");

			houseid = GetPVarInt(playerid, "PlayerProp");
            strunpack(country, g_HouseElementStruct[iID][e_ElementName]);
			switch(listitem)
			{
				case 0:
				{
					if(g_pRaktar[playerid][iID] == 10) return SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MAXIMUM_SZAM_ELERVE_A__NEVU"), country);

					SendClientMessagef(playerid, COLOR_SAMP, LANG(playerid, "MSG_RAKTARBA_HELYEZTED_A_HAZADBOL"), country);
					g_pRaktar[playerid][iID]++;
                    UpdatePlayerElementData(playerid);
				}
				case 1:
				{
					new
					    iSzazalek = randomex(45, 80),
					    iPrice = (g_HouseElementStruct[iID][e_Price] / 100) * iSzazalek;

                    SendClientMessagef(playerid, COLOR_SAMP, LANG(playerid, "MSG_ELADTAD_A__NEVU_TARGYADAT_KAPTAL"),country,iPrice,iSzazalek);

					//SendClientMessagef(playerid, COLOR_WHITE, "Eladtad a {" #XCOLOR_YELLOW "}%s {" #XCOLOR_WHITE "}nevû tárgyadat! Kaptál érte: {" #XCOLOR_GREEN "}$%d (Ára %d%s-a)", country, iPrice, iSzazalek, "%%");
                    GivePlayerMoneyEx(playerid, iPrice, "SellHouseElements");
				}
			}
			DeletePVar(playerid, "ElementID");
  			g_HouseElements[houseid] &= ~(1 << iID);

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[houseid], houseid);
			mysql_function_query(1, query, false, "", "");
		}
		case DIALOG_HOUSEELEMENTS + 5:
		{
			if(!response)
				return 0;

			//if((houseid = IsPlayerNearProperty_In(playerid, 35.0)) == -1) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_TUL_MESSZE_VAGY_A_HAZ_BELSEJETOL"));

            houseid = GetPlayerHouseID_ByZone(playerid);

    		new
			    iID;
            sscanf(inputtext, "p<(>{s[32]}d", iID);

			foreach(new i: Player)
			{
				if(GetPVarInt(i, "LofaszHouseID") == houseid && GetPVarInt(i, "LofaszEllopott") == iID)
				{
					strunpack(country, g_HouseElementStruct[iID][e_ElementName]);
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_AZ__NEVU_TARGYAT_EPPEN_"), country, GetPlayerColor(i) >>> 8, pName(i), i);
					return 1;
				}
			}

			GetPlayerPos(playerid, g_pRobPos[playerid][0], g_pRobPos[playerid][1], g_pRobPos[playerid][2]);

            //printf("iID: %d", iID);
			SetPVarInt(playerid, "LofaszEllopott", iID);
        	SetPVarInt(playerid, "LofaszHouseID", houseid);
        	SetPVarInt(playerid, "LastRabolt", 10);

            g_pRobCount{playerid} = 0xFF;
            SetGoodAllowed(playerid, false);
            DisableRemoteVehicleCollisions(playerid, false);

			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BLOPAS_HELKEZDVEPHNRVAR"));

			switch(GetGVarInt("HouseRiaszto", houseid))
			{
				case 0: SendClientMessageToAll(0xFF5200AA, "MSG__NEVTELEN_BEJELENTES__VALAKI_1");
				case 1: SendClientMessageToAllf(0xFF5200AA, "MSG__RIASZTO___EPPEN_RABOL_EGY", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
				case 2:
				{
                    GetGVarString("PropName", i_str, sizeof(i_str), houseid);
                    RemoveHexColorFromString(i_str);
					SendClientMessageToAllf(0xFF5200AA, "MSG__RIASZTO___EPPEN_RABOLJA_A", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str);
				}
			}
		}

		case DIALOG_HOUSEELEMENTS + 20:
		{
			if(!response)
				return 0;

			new
			    iID;
            sscanf(inputtext, "p<(>{s[32]}d", iID);

            //printf("iID: %d", iID);
			SetPVarInt(playerid, "ElementID", iID);

			format(i_str, 64, "{" #XCOLOR_GREEN "}Raktárban lévõ dolgok -> %s", inputtext);
            if(!GetPVarType(playerid, "PlayerProp"))
            {
                ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 21, DIALOG_STYLE_LIST, i_str, "{" #XCOLOR_RED "}Berakás a házba (NINCS HÁZAD!)\nEladás", !"Ok", !"Mégse");
			}
			else
			{
				ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 21, DIALOG_STYLE_LIST, i_str, "Berakás a házba\nEladás", !"Ok", !"Mégse");
			}
		}

		case DIALOG_HOUSEELEMENTS + 21:
		{
			if(!response)
				return 0;

			new
			    iID = GetPVarInt(playerid, "ElementID");
			houseid = GetPVarInt(playerid, "PlayerProp");

			strunpack(country, g_HouseElementStruct[iID][e_ElementName]);
			switch(listitem)
			{
				case 0: // Házba berakás
				{
                    if(!GetPVarType(playerid, "PlayerProp")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD"));
//                    CHECK_SZINT(playerid, SZINT_RABOL + iID);

					if(!g_pRaktar[playerid][iID])
					{
						return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_EGYETLEN_EGY_DARAB"), country);
					}

					if(g_HouseElements[houseid] & (1 << iID))
					{
		            	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_HAZADBAN_MAR_VAGY_EGY"), country);
						return 1;
					}

                    g_HouseElements[houseid] |= (1 << iID);
					g_pRaktar[playerid][iID] --;
					UpdatePlayerElementData(playerid);

					mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[houseid], houseid);
					mysql_function_query(1, query, false, "", "");

					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BERAKTAD_A_HAZADBA_A__NEVU"), country);
				}
				case 1: // Eladás
				{
					if(!g_pRaktar[playerid][iID])
					{
						return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_EGYETLEN_EGY_DARAB"), country);
					}
					g_pRaktar[playerid][iID] --;
					UpdatePlayerElementData(playerid);

					new
					    iSzazalek = randomex(45, 80),
					    iPrice = (g_HouseElementStruct[iID][e_Price] / 100) * iSzazalek;

					SendClientMessagef(playerid, COLOR_WHITE, "Eladtad a {" #XCOLOR_YELLOW "}%s {" #XCOLOR_WHITE "}nevû tárgyadat! Kaptál érte: {" #XCOLOR_GREEN "}$%d (Ára %d%s-a)", country, iPrice, iSzazalek, "%%");
                    GivePlayerMoneyEx(playerid, iPrice, "SellHouseElements");
				}
			}
			DeletePVar(playerid, "ElementID");
		}
		case DIALOG_HOUSEELEMENTS + 31:
		{
			if(!response)
				return ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 31, DIALOG_STYLE_LIST, "Mit szeretnél a tárgyal csinálni?", "Berakás a házba\nBerakás a raktárba\nEladás", !"Ok", !"Mégse");

			new
				iID = GetPVarInt(playerid, "LofaszEllopott"),
				iRobHouseID = GetPVarInt(playerid, "LofaszHouseID");
			houseid = GetPVarInt(playerid, "PlayerProp");
            strunpack(country, g_HouseElementStruct[iID][e_ElementName]);

			switch(listitem)
			{
				case 0: // Berakás a házba
				{
//                    CHECK_SZINT(playerid, SZINT_RABOL + iID);

					if(g_HouseElements[houseid] & (1 << iID))
					{
		            	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_HAZADBAN_MAR_VAGY_EGY"), country);
                        ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 31, DIALOG_STYLE_LIST, "Mit szeretnél a tárgyal csinálni?", "Berakás a házba\nBerakás a raktárba\nEladás", !"Ok", !"Mégse");
						return 1;
					}

					g_HouseElements[houseid] |= (1 << iID); // A te házadba beletesszük
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BERAKTAD_A_HAZADBA_A__NEVU_1"), country);

					// A saját ház bitjeit csak akkor frissítjük, ha történt a házzal kapcsolatos dolgokkal valami..
					mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[houseid], houseid);
					mysql_function_query(1, query, false, "", "");
				}
				case 1: // Raktárba rakás
				{
                    if(g_pRaktar[playerid][iID] == 10) // Ha elérte a maximumot
					{
						SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MAXIMUM_SZAM_ELERVE_A__NEVU"), country);
                        ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 31, DIALOG_STYLE_LIST, "Mit szeretnél a tárgyal csinálni?", "Berakás a házba\nBerakás a raktárba\nEladás", !"Ok", !"Mégse");
						return 1;
					}

					g_HouseElements[iRobHouseID] &= ~(1 << iID); // A régi házból töröljük
                    g_pRaktar[playerid][iID] ++;
                    UpdatePlayerElementData(playerid);

					mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[houseid], houseid);
					mysql_function_query(1, query, false, "", "");

                    SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BERAKTAD_A_RAKTARODBA_A__NEVU"), country);
				}
				case 2: // Eladás
				{
					new
					    iSzazalek = randomex(45, 80),
					    iPrice = (g_HouseElementStruct[iID][e_Price] / 100) * iSzazalek;

					SendClientMessagef(playerid, COLOR_WHITE, "Eladtad a {" #XCOLOR_YELLOW "}%s {" #XCOLOR_WHITE "}nevû tárgyadat! Kaptál érte: {" #XCOLOR_GREEN "}$%d (Ára %d%s-a)", country, iPrice, iSzazalek, "%%");
                    GivePlayerMoneyEx(playerid, iPrice, "SellHouseElements");
				}
			}
			PVarIntFel(playerid,"RablasokSzama");
			// A régi házból töröljük
			g_HouseElements[iRobHouseID] &= ~(1 << iID);

			DeletePVar(playerid, "LofaszEllopott");
			DeletePVar(playerid, "LofaszHouseID");

			// Kirabolt ház bitjeinek frissítése
			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `elementbits` = %d WHERE `id` = %d", g_HouseElements[iRobHouseID], iRobHouseID);
			mysql_function_query(1, query, false, "", "");

		}

		case DIALOG_DUEL_LOCATION:
		{
			if(!response)
				return ShowDuelWeaponSelect(playerid);

			new
			    bool:bFegyver;
			for(new i; i != 13; i++)
			{
                switch(g_pDuelWeapon[playerid]{i})
                {
					case 0xFF: continue; // Ha nincs ebben a slotban fegyver, akkor továbbmegyünk
					case WEAPON_TEARGAS, WEAPON_CAMERA, WEAPON_NIGHTVISION, WEAPON_INFRARED: continue; // Ha olyan fegyvert válaszott, amivel nem lehet sebezni - szintén továbbmegyünk
					default: // Ha találtunk fegyvert, befejzzük a ciklust és megyünk tovább
					{
						bFegyver = true;
						break;
					}
				}
			}

			if(!bFegyver)
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VALASZOTTAL_FEGYVERT"));
			    ShowDuelWeaponSelect(playerid);
                return 1;
			}

            g_pDuelLocation{playerid} = listitem;
			strunpack(name, g_fDuel[listitem][e_szName], sizeof(name));

			player1 = g_pDuelPlayer[playerid];
			SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG__HELY_KIVALASZTVA_"), name);
			SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG___NEVU_JATEKOSNAK_A_KIHIVAS"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

			SendClientMessagef(player1, COLOR_PROPGREEN, LANG(player1, "MSG___PARBAJRA_HIVOTT_TEGED_INF"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
			InfoTD_MSG(player1, 6000, LANG(player1, "MSG_BHVALAKI_HPARBAJRA_HHIVOTTR"));
			PlayerPlaySound(player1, 1058);
		}
		case DIALOG_DUEL_LOCATION + 1:
		{
			// ID megkeresése
			player1 = g_pDuelCaller[playerid];
			printf("anyád fasza");

			if(!response)
			{
                SendClientMessagef(player1, COLOR_DEFAULT, LANG(player1, "MSG___ELUTASITOTTA_A_PARBAJT_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
                SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__PARBAJ_ELUTASITVA__ELLEN"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

				g_pDuelCaller[playerid] = INVALID_PLAYER_ID;
				g_pDuelPlayer[player1] = INVALID_PLAYER_ID;
                DeletePVar(player1, "InDuel");
				return 1;
			}

			new
			    iLoc = g_pDuelLocation{player1};

			ResetPlayerWeapons(playerid);
			ResetPlayerWeapons(player1);

			datez = GetPVarInt(player1, "DuelRounds");
			// Duel event létrehozása
			new
			    duelid = -1;
			for(new i; i != (MAX_PLAYERS / 2); i++)
			{
				// Megkeressük az üres ID-t
				if(!Bit_Get(g_bDuelActive, i))
				{
                    Bit_Set(g_bDuelActive, i, true);

                    g_pDuelID{player1} = i;
                    g_pDuelID{playerid} = i;

		            g_DuelPlayer[i][0] = player1;
		            g_DuelPlayer[i][1] = playerid;

                    g_DuelLocation{i} = iLoc;

					g_DuelMaxRound[i] = datez;
					g_DuelRounds[i] = 0;

                    g_DuelHealth{i} = GetPVarInt(player1, "DuelHealth");
                    g_DuelArmour{i} = GetPVarInt(player1, "DuelArmour");

                    duelid = i;
					printf("allocate duel: %d", i);
					break;
				}
			}

            SetGoodAllowed(playerid, false);
            SetGoodAllowed(player1, false);

			SetPlayerHealth(playerid, float(g_DuelHealth{duelid}));
			SetPlayerHealth(player1, float(g_DuelHealth{duelid}));

			SetPlayerArmour(playerid, float(g_DuelArmour{duelid}));
			SetPlayerArmour(player1, float(g_DuelArmour{duelid}));

			PlayerTele(playerid, g_fDuel[iLoc][e_fDuelPos][0], g_fDuel[iLoc][e_fDuelPos][1], g_fDuel[iLoc][e_fDuelPos][2], g_fDuel[iLoc][e_iInterior], g_fDuel[iLoc][e_fDuelPos][3], DM_ZONE_DUEL + duelid);
			PlayerTele(player1, g_fDuel[iLoc][e_fDuelPos][4], g_fDuel[iLoc][e_fDuelPos][5], g_fDuel[iLoc][e_fDuelPos][6], g_fDuel[iLoc][e_iInterior], g_fDuel[iLoc][e_fDuelPos][7], DM_ZONE_DUEL + duelid);

			DeletePVar(player1, "DuelRounds");
			DeletePVar(player1, "DuelHealth");
			DeletePVar(player1, "DuelArmour");


			for(new i; i != 13; i++)
			{
				if(g_pDuelWeapon[player1]{i} == 0xFF) continue;

				GivePlayerWeapon(playerid, g_pDuelWeapon[player1]{i}, 5000);
				GivePlayerWeapon(player1, g_pDuelWeapon[player1]{i}, 5000);

                g_DuelWeapons[duelid]{i} = g_pDuelWeapon[player1]{i};
			}

			SetPVarInt(playerid, "InDuel", 2);
			SetPVarInt(player1, "InDuel", 2);

			g_pGamesData[playerid] |= e_IN_DUEL;
			g_pGamesData[player1] |= e_IN_DUEL;
		}
		case DIALOG_DUEL_LOCATION + 3:
		{
			if(!response)
			    return 0;

			switch(listitem)
			{
				case 0: // Fönt
				{
					PlayerTele(playerid, 2181.1003, -2221.1794, 924.1041, 0, 182.6750, 8);
					LoadObjectForPlayer(playerid);
				}
				case 1: // Lent
				{
					PlayerTele(playerid, 2180.8367,-2268.9678,923.1041, 0, 359.3733, 8);
				}
			}
		}

		case DIALOG_SPLIST:
		{
			if(!response)
			    return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>d{s[64]}", iVal);

			mysql_format(1, query, sizeof(query), "SELECT * FROM `savepositions` WHERE `id` = %d", iVal);
			mysql_function_query(1, query, true, "THREAD_LoadPosition", "ddd", playerid, iVal, g_pQueryQueue[playerid]);
		}
		case DIALOG_DERBYMAP:
		{
			if(!response)
			{
			    if(!(g_PlayerData[playerid] & e_CTC_VOTED))
				{
					ShowDerbyDialog(playerid);
					SendClientMessage(playerid, -1, LANG(playerid, "MSG_NE_CSUKD_BE_AZ_ABLAKOT_ELOSZOR"));
					return 1;
				}
			}

			if(g_DerbyStartTime)
			{
				printf("derby array index out of bounds");
				for(new x; x != MAX_DERBY_AVIABLE_MAPS; x++)
				{
					printf("%d - %d", x, g_DerbyAviableMaps{x});
				}
				return 1;
			}

            g_DerbyVotes[listitem]++;
            g_PlayerData[playerid] |= e_CTC_VOTED;

            if(g_DerbyAviableMaps{listitem} == 0xFF) return 1; // Érdekes... de KÕ!

            strunpack(name, g_DerbyNames[g_DerbyAviableMaps{listitem}], sizeof(name));
			format(tmp, 128, "{%06x}%s(%d) szavazata: %s (%d szavazat)", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, name, g_DerbyVotes[listitem]);

			foreach(Player, x)
			{
				if(!(g_pGamesData[x] & e_IN_DERBY)) continue;
				SendClientMessage(x, -1, tmp);
			}
			//SendClientMessageToAllf(-1, "%d, %d, %d, %d, %d, %d, %d", g_DerbyVotes[0], g_DerbyVotes[1], g_DerbyVotes[2], g_DerbyVotes[3], g_DerbyVotes[4], g_DerbyVotes[5], g_DerbyVotes[6]);
		}
		case DIALOG_TEXTDRAWS:
		{
			if(!response)
			    return (GetPVarInt(playerid, "CPanelRe") == 27) ? (cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe")) : (0);

			//printf("listitem tds: %d", listitem);

            if(listitem == 21)
			{
				g_pOtherFlags[playerid] ^= e_NO_TEXTDRAWS;

	            HideDefaultTextdraws(playerid);
	            ShowDefaultTextdraws(playerid);
			}
			else
			{
				i_str[0] = EOS;
				strcat(i_str, inputtext, sizeof(i_str));

	            g_pTDFlags[playerid] ^= e_TD_Flags:(1 << listitem);

	            HideDefaultTextdraws(playerid);
	            ShowDefaultTextdraws(playerid);
				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `tdflags` = %d WHERE `reg_id` = %d", g_pTDFlags[playerid], PlayerInfo[playerid][pRegID]);
			    mysql_function_query(1, query, false, "", "");
			}
            cmd_textdraws(playerid, ""); /*if(GetPVarInt(playerid, "CPanelRe") == 27)*/
		}
		case DIALOG_POSTA:
		{
			if(!response)
			    return 0;

			if(!inputtext[0])
			    return 0;

			if(g_pPostasTime[playerid] == 2)
			    return SendClientMessage(playerid, -1, LANG(playerid, "MSG_MAR_ELKEZDTED_A_LEVELHORDAST"));

			new
			    slot = -1,
			    id = -1,
			    len = strlen(inputtext),
			    len2 = len,
			    output_[4];

			while(inputtext[len2--] != '-') { }
			strmid(output_, inputtext, len2 + 3, len);
			id = strval(output_); // levél ID

			for(new i; i != 5; i++)
			{
				if(g_pLevelHelyek[playerid]{i} == id)
				{
					slot = -2;
					break;
				}
				else if(g_pLevelHelyek[playerid]{i} == 0xFF)
                {
                    slot = i;
                    break;
				}
			}

            if(g_pGamesData[playerid] & e_POSTAS)
            {
				if(slot == -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_MAXIMUM_5_LEVELET_VIHETSZ_MAGADDAL"));
				else if(slot == -2) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_IDE_MAR_VAN_EGY_LEVELED_EGYSZERRE"));
			}
			else
			{
				if(slot == -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_MAXIMUM_5_PIZZAT_VIHETSZ_MAGADDAL"));
				else if(slot == -2) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_IDE_MAR_VAN_EGY_PIZZAD_EGYSZERRE"));
			}
			g_pPostasTime[playerid] = 1;

			strmid(output_, inputtext, 0, strfind(inputtext, "."));
			//printf("gposta: %s", output_);
            g_pElvittLevel[playerid]{slot} = strval(output_);

            if(g_pGamesData[playerid] & e_POSTAS)
            {
				g_Posta[g_pElvittLevel[playerid]{slot}] = -1; // Töröljuk a póstából a levelet
				cmd_levelek(playerid, "");
			}
			else
			{
				g_Pizza[g_pElvittLevel[playerid]{slot}] = -1;
				cmd_pizzak(playerid, "");
			}

//			print(output);

            g_pLevelHelyek[playerid]{slot} = id;
            //printf("slot: %d, id: %d", slot, strval(output_));

		}

		case DIALOG_HELP:
		{
			if(g_pInRegTick[playerid])
			{
				new
					tick = GetTickCount() - g_pInRegTick[playerid];
				if(tick < 25000)
				{
                    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NE_OKEZD_LE_A_SEGITSEGET"), (float(25000 - tick) / 1000));
					cmd_help(playerid, "");
					return 1;
				}
				else
				{
                    g_pInRegTick[playerid] = GetTickCount();
                    cmd_rules(playerid, "");
				}
			}
		}
		case DIALOG_RULES:
		{
			if(g_pInRegTick[playerid])
			{
				new
					tick = GetTickCount() - g_pInRegTick[playerid];
				if(tick < 25000)
				{
                    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NE_OKEZD_LE_A_SZABALYZATOT"), (float(25000 - tick) / 1000));
					cmd_rules(playerid, "");
					return 1;
				}
				else
				{
                    g_pInRegTick[playerid] = 0;
				}
			}
		}
		case DIALOG_RACES + 789:
		{
			if(!response)
   				return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>d{s[64]}", iVal);
			CallGoldpot(iVal);
		}
		case DIALOG_WEATHER:
		{
			if(!response)
			    return 0;

			SetPlayerWeather(playerid, listitem);
			SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_IDOJARASOD_BEALLITVA_A_KOVETKEZORE"), g_szWeatherNames[listitem], listitem);
		}
        case DIALOG_DMINFO:
        {
			if(!response)
				return 1;

			switch(listitem)
			{
				case 0: // Alap
				{
                    if(g_PlayerFlags[playerid] & e_MAX_DMPLAYERS)
                    {
						SendClientMessage(playerid, -1, LANG(playerid, "MSG_KAPCSOLD_KI_HOGY_NE_A_LEGTOBB"));
						cmd_dminfo(playerid, "");
						return 1;
					}

				    g_pDMInfo[playerid] = {4, 1, 0, 5, 14, 20, 16, 29, 27, 18, 15};
		            UpdateDMTextdraw(playerid);

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `dminfo` = '4,1,0,5,14,20,16,29,27,18,15' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
				case 1: // Amibe legtöbben vannak
				{
                    g_PlayerFlags[playerid] ^= e_MAX_DMPLAYERS;
			        UpdateDMTextdraw(playerid);
			        SaveFlags(playerid);
				}
				default:
				{
                    if(g_PlayerFlags[playerid] & e_MAX_DMPLAYERS)
                    {
						SendClientMessage(playerid, -1, LANG(playerid, "MSG_KAPCSOLD_KI_HOGY_NE_A_LEGTOBB"));
						cmd_dminfo(playerid, "");
						return 1;
					}

					new
					    id = listitem - 2;
					SetPVarInt(playerid, "DMInfo_Slot", id);
					tmp[0] = EOS;
					for(new i; i != sizeof(gDMData); i++)
					{
						strcat(tmp, gDMData[i]);
						strcat(tmp, "\n");
					}
					foreach(DeathMatches, i)
					{
						strcat(tmp, g_szDMCommand[i]);
						strcat(tmp, "\n");
					}
					strcat(tmp, "Törlés");

					format(i_str, 64, "Slot {FF0000}%d {FF0000}(%s)", id, GetDMInfoData(g_pDMInfo[playerid][id]));
					ShowPlayerDialogEx(playerid, DIALOG_DMINFO + 1, DIALOG_STYLE_LIST, i_str, tmp, "Ok", "Bezár");
				}
			}
		}
        case DIALOG_DMINFO + 1:
        {
			if(!response)
			{
				DeletePVar(playerid, "DMInfo_Slot");
				cmd_dminfo(playerid, "");
				return 1;
			}

			new
			    id = GetPVarInt(playerid, "DMInfo_Slot");
			if(!strcmp(inputtext, "Törlés"))
			{
	            g_pDMInfo[playerid][id] = -1;
			}
			else
			{
	    		printf("jó %d", sizeof(gDMData));
				new
				    dmid_;
				if(listitem < 10)
				{
					dmid_ = listitem;
				}
				else
				{
					printf("dmid: %d", GetDMIDFromName(inputtext));
					printf("sqlid: %d", DM_SQL(GetDMIDFromName(inputtext)));
					dmid_ = DM_SQL(GetDMIDFromName(inputtext)) + 9;
				}

				g_pDMInfo[playerid][id] = dmid_;
			}

            UpdateDMTextdraw(playerid);
			DeletePVar(playerid, "DMInfo_Slot");

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `dminfo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pDMInfo[playerid][0],
				g_pDMInfo[playerid][1], g_pDMInfo[playerid][2], g_pDMInfo[playerid][3], g_pDMInfo[playerid][4],g_pDMInfo[playerid][5], g_pDMInfo[playerid][6],
				g_pDMInfo[playerid][7], g_pDMInfo[playerid][8], g_pDMInfo[playerid][9], g_pDMInfo[playerid][10], PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");

			cmd_dminfo(playerid, "");
		}
		case DIALOG_CMDLIST:
		{
			if(!response)
			    return 0;

			CallLocalFunction("OnPlayerCommandText", "ds", playerid, inputtext);
		}
		case DIALOG_CLAN:
		{
			if(!response)
				return 0;

			SetPVarString(playerid, "ClanLeiras", inputtext);
        	g_pClanCreateState{playerid} = 4;

        	SendClientMessagef(playerid, -1, LANG(playerid, "MSG_KLAN_LEIRAS_MEGADVA_"), inputtext);

			ShowPlayerDialogEx(playerid, DIALOG_CLAN_CREATE, DIALOG_STYLE_INPUT, "Klánkészítés - {33FF33}[6/6]", "5. lépésen már túlvagy!\nÍrj be egy színkódot, ami majd a klán színe lesz\n\nHa nem vagy biztos mindenben, akkor '{33FF33}Mégse{" #XCOLOR_DEFAULT "}' lenyomásával a készítés megszakítódik.", "Elküld", "Mégse");
    		g_pClanCreateState{playerid} = 5;
		}
		case DIALOG_CLAN_CREATE:
		{
			if(!response)
			{
                CancelClanCreation(playerid);
				ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánkészítés - Megszakítva", "Klánkészítés megszakítva, mivel a 'Mégse' gombra mentél", "Oké");
				return 1;
			}

			new
			    color;
			if(sscanf(inputtext, "n", color))
			{
				ShowPlayerDialogEx(playerid, DIALOG_CLAN_CREATE, DIALOG_STYLE_INPUT, "Klánkészítés - {33FF33}[6/6]", "5. lépésen már túlvagy!\nÍrj be egy színkódot, ami majd a klán színe lesz\n\nHa nem vagy biztos mindenben, akkor '{33FF33}Mégse{" #XCOLOR_DEFAULT "}' lenyomásával a készítés megszakítódik.", "Elküld", "Mégse");
				return 1;
			}

			GetPVarString(playerid, "ClanName", name, sizeof(name));
			GetPVarString(playerid, "ClanLeiras", i_str, sizeof(i_str));

			mysql_format(1, query, sizeof(query), "INSERT INTO `clans`(`id`, `activated`, `clanname`, `leiras`, `color`, `reg_id`, `spawnx`, `spawny`, `spawnz`, `spawna`, `spawnint`, `spawnworld`, `minx`, `miny`, `minz`, `maxx`, `maxy`, `maxz`, `is_bank`, `bankmoney`, `bankx`, `banky`, `bankz`, `rang_1`, `rang_2`, `rang_3`, `rang_4`, `rang_5`, `players`, `time`) VALUES (\
				0, 0, '%e', '%e', %d, %d, %f, %f, %f, %f, %d, %d, %f, %f, %f, %f, %f, %f, 0, 2000, 0.0, 0.0, 0.0, '%d,Rang 1', '%d,Rang 2', '%d,Rang 3', '%d,Rang 4', '%d,Rang 5', '%d,4,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0', UNIX_TIMESTAMP());",
				name, i_str, color, PlayerInfo[playerid][pRegID], GetPVarFloat(playerid, "ClanSpawnX"), GetPVarFloat(playerid, "ClanSpawnY"), GetPVarFloat(playerid, "ClanSpawnZ"), GetPVarFloat(playerid, "ClanSpawnA"), GetPVarInt(playerid, "ClanSpawnInt"), GetPVarInt(playerid, "ClanSpawnWorld"),
				GetPVarFloat(playerid, "ClanMinX"), GetPVarFloat(playerid, "ClanMinY"), GetPVarFloat(playerid, "ClanMinZ"), GetPVarFloat(playerid, "ClanMaxX"), GetPVarFloat(playerid, "ClanMaxY"), GetPVarFloat(playerid, "ClanMaxZ"), gCLAN_RIGHTS[0], gCLAN_RIGHTS[1], gCLAN_RIGHTS[2], gCLAN_RIGHTS[3], gCLAN_RIGHTS[4], PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "THREAD_CreateClan", "d", playerid);
			//print(query);
		}
		case DIALOG_CLAN_ACCEPT:
		{
			new
			    clanid = GetPVarInt(playerid, "ClanJoin");
			player1 = GetPVarInt(playerid, "ClanJoinPlayer");
			DeletePVar(playerid, "ClanJoin");
			DeletePVar(playerid, "ClanJoinPlayer");

			if(!response)
			{
				SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__ELUTASITOTTAD_A_MEGHIVOT_AZ"), gClanName[clanid], GetPlayerColor(player1) >>> 8, pName(player1), player1);
				SendClientMessagef(player1, COLOR_ORANGE, LANG(player1, "MSG___ELUTASITOTTA_A_MEGHIVOT_A"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
				return 1;
			}

			// Megkeressük az üres slotot, ahol nincs még játékos
			new
			    freeslot = -1;
			for(new i; i != MAX_CLAN_PLAYERS; i++)
			{
				if(gClanPlayers[clanid][0][i] == -1)
				{
		   			printf("ÜRES TE FASZOM!!!!!! %d", i);
		   			freeslot = i;
					break;
				}
			}

			// Ha van üres hely, akkor felvesszük
			if(freeslot != -1)
			{
		        gClanPlayers[clanid][0][freeslot] = PlayerInfo[playerid][pRegID];
		        gClanPlayers[clanid][1][freeslot] = g_pClanRank{playerid};
				for(new i; i != MAX_CLAN_PLAYERS; i++)
				{
					if(!i)
					{
						format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
					}
					else
					{
						format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
					}
				}
				mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
				mysql_function_query(1, query, false, "", "");
			}
			else
			{
				SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA_TORTENT_AMIG_A_TE_MEGHIVOD"));
				return 1;
			}
			SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG__ELFOGADTAD_A_MEGHIVOT_AZ_"), gClanName[clanid], GetPlayerColor(player1) >>> 8, pName(player1), player1);
			SendClientMessagef(player1, COLOR_ORANGE, LANG(player1, "MSG___ELFOGADTA_A_MEGHIVOT_AMIT"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

            g_pClan{playerid} = clanid;
			g_pClanRank{playerid} = 0;
			SaveClanLog(clanid, playerid, player1, "INVITE", "N/A");
		}
		case DIALOG_CLAN_CP:
		{
			if(!response)
			    return 0;

			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból
           //// tmp[0] = EOS;
			switch(listitem)
			{
				case 0:
				{
					format(i_str, sizeof(i_str), "Jelenlegi klánnév: {FF33FF}%s\nLentre írd be az új nevet, max 24 karakter lehet.", gClanName[clanid]);
					format(tmp, sizeof(tmp), "{%06x}%s - Klán CP- Klánnév beállítása", gClanColor[clanid] >>> 8, gClanName[clanid]);
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP_NAME, DIALOG_STYLE_INPUT, tmp, i_str, "Ok", "Vissza");
				}
				case 1:
				{
					strunpack(i_str, gClanLeiras[clanid], 128);
					format(tmp, 256, "Jelenlegi klánleírás: \n{FF33FF}%s\n\nLentre írd be az új leírást, max 128 karakter lehet.", i_str);
					format(i_str, sizeof(i_str), "{%06x}%s - Klán CP - Leírás", gClanColor[clanid] >>> 8, gClanName[clanid]);
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP_LEIRAS, DIALOG_STYLE_INPUT, i_str, tmp, "Ok", "Vissza");
				}
				case 2:
				{
					format(i_str, sizeof(i_str), "Jelenlegi klánszín: {%06x}0x%x\nLentre írd be az új színt, {" #XCOLOR_BLUE3 "}RRGGBBAA {" #XCOLOR_DEFAULT "}formátumban!", gClanColor[clanid] >>> 8, gClanColor[clanid]);
					format(tmp, sizeof(tmp), "{%06x}%s - Klán CP - Klánszín", gClanColor[clanid] >>> 8, gClanName[clanid]);
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP_COLOR, DIALOG_STYLE_INPUT, tmp, i_str, "Ok", "Vissza");
				}
				case 3:
				{
					dline[0] = EOS;
					for(new i; i != 10; i++)
					{
						format(i_str, 64, "%d. {" #XCOLOR_GREENYELLOW "}%s\n", i + 1, gClanRankName[clanid][i]);
						strcat(dline, i_str);
					}
                    format(tmp, sizeof(tmp), "{%06x}%s - Klán CP - Rangok", gClanColor[clanid] >>> 8, gClanName[clanid]);
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_RANKS, DIALOG_STYLE_LIST, tmp, dline, "Ok", "Vissza");
				}
				case 4:
				{
					mysql_format(1, query, sizeof(query), "SELECT `name`, reg_id, color FROM `players` WHERE `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d OR `reg_id` = %d",
						gClanPlayers[clanid][0][0], gClanPlayers[clanid][0][1], gClanPlayers[clanid][0][2], gClanPlayers[clanid][0][3], gClanPlayers[clanid][0][4], gClanPlayers[clanid][0][5], gClanPlayers[clanid][0][6], gClanPlayers[clanid][0][7], gClanPlayers[clanid][0][8], gClanPlayers[clanid][0][9], gClanPlayers[clanid][0][10], gClanPlayers[clanid][0][11], gClanPlayers[clanid][0][12], gClanPlayers[clanid][0][13], gClanPlayers[clanid][0][14],
						gClanPlayers[clanid][0][15], gClanPlayers[clanid][0][16], gClanPlayers[clanid][0][17], gClanPlayers[clanid][0][18], gClanPlayers[clanid][0][19], gClanPlayers[clanid][0][20], gClanPlayers[clanid][0][21], gClanPlayers[clanid][0][22], gClanPlayers[clanid][0][23], gClanPlayers[clanid][0][24], gClanPlayers[clanid][0][25], gClanPlayers[clanid][0][26], gClanPlayers[clanid][0][27], gClanPlayers[clanid][0][28], gClanPlayers[clanid][0][29],
						gClanPlayers[clanid][0][30], gClanPlayers[clanid][0][31], gClanPlayers[clanid][0][32], gClanPlayers[clanid][0][33], gClanPlayers[clanid][0][34], gClanPlayers[clanid][0][35], gClanPlayers[clanid][0][36], gClanPlayers[clanid][0][37], gClanPlayers[clanid][0][38], gClanPlayers[clanid][0][39], gClanPlayers[clanid][0][40], gClanPlayers[clanid][0][41], gClanPlayers[clanid][0][42], gClanPlayers[clanid][0][43], gClanPlayers[clanid][0][44],
						gClanPlayers[clanid][0][45], gClanPlayers[clanid][0][46], gClanPlayers[clanid][0][47], gClanPlayers[clanid][0][48], gClanPlayers[clanid][0][49], gClanPlayers[clanid][0][50], gClanPlayers[clanid][0][51], gClanPlayers[clanid][0][52], gClanPlayers[clanid][0][53], gClanPlayers[clanid][0][54], gClanPlayers[clanid][0][55], gClanPlayers[clanid][0][56], gClanPlayers[clanid][0][57], gClanPlayers[clanid][0][58], gClanPlayers[clanid][0][59]);
					mysql_function_query(1, query, false, "THREAD_ShowClanMembers", "dd", playerid, clanid);
					//print(query);
				}
				case 5: //Klánlog
				{
				    if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_CLAN_LOG) && !IsOwner(playerid)) return
                    	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGNEZNI_A_LOGOT"));

       				mysql_format(1, query, sizeof(query), "SELECT * FROM `clans_log` WHERE `clanid` = '%d' ORDER BY `clans_log`.`id` DESC LIMIT 0, 30",CLAN_SQL(clanid));
                    mysql_function_query(1, query, false, "THREAD_ShowClanLog", "dd", playerid, g_pQueryQueue[playerid]);
                    printf(query);
				}
				case 6: cmd_clancp(playerid,"");
			}
		}
		case DIALOG_CLAN_CP_NAME:
		{
			if(!response)
				return cmd_clancp(playerid, "");

			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_SET_CLANNAME) && !IsOwner(playerid))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGVALTOZTATNI"));
			    return 1;
			}

			if(!(1 <= strlen(inputtext) <= 24)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_HOSSZUSAG_1__24"));

            SendClientMessagef(playerid, COLOR_ORANGE, "-> Klánnév megváltoztatva; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", gClanName[clanid], inputtext);

			gClanName[clanid][0] = EOS;
			strcat(gClanName[clanid], inputtext, sizeof(gClanName[]));

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `clanname` = '%e' WHERE `id` = %d", inputtext, CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");
			
			mysql_format(1, query, sizeof(query), "UPDATE `chat_clans` SET `clan` = '%e' WHERE `clanid` = %d", inputtext, clanid);
			mysql_function_query(1, query, false, "", "");

			cmd_clancp(playerid, "");
			SaveClanLog(clanid, playerid, -1, "CLANNAME", inputtext);
		}
		case DIALOG_CLAN_CP_LEIRAS:
		{
			if(!response)
				return cmd_clancp(playerid, "");

			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_SET_CLANLEIRAS) && !IsOwner(playerid))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGVALTOZTATNI_1"));
			    return 1;
			}

			if(!(1 <= strlen(inputtext) <= 128)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_HOSSZUSAG_1__128"));

            SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__KLANLEIRAS_MEGVALTOZTATVA"));
            SendClientMessagef(playerid, COLOR_BLUE, inputtext);

			strpack(gClanLeiras[clanid], inputtext, sizeof(gClanLeiras[]));

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `leiras` = '%e' WHERE `id` = %d", inputtext, CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");

			cmd_clancp(playerid, "");
			SaveClanLog(clanid, playerid, -1, "LEIRAS", inputtext);
		}
		case DIALOG_CLAN_CP_COLOR:
		{
			if(!response)
				return cmd_clancp(playerid, "");

			new
			    clanid = g_pClan{playerid},
			    color;
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_SET_CLANCOLOR) && !IsOwner(playerid))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGVALTOZTATNI_2"));
			    return 1;
			}

			if(sscanf(inputtext, "n", color))
			{
				cmd_clancp(playerid, "");
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SZIN_FORMATUM_RRGGBBAA"));
				return 1;
			}
			SaveClanLog(clanid, playerid, -1, "CLANCOLOR", inputtext);
            SendClientMessagef(playerid, COLOR_ORANGE, "-> Klánszín megváltoztatva; {" #XCOLOR_SAMP "}Régi: {%06x}0x%x {" #XCOLOR_SAMP "}| Új: {%06x}0x%x", gClanColor[clanid] >>> 8, gClanColor[clanid], color >>> 8, color);

			gClanColor[clanid] = strval(i_str);

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `color` = %d WHERE `id` = %d", color, CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");

			cmd_clancp(playerid, "");

			GangZoneHideForAll(gClanGangZone[clanid]);
			GangZoneShowForAll(gClanGangZone[clanid], color);
		}
		case DIALOG_CLAN_RANKS:
		{
			if(!response)
				return cmd_clancp(playerid, "");

			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_EDIT_PERMISSIONS) && !IsOwner(playerid))
			{
				if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_SZERKESZTENI"));
				}
				return 1;
			}

            dline[0] = EOS;
			SetPVarInt(playerid, "CCP_Rank", listitem);
			format(i_str, 128, "{%06x}%s Klán CP - Rangok - %s", gClanColor[clanid] >>> 8, gClanName[clanid], gClanRankName[clanid][listitem]);

            strcat(dline, "{" #XCOLOR_YELLOW "}Név megváltoztatása");
            format(dline, 1024, "%s\nTagok meghívása: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_INVITE_MEMBERS) != 0]);
            format(dline, 1024, "%s\nTagok kirúgása: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_KICK_MEMBERS) != 0]);
            format(dline, 1024, "%s\nRang állítása: \t\t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_SET_RANK) != 0]);
            format(dline, 1024, "%s\nBank egyenleg megt.: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_BANK_BALANCE) != 0]);
            format(dline, 1024, "%s\nBank log megtekintése: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_BANK_LOG) != 0]);
            format(dline, 1024, "%s\nBank pénz betétele: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_BANK_DEPOSIT) != 0]);
            format(dline, 1024, "%s\nBankból pénz kivétele: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_BANK_WITHDRAW) != 0]);
            format(dline, 1024, "%s\nBank áthelyezése: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_CAN_CHANGE_BANK_POS) != 0]);
            format(dline, 1024, "%s\nKlánspawn áthelyezése: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_CAN_CHANGE_SPAWN_POS) != 0]);
            format(dline, 1024, "%s\nKlánnév megváltoztatása: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_SET_CLANNAME) != 0]);
            format(dline, 1024, "%s\nKláleírás megváltoztatása: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_SET_CLANLEIRAS) != 0]);
			format(dline, 1024, "%s\nKlánszín megváltoztatása: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_SET_CLANCOLOR) != 0]);
            format(dline, 1024, "%s\nJogok szerkesztése: \t\t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_EDIT_PERMISSIONS) != 0]);
            format(dline, 1024, "%s\nKlánlog megtekintése: \t%s", dline, gJOGOK[(gClanRankFlags[clanid][listitem] & _:e_CLAN_LOG) != 0]);

			ShowPlayerDialogEx(playerid, DIALOG_CLAN_RANKS_2, DIALOG_STYLE_LIST, i_str, dline, "Változtat", "Vissza");
		}
		case DIALOG_CLAN_RANKS_2:
		{
			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			// Rang ID tárolása
			datez = GetPVarInt(playerid, "CCP_Rank");

			if(!response)
			{
				dline[0] = EOS;
				for(new i; i != 10; i++)
				{
					format(i_str, 64, "%d. {" #XCOLOR_GREENYELLOW "}%s\n", i + 1, gClanRankName[clanid][i]);
					strcat(dline, i_str);
				}
                format(i_str, sizeof(i_str), "{%06x}%s - Klán CP - Rangok", gClanColor[clanid] >>> 8, gClanName[clanid]);
				ShowPlayerDialogEx(playerid, DIALOG_CLAN_RANKS, DIALOG_STYLE_LIST, i_str, dline, "Megváltoztat", "Vissza");
				DeletePVar(playerid, "CCP_Rank");
				return 1;
			}

			if(!listitem)
			{
				format(i_str, 64, "{%06x}%s - Klán CP - Rangok - %s",gClanColor[clanid] >>> 8, gClanName[clanid], gClanRankName[clanid][datez]);
				ShowPlayerDialogEx(playerid, DIALOG_CLAN_RANKS_3, DIALOG_STYLE_INPUT, i_str, "Írd be lentre az új rang nevet.\n3 - 24 karakter között lehet a név.", "Változtat", "Vissza");
			}
			else
			{
				// ": Engedélyezve"  <- törlése a string végirû
				i_str[0] = EOS;
				strcat(i_str, inputtext);
				strdel(i_str, strfind(i_str, ":"), strlen(i_str));

				new
				    pina = listitem - 1,
				    bool:bVan;

				gClanRankFlags[clanid][datez] ^= 1 << pina;

				// Minden klán rangon átmegyünk, és ha egyiken sincs meg a szerkesztési jog - visszaállítjuk a jogot és hibaüzenetet írunk
				for(new i; i != 10; i++)
				{
					if(gClanRankFlags[clanid][i] & _:e_EDIT_PERMISSIONS)
					{
						bVan = true;
						break;
					}
				}

				// Ha ezvolt az utolsó amin szerkesztési jog volt és levette - visszaállítjuk
				if(!bVan)
				{
                    gClanRankFlags[clanid][datez] ^= 1 << pina;
                    OnDialogResponse(playerid, DIALOG_CLAN_RANKS, 1, datez, "a");
                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VEHETED_LE_MINDEN"));
                    return 1;
				}
  				format(country, sizeof(country), "%s -> %s", i_str, gJOGOK[(gClanRankFlags[clanid][datez] & _: (1 << pina) ) != 0]);
				SendClientMessagef(playerid, COLOR_PROPGREEN, country);

				format(i_str, sizeof(i_str), "%s | %s",gClanRankName[clanid][datez],country);
				SaveClanLog(clanid, playerid, -1, "EDIT_PERMISSION", i_str);

 				OnDialogResponse(playerid, DIALOG_CLAN_RANKS, 1, datez, "a");
				mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `rang_%d` = '%d,%e' WHERE `id` = %d", datez + 1, gClanRankFlags[clanid][datez], gClanRankName[clanid][datez], CLAN_SQL(clanid));
				mysql_function_query(1, query, false, "", "");
			}
		}
		case DIALOG_CLAN_RANKS_3:
		{
			new
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1; // Biztonsági okokból

			// Rang ID tárolása
			datez = GetPVarInt(playerid, "CCP_Rank");

			if(!response)
			{
				OnDialogResponse(playerid, DIALOG_CLAN_RANKS, 1, datez, "a");
				return 0;
			}

			if(!(3 <= strlen(inputtext) <= 24)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_HOSSZUSAG_1__24_1"));

            if(GetPVarInt(playerid, "Level") != 4)
			{
				if(strfind(inputtext, "Tulajdonos", true) != -1 ||
				strfind(inputtext, "Tulaj", true) != -1 ||
		  		strfind(inputtext, "T.u.l.a.j.d.o.n.o.s", true) != -1 ||

		  		strfind(inputtext, "Fõadmin", true) != -1 ||
		  		strfind(inputtext, "F.õ.a.d.m.i.n", true) != -1 ||

		  		strfind(inputtext, "Admin", true) != -1 ||
		  		strfind(inputtext, "A.d.m.i.n", true) != -1 ||

				strfind(inputtext, "Moderátor", true) != -1 ||
				strfind(inputtext, "M.o.d.e.r.á.t.o.r", true) != -1)
				{
				    SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO_5"),inputtext);
					return 0;
				}
			}
            SendClientMessagef(playerid, COLOR_ORANGE, "-> Klán %d. rangja megváltoztatva; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", datez + 1, gClanRankName[clanid][datez], inputtext);

			format(i_str, sizeof(i_str), "Régi: %s | Új: %s", gClanRankName[clanid][datez], inputtext);
            SaveClanLog(clanid, playerid, -1, "RANK_NAME", i_str);

            gClanRankName[clanid][datez][0] = EOS;
            strcat(gClanRankName[clanid][datez], inputtext, 24);

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `rang_%d` = '%d,%e' WHERE `id` = %d", datez + 1, gClanRankFlags[clanid][datez], inputtext, CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");


			OnDialogResponse(playerid, DIALOG_CLAN_RANKS, 1, datez, "a");
		}
		case DIALOG_CLAN_PLAYERS:
		{
		    if(!response) return cmd_clancp(playerid, "");
		    new
		    	clanid = g_pClan{playerid};
		    	
		    sscanf(inputtext, "p< >ds[45]", vID, country);
		    country[0] = EOS;
		    SetPVarInt(playerid,"SelectClanMemberID", vID); //Játékos regid-je
		    
		    format(i_str, sizeof(i_str), "{%06x}%s - Klán CP - Játékosok - %s", gClanColor[clanid] >>> 8, gClanName[clanid], inputtext);
		    ShowPlayerDialogEx(playerid, DIALOG_CLAN_PLAYERS_2, DIALOG_STYLE_LIST, i_str, "Statisztika\nRang állítása\nKirúgás","Kiválaszt", "Vissza");
		}
		case DIALOG_CLAN_PLAYERS_2:
		{
		    if(!response) return cmd_clancp(playerid, "");
		    new
		    	clanid = g_pClan{playerid};
		    switch(listitem)
		    {
		        case 0:
		        {
		            mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid,"SelectClanMemberID"));
					mysql_function_query(1, query, true, "THREAD_Findplayer_2", "dd", playerid, g_pQueryQueue[playerid]);
					DeletePVar(playerid,"SelectClanMemberID");
		        }
		        case 1:
		        {
		            dline[0] = EOS;
					for(new i; i != 10; i++)
					{
						format(i_str, 64, "%d. {" #XCOLOR_GREENYELLOW "}%s\n", i + 1, gClanRankName[clanid][i]);
						strcat(dline, i_str);
					}
					format(i_str, sizeof(i_str),"{%06x}%s - Klán CP - Játékosok - Rangállítás - %d",gClanColor[clanid] >>> 8, gClanName[clanid], GetPVarInt(playerid,"SelectClanMemberID"));
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_PLAYERS_3, DIALOG_STYLE_LIST, i_str, dline, "Ok", "Vissza");
		        }
		        case 2:
		        {
					if(clanid == 0xFF) return 1; // Biztonsági okokból

					if(!response)
						return cmd_clancp(playerid, "");

					if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_KICK_MEMBERS) && !IsOwner(playerid))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MAS_EMBERT"));
					    return 1;
					}

					//print(name);
					mysql_format(1, query, sizeof(query), "SELECT `name` FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid,"SelectClanMemberID"));
					mysql_function_query(1, query, false, "THREAD_ClanMembers_Remove", "dddd", playerid, clanid, GetPVarInt(playerid,"SelectClanMemberID"), g_pQueryQueue[playerid]);
					DeletePVar(playerid,"SelectClanMemberID");
				}
			}
		}
		case DIALOG_CLAN_PLAYERS_3:
		{
		    if(!response) cmd_clancp(playerid,"");
		    
            if(g_pClan{playerid} == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
	    	if(!(gClanRankFlags[g_pClan{playerid}][g_pClanRank{playerid}] & _:e_SET_RANK) && !IsOwner(playerid))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MAS_EMBERT_2"));
		    	return 1;
			}

            mysql_format(1, query, sizeof(query), "SELECT `name`, `color` FROM `players` WHERE `reg_id` = %d", GetPVarInt(playerid,"SelectClanMemberID"));
			mysql_function_query(1, query, false, "THREAD_ClanMembers_UpdateRank", "ddddd", playerid, g_pClan{playerid}, listitem, GetPVarInt(playerid,"SelectClanMemberID"), g_pQueryQueue[playerid]);
			DeletePVar(playerid,"SelectClanMemberID");
		}
		case DIALOG_CLAN_BANK:
		{
			if(!response)
			{
			    g_pClanTDSelect{playerid} = 0xFF;
				return 1;
			}

			new
			    amount,
			    error = -1,
			    clanid = g_pClan{playerid};
			if(clanid == 0xFF) return 1;

			if(sscanf(inputtext, "d", amount) && g_pClanTDSelect{playerid} != 0) error = _:e_NOT_VALID_FORMAT;

			switch(g_pClanTDSelect{playerid})
			{
				case 0: // Log
				{
                    if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_BANK_LOG) && !IsOwner(playerid))
                        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGTEKINTENI_1")), error = 0xFF;

					error = 0xFF;
				}
				case 1: // Balance
				{
                    if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_BANK_BALANCE) && !IsOwner(playerid))
                        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGNEZNI_A")), error = 0xFF;

					error = 0xFF;
				}
				case 2: // Deposit
				{
                    if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_BANK_DEPOSIT) && !IsOwner(playerid))
                    	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_BERAKNI_A")), error = 0xFF;

					if(IsNegative(amount)) error = _:e_NEGATIVE_NUMBER;
					if(amount > GetPlayerMoney(playerid)) error = _:e_KEVESEBB_PENZ_PLAYER;

	                if(error == -1)
                    {
                        gClanBankMoney[clanid] += amount;
                        GivePlayerMoneyEx(playerid, -amount, "ClanBankDeposit", true);

                    	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG_BETETTEL_T_A_KLANBANKBA_UJ"), amount, gClanBankMoney[clanid]);

						format(i_str, sizeof(i_str), "CLAN :: {%06x}%s(%d) {" #XCOLOR_ORANGE "}berakott {" #XCOLOR_GREEN "}%d{" #XCOLOR_ORANGE "}$-t a klánbankba.", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, amount);
						foreach(Player, i)
						{
							if(g_pClan{i} == clanid)
							{
								SendClientMessage(i, COLOR_ORANGE, i_str);
							}
						}
						mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `bankmoney` = %d WHERE `id` = %d", gClanBankMoney[clanid], CLAN_SQL(clanid));
						mysql_function_query(1, query, false, "", "");
					}
				}
				case 3: // Withdraw
				{
                    if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_BANK_WITHDRAW) && !IsOwner(playerid))
                        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_KIVENNI_A")), error = 0xFF;

					if(IsNegative(amount)) error = _:e_NEGATIVE_NUMBER;
					if(amount > gClanBankMoney[clanid]) error = _:e_KEVESEBB_PENZ_BANK;

	                if(error == -1)
                    {
                        gClanBankMoney[clanid] -= amount;
                        GivePlayerMoneyEx(playerid, amount, "ClanBankWithdraw", true);

						SendClientMessagef(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_KIVETTEL_T_A_KLANBANKBOL_UJ"), amount, gClanBankMoney[clanid]);

						format(i_str, sizeof(i_str), "CLAN :: {%06x}%s(%d) {" #XCOLOR_LIGHTRED "}kivett {" #XCOLOR_GREEN "}%d{" #XCOLOR_ORANGE "}$-t a klánbankból.", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, amount);
						foreach(Player, i)
						{
							if(g_pClan{i} == clanid)
							{
								SendClientMessage(i, COLOR_ORANGE, i_str);
							}
						}

						mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `bankmoney` = %d WHERE `id` = %d", gClanBankMoney[clanid], CLAN_SQL(clanid));
						mysql_function_query(1, query, false, "", "");
					}
				}
			}

			// Ha nem a "Log"-ra kattint és nincs hiba, akkor logoljuk, hogy mit csinált a bank-al
			if(1 <= g_pClanTDSelect{playerid} <= 3 && error == -1)
			{
			    switch(g_pClanTDSelect{playerid})
			    {
					case 2: country = "Deposit";
					case 3: country = "Withdraw";
			    }
			    getdate(year, month, day); gettime(hour, minute, second);
				mysql_format(1, query, sizeof(query), "INSERT INTO `clans_banklog`(`id`, `clanid`, `clan`, `type`, `reg_id`, `player`, `amount`, `newamount`, `time`, `time_`) VALUES (0, %d, '%s', '%s', %d, '%s', %d, %d, UNIX_TIMESTAMP(), '%02d.%02d.%02d %02d:%02d:%02d')",
					CLAN_SQL(clanid), gClanName[g_pClan{playerid}], country, PlayerInfo[playerid][pRegID], pName(playerid), amount, gClanBankMoney[clanid], year, month, day, hour, minute, second);
				mysql_function_query(1, query, false, "", "");
			}
			g_pClanTDSelect{playerid} = 0xFF;

			switch(error)
			{
				case e_NOT_VALID_FORMAT:
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_SZAMOT_IRTAL_BE"));
				}
				case e_NEGATIVE_NUMBER:
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEGATIV_SZAMOT_NEM_IRHATSZ"));
				}
				case e_KEVESEBB_PENZ_PLAYER:
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_NALAD_ANNYI_PENZ"));
				}
				case e_KEVESEBB_PENZ_BANK:
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_A_KLANBANKBAN_ANNYI"));
				}
				case -1, 0xFF: { }
			}
		}
		case DIALOG_CLAN_ACCEPTCLAN:
		{
			if(!response)
				return 0;

			new
			    clanid;
			sscanf(inputtext, "p<.>d{s[64]}", clanid);
			printf("sscanf id: %d", clanid);

			SetPVarInt(playerid, "AClan_ID", clanid);
			format(i_str, 64, "Klánmegerõsítés - {" #XCOLOR_PROPGREEN "}%s", gClanName[clanid]);

			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
			{
				ShowPlayerDialogEx(playerid, DIALOG_CLAN_ACCEPTCLAN_2, DIALOG_STYLE_LIST, i_str, "Adatok megtekintése", "Oké", "Vissza");
			}
			else
			{
				ShowPlayerDialogEx(playerid, DIALOG_CLAN_ACCEPTCLAN_2, DIALOG_STYLE_LIST, i_str, "Adatok megtekintése\nMegerõsítés\nTörlés", "Oké", "Vissza");
			}
		}
		case DIALOG_CLAN_ACCEPTCLAN_2:
		{
			if(!response)
				return 0;

			new
			    clanid = GetPVarInt(playerid, "AClan_ID");
			//printf("DIALOG_CLAN_ACCEPTCLAN_2: %d", clanid);
			switch(listitem)
			{
				case 0: // Adatok megtekintése
				{
					format(dline, 2048, "{" #XCOLOR_BLUE "}Klánnév: {" #XCOLOR_DEFAULT "}%s", gClanName[clanid]);
					strunpack(i_str, gClanLeiras[clanid], sizeof(gClanLeiras[]));

                    date(gClanCreateTime[clanid], day, month, year, hour, minute, second);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}Klánleírás: {" #XCOLOR_DEFAULT "}%s", dline, i_str);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}Klánszín: {%06x}0x%x", dline, gClanColor[clanid] >>> 8, gClanColor[clanid]);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}Készítõ: {" #XCOLOR_DEFAULT "}%s (%d)", dline, gClanCreatorName[clanid], gClanCreator[clanid]);
					format(dline, 2048, "%s\n\n{" #XCOLOR_BLUE "}Spawn: {" #XCOLOR_GREEN "}%f, %f, %f, %f, {" #XCOLOR_RED "}%d, %d", dline, gClanSpawnPos[clanid][0], gClanSpawnPos[clanid][1], gClanSpawnPos[clanid][2], gClanSpawnPos[clanid][3], gClanSpawnInterior[clanid], gClanSpawnWorld[clanid]);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}MinXYZ: {" #XCOLOR_PINK "}%f, %f, %f", dline, gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][2]);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}MaxXYZ: {" #XCOLOR_PINK "}%f, %f, %f", dline, gClanArena[clanid][3], gClanArena[clanid][4], gClanArena[clanid][5]);
					format(dline, 2048, "%s\n{" #XCOLOR_BLUE "}Létrehozás ideje: {" #XCOLOR_YELLOW "}%02d.%02d.%02d %02d:%02d:%02d", dline, year, month, day, hour, minute, second);

					format(i_str, 64, "Klánmegerõsítés - {" #XCOLOR_PROPGREEN "}%s{" #XCOLOR_DEFAULT "} - Infó", gClanName[clanid]);

					ShowPlayerDialogEx(playerid, DIALOG_CLAN_ACCEPTCLAN_3, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké", "Vissza");
				}
				case 1: // Megerõsítés
				{
					// Csak tulajok módosíthatják a klán dolgait
					if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
						return 0;

					// Ha a dialógra kattintás közben valaki aktiválta neki, akkor hiba üzenetet dobunk
					if(g_ClanFlags{clanid} & e_CLAN_ACTIVE)
					{
						SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MIKOZBEN_TE_AKTIVALNI"), gClanName[clanid]);
						DeletePVar(playerid, "AClan_ID");
						return 1;
					}

					g_ClanFlags{clanid} |= e_CLAN_ACTIVE;
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__MEGEROSITETTED_AZ__NEVU_KLANT"), gClanName[clanid], clanid);

					// Klán készítõjének a rangja a maximumra állítása
					foreach(Player, i)
					{
						if(PlayerInfo[i][pRegID] == gClanCreator[clanid])
						{
							g_pClanRank{i} = 4;
							SendClientMessagef(i, COLOR_YELLOW, LANG(i, "MSG__CLAN___MEGEROSITETTE_A_KL"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
							SendClientMessagef(i, COLOR_BLUE3, LANG(i, "MSG__CLAN__KLAN_SEGITESG__CLANHELP"));
						}
					}

					// Picsaságok létrehozása
					if(gClanBankPos[clanid][0])
					{
						gClanBankCP[clanid] = CreateDynamicCP(gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2], 5.0);
                        gClanBankText[clanid] = CreateDynamic3DTextLabel("{" #XCOLOR_BLUE3 "}Klánbank!\n{" #XCOLOR_PROPGREEN "}Bank használata: 'N'", -1, gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2]);
					}
					gClanZone[clanid] = CreateDynamicCube(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][2], gClanArena[clanid][3], gClanArena[clanid][4], gClanArena[clanid][5]);
			        gClanGangZone[clanid] = GangZoneCreate(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][3], gClanArena[clanid][4]);
					GangZoneShowForAll(gClanGangZone[clanid], gClanColor[clanid]);

					mysql_format(1, query, sizeof(query), "INSERT INTO `clans_activation`(id, clanid, clanname, type, reg_id, player, time) VALUES(0, '%d', '%s', 'ACCEPT', %d, '%s', %d)", CLAN_SQL(clanid), gClanName[clanid], PlayerInfo[playerid][pRegID], pName(playerid), CurrentTimestamp());
					mysql_function_query(1, query, false, "", "");

					mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `activated` = 1 WHERE `id` = %d", CLAN_SQL(clanid));
					mysql_function_query(1, query, false, "", "");
				}
				case 2: // Törlés
				{
					// Csak tulajok módosíthatják a klán dolgait
					if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
						return 0;

					SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__TOROLTED_AZ__NEVU_KLANT_ID"), gClanName[clanid], clanid);

					if(g_ClanFlags{clanid} & e_CLAN_ACTIVE)
					{
				        if(gClanBankPos[clanid][0])
						{
							DestroyDynamicCP(gClanBankCP[clanid]);
							gClanBankCP[clanid] = -1;
							DestroyDynamic3DTextLabel(gClanBankText[clanid]);
						}
						DestroyDynamicArea(gClanZone[clanid]);
				        GangZoneHideForAll(gClanGangZone[clanid]);
				        GangZoneDestroy(gClanGangZone[clanid]);

                        g_ClanFlags{clanid} &= ~e_CLAN_ACTIVE;
					}

					// Játékos változók nullázása
					foreach(Player, i)
					{
						if(g_pClan{i} == clanid)
						{
							g_pClan{i} = 0xFF;
							g_pClanRank{i} = 0;
							SendClientMessagef(i, COLOR_RED, LANG(i, "MSG__CLAN___TOROLTE_A_KLANT_A"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
						}
					}

					// Elég a creatort nullázni, mivel azt ellenõrzöm, hogy létezik-e a klán, ha nem nulla
                    gClanCreator[clanid] = 0;
                    Itter_Remove(clans, clanid);

					mysql_format(1, query, sizeof(query), "INSERT INTO `clans_activation`(id, clanid, clanname, type, reg_id, player, time) VALUES(0, '%d', '%s', 'DELETE', %d, '%s', %d)", CLAN_SQL(clanid), gClanName[clanid], PlayerInfo[playerid][pRegID], pName(playerid), CurrentTimestamp());
					mysql_function_query(1, query, false, "", "");

					mysql_format(1, query, sizeof(query), "DELETE FROM `clans` WHERE `id` = %d", CLAN_SQL(clanid));
					mysql_function_query(1, query, false, "", "");
				}
			}
		}
		case DIALOG_CLAN_CP_LOG: if(!response) return cmd_clancp(playerid,"");
		case DIALOG_CREATEDM_WEAPONS:
		{
			if(!response)
			{
				if(GetPVarType(playerid, "EditDMWeap"))
				{
					ShowDMEditDialog(playerid, GetPVarInt(playerid, "EditDMWeap"));
					DeletePVar(playerid, "EditDMWeap");
					return 1;
				}
			}

			new
			    dmid = (GetPVarType(playerid, "EditDMWeap")) ? (GetPVarInt(playerid, "EditDMWeap")) : (g_pDMID[playerid]);

			// Ha a 'Kész' gombra ment nem futtassuk le a sok fasságot, rögtön lépünk
			if(inputtext[0] == 'K')
			{
				new
				    bool:bMegvan;
				for(new i; i != 13; i++)
				{
					if(g_DMWeapons[dmid][i][0] == 0 && g_DMWeapons[dmid][i][1] == 0) continue;
					bMegvan = true;
				}

				// Ha nem állítot be semilyen fegyvert, hibaüzenetet írunk neki
				if(!bMegvan)
				{
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_ALLITOTTAL_BE_EGY"));
					ShowDMWeaponMenu(playerid);
					return 1;
				}

				SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_DM_KESZITES_BEFEJEZVE"));
				SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_DMEDDEL_KAPCSOLATOS_TOVABBI"));

				// DM Zóna frissítése (-1es világ helyett csak DM zónájába rakjuk a zónáját)
                UpdateDMZone(dmid);

				// DM zóna elrejtése
				if(g_DMZoneID[dmid]) GangZoneHideForPlayer(playerid, g_DMZoneID[dmid]);

				// Spawnnál létrehozott objectek és 3D textek tölrése
                DeleteDMVars(playerid);

				// Aktvívra állítjuk a DM-et
				g_DMFlags[dmid] |= e_COMPLETED;

				mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `completed` = 1 WHERE `id` = %d", DM_SQL(dmid));
				mysql_function_query(1, query, true, "", "");
				return 1;
			}

			new
			    pos;
			if((pos = strfind(inputtext, "-", true)) != -1)
			{
                strdel(inputtext, pos - 1, strlen(inputtext));
			}
			//printf("after strdel: %s", inputtext);

			new
			    //dmid = g_pDMID[playerid],
				weaponid = GetWeaponIDFromName(inputtext[1]),
			    slot = GetWeaponSlot(weaponid);

			// Ha a slot %d-re kattintott, akkor egy hülye fasz - újra felmutatjuk neki a fegyverválasztót
			if(weaponid == -1 || slot == -1)
			{
				ShowDMWeaponMenu(playerid);
				return 1;
			}

			printf("weaponslot - %d, id: %d", slot, weaponid);

			SetPVarInt(playerid, "DM_WeaponID", weaponid);
			SetPVarInt(playerid, "DM_WeaponSlot", slot);

			format(country, sizeof(country), "{" #XCOLOR_BLUE2 "}%s", inputtext[1]);
			format(i_str, sizeof(i_str), "Írd be lentre, hogy mennyi tölténytényt szeretnél\na(z) {" #XCOLOR_YELLOW "}%s {" #XCOLOR_DEFAULT "}nevû fegyverbe!", inputtext[1]);
			ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_WEAPONS_AMMO, DIALOG_STYLE_INPUT, country, i_str, "Beállít", "Vissza");
			return 1;
		}
		case DIALOG_CREATEDM_WEAPONS_AMMO:
		{
			if(!response)
			{
                ShowDMWeaponMenu(playerid);
                return 1;
			}

			new
				edittype = GetPVarType(playerid, "EditDMWeap"),
				dmid = (edittype) ? (GetPVarInt(playerid, "EditDMWeap")) : (g_pDMID[playerid]),
			    weaponid = GetPVarInt(playerid, "DM_WeaponID"),
				slot = GetPVarInt(playerid, "DM_WeaponSlot"),
				ammo = strval(inputtext);

			if(ammo <= 0)
			{
                if(ammo == 0 && !edittype)
                {
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TOLTENYNEK_0NAL_NAGYOBB"));
					ShowDMWeaponMenu(playerid);
					return 1;
				}

				SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_FEGYVER_TOR"), slot);
			}
			else
			{
				GetWeaponName(weaponid, country, sizeof(country));
				SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG__AZ__SLOTBA__BEALLITVA__T"), slot, country, ammo);
			}
			// Ha nulla töltényt adott meg - töröljük a fegyvert
			if(ammo == 0)
			{
				g_DMWeapons[dmid][slot][0] = 0;
				g_DMWeapons[dmid][slot][1] = 0;
			}
			else
			{
				g_DMWeapons[dmid][slot][0] = weaponid;
				g_DMWeapons[dmid][slot][1] = ammo;
			}

			ShowDMWeaponMenu(playerid);

			mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `weapons` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `id` = %d",
				g_DMWeapons[dmid][0][0], g_DMWeapons[dmid][1][0], g_DMWeapons[dmid][2][0], g_DMWeapons[dmid][3][0], g_DMWeapons[dmid][4][0], g_DMWeapons[dmid][5][0], g_DMWeapons[dmid][6][0],
				g_DMWeapons[dmid][7][0], g_DMWeapons[dmid][8][0], g_DMWeapons[dmid][9][0], g_DMWeapons[dmid][10][0], g_DMWeapons[dmid][11][0], g_DMWeapons[dmid][12][0],
				g_DMWeapons[dmid][0][1], g_DMWeapons[dmid][1][1], g_DMWeapons[dmid][2][1], g_DMWeapons[dmid][3][1], g_DMWeapons[dmid][4][1], g_DMWeapons[dmid][5][1], g_DMWeapons[dmid][6][1],
				g_DMWeapons[dmid][7][1], g_DMWeapons[dmid][8][1], g_DMWeapons[dmid][9][1], g_DMWeapons[dmid][10][1], g_DMWeapons[dmid][11][1], g_DMWeapons[dmid][12][1], DM_SQL(dmid));
			mysql_function_query(1, query, true, "", "");
			return 1;
		}
		case DIALOG_DM:
		{
			if(!response)
			{
				DeletePVar(playerid, "DMSelect");
				if(g_pOtherFlags[playerid] & e_NOBACK)
				{
					cmd_t(playerid, "");
					g_pOtherFlags[playerid] &= ~e_NOBACK;
				}
				return 1;
			}

			new
			    dmid;
			sscanf(inputtext, "p<.>ds[45]", dmid, country);
			SetPVarInt(playerid, "DMSelect", dmid);

			//if(PlayerInfo[playerid][pRegID] == g_DMCreator[dmid] || GetPVarInt(playerid,"Level") > 2 || IsPlayerAdmin(playerid)) //DM készítõje és Fõadmin szerkesztheti | MEG A KURVA ANYÁDAT AZT
			if(GetPVarInt(playerid,"Level") > 2 || IsPlayerAdmin(playerid)) //Fõadmin szerkesztheti
			{
			    ShowDMEditDialog(playerid, dmid);
			}
			else
			{
				// Befejezetlen DM-ekhez nincs csatakozás
				if(!(g_DMFlags[dmid] & e_COMPLETED)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_DM_MEG_NINCS_BEFEJEZVE"));

				// Ha TDM - Felmutatjuk neki a csapatválasztót
				if(g_DMFlags[dmid] & e_IS_TDM)
				{
					ShowDMJoinDialog(playerid, dmid);
				}
				else
				{
					JoinPlayerToDM(playerid, dmid, -1);
                    g_pOtherFlags[playerid] &= ~e_NOBACK;
				}
			}
			return 1;
		}
		case DIALOG_DM_SELECT_TEAM:
		{
			if(!response)
			{
				if(!GetPVarType(playerid, "NoBack")) cmd_dms(playerid, "");

				DeletePVar(playerid, "NoBack");
				return 1;
			}

			new
			    dmid = GetPVarInt(playerid, "DMSelect");
            g_pOtherFlags[playerid] &= ~e_NOBACK;
            // Befejezetlen DM-ekhez nincs csatakozás
			if(!(g_DMFlags[dmid] & e_COMPLETED)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_DM_MEG_NINCS_BEFEJEZVE"));

			DeletePVar(playerid, "NoBack");

			new
			    diff = abs(g_DMTeamPlayers[dmid][listitem] - g_DMTeamPlayers[dmid][!listitem]);
			printf("diff: %d, team: %d, %d", diff, g_DMTeamPlayers[dmid][listitem], g_DMTeamPlayers[dmid][!listitem]);
			/*
			if(diff > 2)
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBEN_A_CSAPATBAN_MAR"));
				SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_CSATLAKOZZ_AZ__NEVU_CSAPATBA"), g_DMTeamColor[dmid][!listitem] >>> 8, g_szDMTeams[dmid][!listitem]);
				return 1;
			}
			*/
        	if(JoinPlayerToDM(playerid, dmid, listitem))
        	{
        		SendClientMessagef(playerid, 0x0DDB1BAA, LANG(playerid, "MSG_CSATLAKZOTAL_A__NEVU_DMBE_AZ"), g_szDMName[dmid], g_DMTeamColor[dmid][listitem] >>> 8, g_szDMTeams[dmid][listitem]);
			}
			return 1;
		}
		case DIALOG_DM_EDIT:
		{
			if(!response)
			{
				DeletePVar(playerid, "DMSelect");
				if(g_pOtherFlags[playerid] & e_NOBACK)
				{
					cmd_t(playerid, "");
					g_pOtherFlags[playerid] &= ~e_NOBACK;
				}
				else
				{
					cmd_dms(playerid, "");
				}
				return 1;
			}

			g_pOtherFlags[playerid] &= ~e_NOBACK;

			new
			    dmid = GetPVarInt(playerid, "DMSelect");
			switch(listitem)
			{
				case 0: // Csatlakozás
				{
					if(!(g_DMFlags[dmid] & e_COMPLETED)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_DM_MEG_NINCS_BEFEJEZVE"));

					// Ha TDM - Felmutatjuk neki a csapatválasztót
					if(g_DMFlags[dmid] & e_IS_TDM)
					{
						ShowDMJoinDialog(playerid, dmid);
						return 1;
					}

                    if(JoinPlayerToDM(playerid, dmid, -1))
                    {
						SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CSATLAKOZTAL_AZ__NEVU_DMHEZ"), g_szDMName[dmid], dmid);
					}
				}
				case 1: // Információk megtekintése
				{
					date(g_DMCreateTime[dmid], day, month, year, hour, minute, second);
					format(dline, sizeof(dline), "Név: {%06x}%s\n{" #XCOLOR_BLUE "}Készítette: {" #XCOLOR_BLUE "}%s (%d)\n{" #XCOLOR_GREEN "}Idõpont: {" #XCOLOR_PROPGREEN "}%02d.%02d.%02d %02d:%02d:%02d\nMax killstreak: %d - %s(%d)", g_DMZoneColor[dmid] >>> 8, g_szDMName[dmid], g_DMCreatorName[dmid], g_DMCreator[dmid], year, month, day, hour, minute, second, g_DM_MaxKillstreak[dmid], g_DM_MaxKillstreakPlayer[dmid], g_DM_MaxKillstreakPlayerID[dmid]);


					if(g_DMFlags[dmid] & e_IS_TDM)
					{
						format(dline, sizeof(dline), "%s\n{" #XCOLOR_YELLOW "}Csapat nevek:\n\t{%06x}%s - 0x%x\n\t{%06x}%s - 0x%x", dline, g_DMTeamColor[dmid][0] >>> 8, g_szDMTeams[dmid][0], g_DMTeamColor[dmid][0], g_DMTeamColor[dmid][1] >>> 8, g_szDMTeams[dmid][1], g_DMTeamColor[dmid][1]);
					}
					ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Információ..", dline, "Oké");
				}
				case 2: // Név megváltoztatása
				{
					format(i_str, 64, "{" #XCOLOR_BLUE "}%s -> Név váltás", g_szDMName[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, "Írd be lentre a DM új nevét.", "Oké", "Vissza");
					SetPVarInt(playerid, "EditName", 1);
				}
				case 3: // Gyorsparancs megváltoztatása
				{
					format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Parancs beállítása", g_szDMName[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, "Írd be lentre a DM-hez tartozó parancsot\n\nHa törölni akarod, akkor ne írj be semmit.", "Oké", "Vissza");
					SetPVarInt(playerid, "EditName", 2);
				}
				case 4: // Max  játékosok
				{
					format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Max játékos limit beállítása", g_szDMName[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, "Írd be lentre, hogy mennyire szeretnéd álítani a játékos limitet DM-edben.\nHa nem szeretnél limitet, írd be a szerver slotok számát: 60", "Oké", "Vissza");
					SetPVarInt(playerid, "EditName", 3);
				}
				case 5: // Max ölések
				{
					format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Max ölés beállítása", g_szDMName[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, "Írd be lentre, hogy mennyire szeretnéd rakni a max öléseket.\nHa az egyik csapat eléri ezt a számot, kiírja ki a nyertes és a menet újrakezdõdik", "Oké", "Vissza");
					SetPVarInt(playerid, "EditName", 4);
				}
				case 6: // Kezdõ élet és armour beállítása
				{
					format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Kezdõ élet és páncél beállítása", g_szDMName[dmid]);
					format(dline, sizeof(dline), "Írd be lentre, hogy mennyi legyne a kezdõ élet és a páncél a DM-ben.\nJelenleg: {" #XCOLOR_SAMP "}%.2f{" #XCOLOR_DEFAULT "}:{" #XCOLOR_WHITE "}%.2f\nUgyanígy ebben a formában írd be: Élet:Armour (pl. 100:50)", g_DMHealth[dmid], g_DMArmour[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, dline, "Oké", "Vissza");

					SetPVarInt(playerid, "EditName", 5);
				}
				case 7: // Gravitáció
				{
					format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Gravitáció beállítása", g_szDMName[dmid]);
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_NAME, DIALOG_STYLE_INPUT, i_str, "Írd be lentre, hogy mennyi legyen a gravitáció a DM-ben.\nAlap: 0.008", "Oké", "Vissza");
					SetPVarInt(playerid, "EditName", 6);
				}
				case 8: // Fegyverek szerkesztése
				{
					SetPVarInt(playerid, "EditDMWeap", dmid);
					ShowDMWeaponMenu(playerid);
				}
				case 9: // Kezdõ fegyver
				{
					dline[0] = EOS;
					for(new i; i != 13; i++)
					{
						if(g_DMWeapons[dmid][i][0] == 0 && g_DMWeapons[dmid][i][1] == 0) continue;

						if(g_DMWeapons[dmid][i][0] == g_DMArmedWeapon{dmid})
						{
							strcat(dline, "{" #XCOLOR_KICK "}");
						}
						else
						{
                            strcat(dline, "{" #XCOLOR_DEFAULT "}");
						}
						GetWeaponName(g_DMWeapons[dmid][i][0], country, sizeof(country));
						strcat(dline, country);
						strcat(dline, "\n");
					}
					ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT_ARMED_WEAPON, DIALOG_STYLE_LIST, "Kezdõ fegyver beállítása", dline, "Oké", "Vissza");
				}
				case 10, 11, 12, 13, 14, 15, 16, 17, 18: // Clearworld, OneHitKill, Headshot, Weapon Buy, Bomba Lerakás, NoNametag, Explosive ammo, Jetpack
				{
					static const
						E_DM_FLAGS:aWhat[] = {e_IN_CLEARWORLD, e_ONE_HIT_KILL, e_HEADSHOT, e_WEAPONS_BUY, e_PLACE_BOMB, e_NO_NAMETAGS, e_EXPLOSIVE_AMMO, e_JETPACK_MODE, e_NO_HUD, e_DM_MODE},
						szState[][] = {"{" #XCOLOR_RED "}Nem", "{" #XCOLOR_GOLD "}Igen"};

					new
						id = listitem - 10,
					    i;
					// : ig töröljük a stringet majd a végén elhelyezzük az engedélyez-ve vagy a tiltva rézletet
					while(inputtext[i])
					{
						if(inputtext[i] == ':')
						{
							inputtext[i] = ' ';
							inputtext[i + 1] = EOS;
							break;
						}
						i++;
					}
                    strcpy(i_str, inputtext); // inputtext -> i_str-be másolása
					printf("after shit: %s, %d", inputtext, id);

					g_DMFlags[dmid] ^= aWhat[id];

					new
						flag = ((g_DMFlags[dmid] & aWhat[id]) != E_DM_FLAGS:0);
						
					strcat(i_str, "{" #XCOLOR_GREEN3 "}megváltoztatva - ");
		 			strcat(i_str, szState[flag]);
						
					/*switch(id)
					{
						//case 0: strcat(i_str, (flag) ? ("TDM") : ("DM"));
						default: strcat(i_str, szState[flag]);
					}*/

					SendClientMessage(playerid, COLOR_BLUE, i_str);
					ShowDMEditDialog(playerid, dmid);

					// Flagok mentése
                    UpdateDMFlags(dmid);

					if(listitem == 14) UpdateDMNametags(dmid);
				}
				case 19:
				{
					g_DMFlags[dmid] ^= e_DM_MODE;
					
	 				SendClientMessagef(playerid, -1, "DM mód megváltoztatva: %s", (g_DMFlags[dmid] & e_DM_MODE) ? ("{" #XCOLOR_GREEN "}Lagshot") : ("{" #XCOLOR_WHITE "}Skinshot"));
					ShowDMEditDialog(playerid, dmid);
					UpdateDMFlags(dmid);
				}
				
				case 20: ShowPlayerDialogEx(playerid, DIALOG_DM_WEATHER, DIALOG_STYLE_INPUT, "Idõjárás beállítása", "Lentre írd be azt az idõjárás id-t amit a DM zónához szeretnél beállítani!\nAlapbeállítás: -1", "Oké", "Mégse"); //Idõjárás
				case 21: ShowPlayerDialogEx(playerid, DIALOG_DM_TIME, DIALOG_STYLE_INPUT, "Idõ beállítása", "Lentre írd be az idõt amit a DM zónához szeretnél beállítani!\nAlapbeállítás: -1", "Oké", "Mégse"); //Idõ
				case 22: // DM Törlése
				{
				    if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
					if(dmid < 27) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_ALAP_DM_NEM_TOROLHETED"));

					// Törlésnek elmegy ez a megoldás is..
					g_DMFlags[dmid] &= ~e_COMPLETED;
					Iter_Remove(DeathMatches, dmid);

					// Textdraw törlése
					DeleteDMTextdraw(dmid);

					// Zóna törlése
					DeleteDMZone(dmid);

					if(IsBlack(g_DMZoneColor[dmid])) g_DMZoneColor[dmid] = COLOR_KICK;
					SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_TOROLTED_AZ__NEVU_DMET"), g_DMZoneColor[dmid] >>> 8, g_szDMName[dmid]);
				    mysql_format(1, query, sizeof(query), "DELETE FROM `custom_dm` WHERE `id` = %d", DM_SQL(dmid));
 					mysql_function_query(1, query, true, "", "");
				}
			}
			//DeletePVar(playerid, "DMSelect");
			return 1;
		}
		case DIALOG_DM_WEATHER:
		{
		    if(!response) return 0;
		    new
			    dmid_ = GetPVarInt(playerid, "DMSelect");

			g_DM_Weather[dmid_] = strval(inputtext);
			mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `weather` = %d WHERE `id` = %d", strval(inputtext), DM_SQL(dmid_));
			mysql_function_query(1, query, true, "", "");


		    foreach(new i: Player)
			{
   				if(g_pDeathMatchID[i] == dmid_)
			    {
			        if(strval(inputtext) == -1)
			        {
			            if(GetPVarType(i, "PlayerWeather"))
						{
							SetPlayerWeather(i, GetPVarInt(i, "PlayerWeather"));
						}
			            else SetPlayerWeather(playerid, 17);
			        }
			        else SetPlayerWeather(i,strval(inputtext));
			    }
			}
		}
		case DIALOG_DM_TIME:
		{
		    if(!response) return 0;
		    new
			    dmid_ = GetPVarInt(playerid, "DMSelect");

		    if(strval(inputtext) == -1)
		    {
		        g_DM_Time[dmid_] = strval(inputtext);
		    }
		    else if(!(0 <= strval(inputtext) <= 23)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_FASZ_0__24"));

			mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `hour` = %d WHERE `id` = %d", strval(inputtext), DM_SQL(dmid_));
			mysql_function_query(1, query, true, "", "");

		    g_DM_Time[dmid_] = strval(inputtext);
		    foreach(new i: Player)
			{
   				if(g_pDeathMatchID[i] == dmid_)
			    {
			        if(strval(inputtext) == -1)
			        {
			            if(GetPVarType(playerid, "PlayerTime_Hour"))
			            {
			                SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"),GetPVarInt(playerid, "PlayerTime_Minute"));
			            }
			            else SetPlayerTime(playerid, 19,0);
			        }
			        else SetPlayerTime(i,strval(inputtext),0);
			    }
			}
		}
		case DIALOG_DM_EDIT_ARMED_WEAPON:
		{
			if(!response)
			    return 1;

			new
				weaponid = GetWeaponIDFromName(inputtext),
				dmid_ = GetPVarInt(playerid, "DMSelect");

			printf("weaponid: %d - %d", weaponid, dmid_);
            g_DMArmedWeapon{dmid_} = weaponid;

            GetWeaponName(weaponid, country, sizeof(country));
            SendClientMessagef(playerid, COLOR_KICK, LANG(playerid, "MSG__NEVU_DMHEZ_A_KEZDO_FEGYVER"), g_szDMName[dmid_], country);

			mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `armed_weapon` = %d WHERE `id` = %d", weaponid, DM_SQL(dmid_));
			mysql_function_query(1, query, true, "", "");
	        return 1;
		}
		case DIALOG_CREATEDM_COLOR:
		{
			new
			    dmid_ = g_pDMID[playerid],
			    bool:bShow;
			if(!response) bShow = true;

			new
			    hex;
   			if(sscanf(inputtext, "n", hex))
   			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_SZINKOD"));
				bShow = true;
			}

			if(!bShow)
			{
	            g_DMZoneColor[dmid_] = hex;
	            ShowCreateDMSpawnsMSG(playerid);

				mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `color` = '%d' WHERE `id` = %d", hex, DM_SQL(dmid_));
				mysql_function_query(1, query, true, "", "");

				SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_DM_BEALLITASAI_MEGCSIALVA_MOST"));

				if(g_DMFlags[dmid_] & e_IS_TDM)
				{
					SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_CSAPATVALTASHOZ_IRD_BE_HOGY"));
				}

				// Zóna létrehozása (-1es világba, hogy virtuális világok ne bugoljanak [játékos csak ezen belül tud spawnokat lerakni])
                UpdateDMZone(dmid_, true);
				return 1;
			}

            ShowCreateDMColor(playerid);
			return 1;
		}
		case DIALOG_CREATEDM_ZONE_OK:
		{
			ShowCreateDMColor(playerid);
			return 1;
		}
		case DIALOG_DM_EDIT_NAME:
		{
			new
			    dmid_ = GetPVarInt(playerid, "DMSelect"); // FASZOPÓ RETKES PAWN EZVÓT AZ UTOLSÓ H NAGOYBB DOLGOT CSINÁLTAM EBBE A BUGOS FOSBA - dmid"_"   -.-
			if(!response) goto Ide;

			switch(GetPVarInt(playerid, "EditName"))
			{
			    case 1: // Név szerkesztése
				{
					if(!(3 <= strlen(inputtext) <= sizeof(g_szDMName[])))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELO_NEV_HOSSZSAG"));
						goto Ide;
					}

					// Ha minden fasza, átnevezzük a DM-et
					SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___DM_NEVE_MEGVALTOZTATVA_A"), g_szDMName[dmid_], inputtext, dmid_);
					strcpy(g_szDMName[dmid_], inputtext);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `name` = '%e' WHERE `id` = %d", inputtext, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}
				case 2: // Gyorsparancs szerkesztése
				{
					if(!(1 <= strlen(inputtext) <= sizeof(g_szDMCommand[])))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_PARANCS_1"));
						goto Ide;
					}

					// Ha nem írt be semmit, vagy csillagot írt be, akkor a parancs törlése
					if(isnull(inputtext) || inputtext[0] == '*')
					{
                        SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG___NEVU_DMHEZ_A_PARANCS_TOROLVE"), g_szDMName[dmid_], inputtext);
					}
					else
					{
						// Ha nem / jellel kezdõdik a parancs, akkor fasságot írt be
						if(inputtext[0] != '/')
						{
							SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HULYESEGET_IRTAL_BE_A"));
							goto Ide;
						}

						// Létrezõ parancsot nem lehet DM parancsnak beállítani
						for(new i; i != 2000; i++) // g_iMaxCMD
						{
							GetGVarString("CMD", country, sizeof(country), i);
							if(!strcmp(country, inputtext, true))
							{
								SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_SAJNALJUK_DE_AZ__NEVU"), inputtext);
								goto Ide;
							}
						}

	                    SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG___NEVU_DMHEZ_A_PARANCS_MEGVALTO"), g_szDMName[dmid_], inputtext);
					}
					strcpy(g_szDMCommand[dmid_], inputtext);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `cmd` = '%e' WHERE `id` = %d", inputtext, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}

				case 3: // Játékoslimit szerkesztése
				{
					new
					    limit;
		   			if(sscanf(inputtext, "n", limit))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_SZAM_NEM_MEGFELO"));
						goto Ide;
					}

					if(!(2 <= limit <= MAX_PLAYERS))
					{
						SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_ERTEKET"), MAX_PLAYERS);
						goto Ide;
					}

					g_DMMaxPlayers[dmid_] = limit;
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG___NEVU_DMHEZ_A_MAX_JATEKOSLIMIT"), g_szDMName[dmid_], limit);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `maxplayers` = %d WHERE `id` = %d", limit, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}

				case 4: // Max ölések szerkesztése menetenkin
				{
					new
					    limit;
		   			if(sscanf(inputtext, "n", limit))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_SZAM_NEM_MEGFELO"));
						goto Ide;
					}

					if(!(0 <= limit <= 1024))
					{
						SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_ERTEKET_1"));
						goto Ide;
					}

					g_DMMaxKills[dmid_] = limit;
					SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG___NEVU_DMHEZ_A_MAX_OLESSZAM"), g_szDMName[dmid_], limit);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `maxkills` = %d WHERE `id` = %d", limit, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}
				case 5: // Kezdõ élet és armour beállítása
				{
		   			if(sscanf(inputtext, "p<:>ff", Health, Armour))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_ADATOK_NEM_A_MEGFELO"));
						return 1;
					}
					if(!(0.0 <= Health <= 100.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE"));
					if(!(0.0 <= Armour <= 100.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE_1"));

					g_DMHealth[dmid_] = Health;
					g_DMArmour[dmid_] = Armour;

					SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG___NEVU_DMBEN_A_KEZDO_ELET_ES"), g_szDMName[dmid_], Health, Armour);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `health` = %f, `armour` = %f WHERE `id` = %d", Health, Armour, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}
				case 6: // Gravitáció szerkesztése
				{
					new
					    Float:gravity;
		   			if(sscanf(inputtext, "f", gravity))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_SZAM_NEM_MEGFELO"));
						goto Ide;
					}

					if(!(-0.1 <= gravity <= 0.2))
					{
						SendClientMessagef(playerid, COLOR_RED, "HIBA: Nem megfelelõ értéket adtál meg gravitációnak.");
						goto Ide;
					}

					g_DMGravity[dmid_] = gravity;
					SendClientMessagef(playerid, COLOR_WHITE, "-> %s nevû DM-hez a gravitáció megváltoztatva: '{" #XCOLOR_YELLOW "}%f{" #XCOLOR_WHITE "}'", g_szDMName[dmid_], gravity);

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `gravity` = %f WHERE `id` = %d", gravity, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
				}
			}

			Ide:
			ShowDMEditDialog(playerid, dmid_);
			return 1;
		}
		case DIALOG_CREATEDM_TEAM:
		{
			if(!response) goto Ide;

			new
			    dmid_ = g_pDMID[playerid]; // FASZOPÓ RETKES PAWN EZVÓT AZ UTOLSÓ H NAGOYBB DOLGOT CSINÁLTAM EBBE A BUGOS FOSBA - dmid"_"   -.-
			switch(GetPVarInt(playerid, "TDMCreate"))
			{
				case 1: // Elsõ csapat név
				{
					if(!(0 <= strlen(inputtext) <= 11))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_AZ_ELSO"));
						goto Ide;
					}

					SetPVarString(playerid, "TDM_1", inputtext);
					SetPVarInt(playerid, "TDMCreate", 2);
				}
				case 2: // Második csapat név
				{
					if(!(0 <= strlen(inputtext) <= 11))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_A_MASODIK"));
						goto Ide;
					}

					SetPVarString(playerid, "TDM_2", inputtext);
					SetPVarInt(playerid, "TDMCreate", 3);
				}
				case 3: // Elsõ csapat szín
				{
					new
					    hex;
		   			if(sscanf(inputtext, "n", hex))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_SZINKOD"));
						goto Ide;
					}

					if(IsBlack(hex))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_LEHET_FEKETE"));
						goto Ide;
					}

					SetPVarInt(playerid, "TDM_X1", hex);
					SetPVarInt(playerid, "TDMCreate", 4);
				}
				case 4: // Második csapat szín
				{
					new
						szName1[16],
						szName2[16],
						color1,
						color2;
		   			if(sscanf(inputtext, "n", color2))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_SZINKOD"));
						goto Ide;
					}

					if(IsBlack(color2))
		   			{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_LEHET_FEKETE"));
						goto Ide;
					}

					GetPVarString(playerid, "TDM_1", szName1, sizeof(szName1));
					GetPVarString(playerid, "TDM_2", szName2, sizeof(szName2));
					color1 = GetPVarInt(playerid, "TDM_X1");

					SetPVarInt(playerid, "CreateTDM", 1);

					strcpy(g_szDMTeams[dmid_][0], szName1, sizeof(g_szDMTeams[][]));
					strcpy(g_szDMTeams[dmid_][1], szName2, sizeof(g_szDMTeams[][]));
					g_DMTeamColor[dmid_][0] = color1;
					g_DMTeamColor[dmid_][1] = color2;

					// TeamDM-ben a csapatkill számláló textdraw létrehozása
                	CreateDMTextdraw(dmid_);
					printf("teamnames: %s - %s", g_szDMTeams[dmid_][0], g_szDMTeams[dmid_][1]);

					SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_SIKERSEN_BEALLITOTTAD_A_CSAPATOK"));
					SendClientMessagef(playerid, COLOR_WHITE, "Team 1: '{%06x}%s{" #XCOLOR_WHITE "}' | {%06x}0x%x", color1 >>> 8, szName1, color1 >>> 8, color1);
					SendClientMessagef(playerid, COLOR_WHITE, "Team 2: '{%06x}%s{" #XCOLOR_WHITE "}' | {%06x}0x%x", color2 >>> 8, szName2, color2 >>> 8, color2);

					// Dialóg felmutatása, amit direkt késõbb mutatunk fel, mert a befejezés elõtt még van pár dialóg (név beírása, szín beírása..)
					GetPVarString(playerid, "DMStr", dline, sizeof(dline));
					ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_GOLD "}Infó..", dline, "Oké");

					mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `team_1` = '%d,%e', `team_2` = '%d,%e' WHERE `id` = %d", color1, szName1, color2, szName2, DM_SQL(dmid_));
					mysql_function_query(1, query, true, "", "");
					//print(query);
					return 1;
				}
			}
			Ide:
			ShowCreateTDMDialog(playerid);
		}

		case DIALOG_RACE_BUILDMENU:
		{
		    if(!response)
				return 0;

		    switch(listitem)
			{
			    case 0: ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 1, DIALOG_STYLE_INPUT, "CP méret állítása", "Írd be lentre, hogy mekkora legyen a CP \n\nAlap: 8\nNagy: 16\nMega: 21", "Ok", "Mégse");
                case 1: ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 2, DIALOG_STYLE_LIST, "Versenytípus beállítása", "Normál\nHajó\nRepülõ\nFutó", "Ok", "Mégse");
                case 2:
				{
                    BuildRaceClearWorld[playerid] = !BuildRaceClearWorld[playerid];
                    SendClientMessagef(playerid, COLOR_ORANGE, "Verseny ClearWorld %s", (BuildRaceClearWorld[playerid]) ? ("{00FFAA}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
                    cmd_buildrace(playerid,"");
				}
				case 3:
				{
				    BuildRaceAutoFix[playerid] = !BuildRaceAutoFix[playerid];
                    SendClientMessagef(playerid, COLOR_ORANGE, "Verseny autofix %s", (BuildRaceAutoFix[playerid]) ? ("{00FFAA}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
                    cmd_buildrace(playerid,"");
				}
				case 4:
				{
				    BuildRaceGhostMode[playerid] = !BuildRaceGhostMode[playerid];
                    SendClientMessagef(playerid, COLOR_ORANGE, "Verseny ghostmode %s", (BuildRaceGhostMode[playerid]) ? ("{00FFAA}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
                    cmd_buildrace(playerid,"");
				}
				case 5: //Ha a továbbra kattint
				{
				    if(BuildRaceCPSize[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CP_NINCS_BEALLITVA")),cmd_buildrace(playerid,"");
				    if(BuildRaceType[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TYPE_NINCS_BEALLITVA")),cmd_buildrace(playerid,"");
        			if(BuildRaceClearWorld[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CW_NINCS_BEALLITVA")),cmd_buildrace(playerid,"");
                    if(BuildRaceAutoFix[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AUTOFIX_NINCS_BEALLITVA")),cmd_buildrace(playerid,"");
                    if(BuildRaceGhostMode[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_GHOSTMODE_NINCS_BEALLITVA")),cmd_buildrace(playerid,"");

					// ide a további szarokat...

					new
					    szName[64];
					switch(BuildRaceType[playerid])
					{
						case 0: szName = "Normál";
						case 1: szName = "Hajó";
						case 2: szName = "Repülõ";
						case 3: szName = "Futó";
						default: szName = "Nincs beállítva";
					}

					SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENYSZERKESZTES_ELKEZDVE"), szName);
					SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_A_VERSENY_ELMENTESE_PEDIG_SAVERACE"));
					SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_MAJD_EZUTAN_CLEARRACE_ES_MEHET"));

                    if(BuildRaceClearWorld[playerid] == 1) AddPlayerToClearworld(playerid);
					else RemovePlayerFromClearworld(playerid);

                    BuildRaceID[playerid] = Itter_Count(races) + 1;
					BuildRaceCPS[playerid] = 0;
					AdminCommandLog("BuildRace", playerid, -1);
				}
			}
		}

	    case DIALOG_RACE_BUILDMENU + 1:
		{
		    if(!response)
				return 0;
		    //if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
		    new
				Float:fValue = floatstr(inputtext);
            if(!(0 <= fValue <= 32.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_00__320"));

            if(GetPVarInt(playerid,"RaceEdit") == 1) // Ha már a kész versenyt szerkeszti
            {
                new editrace = GetPVarInt(playerid,"EditRaceID");
                mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `cpsize` = '%f' WHERE `raceid` = %d",fValue, editrace);
				mysql_function_query(1, query, false, "", "");
				DeletePVar(playerid,"RaceEdit");
            }
            else
            {
            	BuildRaceCPSize[playerid] = fValue;
            	cmd_buildrace(playerid,"");
			}
		}

		case DIALOG_RACE_BUILDMENU + 2:
		{
		    if(!response)
				return 0;
		    //if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));

		    new
				//iValue = strval(inputtext),
				szName[12];

		    switch(listitem)
			{
				case 0: szName = "Normál";
				case 1: szName = "Hajó";
				case 2: szName = "Repülõ";
				case 3: szName = "Futó";
			}
			if(GetPVarInt(playerid,"RaceEdit") == 1) // Ha már a kész versenyt szerkeszti
            {
            	new editrace = GetPVarInt(playerid,"EditRaceID");
                mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `racetype` = '%d' WHERE `raceid` = %d",listitem, editrace);
				mysql_function_query(1, query, false, "", "");
				DeletePVar(playerid,"RaceEdit");
				SendClientMessagef(playerid,-1,"*** %s(%d) nevû verseny típusa beállítva! Típus: %s",g_szRaceName[editrace],editrace, szName);
            }
            else
            {
				BuildRaceType[playerid] = listitem;
				cmd_buildrace(playerid,"");
			}
		}
        case DIALOG_RACE_BUILDMENU + 3: //Gravitáció
		{
			if(!response)
				return 0;
		    new
		    	Float:gravity,
	    	 	editrace = GetPVarInt(playerid,"EditRaceID");
	    	 	
   			if(sscanf(inputtext, "f", gravity))
	   		{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_SZAM_NEM_MEGFELO"));
				//goto Ide;
			}

			if(!(-0.1 <= gravity <= 0.2))
			{
				SendClientMessagef(playerid, COLOR_RED, "HIBA: Nem megfelelõ értéket adtál meg gravitációnak.");
			//	goto Ide;
			}

			g_szRaceGravity[editrace] = gravity;
			SendClientMessagef(playerid, COLOR_WHITE, "-> %s nevû versenyhez a gravitáció megváltoztatva: '{" #XCOLOR_YELLOW "}%f{" #XCOLOR_WHITE "}'", g_szRaceName[editrace], gravity);
			
			mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `gravity` = %f WHERE `raceid` = %d", gravity, editrace);
			mysql_function_query(1, query, true, "", "");
			DeletePVar(playerid,"RaceEdit");
		}
		case DIALOG_RACE_BUILDMENU + 4: //Jármû
		{
		    if(!response)
				return 0;
				
			new
				carid,
			    editrace = GetPVarInt(playerid,"EditRaceID");

			if(strval(inputtext) == -1)
			{
			    g_szRaceVehicle[editrace] = -1;
			    mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `racevehicle` = %d WHERE `raceid` = %d", g_szRaceVehicle[editrace], editrace);
				mysql_function_query(1, query, true, "", "");
				SendClientMessagef(playerid, COLOR_YELLOW, "-> %s nevû versenyhez beállított jármû törölve", g_szRaceName[editrace]);

			    return 1;
			}
			    
            if(!IsNumeric(inputtext))
			{
				carid = GetVehicleModelIDFromName(inputtext);
			}
			else
			{
			    carid = strval(inputtext);
			}
			if(!IsValidModel(carid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_MODEL_NEM_LETEZIK"));

            g_szRaceVehicle[editrace] = carid;
            SendClientMessagef(playerid, COLOR_WHITE, "-> %s nevû versenyhez beállított jármû: '{" #XCOLOR_YELLOW "}%s(%d){" #XCOLOR_WHITE "}'", g_szRaceName[editrace], g_szVehicleNames[g_szRaceVehicle[editrace] - 400], g_szRaceVehicle[editrace]);
        	mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `racevehicle` = %d WHERE `raceid` = %d", g_szRaceVehicle[editrace], editrace);
			mysql_function_query(1, query, true, "", "");
		}
	    case DIALOG_RACES:
		{
			if(!response)
   				return 0;

			new
			    iVal;
            sscanf(inputtext, "p<.>d{s[64]}", iVal);
            ShowRaceEditDialog(playerid, iVal);
		}
		case DIALOG_RACE_EDIT:
		{
		    if(!response)
				return 0;
    		new editrace = GetPVarInt(playerid,"EditRaceID");
		    switch(listitem)
			{
			    case 0:
			    {
			        if((g_ServerFlags & e_RACE_ACTIVE) && Participants && GetPVarInt(playerid, "Level") < 2)
					{
                		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_VAN_OLYAN_VERSENY"));
						return 1;
					}

					if(g_ServerFlags & e_RACE_ACTIVE)
					{
						endrace();
					}
					mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = %d", editrace);
					mysql_function_query(1, query, true, "THREAD_LoadRace", "d", playerid);
			    }
			    case 1: // Információk megtekintése
				{
				    new
						TempTime[3],
						day_,
						month_,
						year_,
						hour_,
						minute_,
						second_,
						carid;

				    date(g_szRaceCreateTime[editrace], day, month, year, hour, minute, second);
				    date(g_szRaceRecordTime[editrace], day_, month_, year_, hour_, minute_, second_);


				    ConvertTime(var1, g_szRaceRecord[editrace], TempTime[0], TempTime[1], TempTime[2]);

				    carid = GetVehicleModelIDFromName(g_szRaceRecordVeh[editrace]);

					format(dline, sizeof(dline), "Név: %s\n\
					{" #XCOLOR_BLUE "}Készítette: {" #XCOLOR_BLUE "}%s (%d) {" #XCOLOR_GREEN "}Idõpont: {" #XCOLOR_PROPGREEN "}%02d.%02d.%02d %02d:%02d:%02d\n\
					Rekordtartó: %s(%d){" #XCOLOR_PROPGREEN "}\n\
 					Rekord: %d:%02d.%03d\n\
					Idõpont: %02d.%02d.%02d %02d:%02d:%02d\n\
					Jármû: %s(%d)",

					g_szRaceName[editrace], g_szRaceCreatorName[editrace], g_szRaceCreator[editrace], year, month, day, hour, minute, second,
                    g_szRaceHolder[editrace],g_szRaceHolderID[editrace], TempTime[0], TempTime[1], TempTime[2],year_, month_, day_, hour_, minute_, second_,g_szRaceRecordVeh[editrace],carid);
                    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Verseny információk..", dline, "Oké");
				}
				case 2: // Név megváltoztatása
				{
				    SetRaceName:
					format(i_str, 64, "{" #XCOLOR_BLUE "}%s -> Név váltás", g_szRaceName[editrace]);
					ShowPlayerDialogEx(playerid, DIALOG_RACE_EDIT2, DIALOG_STYLE_INPUT, i_str, "Írd be lentre a verseny új nevét.", "Oké", "Vissza");
					SetPVarInt(playerid,"EditRace",0);
				}
				case 3: //Clearworld
				{
				    g_szRaceClearWorld[editrace] = !g_szRaceClearWorld[editrace];
				    mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `clearworld` = '%d' WHERE `raceid` = %d",g_szRaceClearWorld[editrace], editrace);
					mysql_function_query(1, query, false, "", "");
					ShowRaceEditDialog(playerid,editrace);
				}
				case 4: //Autofix
				{
				    g_szRaceAutoFix[editrace] = !g_szRaceAutoFix[editrace];
				    mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `autofix` = '%d' WHERE `raceid` = %d",g_szRaceAutoFix[editrace], editrace);
					mysql_function_query(1, query, false, "", "");
					ShowRaceEditDialog(playerid,editrace);
				}
				case 5: //Ghostmode
				{
				    g_szRaceGhostMode[editrace] = !g_szRaceGhostMode[editrace];
				    mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `ghostmode` = '%d' WHERE `raceid` = %d",g_szRaceGhostMode[editrace], editrace);
					mysql_function_query(1, query, false, "", "");
					ShowRaceEditDialog(playerid,editrace);
				}
				case 6: //Típus
				{
                    ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 2, DIALOG_STYLE_LIST, "Versenytípus beállítása", "Normál\nHajó\nRepülõ\nFutó", "Ok", "Mégse");
				    SetPVarInt(playerid,"RaceEdit",1);
				}
				case 7: //Gravitáció
				{
    				format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Gravitáció beállítása", g_szRaceName[editrace]);
					ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 3, DIALOG_STYLE_INPUT, i_str, "Írd be lentre, hogy mennyi legyen a gravitáció\nAlap: 0.008", "Oké", "Vissza");
				}
				case 8: //Jármû
				{
				    format(i_str, 64, "{" #XCOLOR_BLUE2 "}%s -> Jármû beállítás", g_szRaceName[editrace]);
					ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 4, DIALOG_STYLE_INPUT, i_str, "Írd be lentre, hogy milyen jármû legyen a versenyben\nKikapcsolás: -1", "Oké", "Vissza");
				}
				case 9: //CP méret
				{
				    ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU + 1, DIALOG_STYLE_INPUT, "CP méret állítása", "Írd be lentre, hogy mekkora legyen a CP \n\nAlap: 8\nNagy: 16\nMega: 21", "Ok", "Mégse");
				    SetPVarInt(playerid,"RaceEdit",1);
				}
				case 10: //CP szerkesztés
				{
				    //valstr(name, editrace);
				    //cmd_editrace(playerid,name);
				    SendClientMessage(playerid,-1,"Jelenleg nem mûködik");
				}
				case 11: //Rekord törlése
				{
				    if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
   					mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `regid` = -1, `holder` = 'NINCS', `record` = 0, `recordtime` = 0, `vehicle` = '' WHERE `raceid` = %d", editrace);
					mysql_function_query(1, query, false, "", "");

					mysql_format(1, query, sizeof(query), "SELECT `race` FROM `racedata` WHERE `raceid` = %d", editrace);
					mysql_function_query(1, query, true, "THREAD_ResetRecord", "ddd", playerid, editrace, g_pQueryQueue[playerid]);

					format(i_str, 128,"%s(%d)",g_szRaceName[editrace], editrace);
					AdminCommandLog("RESETRECORD", playerid, -1, i_str);
				}
				case 12: //Verseny törlése
				{
				    //if(!IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
				    if(GetPVarInt(playerid,"Level") < 3) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HEADADMIN"));
				    SendClientMessagef(playerid,COLOR_RED,"*** %s(%d) nevû verseny sikeressen törölve!", g_szRaceName[editrace], editrace);
				    Itter_Remove(races, editrace);
				    
				    mysql_format(1, query, sizeof(query), "DELETE FROM `racedata` WHERE `raceid` = %d", editrace);
					mysql_function_query(1, query, false, "", "");
				    mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
				    
					format(i_str, sizeof(i_str), "%s(%d)", g_szRaceName[editrace], editrace);
					AdminCommandLog("DELETE_RACE", playerid, -1, i_str);
				}
			}
		}
		case DIALOG_RACE_EDIT2:
		{
		    if(!response) return 0;
		    new editrace = GetPVarInt(playerid,"EditRaceID");
		    switch(GetPVarInt(playerid,"EditRace"))
		    {
			    case 0:
			    {
			        if(!(3 <= strlen(inputtext) <= sizeof(g_szRaceName[])))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELO_NEV_HOSSZSAG"));
						goto SetRaceName;
						return 1;
					}

					mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `race` = '%e' WHERE `raceid` = %d", inputtext, editrace);
					mysql_function_query(1, query, false, "", "");

					SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENY__ATNEVEZVE_UJ_NEVE"), g_szRaceName[editrace], inputtext);
					AdminCommandLog("RACENAME", playerid, -1, "ID: %d, Oldname: %s, Newname: %s", editrace, g_szRaceName[editrace], inputtext);
					strcpy(g_szRaceName[editrace], inputtext);
					ShowRaceEditDialog(playerid,editrace);
				}
		    }
		}
		case DIALOG_SELECT_LANG:
		{
		    if(!response) SelectLanguage(playerid);
		    switch(listitem)
		    {
				case 0: g_pLang{playerid} = LANGUAGE_HU, RegisterDialog(playerid);
				case 1: g_pLang{playerid} = LANGUAGE_EN, RegisterDialog(playerid);
		    }
		}
		case DIALOG_TELEPORTS:
		{
		    if(!response) return 0;
		    sscanf(inputtext, "p<|>s[128]{s[128]}", i_str);
		    
		    
		    if(g_pLang{playerid} == LANGUAGE_HU)
			{
                 if(!strcmp(i_str, "Házbelsõk", true)) return cmd_interiors(playerid,"");
		   		 else if(!strcmp(i_str, "Véletlenszerû", true)) return cmd_rtele(playerid,"");
			}
			else
			{
			    if(!strcmp(i_str, "Interiors", true)) return cmd_interiors(playerid,"");
	   		 	else if(!strcmp(i_str, "Random teleport", true)) return cmd_rtele(playerid,"");
			}
		    if(g_pLang{playerid} == LANGUAGE_HU) format(query, sizeof(query), "SELECT * FROM `teleports` WHERE kategoria_hu = '%s'", i_str);
			else format(query, sizeof(query), "SELECT * FROM `teleports` WHERE kategoria_en = '%s'", i_str);
			mysql_function_query(1, query, true, "THREAD_ShowSQLTeleportList2", "dds", playerid, g_pQueryQueue[playerid], i_str);
		}
		case DIALOG_TELEPORTS + 1:
		{
		    if(!response) return cmd_t(playerid,"");
		    new
				telename[128],
				telecmd[16];
				
		    sscanf(inputtext, "p<|>s[128]s[64]", telename, telecmd);
		    format(query, sizeof(query), "SELECT * FROM `teleports` WHERE name_hu = '%s'", telename);
		    mysql_function_query(1, query, true, "THREAD_ShowSQLTeleportList3", "dd", playerid, g_pQueryQueue[playerid]);
		}
		case DIALOG_TELEPORTS + 2:
		{
		    if(!response) return 0;
		    
		    new
				telename[128],
				telecmd[16];

		    sscanf(inputtext, "p<|>s[128]s[64]", telename, telecmd);
		    format(query, sizeof(query), "SELECT * FROM `teleports` WHERE name_hu = '%s'", telename);
		    mysql_function_query(1, query, true, "THREAD_ShowSQLTeleportList3", "dd", playerid, g_pQueryQueue[playerid]);
		}
		case DIALOG_HOUSEMENU_BUTOROK:
		{
		    //SendClientMessage(playerid,-1,"Jelenleg nem mûködik");
  			//if(!response) cmd_housemenu(playerid,"");
     		//SetTimerEx("ShowButorSelectionMenu", 500, false, "ii", playerid, listitem);
		}
		case DIALOG_CHATMSG:
		{
		    if(!response) return 0;
			i_str[0] = EOS;
			strcat(i_str, inputtext, sizeof(i_str));

			g_pChatMSGFlags[playerid] ^= e_ChatMSG_Flags:(1 << listitem);
			cmd_chatmsg(playerid,"");
   
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `chatflags` = %d WHERE `reg_id` = %d", g_pChatMSGFlags[playerid], PlayerInfo[playerid][pRegID]);
   			mysql_function_query(1, query, false, "", "");
		}
		case DIALOG_SQL_TUNE_1:
		{
		    if(!response) return 0;
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));

			new modelid = GetDynamicVehicleModel(GetPlayerDynamicVehicleID(playerid));

			switch (modelid)
   			{
      			case 534 .. 536, 558 .. 562, 565, 567, 575, 576:
         		{
           			if(!strcmp(inputtext, "Wheels") || !strcmp(inputtext, "Hydraulics"))
       				{
           				mysql_format(1, query, sizeof(query), "SELECT componentid,type FROM vehicle_components WHERE part='%e' ORDER BY type", inputtext);
               		}
                 	else mysql_format(1, query, sizeof(query), "SELECT componentid,type FROM vehicle_components WHERE cars=%i AND part='%e' ORDER BY type", modelid, inputtext);
              	}
               	default: mysql_format(1, query, sizeof(query), "SELECT componentid,type FROM vehicle_components WHERE cars<=0 AND part='%e' ORDER BY type", inputtext);
			}
   			mysql_function_query(1, query, true, "THREAD_VehicleComponents", "ddd", playerid, 2, g_pQueryQueue[playerid]);
   			//printf(query);
		}
		case DIALOG_SQL_TUNE_2:
		{
		    if(!response) return cmd_tuning(playerid, "");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));

            new vehicleid = GetPlayerDynamicVehicleID(playerid), componentid;

            if(!sscanf(inputtext, "i", componentid)) AddVehicleComponent(vehicleid, componentid), PlayerPlaySound(playerid, 1133);
            else return RemoveVehicleComponent(vehicleid, 1087);

            switch (componentid)
            {
                case 1007, 1027, 1030, 1039, 1040, 1051, 1052, 1062, 1063, 1071, 1072, 1094, 1099, 1101, 1102, 1107, 1120, 1121, 1124, 1137, 1142 .. 1145: AddVehicleComponent(vehicleid, componentid),  PlayerPlaySound(playerid, 1133);
            }
            //printf("vid %d cid %d", vehicleid, componentid);
           	cmd_tuning(playerid,"");
		}
	}
	return 0;
}

stock HouseCarEdit(playerid, type[])
{
	houseid = GetPVarInt(playerid, "PlayerProp");
	vID = GetPlayerDynamicVehicleID(playerid);
	
	if(GetGVarInt("CarModel", houseid) != -1)
	{
		foreach(new i: Player)
		{
			if(GetPVarInt(i, "EllopottID") == houseid)
	    	{
                return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EPP_LOPJAK_A_HAZAUTODAT_NEMTUDSZ"));
			}
		}
	}
	
    new
		iHouseCarModel = GetGVarInt("CarModel", houseid),
    	iHouseCarID = GetGVarInt("HouseCar", houseid),
   	 	ModelID = GetDynamicVehicleModel(vID);

	if(!strcmp(type, "BuyHouseCar", true))
	{
 		new
		    price = GetVehiclePrice(GetDynamicVehicleModel(vID)),
		    color[3],
		    iCompID[14],
			i;
			
	    if(iHouseCarModel != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_VAN_AUTO_A_HAZADNAL_TOROLD"));
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	    if(!IsPlayerInRangeOfPoint(playerid, 30.0, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_MESSZE_VAGY_A_HAZADTOL"));
	    if(GetPlayerMoneyEx(playerid) < price) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_5"), FormatNumber(price));
	    
	    if(ModelID == 432) return SendClientMessage(playerid, COLOR_RED, "HIBA: Tankot nem rakhatsz be házautónak!");
	    if(vID == g_BonusCarID || gWJCar[0] <= vID <= gWJCar[1] || gTruck[0] <= vID <= gTruck[sizeof(gTruck)-1] || gTunedCar[0] <= vID <= gTunedCar[1] || gTrailers[0] <= vID <= gTrailers[1]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_JARMUVET_NEM_RAKHATOD"));
	    
	    GetDynamicVehicleColor(vID, color[0], color[1]);
		color[2] = GetDynamicVehiclePaintjob(vID) -1;
        GetDynamicVehiclePos(vID, X, Y, Z);
		GetDynamicVehicleZAngle(vID, Angle);
        
        for(i = 0; i != 14; i++)
		{
			format(name, sizeof(name), "CarComponent_%d", i);
			iCompID[i] = GetDynamicVehComponentInSlot(vID, i);

			SetGVarInt(name, iCompID[i], houseid);
		}
		
        foreach(Player, x)
		{
			if(GetPVarInt(x, "pCar") == vID) SetPVarInt(x, "pCar", INVALID_VEHICLE_ID);
			if(GetPVarInt(x, "pCar2") == vID) SetPVarInt(x, "pCar2", INVALID_VEHICLE_ID);
		}
		DestroyDynamicVehicle(vID);
		//======================================================================

		vID = CreateDynamicVehicle(ModelID, X, Y, Z, Angle, color[0], color[1], -1);
		LinkDynamicVehicleToInterior(vID, GetGVarInt("OutInt", houseid));
		ChangeDynamicVehiclePaintjob(vID, color[2]);
		
		
		for(new x; x != 14; x++)
		{
			if(!iCompID[x]) continue;
		 	AddDynamicVehicleComponent(vID, iCompID[x]);
		}
		Bit_Set(gIsHouseCar, vID, true);
		SetGVarInt("HouseCar", vID, houseid);
		SetGVarInt("CarModel", ModelID, houseid);
		SetGVarFloat("CarX", X, houseid);
		SetGVarFloat("CarY", Y, houseid);
		SetGVarFloat("CarZ", Z, houseid);
		SetGVarFloat("CarA", Angle, houseid);

		SetGVarInt("CarColor1", color[0], houseid);
		SetGVarInt("CarColor2", color[1], houseid);
        SetGVarInt("Paintjob", color[2]-1, houseid);
		
		RandomNumberPlate(vID);
		GivePlayerMoneyEx(playerid, -price, "BuyHouseCar");

		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_LERAKVANBAR_G"), FormatNumber(price));
		
		
		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_model` = %d, `car_x` = %f, `car_y` = %f, `car_z` = %f, `car_a` = %f, `car_color_1` = %d, `car_color_2` = %d, `paintjob` = %d WHERE `id` = %d", ModelID, X, Y, Z, Angle, color[0], color[1], color[2], houseid);
		mysql_function_query(1, query, false, "", "");
		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `comp_0` = %d, `comp_1` = %d, `comp_2` = %d, `comp_3` = %d, `comp_4` = %d, `comp_5` = %d, `comp_6` = %d, `comp_7` = %d, `comp_8` = %d, `comp_9` = %d, `comp_10` = %d, `comp_11` = %d, `comp_12` = %d, `comp_13` = %d WHERE `id` = %d", iCompID[0], iCompID[1], iCompID[2], iCompID[3], iCompID[4], iCompID[5], iCompID[6], iCompID[7], iCompID[8], iCompID[9], iCompID[10], iCompID[11], iCompID[12], iCompID[13], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "RemoveHouseCar", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    DestroyDynamicVehicle(iHouseCarID);
		SetGVarInt("CarModel", -1, houseid);
        SetGVarInt("HouseCar", -1, houseid);
	    
	    new
		    i;
		for( ; i != 14; i++)
		{
			format(name, sizeof(name), "CarComponent_%d", i);
			DeleteGVar(name, houseid);
		}
		for(i = 0; i != MAX_VEH_OBJECT; i++)
		{
			if(!g_HouseVehicleObjects[houseid][i]) continue;

			DestroyDynamicObject(gVehicleObject[iHouseCarID][i]);

			g_HouseVehicleObjects[houseid][i] = 0;
			gVehicleObject[iHouseCarID][i] = INVALID_OBJECT_ID;
		}
	    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_TOROLVE"));

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_model` = -1, `car_x` = 0, `car_y` = 0, `car_z` = 0, `car_a` = 0, `car_color_1` = -1, `car_color_2` = -1, `comp_0` = 0, `comp_1` = 0, `comp_2` = 0, `comp_3` = 0, `comp_4` = 0, `comp_5` = 0, `comp_6` = 0, `comp_7` = 0, `comp_8` = 0, `comp_9` = 0, `comp_10` = 0, `comp_11` = 0, `comp_12` = 0, `comp_13` = 0, `vehicleobjects` = '"VEH_OBJECT_NULL"' WHERE `id` = %d", houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	
	else if(!strcmp(type, "HouseCarUpdatePos", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		if(!IsPlayerInRangeOfPoint(playerid, 70.0, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_MESSZE_VAGY_A_HAZADTOL"));
		if(!IsPlayerInDynamicVehicle(playerid, iHouseCarID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_ULSZ_A_HAZAUTODBAN"));

		ModelID = GetDynamicVehicleModel(iHouseCarID);
		new
			iType = GetVehicleType(ModelID);
        if(iType == VEHICLE_TRAIN || iType == VEHICLE_TRAM) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VONATOT_ES_VILLAMOST_NEM"));

		GetDynamicVehiclePos(iHouseCarID, X, Y, Z);
		GetDynamicVehicleZAngle(iHouseCarID, Angle);

		DestroyDynamicVehicle(iHouseCarID);
        SetGVarInt("HouseCar", -1, houseid);

		vID = CreateDynamicVehicle(ModelID, X, Y, Z, Angle, GetGVarInt("CarColor1", houseid), GetGVarInt("CarColor2", houseid), -1);
		SetGVarInt("HouseCar", vID, houseid);

	    LinkDynamicVehicleToInterior(vID, GetGVarInt("OutInt", houseid));

        SetGVarFloat("CarX", X, houseid);
        SetGVarFloat("CarY", Y, houseid);
        SetGVarFloat("CarZ", Z, houseid);
        SetGVarFloat("CarA", Angle, houseid);

        SetDynamicVehicleToRespawn(vID);
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_HELYE_MEGVALTOZTATVA"));

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_x` = %f, `car_y` = %f, `car_z` = %f, `car_a` = %f WHERE `id` = %d", X, Y, Z, Angle, houseid);
		mysql_function_query(1, query, false, "", "");

		for(new i; i != MAX_VEH_OBJECT; i++)
		{
			if(!g_HouseVehicleObjects[houseid][i]) continue;
            mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
				g_HouseVehicleObjects[houseid][0], g_HouseVehicleObjects[houseid][1], g_HouseVehicleObjects[houseid][2], g_HouseVehicleObjects[houseid][3], g_HouseVehicleObjects[houseid][4], g_HouseVehicleObjects[houseid][5], g_HouseVehicleObjects[houseid][6], g_HouseVehicleObjects[houseid][7], g_HouseVehicleObjects[houseid][8], g_HouseVehicleObjects[houseid][9],
				g_HouseVehicleObjects[houseid][10], g_HouseVehicleObjects[houseid][11], g_HouseVehicleObjects[houseid][12], g_HouseVehicleObjects[houseid][13], g_HouseVehicleObjects[houseid][14], g_HouseVehicleObjects[houseid][15], g_HouseVehicleObjects[houseid][16], g_HouseVehicleObjects[houseid][17], g_HouseVehicleObjects[houseid][18],
				g_HouseVehicleObjects[houseid][19], g_HouseVehicleObjects[houseid][20], g_HouseVehicleObjects[houseid][21], g_HouseVehicleObjects[houseid][22], g_HouseVehicleObjects[houseid][23], g_HouseVehicleObjects[houseid][24], g_HouseVehicleObjects[houseid][25], g_HouseVehicleObjects[houseid][26], g_HouseVehicleObjects[houseid][27],
				g_HouseVehicleObjects[houseid][28], g_HouseVehicleObjects[houseid][29], g_HouseVehicleObjects[houseid][30], g_HouseVehicleObjects[houseid][31], g_HouseVehicleObjects[houseid][32], g_HouseVehicleObjects[houseid][33], g_HouseVehicleObjects[houseid][34], g_HouseVehicleObjects[houseid][35], g_HouseVehicleObjects[houseid][36],
				g_HouseVehicleObjects[houseid][37], g_HouseVehicleObjects[houseid][38], g_HouseVehicleObjects[houseid][39], g_HouseVehicleObjects[houseid][40], g_HouseVehicleObjects[houseid][41], g_HouseVehicleObjects[houseid][42], g_HouseVehicleObjects[houseid][43], g_HouseVehicleObjects[houseid][44], g_HouseVehicleObjects[houseid][45],
				g_HouseVehicleObjects[houseid][46], g_HouseVehicleObjects[houseid][47], g_HouseVehicleObjects[houseid][48], g_HouseVehicleObjects[houseid][49], g_HouseVehicleObjects[houseid][50], g_HouseVehicleObjects[houseid][51], g_HouseVehicleObjects[houseid][52], g_HouseVehicleObjects[houseid][53], g_HouseVehicleObjects[houseid][54],
				g_HouseVehicleObjects[houseid][55], g_HouseVehicleObjects[houseid][56], g_HouseVehicleObjects[houseid][57], g_HouseVehicleObjects[houseid][58], g_HouseVehicleObjects[houseid][59], g_HouseVehicleObjects[houseid][60], g_HouseVehicleObjects[houseid][61], g_HouseVehicleObjects[houseid][62], g_HouseVehicleObjects[houseid][63],
				g_HouseVehicleObjects[houseid][64], g_HouseVehicleObjects[houseid][65], g_HouseVehicleObjects[houseid][66], g_HouseVehicleObjects[houseid][67], g_HouseVehicleObjects[houseid][68], g_HouseVehicleObjects[houseid][69], g_HouseVehicleObjects[houseid][70], g_HouseVehicleObjects[houseid][71], g_HouseVehicleObjects[houseid][72],
			 	g_HouseVehicleObjects[houseid][73], g_HouseVehicleObjects[houseid][74], g_HouseVehicleObjects[houseid][75], g_HouseVehicleObjects[houseid][76], g_HouseVehicleObjects[houseid][77], g_HouseVehicleObjects[houseid][78], g_HouseVehicleObjects[houseid][79], g_HouseVehicleObjects[houseid][80], g_HouseVehicleObjects[houseid][81],
				g_HouseVehicleObjects[houseid][82], g_HouseVehicleObjects[houseid][83], g_HouseVehicleObjects[houseid][84], g_HouseVehicleObjects[houseid][85], g_HouseVehicleObjects[houseid][86], g_HouseVehicleObjects[houseid][87], g_HouseVehicleObjects[houseid][88], g_HouseVehicleObjects[houseid][89], g_HouseVehicleObjects[houseid][90],
				g_HouseVehicleObjects[houseid][91], g_HouseVehicleObjects[houseid][92], g_HouseVehicleObjects[houseid][93], g_HouseVehicleObjects[houseid][94], g_HouseVehicleObjects[houseid][95], g_HouseVehicleObjects[houseid][96], g_HouseVehicleObjects[houseid][97], g_HouseVehicleObjects[houseid][98], g_HouseVehicleObjects[houseid][99],
			 	g_HouseVehicleObjects[houseid][100], g_HouseVehicleObjects[houseid][101], g_HouseVehicleObjects[houseid][102], g_HouseVehicleObjects[houseid][103], g_HouseVehicleObjects[houseid][104], g_HouseVehicleObjects[houseid][105], g_HouseVehicleObjects[houseid][106], g_HouseVehicleObjects[houseid][107], g_HouseVehicleObjects[houseid][108],
				g_HouseVehicleObjects[houseid][109], g_HouseVehicleObjects[houseid][110], g_HouseVehicleObjects[houseid][111], g_HouseVehicleObjects[houseid][112], g_HouseVehicleObjects[houseid][113], g_HouseVehicleObjects[houseid][114], g_HouseVehicleObjects[houseid][115], g_HouseVehicleObjects[houseid][116], g_HouseVehicleObjects[houseid][117],
				g_HouseVehicleObjects[houseid][118], g_HouseVehicleObjects[houseid][119]);
	        mysql_function_query(1, query, true, "THREAD_Houses_LoadObjects", "dd", houseid, vID);
			break;
		}
		return 1;
	}
	else if(!strcmp(type, "HouseCarRespawn", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    SetDynamicVehicleToRespawn(iHouseCarID);
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_UJRASPAWNOLVA"));

        for(new i; i != MAX_VEH_OBJECT; i++)
		{
			if(!g_HouseVehicleObjects[houseid][i]) continue;
            mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
				g_HouseVehicleObjects[houseid][0], g_HouseVehicleObjects[houseid][1], g_HouseVehicleObjects[houseid][2], g_HouseVehicleObjects[houseid][3], g_HouseVehicleObjects[houseid][4], g_HouseVehicleObjects[houseid][5], g_HouseVehicleObjects[houseid][6], g_HouseVehicleObjects[houseid][7], g_HouseVehicleObjects[houseid][8], g_HouseVehicleObjects[houseid][9],
				g_HouseVehicleObjects[houseid][10], g_HouseVehicleObjects[houseid][11], g_HouseVehicleObjects[houseid][12], g_HouseVehicleObjects[houseid][13], g_HouseVehicleObjects[houseid][14], g_HouseVehicleObjects[houseid][15], g_HouseVehicleObjects[houseid][16], g_HouseVehicleObjects[houseid][17], g_HouseVehicleObjects[houseid][18],
				g_HouseVehicleObjects[houseid][19], g_HouseVehicleObjects[houseid][20], g_HouseVehicleObjects[houseid][21], g_HouseVehicleObjects[houseid][22], g_HouseVehicleObjects[houseid][23], g_HouseVehicleObjects[houseid][24], g_HouseVehicleObjects[houseid][25], g_HouseVehicleObjects[houseid][26], g_HouseVehicleObjects[houseid][27],
				g_HouseVehicleObjects[houseid][28], g_HouseVehicleObjects[houseid][29], g_HouseVehicleObjects[houseid][30], g_HouseVehicleObjects[houseid][31], g_HouseVehicleObjects[houseid][32], g_HouseVehicleObjects[houseid][33], g_HouseVehicleObjects[houseid][34], g_HouseVehicleObjects[houseid][35], g_HouseVehicleObjects[houseid][36],
				g_HouseVehicleObjects[houseid][37], g_HouseVehicleObjects[houseid][38], g_HouseVehicleObjects[houseid][39], g_HouseVehicleObjects[houseid][40], g_HouseVehicleObjects[houseid][41], g_HouseVehicleObjects[houseid][42], g_HouseVehicleObjects[houseid][43], g_HouseVehicleObjects[houseid][44], g_HouseVehicleObjects[houseid][45],
				g_HouseVehicleObjects[houseid][46], g_HouseVehicleObjects[houseid][47], g_HouseVehicleObjects[houseid][48], g_HouseVehicleObjects[houseid][49], g_HouseVehicleObjects[houseid][50], g_HouseVehicleObjects[houseid][51], g_HouseVehicleObjects[houseid][52], g_HouseVehicleObjects[houseid][53], g_HouseVehicleObjects[houseid][54],
				g_HouseVehicleObjects[houseid][55], g_HouseVehicleObjects[houseid][56], g_HouseVehicleObjects[houseid][57], g_HouseVehicleObjects[houseid][58], g_HouseVehicleObjects[houseid][59], g_HouseVehicleObjects[houseid][60], g_HouseVehicleObjects[houseid][61], g_HouseVehicleObjects[houseid][62], g_HouseVehicleObjects[houseid][63],
				g_HouseVehicleObjects[houseid][64], g_HouseVehicleObjects[houseid][65], g_HouseVehicleObjects[houseid][66], g_HouseVehicleObjects[houseid][67], g_HouseVehicleObjects[houseid][68], g_HouseVehicleObjects[houseid][69], g_HouseVehicleObjects[houseid][70], g_HouseVehicleObjects[houseid][71], g_HouseVehicleObjects[houseid][72],
			 	g_HouseVehicleObjects[houseid][73], g_HouseVehicleObjects[houseid][74], g_HouseVehicleObjects[houseid][75], g_HouseVehicleObjects[houseid][76], g_HouseVehicleObjects[houseid][77], g_HouseVehicleObjects[houseid][78], g_HouseVehicleObjects[houseid][79], g_HouseVehicleObjects[houseid][80], g_HouseVehicleObjects[houseid][81],
				g_HouseVehicleObjects[houseid][82], g_HouseVehicleObjects[houseid][83], g_HouseVehicleObjects[houseid][84], g_HouseVehicleObjects[houseid][85], g_HouseVehicleObjects[houseid][86], g_HouseVehicleObjects[houseid][87], g_HouseVehicleObjects[houseid][88], g_HouseVehicleObjects[houseid][89], g_HouseVehicleObjects[houseid][90],
				g_HouseVehicleObjects[houseid][91], g_HouseVehicleObjects[houseid][92], g_HouseVehicleObjects[houseid][93], g_HouseVehicleObjects[houseid][94], g_HouseVehicleObjects[houseid][95], g_HouseVehicleObjects[houseid][96], g_HouseVehicleObjects[houseid][97], g_HouseVehicleObjects[houseid][98], g_HouseVehicleObjects[houseid][99],
			 	g_HouseVehicleObjects[houseid][100], g_HouseVehicleObjects[houseid][101], g_HouseVehicleObjects[houseid][102], g_HouseVehicleObjects[houseid][103], g_HouseVehicleObjects[houseid][104], g_HouseVehicleObjects[houseid][105], g_HouseVehicleObjects[houseid][106], g_HouseVehicleObjects[houseid][107], g_HouseVehicleObjects[houseid][108],
				g_HouseVehicleObjects[houseid][109], g_HouseVehicleObjects[houseid][110], g_HouseVehicleObjects[houseid][111], g_HouseVehicleObjects[houseid][112], g_HouseVehicleObjects[houseid][113], g_HouseVehicleObjects[houseid][114], g_HouseVehicleObjects[houseid][115], g_HouseVehicleObjects[houseid][116], g_HouseVehicleObjects[houseid][117],
				g_HouseVehicleObjects[houseid][118], g_HouseVehicleObjects[houseid][119]);
	        mysql_function_query(1, query, true, "THREAD_Houses_LoadObjects", "dd", houseid, iHouseCarID);
			break;
		}
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_UJRASPAWNOLVA"));
		
		return 1;
	}
	else if(!strcmp(type, "HouseCarGet", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_A_RANGE_ZONABAN_NEM_TELEPORTALHATOD"));

		if(IsPlayerInAnyDynamicVehicle(playerid)) RemovePlayerFromVehicleEx(playerid);

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

		SetDynamicVehiclePos(iHouseCarID, X, Y, Z);
		SetDynamicVehicleZAngle(iHouseCarID, Angle);

		LinkDynamicVehicleToInterior(iHouseCarID, GetPlayerInterior(playerid));
		SetDynamicVehicleVirtualWorld(iHouseCarID, GetPlayerVirtualWorld(playerid));
		PutPlayerInDynamicVehicle(playerid, iHouseCarID, 0);

        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUTOD_MAGADHOZ_TELEPORTALVA"));
        return 1;
	}
	else if(!strcmp(type, "HouseCarGoto", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		if(NoTele(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_NEM_TELEZHETSZ"));
        if(IsPlayerInAnyDynamicVehicle(playerid)) RemovePlayerFromVehicleEx(playerid);

		GetDynamicVehiclePos(iHouseCarID, X, Y, Z);
		PlayerTele(playerid, X, Y, Z, GetDynamicVehicleInterior(iHouseCarID), 0.0, GetDynamicVehicleVirtualWorld(iHouseCarID));
		PutPlayerInDynamicVehicle(playerid, iHouseCarID, 0);
		return 1;
	}
	else if(!strcmp(type, "HouseCarAllowTeleport", true))
	{
	    //SetGVarInt("Hackdetector", 1, houseid);
	
		if(GetGVarInt("HousecarNoTele",iHouseCarID))
		{
		    name = "{" #XCOLOR_WHITE "}Engedélyezve";
		    SetGVarInt("HousecarNoTele", 0, iHouseCarID);
		}
		else
		{
		    name = "{" #XCOLOR_RED "}Letiltva";
		    SetGVarInt("HousecarNoTele", 1, iHouseCarID);
		}

		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTOVAL_VALO_TELEPORTALAS"), name);
	
	
	    //GetGVarInt("HousecarNoTele",iHouseCarID)
	
	
        /*if(!GetGVarInt("HousecarNoTele",iHouseCarID))
        {
        	SetGVarInt("HousecarNoTele", 0, iHouseCarID);
        
        
        
        
            
        }
        else
        {
            SetGVarInt("HousecarNoTele", 1, iHouseCarID);
            
        }
        
        
   */
/*
		if(!(flags & e_NO_TELE))
		{
            SetGVarInt("HousecarNoTele",iHouseCarID, 0);
	        name = "{" #XCOLOR_WHITE "}Engedélyezve";
		}
		else
		{
            SetGVarInt("HousecarNoTele",iHouseCarID, 1);
		    name = "{" #XCOLOR_RED "}Letiltva";
		}

        

		//mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags{houseid}, houseid);
		//mysql_function_query(1, query, false, "", "");


		*/






		return 1;
	}
	else if(!strcmp(type, "HouseCarBoot", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		g_HouseFlags[houseid] ^= e_CAR_BOOT;
	    if(g_HouseFlags[houseid] & e_CAR_BOOT)
	    {
	        name = "{" #XCOLOR_WHITE "}Kinyitva";
		}
		else
		{
	        name = "{" #XCOLOR_RED "}Becsukva";
		}
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTO_CSOMAGTARTOJA_"), name);

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(iHouseCarID, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarSaveObjects", true))
	{
        if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		for(new i; i < MAX_VEH_OBJECT; i++)
		{
			if(!i)
			{
				format(dline, sizeof(dline), "%d", g_HouseVehicleObjects[houseid][i]);
			}
			else
			{
	            format(dline, sizeof(dline), "%s,%d", dline, g_HouseVehicleObjects[houseid][i]);
			}
		}

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `vehicleobjects` = '%s' WHERE `id` = %d", dline, houseid);
		mysql_function_query(1, query, false, "", "");
		//printf(query);

		SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_OBJECTOK_FRISSITVE"));
	    return 1;
	}
	else if(!strcmp(type, "HouseCarDeleteObjects", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		for(new i; i != MAX_VEH_OBJECT; i++)
		{
			if(!g_HouseVehicleObjects[houseid][i]) continue;

			DestroyDynamicObject(gVehicleObject[iHouseCarID][i]);

			g_HouseVehicleObjects[houseid][i] = 0;
			gVehicleObject[iHouseCarID][i] = INVALID_OBJECT_ID;
		}

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `vehicleobjects` = '"VEH_OBJECT_NULL"' WHERE `id` = %d", houseid);
		mysql_function_query(1, query, false, "", "");

		SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_OBJECTOK_FRISSITVE"));
	    return 1;
	}
	else if(!strcmp(type, "HouseCarSiren", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		g_HouseFlags[houseid] ^= e_CAR_SIREN;
	    if(g_HouseFlags[houseid] & e_CAR_SIREN)
	    {
	        name = "{" #XCOLOR_WHITE "}Bekapcsolva";
		}
		else
		{
	        name = "{" #XCOLOR_RED "}Kikapcsolva";
		}
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTO_SIREN"), name);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarBonnet", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    g_HouseFlags[houseid] ^= e_CAR_BONNET;
	    if(g_HouseFlags[houseid] & e_CAR_BONNET)
	    {
	        name = "{" #XCOLOR_WHITE "}Kinyitva";
		}
		else
		{
	        name = "{" #XCOLOR_RED "}Becsukva";
		}
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTO_MOTORHAZTETOJE_"), name);

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(iHouseCarID, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarLights", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    g_HouseFlags[houseid] ^= e_CAR_LIGHTS;
	    if(g_HouseFlags[houseid] & e_CAR_LIGHTS)
	    {
	        name = "{" #XCOLOR_WHITE "}Bekapcsolva";
		}
		else
		{
	        name = "{" #XCOLOR_RED "}Kikapcsolva";
		}
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTO_LAMPAI_"), name);

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(iHouseCarID, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarDoors", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
		g_HouseFlags[houseid] ^= e_CAR_DOORS;
	    if(g_HouseFlags[houseid] & e_CAR_DOORS)
	    {
	        name = "{" #XCOLOR_RED "}Bezárva";
		}
		else
		{
	        name = "{" #XCOLOR_WHITE "}Kinyitva";
		}
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_HAZAUTO_AJTOJA_"), name);

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(iHouseCarID, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarRandWheel", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    g_HouseFlags[houseid] ^= e_RANDOM_WHEEL;
	    if(g_HouseFlags[houseid] & e_RANDOM_WHEEL)
	    {
	        name = "{" #XCOLOR_WHITE "}Engedélyezve";
		}
		else
		{
	        name = "{" #XCOLOR_RED "}Letiltva";
		}
		SendClientMessage(playerid, COLOR_WHITE, name);

		// SetDynamicVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetDynamicVehicleParamsEx(iHouseCarID, VEHICLE_PARAMS_ON, !!(g_HouseFlags[houseid] & e_CAR_LIGHTS), VEHICLE_PARAMS_OFF, !!(g_HouseFlags[houseid] & e_CAR_DOORS), !!(g_HouseFlags[houseid] & e_CAR_BONNET), !!(g_HouseFlags[houseid] & e_CAR_BOOT), VEHICLE_PARAMS_OFF);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(type, "HouseCarColor", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    if(GetPVarInt(playerid,"hCarColor2") == -1)
		{
			ChangeDynamicVehicleColor(iHouseCarID, GetPVarInt(playerid,"hCarColor1"), GetGVarInt("CarColor2", houseid));
	        SetGVarInt("CarColor1", GetPVarInt(playerid,"hCarColor1"), houseid);

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUDOT_SZINE_ATTALITVA"), GetPVarInt(playerid,"hCarColor1"));
			SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZAUTOD_SZINE_ATTALITVA_ERRE"), GetPVarInt(playerid,"hCarColor1"));

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_color_1` = %d WHERE `id` = %d", GetPVarInt(playerid,"hCarColor1"), houseid);
			mysql_function_query(1, query, false, "", "");
		}
		else
		{
			ChangeDynamicVehicleColor(iHouseCarID, GetPVarInt(playerid,"hCarColor1"), GetPVarInt(playerid,"hCarColor2"));
			SetGVarInt("CarColor1", GetPVarInt(playerid,"hCarColor1"), houseid);
	        SetGVarInt("CarColor2", GetPVarInt(playerid,"hCarColor2"), houseid);

			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAUDOT_SZINE_ATTALITVA_1"), GetPVarInt(playerid,"hCarColor1"), GetPVarInt(playerid,"hCarColor2"));
			SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZAUTOD_SZINE_ATTALITVA_EZEKRE"), GetPVarInt(playerid,"hCarColor1"), GetPVarInt(playerid,"hCarColor2"));

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_color_1` = %d, `car_color_2` = %d WHERE `id` = %d", GetPVarInt(playerid,"hCarColor1"), GetPVarInt(playerid,"hCarColor2"), houseid);
			mysql_function_query(1, query, false, "", "");
        }
        DeletePVar(playerid,"hCarColor1");
        DeletePVar(playerid,"hCarColor2");
		return 1;
	}
	else if(!strcmp(type, "HouseCarPaintJob", true))
	{
	    if(iHouseCarModel == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_HAZCAR"));
	    SetGVarInt("Paintjob", GetPVarInt(playerid,"hCarpaintJob"), houseid);
		ChangeDynamicVehiclePaintjob(iHouseCarID, GetPVarInt(playerid,"hCarpaintJob"));
		SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZAUTOD_FESTOMUMKAJA_AZ_RARE"), GetPVarInt(playerid,"hCarpaintJob"));

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `paintjob` = %d WHERE `id` = %d", GetPVarInt(playerid,"hCarpaintJob"), houseid);
		mysql_function_query(1, query, false, "", "");
	    DeletePVar(playerid,"hCarpaintJob");
	}
	return 1;
}

CMD:bsj(playerid, params[], 0, 0)
{
	SendUsage(playerid, "/bsj {" #XCOLOR_WHITE "}<1-23>");
	return 1;
}

CMD:t(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(g_pLang{playerid} == LANGUAGE_HU) mysql_function_query(1, "SELECT `kategoria_hu`, COUNT(*) AS temp FROM `teleports` GROUP BY `kategoria_hu` ORDER BY `kategoria_hu`;", true, "THREAD_ShowSQLTeleportList", "dd", playerid, g_pQueryQueue[playerid]);
 	else mysql_function_query(1, "SELECT `kategoria_en`, COUNT(*) AS temp FROM `teleports` GROUP BY `kategoria_en` ORDER BY `kategoria_en`;", true, "THREAD_ShowSQLTeleportList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:drag(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    return mysql_function_query(1, "SELECT * FROM `teleports` WHERE kategoria_hu = 'Drag'", true, "THREAD_ShowSQLTeleportList2", "dds", playerid, g_pQueryQueue[playerid], "Drag");
}

CMD:vicecity(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    if(!IsClient(playerid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_KLIENS_SZUKSEGES"));
    return mysql_function_query(1, "SELECT * FROM `teleports` WHERE kategoria_hu = 'Vice City'", true, "THREAD_ShowSQLTeleportList2", "dds", playerid, g_pQueryQueue[playerid], "Vice City");
}

CMD:teles(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>) return cmd_t(playerid,"");
CMD:tele(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>) return cmd_t(playerid,"");
CMD:teleportok(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>) return cmd_t(playerid,"");
CMD:teleport(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>) return cmd_t(playerid,"");
CMD:mp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/monsterparkour");
CMD:sktp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/skatepark");
CMD:ap(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/aquapark");
CMD:ap2(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/aquapark2");
CMD:ch(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/chilliad");
CMD:hq(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/quarry");
CMD:md(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/maddog");
CMD:sfa(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/sfair");
CMD:lva(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/lvair");
CMD:lsa(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/lsair");
CMD:tm(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/trackmania");
CMD:tm2(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/trackmania2");
CMD:tm3(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/trackmania3");
CMD:nrgp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/nrgparkour");
CMD:bj(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/bigjump");
CMD:bj2(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/bigjump2");
CMD:lc(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/libertycity");
CMD:hp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/halfpipe");
CMD:kp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/kisparkour");
CMD:ip(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise");
CMD:ip2(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise2");
CMD:ip3(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise3");
CMD:ip4(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise4");
CMD:ip5(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise5");
CMD:ip6(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/infernusparadise6");
CMD:lvp(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/lvparkour");
CMD:td(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/tokyodrift");
CMD:ts(playerid, params[], 0, 0) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/truckstop");

forward THREAD_ShowSQLTeleportList(playerid, queue);
public THREAD_ShowSQLTeleportList(playerid, queue)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ShowSQLTeleportList);
	new
 		rows = cache_get_row_count();

	dline[0] = EOS;
	new bool:asd_;
    format(dline, sizeof(dline), "Kategória\tTeleportok száma\n");
	for(new x; x != rows; x++)
	{
	    asd_ = !asd_;
	    cache_get_row(x, 0, country); //kategoria
        if(!IsClient(playerid) && !strcmp(country, "Vice City", true)) continue;
	    cache_get_row_int(x, 1, vID);
		format(i_str, sizeof(i_str), "{%s}%s{000000}|\t%d teleport\n", (asd_ == true) ? ("00FFFF") : ("33AA33"), country, vID);
		strcat(dline, i_str);
	}
	if(g_pLang{playerid} == LANGUAGE_HU) strcat(dline, "Házbelsõk\n{CDF917}Véletlenszerû");
	else strcat(dline, "Interiors\n{CDF917}Random teleport");
	
    format(i_str, sizeof(i_str),"MFR Összes Teleport (%d)", Itter_Count(Teleports));
    ShowPlayerDialogEx(playerid, DIALOG_TELEPORTS, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Tovább", "Bezár");
	return 1;
}

forward THREAD_ShowSQLTeleportList2(playerid, queue, category[]);
public THREAD_ShowSQLTeleportList2(playerid, queue, category[])
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ShowSQLTeleportList2);
    new
 		rows = cache_get_row_count();

    dline[0] = EOS;
    new bool:asd_;
    format(dline, sizeof(dline), "Név\tTeleport\tHasználat\n");
    for(new x; x != rows; x++)
	{
	    asd_ = !asd_;
	    cache_get_row(x, 1, name); //Teleport neve
	    cache_get_row(x, 3, country); //Teleport cmd
	    cache_get_row_int(x, 12, vID); //Használat
	    

	    format(i_str, sizeof(i_str), "{%s}%s{000000}|\t{FFFF00}%s\t%dx\n", (asd_ == true) ? ("CDF917") : ("FF9900"), name, country, vID);
		strcat(dline, i_str);
	}
	format(i_str, sizeof(i_str),"MFR Összes Teleport --> %s (%d)", category, rows);
	ShowPlayerDialogEx(playerid, DIALOG_TELEPORTS + 1, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Ok", "Vissza");
	return 1;
}

forward THREAD_ShowSQLTeleportList3(playerid, queue);
public THREAD_ShowSQLTeleportList3(playerid, queue)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ShowSQLTeleportList3);
    
    new
        t_name[24],
        t_msg[24],
        t_cmd[24],
        t_world,
        t_interior;
        
    cache_get_row(0, 1, t_name); //Teleport neve
    cache_get_row(0, 2, t_msg); //Teleport msg
    cache_get_row(0, 3, t_cmd); //Teleport cmd
    
    cache_get_row_float(0, 4, X);
    cache_get_row_float(0, 5, Y);
    cache_get_row_float(0, 6, Z);
    cache_get_row_float(0, 7, Angle);
   
    cache_get_row_int(0, 8, t_world);
    cache_get_row_int(0, 9, t_interior);
    
    if(!strcmp(t_cmd, "NULL", true))
	{
	    cmd_rtele(playerid,"");
	}
	else SQLTeleport(playerid, t_msg, t_cmd, X, Y, Z, Angle, t_interior, t_world);
	return 1;
}

stock SQLTeleport(playerid, const Message[], const TeleCMD[], Float:x, Float:y, Float:z, Float:ang = 0.0, interior = 0, worldid = 0)
{
    //if(GetGVarInt("HousecarNoTele", GetPlayerDynamicVehicleID(playerid)) == 1) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));


 /*   if(strfind(TeleCMD, "/rendvc", true) != -1 || strfind(TeleCMD, "/vcmarscafe", true) != -1 || strfind(TeleCMD, "/vcstadium", true) != -1 || strfind(TeleCMD, "/vcgolf", true) != -1 || strfind(TeleCMD, "/vcbeach", true) != -1 || strfind(TeleCMD, "/oceanview", true) != -1)
    {
    	if(!IsClient(playerid)) return SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_KLIENS_SZUKSEGES"));
    	printf("1111111111111");
	}*/

    mysql_format(1, query, sizeof(query), "UPDATE `teleports` SET `hasznalat` = `hasznalat` + 1 WHERE `cmd` = '%s'", TeleCMD);
	mysql_function_query(1, query, false, "", "");
	
	if(!strcmp(TeleCMD, "/aa", true))
	{
 		switch(random(5))
		{
			case 0: NormalTeleEx(playerid, "Elhagyatott Reptér", "/aa", 324.2835,2549.4883,17.0000,181.5960); // Hangár
			case 1: NormalTeleEx(playerid, "Elhagyatott Reptér", "/aa", 396.9685,2552.2439,19.8278,181.5505); // Kint
			case 2: NormalTeleEx(playerid, "Elhagyatott Reptér", "/aa", 416.0549,2503.7742,16.7753,92.1983); // Jump elõtt
			case 3: NormalTeleEx(playerid, "Elhagyatott Reptér", "/aa", 416.1557,2478.8418,16.7793,88.4233); // Jump elõtt 2
			case 4: NormalTeleEx(playerid, "Elhagyatott Reptér", "/aa", 402.9344,2448.5957,17.1000,2.2720); // Bent
		}
	}
	else if(!strcmp(TeleCMD, "/sf", true))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) NormalTeleEx(playerid, "San Fierro", "/sf", -2023.0376,156.6589,28.8359  ,0);
		else NormalTeleEx(playerid, "San Fierro", "/sf", -2000.3212,192.3908,27.5391,134.5023);
	}
	else if(!strcmp(TeleCMD, "/nmjail", true))
	{
		// Ha jelenleg nincs neki tiltva a teleportálkás, csak akkor állítjuk át az idõt és az idõjárást
		if(NormalTeleEx(playerid, "Nagy Magyar ~r~Börtön", "/nmjail", 6499.4536, 595.5616, 2.7464, 203.0656))
		{
			SetPlayerWeather(playerid, 19);
			SetPlayerTime(playerid, 24, 0);
		}
	}
	else if(!strcmp(TeleCMD, "/suicide", true))
	{
		NormalTeleEx(playerid, "Öngyilkosság", "/suicide", -183.7839,-1942.9658,3.5974  ,135.6746);
		ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 5.0);
		SetPlayerArmour(playerid, 0.0);
	}
	else if(!strcmp(TeleCMD, "/bank", true))
	{
		switch(random(13))
		{
  			case 0: NormalTeleEx(playerid, "Bank", "/bank", 2178.0688, 1988.8740, 10.8203, 0);
	    	case 1: NormalTeleEx(playerid, "Bank", "/bank", 1350.7083, -1748.2725, 13.3715, 190.0416);
	    	case 2: NormalTeleEx(playerid, "Bank", "/bank", 1315.1215, -915.9774, 38.1192, 357.3632);
		  	case 3: NormalTeleEx(playerid, "Bank", "/bank", 995.3290, -920.0975, 42.1796, 274.0157);
		    case 4: NormalTeleEx(playerid, "Bank", "/bank", -1563.8835, -2745.0251, 48.5334, 347.6498);
		    case 5: NormalTeleEx(playerid, "Bank", "/bank", -2442.7468, 743.6419, 35.0156, 2.6898);
		    case 6: NormalTeleEx(playerid, "Bank", "/bank", 2452.3981, 2053.6123, 10.6718, 3.6298);
		    case 7: NormalTeleEx(playerid, "Bank", "/bank", 2551.5590, 1961.1417, 10.8203, 85.0973);
		    case 8: NormalTeleEx(playerid, "Bank", "/bank", 2103.6760, 2211.7539, 10.8203, 81.6272);
		    case 9: NormalTeleEx(playerid, "Bank", "/bank", 1926.9080, 2306.2609, 10.6718, 272.4491);
		    case 10: NormalTeleEx(playerid, "Bank", "/bank", 2249.3566, 2408.3503, 10.6718, 267.1224);
		    case 11: NormalTeleEx(playerid, "Bank", "/bank", 2894.3063, 2440.0947, 10.8203, 39.6402);
			case 12: NormalTeleEx(playerid, "Bank", "/bank", 2291.5977, -16.7521, 26.3369, 275.8418);
		}
	}
	else if(!strcmp(TeleCMD, "/grove", true))
	{
		if(GetPVarInt(playerid, "HQ") == 1) NormalTeleEx(playerid, "Grove Street HQ", "/grove", 2479.5042,-1664.2478,13.3329,258.0087);
		else NormalTeleEx(playerid, "Grove Street", "/grove", 2382.7832,-1659.0071,13.3828,270.7284);

	}
	else if(!strcmp(TeleCMD, "/sevile", true))
	{
   		if(GetPVarInt(playerid, "HQ") != 2) NormalTeleEx(playerid, "Sevile HQ", "/sevile", -2892.2456, -1964.6521, 37.4233, 125.4851);
		else
		{
			switch(random(3))
			{
				case 0: NormalTeleEx(playerid, "Sevile HQ", "/sevile", -2976.4917, -2020.9855, 39.3148, 127.9548);
				case 1: NormalTeleEx(playerid, "Sevile HQ", "/sevile", -2967.9502, -2028.6459, 20.9698, 190.0188);
				case 2: NormalTeleEx(playerid, "Sevile HQ", "/sevile", -2981.7803, -2034.1403, 5.3687, 330.0802);
			}
   			LoadObjectForPlayer(playerid);
		}
	}
	else if(!strcmp(TeleCMD, "/chilliad", true))
	{
 		switch(random(2))
		{
			case 0: NormalTeleEx(playerid, "Chilliad", "/chilliad", -2341.4543,-1635.0272,484.5541,309.1788);
			default: NormalTeleEx(playerid, "Chilliad", "/chilliad", -2291.4233,-1640.2512,484.3231,47.4835);
		}
	}
	else if(!strcmp(TeleCMD, "/pc", true)) PlayerTeleEx(playerid, "Ejtõernyõzés", "/pc", 294.503,-1610.623,495.478, 177.0350), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj1", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~1", "/bsj1", -1791.0409,567.7134,332.8019,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj2", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~2", "/bsj2", 1452.4982,-1072.8849,213.3828,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj3", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~3", "/bsj3", 1481.1073,-1790.5154,156.7533,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj4", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~4", "/bsj4", -1753.6823,885.5562,295.8750,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj5", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~5", "/bsj5", -1278.9236,976.3959,139.2734,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj6", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~6", "/bsj6", 1966.3888,1912.6749,130.9375,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj7", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~7", "/bsj7", 2054.8530,2428.6870,165.6172,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj8", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~8", "/bsj8", -2873.0127,2718.6343,275.6272,102.1476), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj9", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~9", "/bsj9", -2662.3618,1934.1034,225.757,0), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj10", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~10", "/bsj10", -2265.4895,1197.1180,437.8214,2016.9473), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj11", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~11", "/bsj11", 1834.9615,-1306.4056,131.7344,270.2070), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj12", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~12", "/bsj12", 2041.6147,-1401.7264,169.5381,230.2627), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj13", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~13", "/bsj13", -2509.8894,-712.7541,279.7344,175.1944), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj14", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~14", "/bsj14", 2252.2075,1396.3263,93.0510,104.7572), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj15", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~15", "/bsj15", 154.1859,-1952.6614,51.3438,200.9781), GivePlayerWeapon(playerid,46,1);
	else if(!strcmp(TeleCMD, "/bsj16", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~16", "/bsj16", 292.3813,-1620.1661,114.4163,173.9984), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj17", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~17", "/bsj17", -883.1190,-754.2100,150.0440,64.0476), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj18", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~18", "/bsj18", -1604.0612,-801.8095,107.0175,14.1432), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj19", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~19", "/bsj19", -881.0019,1923.8740,140.0932,271.3563), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj20", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~20", "/bsj20", -870.6106,1875.1271,139.5853,280.5335), GivePlayerWeapon(playerid,46,1);
    else if(!strcmp(TeleCMD, "/bsj21", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~21", "/bsj21", -607.0612,1924.4879,112.8763,75.7719), GivePlayerWeapon(playerid,46,1);
  	else if(!strcmp(TeleCMD, "/bsj22", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~22", "/bsj22", -605.9901,1809.9683,163.7173,87.7948), GivePlayerWeapon(playerid,46,1);
  	else if(!strcmp(TeleCMD, "/bsj23", true)) PlayerTeleEx(playerid, "~b~Ejt~h~õe~h~rny~h~õ  ~r~~h~Ju~h~m~h~p  ~g~~h~~h~23", "/bsj23", 709.3051,915.9684,52.6736,116.0962), GivePlayerWeapon(playerid,46,1);
	else NormalTeleEx(playerid, Message, TeleCMD, x, y, z, ang, interior, worldid);
	return 1;
}

stock ShowRaceEditDialog(playerid, raceid)
{
	if(/*PlayerInfo[playerid][pRegID] == g_szRaceCreator[raceid] || */GetPVarInt(playerid,"Level") > 2) //fõadmin szerkesztheti
	{
	    SetPVarInt(playerid,"EditRaceID",raceid);
		new
		    type[32],
		    gravity[16],
		    vehicle[32];
		    
	    switch(g_szRaceType[raceid])
		{
   			case 0: type = "Normál";
			case 1: type = "Hajó";
			case 2: type = "Repülõ";
			case 3: type = "Futó";
			default: type = "Nincs beállítva";
		}

		if(g_szRaceGravity[raceid] == 0.008)
		{
		    format(gravity, 16, "Alap");
		}
		else
		{
		    format(gravity, 16, "%.3f", g_szRaceGravity[raceid]);
		}
		
		
		if(g_szRaceVehicle[raceid] != -1) //Ha van beállítva jármû
		{
		    format(vehicle, 16, "%s[%d]", g_szVehicleNames[g_szRaceVehicle[raceid] - 400], g_szRaceVehicle[raceid]);
		}
		else
		{
		    format(vehicle, 32, "Nincs megadott jármû");
		}
	    format(dline, 1024, "Elindítás\nInformációk megtekintése\nNév szerkesztése\nClearworld - %s\nAutofix - %s\nGhostmode - %s\nTípus - %s\nGravitáció - %s\nJármû - %s\nCP méret\nCP szerkesztés\nRekord törlése\nVerseny törlése",
	    (!g_szRaceClearWorld[raceid]) ? ("{" #XCOLOR_RED "}Kikapcsolva") : ("{" #XCOLOR_GREEN "}Bekapcsolva"),
	    (!g_szRaceAutoFix[raceid]) ? ("{" #XCOLOR_RED "}Kikapcsolva") : ("{" #XCOLOR_GREEN "}Bekapcsolva"),
	    (!g_szRaceGhostMode[raceid]) ? ("{" #XCOLOR_RED "}Kikapcsolva") : ("{" #XCOLOR_GREEN "}Bekapcsolva"),
		type, gravity, vehicle);
		
	    format(i_str, 64, "{" #XCOLOR_BLUE "}%s -> Szerkesztés", g_szRaceName[raceid]);
		ShowPlayerDialogEx(playerid, DIALOG_RACE_EDIT, DIALOG_STYLE_LIST, i_str, dline, "Kiválaszt", "Vissza");
	}
	else
	{
		if((g_ServerFlags & e_RACE_ACTIVE) && Participants && GetPVarInt(playerid, "Level") < 2)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_VAN_OLYAN_VERSENY"));
			return 1;
		}

		if(g_ServerFlags & e_RACE_ACTIVE)
		{
			endrace();
		}
		mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = %d", raceid);
		mysql_function_query(1, query, true, "THREAD_LoadRace", "d", playerid);
	}
	return 1;
}

forward THREAD_LoadRaceInfo();
public THREAD_LoadRaceInfo()
{
	new
	    rows = cache_get_row_count(),
	    id,
	    Float:Start[3],
	    StartCP[128];
	    
    for(new id_; id_ != MAX_RACES; id_++)
	{
    	DestroyDynamic3DTextLabel(Text3D:GetGVarInt("RaceLabel", id_));
   		DestroyDynamicPickup(GetGVarInt("RacePickup", id_));
		DestroyDynamicMapIcon(GetGVarInt("RaceMapIcon", id_));
	}

	for(new x; x != rows; x++)
	{
        cache_get_row_int(x, 1, id); //Versenyid
 		cache_get_row(x, 0, g_szRaceCreatorName[id]); //players táblábol a versenykészítõ neve
	    cache_get_row(x, 2, g_szRaceName[id]);
	    cache_get_row_int(x, 3, g_szRaceAutoFix[id]);
	    cache_get_row_int(x, 4, g_szRaceGhostMode[id]);
	    cache_get_row_float(x, 5, g_szRaceCPSize[id]);
	    cache_get_row_int(x, 7, g_szRaceType[id]);
        cache_get_row_int(x, 8, g_szRaceClearWorld[id]);
        cache_get_row(x, 9, g_szRaceHolder[id]);
        cache_get_row_int(x, 10, g_szRaceHolderID[id]);
		cache_get_row_int(x, 11, g_szRaceRecord[id]); //Rekord
		cache_get_row(x, 12, g_szRaceRecordVeh[id]);
		cache_get_row_int(x, 13, g_szRaceRecordTime[id]); //Rekorddöntés idõpontja
        cache_get_row_int(x, 14, g_szRaceCreator[id]);
        cache_get_row_int(x, 15, g_szRaceCreateTime[id]);
		cache_get_row_float(x, 16, g_szRaceGravity[id]);
        cache_get_row_int(x, 17, g_szRaceVehicle[id]);

        cache_get_row(x, 19, StartCP); //Start CP
        sscanf(StartCP, "p<,>fff",Start[0],Start[1],Start[2]);
		//printf("%f, %f, %f",Start[0],Start[1],Start[2]);
        date(g_szRaceRecordTime[id], day, month, year, hour, minute, second);

        SetGVarFloat("RaceStartX",Start[0],id);
        SetGVarFloat("RaceStartY",Start[1],id);
        SetGVarFloat("RaceStartZ",Start[2],id);
        
        if(g_szRaceHolderID[id] == -1)
        {
        	format(tmp, sizeof(tmp), "Név: %s[%d]", g_szRaceName[id], id);
        }
        else
        {
  			if(g_szRaceType[id] != 3)
            {
				format(tmp, sizeof(tmp), "{00FFFF}%s[%d]\n Rekordtartó: %s{00FFFF}[%d] - Rekord: %s\nIdõpont: %02d/%02d/%02d %02d:%02d:%02d\nJármû: %s\nKészítette: %s[%d]", g_szRaceName[id], id, g_szRaceHolder[id], g_szRaceHolderID[id], FormatNumber(g_szRaceRecord[id]), year, month, day, hour, minute, second, g_szRaceRecordVeh[id], g_szRaceCreatorName[id], g_szRaceCreator[id]);
			}
			else format(tmp, sizeof(tmp), "{00FFFF}%s[%d]\n Rekordtartó: %s{00FFFF}[%d] - Rekord: %s\nIdõpont: %02d/%02d/%02d %02d:%02d:%02d\nKészítette: %s[%d]", g_szRaceName[id], id, g_szRaceHolder[id], g_szRaceHolderID[id], FormatNumber(g_szRaceRecord[id]), year, month, day, hour, minute, second, g_szRaceCreatorName[id], g_szRaceCreator[id]);
        }
		SetGVarInt("RaceLabel", _:CreateDynamic3DTextLabel(tmp, -1, Start[0],Start[1],Start[2], 50), id);
		SetGVarInt("RacePickup", (CreateDynamicPickup(19133, 1, Start[0], Start[1], Start[2], .streamdistance = 50)), id);
  		SetGVarInt("RaceMapIcon", CreateDynamicMapIcon(Start[0], Start[1], Start[2], 53, 0, 0, -1, -1, 50), id);

  		Itter_Add(races, id);
	}

	foreach(new i: Player)
	{
        if(IsPlayerNPC(i)) continue;
        if(!IsPlayerConnected(i)) continue;
        if(!(g_PlayerFlags2[i] & e_RACE_ICONS)) ToggleRaceIcons(i, false);
	}

	printf("<< MySQL >> %d verseny betöltve", rows);
	return 1;
}

stock GetPickUpID(playerid)
{
	new result = -1;
	for(new i; i < MAX_RACES+1; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, GetGVarFloat("RaceStartX",i),GetGVarFloat("RaceStartY",i),GetGVarFloat("RaceStartZ",i)))
		{
			result = i;
		 	break;
	    }
	}
	return result;
}

stock GetRaceID(playerid)
{
	new result = -1;
	for(new i; i < MAX_RACES+1 ;i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, GetGVarFloat("RaceStartX",i),GetGVarFloat("RaceStartY",i),GetGVarFloat("RaceStartZ",i)))
		{
			result = i;
		 	break;
	    }
	}
	return result;
}

stock ShowCreateDMColor(playerid)
{
	ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_COLOR, DIALOG_STYLE_INPUT, "Add meg a DM színét!", "Írd be lentre a DM zónának a színét.\nHa azt akarod, hogy láthatatlan legyen, akkor a végére 00-t tegyél.\nPl: 0x33FF3300, 0xFF000FF0", "Oké");
}

stock ShowDMEditDialog(playerid, dmid)
{
	new
	    weapname[45],
		settings1[128],
		settings2[128];

	printf("dmid: %d - g_DMArmedWeapon{dmid}: %d", dmid, g_DMArmedWeapon{dmid});
	if(g_DMArmedWeapon{dmid} != 0xFF)
	{
		GetWeaponName(g_DMArmedWeapon{dmid}, weapname, sizeof(weapname));
	}
	else
	{
		strcpy(weapname, "N/A");
	}

	if(g_DM_Weather[dmid] == -1) format(settings1, sizeof(settings1),"{F5F10F}Alapértelmezett");
	else format(settings1, sizeof(settings1),"%d",g_DM_Weather[dmid]);
	if(g_DM_Time[dmid] == -1) format(settings2, sizeof(settings2),"{F5F10F}Alapértelmezett");
 	else format(settings2, sizeof(settings2),"%d óra",g_DM_Time[dmid]);

	format(dline, 1024, "{" #XCOLOR_ORANGE "}Csatlakozás\n{" #XCOLOR_YELLOW "}Információk megtekintése\n{" #XCOLOR_LIGHTPINK "}Név szerkesztése\n{" #XCOLOR_BLUE3 "}Gyorsparancs - {" #XCOLOR_LIGHTBLUE "}%s\n{" #XCOLOR_KICK "}Max játékosok: %d\n{" #XCOLOR_KICK "}Max ölések: %d\n\
		{" #XCOLOR_RED "}Kezdõ élet: {" #XCOLOR_SAMP "}%.2f {" #XCOLOR_DEFAULT "}- Páncél: {" #XCOLOR_WHITE "}%.2f\n{" #XCOLOR_DEFAULT "}Gravitáció: %.3f\n{E6630B}Fegyverek szerkesztése\n{F5F10F}Kezdõ fegyver: {FAF743}%s\n{" #XCOLOR_DEFAULT "}Clearworld: %s\n{" #XCOLOR_DEFAULT "}One Hit Kill: %s\n{" #XCOLOR_DEFAULT "}Headshot: %s\n{" #XCOLOR_DEFAULT "}Fegyvervásárlás: %s\n{" #XCOLOR_DEFAULT "}Bomba lerakás: %s\n{" #XCOLOR_DEFAULT "}Nametagok rejtése: %s\n{" #XCOLOR_DEFAULT "}Robbanó töltények: %s\n{" #XCOLOR_DEFAULT "}Jetpack: %s\n\n{" #XCOLOR_DEFAULT "}HUD: %s\n{" #XCOLOR_DEFAULT "}Mód: %s			\n{" #XCOLOR_DEFAULT "}Idõjárás: %s\n{" #XCOLOR_DEFAULT "}Idõ: %s\n{FF0000}DM TÖRLÉSE",
		g_szDMCommand[dmid], g_DMMaxPlayers[dmid], g_DMMaxKills[dmid],
		g_DMHealth[dmid], g_DMArmour[dmid], g_DMGravity[dmid], weapname,
		(g_DMFlags[dmid] & e_IN_CLEARWORLD) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_ONE_HIT_KILL) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_HEADSHOT) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_WEAPONS_BUY) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_PLACE_BOMB) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_NO_NAMETAGS) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_EXPLOSIVE_AMMO) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_JETPACK_MODE) ? ("{" #XCOLOR_GREEN "}Igen") : ("{" #XCOLOR_WHITE "}Nem"),
		(g_DMFlags[dmid] & e_NO_HUD) ? ("{" #XCOLOR_GREEN "}Letiltva") : ("{" #XCOLOR_WHITE "}Engedélyezve"),
		(g_DMFlags[dmid] & e_DM_MODE) ? ("{" #XCOLOR_GREEN "}Lagshot") : ("{" #XCOLOR_WHITE "}Skinshot"),
		settings1,settings2);

	format(i_str, 64, "{" #XCOLOR_BLUE "}%s -> Szerkesztés", g_szDMName[dmid]);
	ShowPlayerDialogEx(playerid, DIALOG_DM_EDIT, DIALOG_STYLE_LIST, i_str, dline, "Kiválaszt", "Vissza");
}

stock ShowCreateTDMDialog(playerid)
{
	switch(GetPVarInt(playerid, "TDMCreate"))
	{
		case 1:
		{
			ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_TEAM, DIALOG_STYLE_INPUT, "Írd be az elsõ csapat nevét!", "Írd be lentre, hogy mi legyen a neve az {" #XCOLOR_YELLOW "}elsõ {" #XCOLOR_DEFAULT "}csapatnak.", "Tovább", "Mégse");
		}
		case 2:
		{
			ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_TEAM, DIALOG_STYLE_INPUT, "Írd be a második csapat nevét!", "Írd be lentre, hogy mi legyen a {" #XCOLOR_BLUE "}neve {" #XCOLOR_DEFAULT "}a {" #XCOLOR_YELLOW "}második {" #XCOLOR_DEFAULT "}csapatnak.", "Tovább", "Mégse");
		}
		case 3:
		{
			ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_TEAM, DIALOG_STYLE_INPUT, "Írd be az elsõ csapat színét!", "Írd be lentre, hogy mi legyen a {" #XCOLOR_RED "}színe {" #XCOLOR_DEFAULT "}az {" #XCOLOR_GREEN "}elsõ {" #XCOLOR_DEFAULT "}csapatnak.", "Tovább", "Mégse");
		}
		case 4:
		{
			ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_TEAM, DIALOG_STYLE_INPUT, "Írd be a második csapat színét!", "Írd be lentre, hogy mi legyen a {" #XCOLOR_RED "}színe {" #XCOLOR_DEFAULT "}a {" #XCOLOR_GREEN "}második {" #XCOLOR_DEFAULT "}csapatnak.", "Tovább", "Mégse");
		}
	}
}

stock ShowDMJoinDialog(playerid, dmid)
{
	format(i_str, sizeof(i_str), "{%06x}%s\n{%06x}%s", g_DMTeamColor[dmid][0] >>> 8, g_szDMTeams[dmid][0], g_DMTeamColor[dmid][1] >>> 8, g_szDMTeams[dmid][1]);
	ShowPlayerDialogEx(playerid, DIALOG_DM_SELECT_TEAM, DIALOG_STYLE_LIST, "Válassz csapatot!", i_str, "Csatlakozok!", "Vissza");
}
/*
CMD:dmmode(playerid, params[], 0, 0)
{
    g_PlayerFlags2[playerid] ^= e_PLAYER_DM_MODE;
	if(g_PlayerFlags2[playerid] & e_PLAYER_DM_MODE)
	{
	    SendClientMessage(playerid,-1,"1111111111111");
		//SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JATEKOSOK_HOZZADVALO_TELEPORTALASA"));
   	}
  	else
	{
        SendClientMessage(playerid,-1,"22222222222222");
		//SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JATEKOSOK_HOZZADVALO_TELEPORTALASA_1"));
    }
    SaveFlags(playerid);
	return 1;
}
*/
stock JoinPlayerToDM(playerid, dmid, teamid)
{
/*	if(!(g_DMFlags[dmid] & e_DM_MODE)) // Skinshot
	{
	    if(g_PlayerFlags2[playerid] & e_PLAYER_DM_MODE) return SendClientMessage(playerid,-1,"HIBA: A DM Skinshotra van állítva"); //skin
	}
	else //Lagshot
	{
	    if(!(g_PlayerFlags2[playerid] & e_PLAYER_DM_MODE)) return SendClientMessage(playerid,-1,"Lagshotos dmbe nem csatlakozhatsz!");
	}
	
*/

	// Ugyanabba a DM-be ugyanahhoz a csapathoz nem csatlakozhat amíg benne van
	if(g_pDeathMatchID[playerid] == dmid && g_pDeathMatchTeam[playerid] == teamid)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MEG_EGYSZER_NEM_CSATLAKOZHATSZ"));
		return 0;
	}

	if(g_InDMPlayerCount{dmid + 10} >= g_DMMaxPlayers[dmid])
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBEN_A_DMBEN_MAR_MEGVAN"), g_DMMaxPlayers[dmid]);
		return 0;
 	}
	if(MINIGAMES_LEAVE & g_pGamesData[playerid])
	{
		cmd_leave(playerid, "");
	}
	else if(g_pGamesData[playerid] & e_FLAG_OWNER)
	{
		cmd_dropflag(playerid, "");
	}
	else if(g_pGamesData[playerid] & e_BCAR_OWNER)
	{
		g_BonusCarOwner = INVALID_PLAYER_ID;
		g_pGamesData[playerid] &= ~e_BCAR_OWNER;
		//g_BonusCarCount = 0;
		//g_BonusCarRespawn = 0;
		RemovePlayerFromVehicleEx(playerid);
	}

	// Ha clearworldben van akk visszarakjuk az alap világba
	if(g_PlayerData[playerid] & e_CLEARWORLD)
		RemovePlayerFromClearworld(playerid);

	// Ha má dm-be van, akkor kiléptessük
	if(g_pDeathMatchID[playerid] != -1)
	    cmd_exitdm(playerid, "295375");

	g_pDeathMatchID[playerid] = dmid;
	g_pDeathMatchTeam[playerid] = teamid;

	// ZCMD ellenõrzés frissítése
    g_pGamesData[playerid] |= e_IN_DM;

	// Objectek kikapcoslása ha a DM clearworld-ben van
	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, !(!!(g_DMFlags[dmid] & e_IN_CLEARWORLD)));

	// DM zóna felmutatása
	if(g_DMZoneID[dmid]) GangZoneShowForPlayer(playerid, g_DMZoneID[dmid], g_DMZoneColor[dmid]);

    // Klánrendszer zónáinak elrejtése
    HideClanZones(playerid);

	// Kidobjuk clearwordbõl
    g_PlayerData[playerid] &= ~e_CLEARWORLD;

	// God letiltása
    SetGoodAllowed(playerid, false);
    //g_pOtherFlags[playerid] |= e_GOD_SETTED;

	//DM csatlakozások számát megemeljük
    g_pMinigameJoins[playerid][e_Count_DM] ++;

	// Ha TDM, akkor a csatalkozott csapatban lévõ játékosok számát megemeljük
	if(teamid != -1)
	{
		SetPlayerTeam(playerid, teamid);
		SetPlayerColor(playerid, g_DMTeamColor[dmid][teamid]);

		g_DMTeamPlayers[dmid][teamid] ++;

		// Csapat kill textdrawok felmutatása
		TextDrawShowForPlayer(playerid, g_DMTextdraw[dmid][0]);
		TextDrawShowForPlayer(playerid, g_DMTextdraw[dmid][1]);
	}

	// Gravitáció állítása
	SetPlayerGravity(playerid, g_DMGravity[dmid]);

	//idõjárás és idõ beállítás
	if(g_DM_Weather[dmid] != -1) SetPlayerWeather(playerid,g_DM_Weather[dmid]);
	if(g_DM_Time[dmid] != -1) SetPlayerTime(playerid,g_DM_Time[dmid],0);

    ShowInDMKills(playerid);

    UpdateNametagsForPlayer(playerid);

    if(g_pMinigameJoins[playerid][e_Count_DM] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_DM"));

    // Lespawnolt kocsi(k) törlése
    CarDeleter(playerid);

    // Ghostmode letiltása
    DisableRemoteVehicleCollisions(playerid, false);

	//Hud beállítása
    if(g_DMFlags[dmid] & e_NO_HUD) //Ha a DM-be levan tiltva a HUD akkor kikapcsoljuk a játékosnak
	{
        if(!(g_PlayerFlags2[playerid] & e_HUD)) //Csak akkor kell lefutnia hogy ha a játékosnak bevan kapcsolva a HUD
		{
			TogglePlayerWidescreen(playerid, bool:true);
		}
	}
  	else
  	{
  	    if(g_PlayerFlags2[playerid] & e_HUD) //Csak akkor kell lefutnia hogy ha a játékosnak ki van kapcsolva a HUD
		{
 			TogglePlayerWidescreen(playerid, bool:false);
		}
	}
	foreach(Player, i)
	{
	    if(!(g_pChatMSGFlags[i] & e_DMJoin_MSG)) continue;
	    SendClientMessagef(i, 0xA9C4E4AA, LANG(i, "MSG__DM___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szDMName[dmid], g_szDMCommand[dmid], g_InDMPlayerCount{dmid + 10}+1);
	}
	UpdatePlayerSpawnInfo(playerid);
	SpawnPlayer(playerid);
	return 1;
}

stock LeavePlayerFromDM(playerid)
{
	if(g_pDeathMatchID[playerid] == -1) return printf("assertation failed, LeavePlayerFrom DM == -1");

	new
		dmid = g_pDeathMatchID[playerid],
		teamid = g_pDeathMatchTeam[playerid];
	// Változók nullázása
	g_pDeathMatchID[playerid] = -1;
	g_pDeathMatchTeam[playerid] = -1;

	// ZCMD ellenõrzés frissítése
    g_pGamesData[playerid] &= ~e_IN_DM;

	// God engedélyezése
	SetGoodAllowed(playerid, true);

	// Objectek bekapcsolása
	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, true);

	// DM zóna elrejtése
	if(g_DMZoneID[dmid]) GangZoneHideForPlayer(playerid, g_DMZoneID[dmid]);

    // Klánrendszer zónáinak felmutatása
    ShowClanZones(playerid);

	// Gravitáció állítása
	SetPlayerGravity(playerid, 0.008);

    UpdateNametagsForPlayer(playerid);

	// Ha TDM, akkor a csatalkozott csapatban lévõ játékosok számát mcsökkentjük
	if(teamid != -1)
	{
        SetPlayerTeam(playerid, NO_TEAM);
		g_DMTeamPlayers[dmid][teamid] --;

		// Csapat kill textdrawok elrejtése
		TextDrawHideForPlayer(playerid, g_DMTextdraw[dmid][0]);
		TextDrawHideForPlayer(playerid, g_DMTextdraw[dmid][1]);
	}
	// Ghostmode visszaállítása
	DisableRemoteVehicleCollisions(playerid, !!(g_pGamesData[playerid] & e_GHOSTMODE));
	
	//Hud beállítása
    if(g_DMFlags[dmid] & e_NO_HUD) //Ha a DM-be levolt tiltva a HUD akkor visszaállítjuk a játékonak
 	{
  		if(!(g_PlayerFlags2[playerid] & e_HUD)) TogglePlayerWidescreen(playerid, bool:false);
 	}
  	else //Ha nem volt letiltva a HUD
   	{
   		if(g_PlayerFlags2[playerid] & e_HUD)
     	{
      		TogglePlayerWidescreen(playerid, bool:true);
       	}
	}
	
	if(GetPVarType(playerid, "PlayerWeather"))
	{
		SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
	}
	if(GetPVarType(playerid, "PlayerTime_Hour"))
	{
		SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
	}
	else SetPlayerTime(playerid, up_minutes, uptimeCount);
	return 1;
}

stock UpdateDMFlags(dmid)
{
	mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `type` = %d, `in_clearworld` = %d, `instagib` = %d, `headshot` = %d, `weapons_buy` = %d, `place_bomb` = %d, `no_nametags` = %d, `explosive_ammo` = %d, `jetpack` = %d, `hud` = %d, `mode` = %d WHERE `id` = %d",
		!!(g_DMFlags[dmid] & e_IS_TDM),
		!!(g_DMFlags[dmid] & e_IN_CLEARWORLD),
		!!(g_DMFlags[dmid] & e_ONE_HIT_KILL),
		!!(g_DMFlags[dmid] & e_HEADSHOT),
		!!(g_DMFlags[dmid] & e_WEAPONS_BUY),
		!!(g_DMFlags[dmid] & e_PLACE_BOMB),
		!!(g_DMFlags[dmid] & e_NO_NAMETAGS),
		!!(g_DMFlags[dmid] & e_EXPLOSIVE_AMMO),
		!!(g_DMFlags[dmid] & e_JETPACK_MODE),
		!!(g_DMFlags[dmid] & e_NO_HUD),
		!!(g_DMFlags[dmid] & e_DM_MODE),
		DM_SQL(dmid));
	mysql_function_query(1, query, true, "", "");
}

stock UpdateDMZone(dmid, bool:bLerakashoz = false)
{
	if(g_DMZone[dmid][0] == 0.0 || g_DMZone[dmid][1] == 0.0 || g_DMZone[dmid][2] == 0.0 || g_DMZone[dmid][3] == 0.0) return 0;//printf("ASSERTATION FAILED - UpdateDMZone - 0.0 - dmid: %d", dmid);

	// Ha már létre van hozva a zóna, akkor elször töröljük
	if(g_DMAreaID[dmid] != 0)
	{
		DestroyDynamicArea(g_DMAreaID[dmid]);
	    GangZoneHideForAll(g_DMZoneID[dmid]);
		GangZoneDestroy(g_DMZoneID[dmid]);
	}

	// Zóna létrehozása
	g_DMAreaID[dmid] = CreateDynamicRectangle(g_DMZone[dmid][0], g_DMZone[dmid][1], g_DMZone[dmid][2], g_DMZone[dmid][3], bLerakashoz ? (-1) : (DM_WORLD_START + floatround(dmid / DM_ZONE_WORLD_DIVIDE, floatround_floor)));
	g_DMZoneID[dmid] = GangZoneCreate(g_DMZone[dmid][0], g_DMZone[dmid][1], g_DMZone[dmid][2], g_DMZone[dmid][3]);

	// Összes játékosnak aki benne van a DM-ben a zóna felmutatása
	foreach(Player, i)
	{
		if(g_pDeathMatchID[i] == dmid || g_pDMID[i] == dmid)
		{
			GangZoneShowForPlayer(i, g_DMZoneID[dmid], g_DMZoneColor[dmid]);
		}
	}
	return 1;
}

stock DeleteDMZone(dmid)
{
	if(g_DMAreaID[dmid] != 0)
	{
		DestroyDynamicArea(g_DMAreaID[dmid]);
	    GangZoneHideForAll(g_DMZoneID[dmid]);
		GangZoneDestroy(g_DMZoneID[dmid]);
	}
}

forward THREAD_ShowClanLog(playerid, queue);
public THREAD_ShowClanLog(playerid, queue)
{
	//return SendClientMessage(playerid,-1,"Jelenleg nem mûködik!");
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ShowClanLog);

    new
	    rows = cache_get_row_count(),
	 	id,
	 	clanid,
	 	clanname[24],
	 	_playerid,
	 	playerid_name[128],
	 	_player1,
	 	player1_name[24],
	 	type[48],
	 	str[128],
	 	time[128],
 		bool:asd_;

	if(!rows)
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánlog", "Nincs egy megjeleníthetõ mûvelet sem.", "Ok");
		return 1;
	}
    for(new x; x != rows; x++)
	{
	    cache_get_row_int(x, 0, id);
		cache_get_row_int(x, 1, clanid);
		cache_get_row(x, 2, clanname);
		cache_get_row_int(x, 3, _playerid);
	    cache_get_row(x, 4, playerid_name);
	    cache_get_row_int(x, 5, _player1);
	    cache_get_row(x, 6, player1_name);
	    cache_get_row(x, 7, type);
	    cache_get_row(x, 8, str);
	    cache_get_row(x, 9, time);

		asd_ = !asd_;
     	if(!x)
		{
		    if(_player1 == -1)
		    {
		        format(dline, sizeof(dline), "{%s}%d. %s -> %s(%d) %s %s",(asd_ == true) ? ("00bbff") : ("00ffdd"), x+1, type, playerid_name, _playerid, str, time);
		    }
		    else
		    {
		        format(dline, sizeof(dline), "{%s}%d. %s -> %s(%d) -> %s(%d) %s %s",(asd_ == true) ? ("00bbff") : ("00ffdd"), x+1, type, playerid_name, _playerid, player1_name, _player1, str, time);
		    }
		}
	    else
	    {
	        if(_player1 == -1)
		    {
		        format(dline, sizeof(dline), "%s\n{%s}%d. %s -> %s(%d) %s %s",dline, (asd_ == true) ? ("00bbff") : ("00ffdd"), x+1, type, playerid_name, _playerid, str, time);
		    }
		    else
		    {
		        format(dline, sizeof(dline), "%s\n{%s}%d. %s -> %s(%d) -> %s(%d) %s %s",dline, (asd_ == true) ? ("00bbff") : ("00ffdd"), x+1, type, playerid_name, _playerid, player1_name, _player1, str, time);
		    }
	    }
	}
	
	//format(i_str, sizeof(i_str),"{%06x}%s - Klán CP - Játékosok", gClanColor[clanid] >>> 8, clanname);
	ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP_LOG, DIALOG_STYLE_MSGBOX, "asdasdasd", dline, "Ok", "Vissza");
	
	//format(i_str, sizeof(i_str), "{%06x}%s - Klán CP - Klánlog", gClanColor[clanid] >>> 8, gClanName[clanid]);
    //ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP_LOG, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké", "Vissza");
	return 1;
}

forward THREAD_ClanMembers_UpdateRank(playerid, clanid, rank, regid, queue);
public THREAD_ClanMembers_UpdateRank(playerid, clanid, rank, regid, queue)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ClanMembers_UpdateRank);
    
    new color;
    cache_get_row(0, 0, name);
    cache_get_row_int(0, 1, vID); //Szín
    if(color == 0) color = -1; //Ha nincs elmentett szín akkor fehérre van állítva
    
    for(new i; i != MAX_CLAN_PLAYERS; i++)
	{
		if(gClanPlayers[clanid][0][i] == regid) gClanPlayers[clanid][1][i] = rank;
		if(!i)
		{
			format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
		else
		{
			format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
	}
	// Ha fentvan a szerveren, akkor már rögtön átállítjuk a rangját
    foreach(Player, i)
	{
		if(PlayerInfo[i][pRegID] == regid)
		{
			g_pClanRank{i} = rank;
			break;
		}
	}
	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__ALLITOTTAD__NEVU_JATEKOS_RA_1"), vID >>> 8, name, gClanRankName[clanid][rank]);

    //SaveClanLog(clanid, playerid, player1, "CLAN_SETRANG", "N/A");

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_ClanMembers_Remove(playerid, clanid, regid, queue);
public THREAD_ClanMembers_Remove(playerid, clanid, regid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ClanMembers_Remove);

	new
	    membername[24];
	cache_get_row(0, 0, membername);

	// A klán tulaja nem dobhatja ki saját magát, csak ha törlik a klánát
	
	if(!IsFOOwner(playerid))
	{
	    if(gClanCreator[clanid] == regid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TE_VAGY_A_KLAN_TULAJA"));
	    if(regid == 3) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); //
	}
    
	for(new i; i != MAX_CLAN_PLAYERS; i++)
	{
		// Ha a klánban lévõ játékos RegID-je a kidobott játékosé, akkor töröljük a klánból
		if(gClanPlayers[clanid][0][i] == regid)
		{
			gClanPlayers[clanid][0][i] = -1;
			gClanPlayers[clanid][1][i] = 0;
		}

		if(!i)
		{
			format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
		else
		{
			format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
	}
	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

	// Ha fentvan a szerveren, akkor már rögtön kidobjuk a klánból
	foreach(Player, i)
	{
		if(PlayerInfo[i][pRegID] == regid)
		{
			g_pClan{i} = 0xFF;
			g_pClanRank{i} = 0;
			break;
		}
	}
	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__TOROLTED_A__NEVU_KLANBOL_"), gClanName[clanid], membername);
	return 1;
}

forward THREAD_ShowClanMembers(playerid, clanid);
public THREAD_ShowClanMembers(playerid, clanid)
{
	new
	    rows,
	    fields,
	    color;

	dline[0] = EOS;
	i_str[0] = EOS;
	format(dline, sizeof(dline), "RegID\tNév\tRang\n");
	cache_get_data(rows, fields);
	for(new i; i != rows; i++)
	{
		cache_get_row(i, 0, name);
		cache_get_row_int(i, 1, vID); //RegID
		cache_get_row_int(i, 2, color); //Szín
		if(color == 0) color = -1; //Ha nincs elmentett szín akkor fehérre van állítva
		
		for(new ii; ii != MAX_CLAN_PLAYERS; ii++)
		{
			if(gClanPlayers[clanid][0][ii] == vID)
			{
				format(i_str, sizeof(i_str),"{AAAAAA}%d\t{%06x}%s\t{AAAAAA}%s\n", vID, color >>> 8, name, gClanRankName[clanid][gClanPlayers[clanid][1][ii]]);
				strcat(dline, i_str);
			}
		}
	}
	
	format(i_str, sizeof(i_str),"{%06x}%s - Klán CP - Játékosok", gClanColor[clanid] >>> 8, gClanName[clanid]);
	ShowPlayerDialogEx(playerid, DIALOG_CLAN_PLAYERS, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Kiválaszt", "Vissza");
	return 1;
}

forward THREAD_CreateClan(playerid);
public THREAD_CreateClan(playerid)
{
	new
	    clanid = cache_insert_id();
	format(tmp, sizeof(tmp), "Klánkészítés befejezve, a klánod már csak ellenõrzésre vár.\nAmint az adminok leellenõrzik és elfogadják, azonnal aktiválódik a klánod!\nKlánnal kapcsolatos parancsokat a {" #XCOLOR_RED "}/clanhelp {" #XCOLOR_DEFAULT "}paranccsal éred el\n\n{FF0000}Klán ID: {33FF33}%d", clanid);

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánkészítés - Befejezve", tmp, "Oké");
	g_pClanCreateState{playerid} = 0xFF;

	g_pClan{playerid} = g_ClanCount;
    g_pClanRank{playerid} = 4; // Alapból a maximum rang

	// A létrehozott klán betöltése
	mysql_function_query(1, "SELECT clans.*, players.name FROM `clans` LEFT JOIN players ON ( clans.reg_id = players.reg_id ) ORDER BY `id` DESC LIMIT 1", false, "THREAD_LoadClanInfo", "d", 0);
	return 1;
}

stock ExitDuel(duelid)
{
	if(!Bit_Get(g_bDuelActive, duelid))
	{
		printf("assertation failed! ExitDuel(%d)", duelid);
		return 0;
	}

	new
	    playerid;
	for(new i; i != 2; i++)
	{
		// Játékos ID lekérése
		playerid = g_DuelPlayer[duelid][i];

		printf("exit duel: %s(%d)", pName(playerid), playerid);

		DeletePVar(playerid, "InDuel");
        g_pGamesData[playerid] &= ~e_IN_DUEL;

        g_pDuelCaller[playerid] = INVALID_PLAYER_ID;
        g_pDuelPlayer[playerid] = INVALID_PLAYER_ID;
        g_pDuelLocation{playerid} = 0xFF;
        g_pDuelID{playerid} = 0xFF;

		for(new x; x != 13; x++)
		{
	    	g_pDuelWeapon[playerid]{x} = 0xFF;
		}
		UpdatePlayerSpawnInfo(playerid);
	}

	for(new x; x != 13; x++)
	{
    	g_DuelWeapons[duelid]{x} = 0xFF;
	}

    g_DuelPlayer[duelid][0] = INVALID_PLAYER_ID;
    g_DuelPlayer[duelid][1] = INVALID_PLAYER_ID;
    g_DuelLocation{duelid} = 0xFF;

    g_DuelKills[duelid][0] = 0;
    g_DuelKills[duelid][1] = 0;

    g_DuelMaxRound[duelid] = 0;
    g_DuelRounds[duelid] = 0;

	g_DuelMessziVannak[duelid] = 0;

	g_DuelHealth{duelid} = 100;
	g_DuelArmour{duelid} = 0;

    Bit_Set(g_bDuelActive, duelid, false);
    printf("free duel: %d", duelid);

    SetGoodAllowed(playerid, true);
	return 1;
}

stock CancelClanCreation(playerid)
{
	DeletePVar(playerid, "ClanName");
	DeletePVar(playerid, "ClanLeiras");
	DeletePVar(playerid, "ClanSpawnX");
	DeletePVar(playerid, "ClanSpawnY");
	DeletePVar(playerid, "ClanSpawnZ");
	DeletePVar(playerid, "ClanSpawnA");
	DeletePVar(playerid, "ClanSpawnInt");
	DeletePVar(playerid, "ClanSpawnWorld");
	DeletePVar(playerid, "ClanMinX");
	DeletePVar(playerid, "ClanMinY");
	DeletePVar(playerid, "ClanMinZ");
	DeletePVar(playerid, "ClanMaxX");
	DeletePVar(playerid, "ClanMaxY");
	DeletePVar(playerid, "ClanMaxZ");
	g_pClanCreateState{playerid} = 0xFF;
}
// Odre
forward THREAD_MusicListPlay(playerid, musicname[], queue);
public THREAD_MusicListPlay(playerid, musicname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MusicListPlay);

	new
	    //activated,
	    id = GetPVarInt(playerid, "MusicID");
	//cache_get_row_int(0, 0, activated);
	cache_get_row(0, 1, name);
	cache_get_row(0, 2, tmp);
	cache_get_row_int(0, 3, datez);

    date(datez, day, month, year, hour, minute, second);
	PlayAudioStreamForPlayer(playerid, tmp, 0.0, 0.0, 0.0, 0.0, false);
	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_ZENE_LEJATSZVA_CIM_"), musicname);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_KESZITETTE___IDO_2D2D2D"), name, year, month, day, hour, minute, second);

	mysql_format(1, query, sizeof(query), "UPDATE `musiclist` SET `played` = `played` + 1 WHERE `id` = %d", id);
	mysql_function_query(1, query, false, "", "");



	if(GetPVarInt(playerid, "Level") < 3 && !IsPlayerAdmin(playerid)) return 1;

	if(GetPVarInt(playerid,"RandomMusic") == 0)
	{
		SetPVarString(playerid, "MusicName", musicname);
		ShowPlayerDialogEx(playerid, DIALOG_RADIO + 4, DIALOG_STYLE_LIST, "Válassz mûveletet", "Semmi\nMegerõsítés\nTörlés\nCím szerkesztése\nLink szerkesztése", "Oké", "Vissza");
	}
	DeletePVar(playerid,"RandomMusic");
	return 1;
}

forward THREAD_RadioPlay(playerid, queue);
public THREAD_RadioPlay(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RadioPlay);

	new
	    //activated,
 	id = GetPVarInt(playerid, "RadioID");
	//cache_get_row_int(0, 0, activated);
	cache_get_row(0, 1, name); //Rádió neve
	cache_get_row(0, 2, tmp); //URL

	PlayAudioStreamForPlayer(playerid, tmp, 0.0, 0.0, 0.0, 0.0, false);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHRADIO_LEJATSZVA_RHHN"), name);

	mysql_format(1, query, sizeof(query), "UPDATE `radio` SET `played` = `played` + 1 WHERE `id` = %d", id);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_TopDialog(playerid, istime, title[], queue);
public THREAD_TopDialog(playerid, istime, title[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_TopDialog);

	new
	    rows = cache_get_row_count(),
	    playerRegID,
	    t_ido[3],
     	Float:distance;
	    
	switch(istime)
	{
	    case 0: format(dline, sizeof(dline), "Helyezés\tNév\tÉrték");
	    case 1: format(dline, sizeof(dline), "Helyezés\tNév\tH:M:S"); //
     	case 2: format(dline, sizeof(dline), "Helyezés\tNév\tLejár\tHátralévõ idõ"); //VIP
	    case 3: format(dline, sizeof(dline), "Helyezés\tNév\tcmd\tÉrték"); //Teleportok
	    case 4: format(dline, sizeof(dline), "Helyezés\tNév\tMegtett távolság(KM)");
	}
	for(new x; x != rows; x++)
	{
	    if(istime != 3 && istime != 4)
	    {
	        cache_get_row(x, 0, country);
			cache_get_row_int(x, 1, playerRegID);
			cache_get_row_int(x, 2, vID);
	    }
	    
	    //if(vID == 0) continue;
		switch(istime)
		{
		    case 0: format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t%s", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, FormatNumber(vID));
		    case 1:
			{
			    ConvertIdo(vID, t_ido[0], t_ido[1], t_ido[2]);
			    format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t%02d:%02d:%02d", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, t_ido[0], t_ido[1], t_ido[2]);
			}
		    case 2: //VIP
		    {
		         new
				 	diff,
				 	days,
				 	hours,
	 				currtime = CurrentTimestamp();

				diff = vID - currtime;
				days = floatround(diff / 24 / 3600);
				hours = floatround(diff / 3600);
                date(vID, day, month, year, hour, minute, second);

                if(days == 0) //Ha nincs egy teljes nap akkor órában kell kiírni
				{
				    if(!IsNegative(days)) format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t{A9C4E4}%02d.%02d.%02d %02d:%02d:%02d\t{A9C4E4}%d óra", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, year, month, day, hour, minute, second, hours);
				}
				else
				{
				    if(!IsNegative(days)) format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t{A9C4E4}%02d.%02d.%02d %02d:%02d:%02d\t{A9C4E4}%d nap", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, year, month, day, hour, minute, second, days);
				}


                
		    }
		    case 3: //Teleportok
		    {
		        cache_get_row(x, 0, country);
			    cache_get_row(x, 1, name);
				cache_get_row_int(x, 2, vID);
				
				format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t%s\t%s", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, name, FormatNumber(vID));
		    }
		    case 4:
		    {
                cache_get_row(x, 0, country); //Név
                cache_get_row_int(x, 1, playerRegID);//RegID
                cache_get_row_float(x, 2, distance);

		        format(dline, sizeof(dline), "%s\n%d.\t{%06x}%s\t%.2f", dline, x + 1, (PlayerInfo[playerid][pRegID] == playerRegID) ? (COLOR_RED >>> 8) : (COLOR_DEFAULT >>> 8), country, distance);
		    }
		}
	}
	ShowPlayerDialogEx(playerid, DIALOG_TOP + 1, DIALOG_STYLE_TABLIST_HEADERS, title, dline, !"Ok");
	return 1;
}

forward THREAD_MyObjects_Creator(playerid, queue);
public THREAD_MyObjects_Creator(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MyObjects_Creator);

	new
	    slot = GetPVarInt(playerid, "HO_ID");
	cache_get_row(0, 0, name);
	cache_get_row(0, 1, country);

	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOTBAN_LEVO_OBJECTEDET"), slot, name, country);
	return 1;
}

forward THREAD_MyObjects_Apply(playerid, objectname[], queue);
public THREAD_MyObjects_Apply(playerid, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MyObjects_Apply);

	new
	    slot = GetPVarInt(playerid, "HO_ID"),
		rows = cache_get_row_count();
	if(rows != 1)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK"), objectname);

		if(g_pSavedObject[playerid][slot])
		{
			ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Átállítása\nObject Törlése\nKészítõ Megtekintése\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
		}
		else
		{
            if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
            {
				ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása\n{" #XCOLOR_YELLOW "}Szerkesztés", "Ok", "Mégse");
			}
			else
			{
				ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Felcsatolható objectek", "{" #XCOLOR_PROPGREEN "}Object Beállítása", "Ok", "Mégse");
			}
		}
		return 1;
	}
	datez = cache_get_row_int_ex(0, 0);
	g_pSavedObject[playerid][slot] = datez;

	format(i_str, sizeof(i_str), "%s %d", objectname, slot);
	cmd_lho(playerid, i_str);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `savedobjects` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pSavedObject[playerid][0], g_pSavedObject[playerid][1], g_pSavedObject[playerid][2], g_pSavedObject[playerid][3], g_pSavedObject[playerid][4], g_pSavedObject[playerid][5], g_pSavedObject[playerid][6], g_pSavedObject[playerid][7], g_pSavedObject[playerid][8], g_pSavedObject[playerid][9], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_CheckBanAdmin(playerid, queue);
public THREAD_CheckBanAdmin(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CheckBanAdmin);

	if(cache_get_row_int_ex(0, 0) != PlayerInfo[playerid][pRegID])
	{
		DeletePVar(playerid, "DialogBanID");
        DeletePVar(playerid, "DialogBanName");
		return 1;
	}

	new
	    iBanID = GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF;
    GetPVarString(playerid, "DialogBanName", name, sizeof(name));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_FELOLDVA_NEV__ID_"), name, iBanID);

	DeletePVar(playerid, "DialogBanID");
	DeletePVar(playerid, "DialogBanName");

    mysql_format(1, query, sizeof(query), "DELETE FROM `bans` WHERE `id` = %d", iBanID);
	mysql_function_query(1, query, false, "", "");

	printf("Ban feloldva! %s(%d) -> %s(%d)", pName(playerid), playerid, name, iBanID);
	return 1;
}

forward THREAD_Baninfo(playerid, queue, stats);
public THREAD_Baninfo(playerid, queue, stats)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Baninfo);

	new
	    ban_time,
	    ban_id,
	    ban_name[24],
		Time[6],
		CurrTimestamp,
		bool:bShowAdmin;
	// id 	player 	reg_id 	admin 	admin_id 	ip 	serial 	reason 	time 	unban_time
	cache_get_row_int(0, 0, ban_id);
	cache_get_row(0, 1, ban_name);
	cache_get_row_int(0, 2, vID);
	cache_get_row(0, 3, country);
	cache_get_row_int(0, 4, player1);
	cache_get_row(0, 5, ip);
	cache_get_row(0, 6, i_str);
	cache_get_row(0, 7, query);
	cache_get_row(0, 8, tmp);
	cache_get_row_int(0, 9, ban_time);
	bShowAdmin = !!cache_get_row_int_ex(0, 10);

	if(stats)
	{
	    mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `reg_id` = %d", vID);
		mysql_function_query(1, query, true, "THREAD_Findplayer_2", "dd", playerid, g_pQueryQueue[playerid]);
		return 1;
	}

    date(ban_time, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5]);
    if(!bShowAdmin)
    {
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
		{
	    	country = "N/A";
		}
		else
		{
            format(country, sizeof(country), "%s {" #XCOLOR_WHITE "}(Rejtett)", country);
		}
	}
	format(dline, sizeof(dline), "BanID: {" #XCOLOR_ORANGE "}%d\nNév: {" #XCOLOR_BLUE2 "}%s\nRegID: {" #XCOLOR_YELLOW "}%d\nAdmin: {" #XCOLOR_BLUE2 "}%s\nRegID: {" #XCOLOR_YELLOW "}%d\nIP: {" #XCOLOR_SAMP "}%s\ngpci: {" #XCOLOR_SAMP "}%s\nIndok: {" #XCOLOR_SAMP "}%s\nIdõ: {" #XCOLOR_GREENYELLOW "}%s", ban_id, ban_name, vID, country, player1, ip, i_str, query, tmp);

	getdate(year, month, day);
	gettime(hour, minute, second);
	CurrTimestamp = CurrentTimestamp();

	if(ban_time < CurrTimestamp && ban_time) // Lejárt
	{
		format(dline, sizeof(dline), "%s\nUnban: {" #XCOLOR_GREEN "}%02d.%02d.%02d %02d:%02d:%02d", dline, Time[2], Time[1], Time[0], Time[3], Time[4], Time[5]);
	}
	else if(CurrTimestamp < ban_time && ban_time) // Nem járt le
	{
		format(dline, sizeof(dline), "%s\nUnban: {" #XCOLOR_RED "}%02d.%02d.%02d %02d:%02d:%02d", dline, Time[2], Time[1], Time[0], Time[3], Time[4], Time[5]);
	}
	else // Soha nincs unban
	{
		format(dline, sizeof(dline), "%s\nUnban: {" #XCOLOR_RED "}SOHA", dline);
	}

	ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 5000, DIALOG_STYLE_MSGBOX, !"Baninfó", dline, !"Ok", !"Vissza");
	return 1;
}

forward THREAD_Bantime(playerid, queue);
public THREAD_Bantime(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Bantime);

	new
		iUnbanTime,
		iCurrTime;
	cache_get_row_int(0, 0, iUnbanTime);

	if(PlayerInfo[playerid][pRegID] != cache_get_row_int_ex(0, 1))
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return 1;
	}

	if(!iUnbanTime)
	{
		format(dline, sizeof(dline), "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!\n\nUnban Idõ: {" #XCOLOR_RED "}SOHA\n{" #XCOLOR_DEFAULT "}Mai Dátum: %02d.%02d.%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	}
	else
	{
		new
			iDay,
			iMonth,
			iYear,
			iHour,
			iMinute,
			iSecond;

		getdate(year, month, day);
		gettime(hour, minute, second);

		date(iUnbanTime, iDay, iMonth, iYear, iHour, iMinute, iSecond);
        iCurrTime = CurrentTimestamp();

		if(iUnbanTime < iCurrTime)
		{
			format(dline, sizeof(dline), "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!\n\nUnban Idõ: {" #XCOLOR_GREEN "}%02d.%02d.%02d %02d:%02d:%02d\n{" #XCOLOR_DEFAULT "}Mai Dátum: %02d.%02d.%02d %02d:%02d:%02d", iYear, iMonth, iDay, iHour, iMinute, iSecond, year, month, day, hour, minute, second);
		}
		else
		{
			format(dline, sizeof(dline), "Lentre írj be egy dátumot ebbe a formába: \nyear.month.day.hour.minute.second \nHa üresen hagyod, akkor 0, azaz nincs unban!\n\nUnban Idõ: {" #XCOLOR_RED "}%02d.%02d.%02d %02d:%02d:%02d\n{" #XCOLOR_DEFAULT "}Mai Dátum: %02d.%02d.%02d %02d:%02d:%02d", iYear, iMonth, iDay, iHour, iMinute, iSecond, year, month, day, hour, minute, second);
		}
	}
	ShowPlayerDialogEx(playerid, DIALOG_BANLIST + 2, DIALOG_STYLE_INPUT, "Banmanager -> Ban idõ állítás", dline, "Ok", "Mégse");
	return 1;
}

forward THREAD_Banindok(playerid, reason[], queue);
public THREAD_Banindok(playerid, reason[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Banindok);

	new
	    iBanID = GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF;
	cache_get_row(0, 0, country);

	if(PlayerInfo[playerid][pRegID] != cache_get_row_int_ex(0, 1))
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return 1;
	}

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_INDOK_ATALLITVA____BANID"), country, reason, iBanID);

	DeletePVar(playerid, "DialogBanID");
    DeletePVar(playerid, "DialogBanName");

	mysql_format(1, query, sizeof(query), "UPDATE `bans` SET `reason` = '%e' WHERE `id` = %d", reason, iBanID);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_Ban_AddRCON(playerid, queue);
public THREAD_Ban_AddRCON(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Banindok);

	new
	    iBanID = GetPVarInt(playerid, "DialogBanID") & 0xFFFFFF;
	cache_get_row(0, 0, ip);
	cache_get_row(0, 1, name);

	GetPVarString(playerid, "DialogBanName", name, sizeof(name));
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_ATRAKVA_AZ_RCON_BAN_LISTARA"), name, ip, iBanID);

	DeletePVar(playerid, "DialogBanID");
    DeletePVar(playerid, "DialogBanName");

	SendRconCommandf("unbanip %s", ip);
	SendRconCommandf("banip %s", ip);
	return 1;
}

forward THREAD_Changepass(playerid, password[], queue);
public THREAD_Changepass(playerid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Changepass);

	new
	    szOldPass[32];
	cache_get_row(0, 0, szOldPass);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `pass` = '%e' WHERE `reg_id` = %d", password, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `namechanges_p`(id, reg_id, name, oldpass, newpass, time) VALUES(0, %d, '%e', '%e', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", PlayerInfo[playerid][pRegID], pName(playerid), szOldPass, password, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SIKERESEN_ATALLITOTAD_A_JELSZAVAD"), password);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHJELSZAVAD_MEGVALTOZTATVA"));

	if(GetPVarInt(playerid, "CPanelRe") == 24) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
	return 1;
}

stock ChangeName(playerid)
{
    new CHANGENAME_XP;
    switch(g_pSzint{playerid})
	{
	    case 1..5: CHANGENAME_PRICE = 5000, CHANGENAME_XP = 1;
	    case 6..12: CHANGENAME_PRICE = 10000, CHANGENAME_XP = 10;
	    case 13..22: CHANGENAME_PRICE = 20000, CHANGENAME_XP = 50;
	    case 23..33: CHANGENAME_PRICE = 30000, CHANGENAME_XP = 60;
	    case 34..42: CHANGENAME_PRICE = 40000, CHANGENAME_XP = 75;
	    case 43..50: CHANGENAME_PRICE = 50000, CHANGENAME_XP = 100;
	}
	if(g_pVIP[playerid]) CHANGENAME_PRICE = CHANGENAME_PRICE/2;

    format(dline, sizeof(dline), "{" #XCOLOR_GREEN "}Lentre írd be az új neved! \n{" #XCOLOR_PROPGREEN "}Ha régóta játszol már, akkor a névváltás több másodpercig is eltarthat!\n\
	{" #XCOLOR_ORANGE "}Ahogy megváltoztattad, rögtön változtasd meg a neved a SAMP-ban!\n{" #XCOLOR_RED"}Figyelem: Egy hét alatt csak 6 névváltási lehetõséged van!\n\n{" #XCOLOR_BLUE "}Névváltás ára: %d$ és %dXP",CHANGENAME_PRICE,CHANGENAME_XP);
    ShowPlayerDialogEx(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "{" #XCOLOR_RED "}Névváltás", dline, "Változtatás", "Mégse");
}

forward THREAD_Changename(playerid, inputtext[], queue);
public THREAD_Changename(playerid, inputtext[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Changename);
	new
	    rows = cache_get_row_count();

	if(!rows) //Ha az elmúlt 1 hétben nem váltott egyszer sem nevet
	{
	    mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `players` WHERE `name` = '%s'", inputtext);
		mysql_function_query(1, query, true, "THREAD_Changename2", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
		return 1;
	}
	if(rows >= 6 && !IsFOOwner(playerid)) //Ha az elmúlt egy hétben megvolt az öt névváltás
	{
	    SendClientMessagef(playerid,-1,"{" #XCOLOR_ORANGE "}HIBA: Az elmúlt egy hétben több mint 6 névváltásod volt. És ezzel túllépted a limitet!");
	    return 1;
	}

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `players` WHERE `name` = '%s'", inputtext);
	mysql_function_query(1, query, true, "THREAD_Changename2", "dsd", playerid, inputtext, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Changename2(playerid, inputtext[], queue);
public THREAD_Changename2(playerid, inputtext[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Changename2);

	new
	    rows = cache_get_row_count();
	if(rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_NEV__MAR_HASZNALATB"), inputtext);
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_IRJ_BE_EGY_MAS_NEVET_VAGY_MENJ"));

		ChangeName(playerid);
        return 1;
	}

	new
		pname[MAX_PLAYER_NAME + 1];
	strcat(pname, pName(playerid));

	if(SetPlayerName(playerid, inputtext) != 1)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MEGFELELO_NEV_IRJ_BE_EGY"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BEIRT_NEV_NEM_MEGFELELO"));

		ChangeName(playerid);
	    return 1;
	}

	foreach(new i: Player)
	{
	    if(i != playerid && GetPVarInt(i, "Level") > 0)
	    {
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG__CHANGENAME___MEGVALTOZT"), pname, playerid, inputtext, playerid);
		}
	}

	foreach(houseid: houses)
	{
		if(PlayerInfo[playerid][pRegID] != GetGVarInt("PropOwnerRegID", houseid)) continue;

		GetGVarString("PropName", tmp, 129, houseid);
        SetGVarString("PropOwner", inputtext, houseid);

        UpdateHouse(houseid);
		break;
	}

	foreach(houseid: biznis)
	{
		if(PlayerInfo[playerid][pRegID] != GetGVarInt("BizOwnerRegID", houseid)) continue;

		GetGVarString("BizName", tmp, 129, houseid);
        SetGVarString("BizOwner", inputtext, houseid);

		UpdateBiznis(houseid);
		break;
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	datez = CurrentTimestamp();
    mysql_format(1, query, sizeof(query), "INSERT INTO `namechanges`(id, reg_id, oldname, newname, time, time_) VALUES(0, %d, '%s', '%s', '%02d.%02d.%02d/%02d.%02d.%02d', '%d')", PlayerInfo[playerid][pRegID], pname, inputtext, year, month, day, hour, minute, second, datez);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `holder` = '%s' WHERE `regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
/*
	mysql_format(1, query, sizeof(query), "UPDATE `chat` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
*/
	mysql_format(1, query, sizeof(query), "UPDATE `commands` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `adminchat` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `adminlog` SET `admin` = '%s' WHERE `adminid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `adminlog` SET `player` = '%s' WHERE `playerid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `kicks` SET `admin` = '%s' WHERE `admin_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `kicks` SET `player` = '%s' WHERE `player_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `reactions` SET `winner` = '%s' WHERE `winner_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `maths` SET `winner` = '%s' WHERE `winner_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `pm` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `pm` SET `reciever` = '%s' WHERE `reciever_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `killlist` SET `player` = '%s' WHERE `player_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `killlist` SET `killer` = '%s' WHERE `killer_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `rcon` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `rcon_f` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `namechanges_p` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `anticheat` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	/////
	mysql_format(1, query, sizeof(query), "UPDATE `bounty` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `bounty` SET `giver` = '%s' WHERE `giver_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `cameras` SET `creator` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `clans_banklog` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `faillogins` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `faillogins_s` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `fallout` SET `winner` = '%s' WHERE `winner_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `givecash` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `givecash` SET `reciever` = '%s' WHERE `reciever_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_v` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_vset` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `maths` SET `winner` = '%s' WHERE `winner_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `rablasok` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `teletests` SET `winner` = '%s' WHERE `winner_regid` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

    mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_set` SET `name` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

    mysql_format(1, query, sizeof(query), "UPDATE `chat_clans` SET `player` = '%s' WHERE `reg_id` = %d", inputtext, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	new CHANGENAME_XP;
 	switch(g_pSzint{playerid})
	{
	    case 1..5: CHANGENAME_PRICE = 5000, CHANGENAME_XP = 1;
	    case 6..12: CHANGENAME_PRICE = 10000, CHANGENAME_XP = 10;
	    case 13..22: CHANGENAME_PRICE = 20000, CHANGENAME_XP = 50;
	    case 23..33: CHANGENAME_PRICE = 30000, CHANGENAME_XP = 60;
	    case 34..42: CHANGENAME_PRICE = 40000, CHANGENAME_XP = 75;
	    case 43..50: CHANGENAME_PRICE = 50000, CHANGENAME_XP = 100;
	}
    if(g_pVIP[playerid]) CHANGENAME_PRICE = CHANGENAME_PRICE/2;
    SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SIKERESEN_ATVALTOTTAD_A_NEVED"), inputtext, CHANGENAME_PRICE, CHANGENAME_XP);
    SendClientMessage(playerid,-1,"Most pedig változtasd meg a nevedet SAMP kliensben is!");
    SendClientMessage(playerid,-1,"Most pedig változtasd meg a nevedet SAMP kliensben is!");
    SendClientMessage(playerid,-1,"Most pedig változtasd meg a nevedet SAMP kliensben is!");

    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHNEVED_HMEGVALTOZTATVAW"));
 	GivePlayerMoneyEx(playerid, - CHANGENAME_PRICE, "Changename");
	GivePlayerScore(playerid, - CHANGENAME_XP);

    if(GetPVarInt(playerid, "CPanelRe") == 23) cmd_cpanel(playerid, ""), DeletePVar(playerid, "CPanelRe");
	return 1;
}

forward THREAD_Members(playerid, queue);
public THREAD_Members(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Members);

	new
	    rows = cache_get_row_count();
	dline[0] = EOS;
	if(!rows)
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, !"Klántagok", "Ebben a klánban nincs egy játékos sem!", !"Ok");
		return 1;
	}

	for(new x; x != rows; x++)
	{
        cache_get_row(x, 0, name);

		strcat(dline, name, sizeof(dline));
		strcat(dline, "\n", sizeof(dline));
	}

	ShowPlayerDialogEx(playerid, DIALOG_MEMBERS + 1, DIALOG_STYLE_LIST, !"Klántagok", dline, !"Ok", !"Mégse");
	return 1;
}
/*
forward THREAD_Findplayer_1(playerid, queue);
public THREAD_Findplayer_1(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_1);

	printf("findplayer regid: %d", cache_get_row_int_ex(0, 0));

	SetPVarInt(playerid, "fPlayerID", cache_get_row_int_ex(0, 0));

	dline = "Adatok Megtekintése\n{" #XCOLOR_GREEN "}A.K.A Megtekintése\n{" #XCOLOR_BLUE "}Berakás HQ-ba\n{" #XCOLOR_YELLOW "}Kidobás HQ-ból";

	if(GetPVarInt(playerid, "Level") > 2 || IsPlayerAdmin(playerid))
	{
		strcat(dline, "\n{" #XCOLOR_RED "}Kitiltás");
	}
	ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 1, DIALOG_STYLE_LIST, "Mit szeretnél csinálni?", dline, "Választ", "Mégse");
	return 1;
}
*/
forward THREAD_Findplayer_2(playerid, queue);
public THREAD_Findplayer_2(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_2);

	new
		pname[MAX_PLAYER_NAME], skin, color, regid, level, clanid = 0xFF, szerveren_ido, afk, afkrekord, money, bank, verdij, xp, szint, vip,
		olesek, halalok, hskill, hsdeath, killstreak, currks, flagtime, bcartime, patko, osztriga, fenykep, jump, tag, uzenet,
		tesztek, matek, tele, verseny, versenyrekord, tojas, rablas, range, fuvarok, fallout, derby, stuntbonus, warn,
		levelek, pizza, ctc_auto, ctc_hajo, jail, mute, freeze, chatcolor, use2, idcolor, regdate, laston, weapons[13];

	cache_get_row_int(0, 0, regid);
	cache_get_row(0, 1, pname);

	cache_get_row_int(0, 5, regdate); // date(timestamp, &f_day, &f_month, &f_year, &f_hour, &f_min, &f_sec)
	cache_get_row_int(0, 6, laston);
	cache_get_row_int(0, 7, level);
	cache_get_row_int(0, 8, money); //PVarSet[1] = strval(name); // Money
	cache_get_row_int(0, 9, bank); //PVarSet[2] = strval(name); // Bank
	cache_get_row_int(0, 10, olesek); //PVarSet[3] = strval(name); // Kills
	cache_get_row_int(0, 11, halalok); //PVarSet[4] = strval(name); // Deaths
	cache_get_row_int(0, 12, killstreak); //PVarSet[32] = strval(name); // Killstreak
	//cache_get_row_int(0, 13, PVarSet[5]); //PVarSet[5] = strval(name); // Score
	//cache_get_row_int(0, 14, PVarSet[6]); //PVarSet[6] = strval(name); // Fightingstyle
	cache_get_row_int(0, 15, tesztek); //PVarSet[8] = strval(name); // Reactionwins
	cache_get_row_int(0, 16, tojas); //PVarSet[30] = strval(name); // Goldpots
	cache_get_row_int(0, 17, szerveren_ido); // Online Time
	cache_get_row_int(0, 18, uzenet); //PVarSet[10] = strval(name); // Posts
	//cache_get_row_int(0, 19, PVarSet[11]); //PVarSet[11] = strval(name); // HQ
	cache_get_row_int(0, 20, warn); //PVarSet[13] = strval(name); // Warns
	cache_get_row_int(0, 21, verseny); //PVarSet[28] = strval(name); // Races

	cache_get_row_int(0, 22, rablas); //PVarSet[38] = strval(name); // Rablasok
	cache_get_row_int(0, 23, range); //PVarSet[39] = strval(name); // Rangeshot
	//cache_get_row_int(0, 24, PVarSet[40]); //PVarSet[40] = strval(name); // Nitro State
	//cache_get_row_int(0, 25, PVarSet[42]); //PVarSet[42] = strval(name); // Laser Pointer
	//cache_get_row_int(0, 26, PVarSet[43]); //PVarSet[43] = strval(name); // Last Rabolt
	cache_get_row_int(0, 27, idcolor); //PVarSet[44] = strval(name); // ID Color
	cache_get_row_int(0, 28, flagtime); //PVarSet[45] = strval(name); // Flagtime
	cache_get_row_int(0, 29, bcartime); //PVarSet[46] = strval(name); // BCartime
	cache_get_row_int(0, 30, fuvarok); //PVarSet[47] = strval(name); // Fuvarok
//	cache_get_row_int(0, 31, PVarSet[55]); //PVarSet[55] = strval(name); // Stuntbonus
	cache_get_row_int(0, 32, fallout); //PVarSet[62] = strval(name); // Fallout Won
	cache_get_row_int(0, 33, mute); //PVarSet[63] = strval(name); // Mute Time
	cache_get_row_int(0, 34, freeze); //PVarSet[64] = strval(name); // Freeze Time
/*
	cache_get_row_float(0, 35, X); //X = floatstr(name); // SavedX
	cache_get_row_float(0, 36, Y); //Y = floatstr(name); // SavedY
	cache_get_row_float(0, 37, Z); //Z = floatstr(name); // SavedZ
	cache_get_row_int(0, 38, PVarSet[14]); //PVarSet[14] = strval(name); // Interior

	cache_get_row_int(0, 39, PVarSet[15]); //PVarSet[15] = strval(name); // World
	cache_get_row_float(0, 40, Angle); //Angle = floatstr(name); // World

	cache_get_row_float(0, 41, V[0]); //V[0] = floatstr(name); // DeathX
	cache_get_row_float(0, 42, V[1]); //V[1] = floatstr(name); // DeathY
	cache_get_row_float(0, 43, V[2]); //V[2] = floatstr(name); // DeathZ
	cache_get_row_float(0, 44, DeathA); //DeathA = floatstr(name); // DeathA
	cache_get_row_int(0, 45, PVarSet[52]); //PVarSet[52] = strval(name); // DeathInt
	cache_get_row_int(0, 46, PVarSet[53]); //PVarSet[53] = strval(name); // DeathWorld
	cache_get_row_int(0, 47, iHydType); //iHydType = strval(name); // Hydraulics Type
	cache_get_row_float(0, 48, Spin[0]); //Spin[0] = floatstr(name); // SpinX
	cache_get_row_float(0, 49, Spin[1]); //Spin[1] = floatstr(name); // SpinY
	cache_get_row_float(0, 50, Spin[2]); //Spin[2] = floatstr(name); // SpinZ
*/
	cache_get_row_int(0, 51, szint); //g_pSzint{playerid} = strval(name); // Szint
	cache_get_row_int(0, 52, xp); //PVarSet[49] = strval(name); // XP

	cache_get_row_int(0, 53, chatcolor); //PVarSet[51] = strval(name); // Chatcolor
	//cache_get_row_int(0, 54, PVarSet[50]); //VarSet[50] = strval(name); // Walkstyle
	cache_get_row_int(0, 55, jail); //PVarSet[17] = strval(name); // Jailtime
	//cache_get_row_int(0, 56, PVarSet[18]); //PVarSet[18] = strval(name); // FavCarRadio
	//cache_get_row_int(0, 57, PVarSet[19]); //PVarSet[19] = strval(name); // Autorepair

	cache_get_row_int(0, 58, afk); //PlayerInfo[playerid][pAFKTime] = strval(name); // AFKTime
	//cache_get_row_int(0, 59, g_pGangwarTeam[playerid]); //g_pGangwarTeam[playerid] = strval(name); // gangwar_team
/*
	cache_get_row_float(0, 60, Health); //Health = floatstr(name); // Boost
	cache_get_row_float(0, 61, Armour); //Armour = floatstr(name); // Hopping

	cache_get_row_int(0, 62, PVarSet[34]); //PVarSet[34] = strval(name); // Boost Key
	cache_get_row_int(0, 63, PVarSet[35]); //PVarSet[35] = strval(name); // Hopping Key
	cache_get_row_int(0, 64, PVarSet[36]); //PVarSet[36] = strval(name); // Flip Key
*/
	cache_get_row_int(0, 65, matek); // Matek megoldások
	cache_get_row_int(0, 66, tele); // Teleport tesztek

//	cache_get_row_int(0, 67, PVarSet[33]); //PVarSet[33] = strval(name); // Weather
//	cache_get_row_int(0, 68, PVarSet[23]); //PVarSet[23] = strval(name); // Time
/*
	cache_get_row_int(0, 69, PVarSet[24]); //PVarSet[24] = strval(name); // CarColor1
	cache_get_row_int(0, 70, PVarSet[56]); //PVarSet[56] = strval(name); // CarColor2
	cache_get_row_int(0, 71, PVarSet[57]); //PVarSet[57] = strval(name); // Paintjob
	cache_get_row_int(0, 72, PVarSet[58]); //PVarSet[58] = strval(name); // Fav Wheel

	cache_get_row(0, 73, szSpawn); //PVarSet[25] = strval(name); // Spawn location
*/

    if(!(g_pOtherFlags[player1] & e_RAKSAMP))  cache_get_row_int(0, 74, skin); //Ha rendes játékos, azaz nem bot
	else
	{
	    skin = GetPVarInt(playerid,"fSkin_ID");
	    DeletePVar(playerid,"fSkin_ID");
	}
	
//	cache_get_row_int(0, 75, PVarSet[37]); //PVarSet[37] = strval(name); // Armedweapon
	cache_get_row_int(0, 76, color); //PVarSet[27] = strval(name); // Color
	cache_get_row_int(0, 77, verdij); //g_pBounty[playerid] = strval(name); // Bounty
	//g_pTDFlags[playerid] = e_TD_Flags:cache_get_row_int_ex(0, 78);
	//g_PlayerFlags[playerid] = e_PlayerFlags:cache_get_row_int_ex(0, 79); // "clicktele" -> PlayerFlags
	// printf("Flags: %d, Name: %s", g_PlayerFlags[playerid], name);

	new i, szHorseShoes[256], szOysters[256], szPhotos[256], szJumps[256], szTags[256], aHorseShoes[50], aOysters[50], aPhotos[50], aJumps[70], aTags[100];

    cache_get_row(0, 81, tmp); // Weapons
	cache_get_row(0, 84, szHorseShoes); // horseshoes
    cache_get_row(0, 85, szOysters); // oysters
    cache_get_row(0, 86, szPhotos); // photos
 	cache_get_row(0, 90, szJumps); // jumps
	cache_get_row(0, 91, szTags); // tags

	sscanf(tmp, "p<,>A<i>(0)[13]", weapons);
    sscanf(szHorseShoes, "p<,>A<i>(0)[50]", aHorseShoes);
    sscanf(szOysters, "p<,>A<i>(0)[50]", aOysters);
    sscanf(szPhotos, "p<,>A<i>(0)[50]", aPhotos);
    sscanf(szJumps, "p<,>A<i>(0)[70]", aJumps);
    sscanf(szTags, "p<,>A<i>(0)[100]", aTags);

	for(i = 0; i != 50; i++)
	{
        if(!aHorseShoes[i]) continue;
		patko++;
	}
	for(i = 0; i != 50; i++)
	{
		if(!aOysters[i]) continue;
		osztriga++;
	}
	for(i = 0; i != 50; i++)
	{
        if(!aPhotos[i]) continue;
		fenykep++;
	}

	for(i = 0; i != 70; i++)
	{
		if(!aJumps[i]) continue;
		jump++;
	}
	for(i = 0; i != 100; i++)
	{
		if(!aTags[i]) continue;
		tag++;
	}

    cache_get_row_int(0, 94, levelek);
    cache_get_row_int(0, 95, pizza);
    cache_get_row_int(0, 96, derby);
    cache_get_row_int(0, 97, ctc_auto);
    cache_get_row_int(0, 98, ctc_hajo);
    cache_get_row_int(0, 99, hskill);
    cache_get_row_int(0, 100, hsdeath);

	afkrekord = cache_get_row_int_ex(0, 106); // longest_afk

	vip = cache_get_row_int_ex(0, 109); // vip

	new
		bool:bBreak;
 	foreach(clans, x)
 	{
		for(i = 0; i != MAX_CLAN_PLAYERS; i++)
		{
			if(gClanPlayers[x][0][i] == regid)
			{
				clanid = x;
	            break;
			}
		}

		// Fasz!
		if(bBreak) break;
	}

	new findPlayerID = -1;
	foreachex(Player, i)
	{
		if(PlayerInfo[i][pRegID] == regid)
		{
            findPlayerID = i;
            break;
		}
	}

	ShowStats(playerid, findPlayerID, pname, skin, color, regid, level, clanid, szerveren_ido, afk, afkrekord, money, bank, verdij, xp, szint, vip,
		olesek, halalok, hskill, hsdeath, killstreak, currks, flagtime, bcartime, patko, osztriga, fenykep, jump, tag, uzenet,
		tesztek, matek, tele, verseny, versenyrekord, tojas, rablas, range, fuvarok, fallout, derby, stuntbonus, warn,
		levelek, pizza, ctc_auto, ctc_hajo, jail, mute, freeze, chatcolor, use2, idcolor, regdate, laston, weapons);
	return 1;
}

forward THREAD_Findplayer_3(playerid, queue);
public THREAD_Findplayer_3(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_3);

	new
        fPlayerID = GetPVarInt(playerid, "fPlayerID");
	if(cache_get_row_count())
	{
		cache_get_row(0, 0, name);
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA___MAR_BANNOLVA_VAN"), name, fPlayerID);
		return 1;
	}

	mysql_format(1, query, sizeof(query), "SELECT `name`, `ip`, `level` FROM `players` WHERE `reg_id` = %d", fPlayerID);
	mysql_function_query(1, query, true, "THREAD_Findplayer_3After", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Findplayer_3After(playerid, queue);
public THREAD_Findplayer_3After(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_3After);

	new
	    fPlayerID = GetPVarInt(playerid, "fPlayerID"),
	    level;
	cache_get_row(0, 0, name);
	cache_get_row(0, 1, ip);
	cache_get_row_int(0, 2, level);

	if(level && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) // Admint csak tulaj bannolhat
	{
		SendClientMessagef(playerid, -1, LANG(playerid, "MSG_ADMINT_NEM_BANNOLHATSZ__PEDIG"), name, level);
		return 1;
	}
    getdate(year, month, day);
	gettime(hour, minute, second);

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BAN_HOZZAADVA_NEV__REGID__I"), name, fPlayerID, ip);
	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__INDOK_MEGVALTOZTATASAERT_BANSBA"), name, fPlayerID, ip);
	DeletePVar(playerid, "fPlayerID");

	mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time) VALUES(0, '%s', %d, '%s', %d, '%s', 'N/A', 'FINDPLAYERREL KITILVA ( N/A )', '%02d.%02d.%02d/%02d.%02d.%02d')", name, fPlayerID, pName(playerid), PlayerInfo[playerid][pRegID], ip, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_Findplayer_4(playerid, queue);
public THREAD_Findplayer_4(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_4);

	cache_get_row(0, 0, name);
	cache_get_row(0, 1, ip);
	cache_get_row_int(0, 2, datez); //RegID

	mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id` FROM `connections` WHERE `ip` = '%s' GROUP BY `name` ORDER BY max(`id`)", ip);
	mysql_function_query(1, query, true, "THREAD_Findplayer_5", "dssd", playerid, name, ip, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Findplayer_5(playerid, playername[], playerip[], queue);
public THREAD_Findplayer_5(playerid, playername[], playerip[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findplayer_5);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		format(tmp, 128, "A.K.A: %s -> IP: %s", playername, playerip);
		ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_MSGBOX, tmp, !"{" #XCOLOR_RED "}Üres", !"Ok");
		return 1;
	}
/*
	dline[0] = EOS;
	for(new i; i != rows; i++)
	{
		cache_get_row(i, 0, name);
		strcat(dline, name);
		strcat(dline, "\n");
	}*/
    dline[0] = EOS;
	for(new i; i != rows; i++)
	{
	    cache_get_row(i, 0, name); //Név
	    cache_get_row_int(i, 1, datez); //RegID

		if(datez != -1)
		{
			format(i_str, 64, "%d. %s\n", datez, name);
			strcat(dline, i_str);
		}
	}

	format(tmp, 128, "A.K.A: %s -> IP: %s <%d>", playername, playerip, rows);
	ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_LIST, tmp, dline, !"Ok");
	return 1;
}

forward THREAD_SpawnPlaceSP(playerid, slot, queue);
public THREAD_SpawnPlaceSP(playerid, slot, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SpawnPlaceSP);

	cache_get_row_float(0, 0, X);
	cache_get_row_float(0, 1, Y);
	cache_get_row_float(0, 2, Z);
	cache_get_row_float(0, 3, Angle);

	if(X == -1 && Y == -1)
	{
        SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOT_URES"), slot);
        ShowPlayerDialogEx(playerid, SPAWNCHANGE + 1, DIALOG_STYLE_INPUT, "Spawnhely -> Admin pozícióra", "Írj be egy számot, hogy melyik pozícióra szeretnéd állítani < {" #XCOLOR_PROPGREEN "}1 - 1000 {" #XCOLOR_DEFAULT "}>\nHa nemtudod, hogy melyik milyen, akkor nézegess!\n\n{" #XCOLOR_LIGHTRED "}/lp {" #XCOLOR_PROPGREEN "}<Slot>", "Ok", "Vissza");
		return 1;
	}

	SetPVarInt(playerid, "SpawnLocation", SPAWNPLACE_SP);
	SetPVarInt(playerid, "SpawnLocation2", slot);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPAWNHELY_MEGVALTOZTATVAW"));
    UpdatePlayerSpawnInfo(playerid);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '" #SPAWNPLACE_SP ",%d' WHERE `reg_id` = %d", slot, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward THREAD_SetHQ(playerid, hqid, hqname[], queue);
public THREAD_SetHQ(playerid, hqid, hqname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SetHQ);

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(!CheckHQRegID(PlayerInfo[playerid][pRegID], hqid) && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_JOGOD_BERAKNI_A_JATEKOST"));

	new
	    fPlayerID = GetPVarInt(playerid, "fPlayerID"),
	    phqid;
	cache_get_row_int(0, 1, hqid);
	if(hqid != 0 && bIsNotOwner) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_MAR_VALAMILYEN"), phqid);

	cache_get_row(0, 0, name);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__BERAKTAD___NEVU_JATEKOST_A"), name, fPlayerID, hqname);
    DeletePVar(playerid, "fPlayerID");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '%d' WHERE `reg_id` = %d", hqid, fPlayerID);
    mysql_function_query(1, query, false, "", "");

	foreach(new i: Player)
	{
		if(PlayerInfo[i][pRegID] != fPlayerID) continue;

		SetPVarInt(i, "HQ", hqid);
		break;
	}
	return 1;
}

forward THREAD_RemoveHQ(playerid, queue);
public THREAD_RemoveHQ(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RemoveHQ);

	new
	    fPlayerID = GetPVarInt(playerid, "fPlayerID"),
	    hqid;

	cache_get_row_int(0, 1, hqid);

	if(!hqid) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_EZ_A_JATEKOS_NINCS_SEMILYEN"));
	if(!CheckHQRegID(PlayerInfo[playerid][pRegID], hqid) && (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_JOGOD_TOROLNI_A_JATEKOST"), hqid);

	cache_get_row(0, 0, name);

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG__KIDOBTAD___NEVU_JATEKOST_A"), name, fPlayerID);
    DeletePVar(playerid, "fPlayerID");

	foreach(new i: Player)
	{
		if(PlayerInfo[i][pRegID] != fPlayerID) continue;

		DeletePVar(i, "HQ");
		break;
	}

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '0' WHERE `reg_id` = %d", fPlayerID);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

//===================== [ ZCMD Parancsok ]=======================================
CMD:stunts(playerid, params[], 0, 0)
{
	dline[0] = EOS;
	for(new i; i != MAX_STUNTS; i++)
	{
		strunpack(country, g_SC_StuntName[i], sizeof(country));
		format(i_str, sizeof(i_str), "{" #XCOLOR_KICK "}%s {" #XCOLOR_DEFAULT "}- {" #XCOLOR_GOLD "}%d\n", country, g_SC_StuntScore{i} & 0x7F);
		strcat(dline, i_str);
	}
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, "Stuntok - összesen " #MAX_STUNTS "", dline, "Oké");
	return 1;
}

stock GetDMIDFromName(dmname[])
{
	foreach(DeathMatches, i)
	{
		if(!strcmp(g_szDMCommand[i], dmname, true))
		{
			return i;
		}
	}
	return -1;
}

CMD:minigamejoins(playerid, params[], 0, 0)
{
	for(new i; i != sizeof(g_pMinigameJoins[]); i++)
	{
		SendClientMessagef(playerid, -1, "%d", g_pMinigameJoins[playerid][i]);
		if(i == 9) break;
	}
	return 1;
}

CMD:kills(playerid, params[], 4, 0)
{
	new
	    id = strval(params);
	SendClientMessagef(playerid, COLOR_WHITE, "kills -> %d, %d", g_DMTeamKills[id][0], g_DMTeamKills[id][1]);
	SendClientMessagef(playerid, COLOR_WHITE, "players -> %d, %d", g_DMTeamPlayers[id][0], g_DMTeamPlayers[id][1]);
	return 1;
}

CMD:resetdmkills(playerid, params[], 4, 0)
{
	new
	    id = strval(params);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG______TOROLVE"), g_DMTeamKills[id][0], g_DMTeamKills[id][1]);
	g_DMTeamKills[id][0] = 0;
	g_DMTeamKills[id][0] = 1;
	return 1;
}

stock ShowDMList(playerid, lista, bool:bOnlyCompleted = true)
{
	new
	    count,
		meddig = (lista * 50);
	dline[0] = EOS;
	format(dline, sizeof(dline), "ID\tNév\tJátékosok\tCMD\n");
	foreach(DeathMatches, dmid)
	{
		// Listázás - kihagyás
		if(count < meddig)
		{
			count++;
			continue;
		}

		// Nem kész DM-ek kihagyása
		if(bOnlyCompleted)
		{
            if(!(g_DMFlags[dmid] & e_COMPLETED)) continue;
		}
		else
		{
            if(g_DMFlags[dmid] & e_COMPLETED) continue;
		}

		if(count++ >= (meddig + 50)) break;

		//format(i_str, sizeof(i_str), "%d. {" #XCOLOR_KICK "}%s {" #XCOLOR_WHITE "}- %s {" #XCOLOR_YELLOW "}[%d]\n", dmid, g_szDMName[dmid], (g_DMFlags[dmid] & e_IS_TDM) ? ("{" #XCOLOR_BASIC "}TDM") : ("{" #XCOLOR_PROPGREEN "}DM"), g_InDMPlayerCount{dmid + 10});
		format(i_str, sizeof(i_str), "%d.\t{" #XCOLOR_KICK "}%s {" #XCOLOR_WHITE "}- %s\t{" #XCOLOR_YELLOW "}%d\t{" #XCOLOR_BLUE2 "}%s\n", dmid, g_szDMName[dmid], (g_DMFlags[dmid] & e_IS_TDM) ? ("{" #XCOLOR_BASIC "}TDM") : ("{" #XCOLOR_PROPGREEN "}DM"), g_InDMPlayerCount{dmid + 10}, g_szDMCommand[dmid]);
		strcat(dline, i_str);
	}

	if(count)
	{
		format(i_str, 64, "Szereren lévõ DM-ek: {" #XCOLOR_GOLD "}%d", g_CustomDMCount);
		//ShowPlayerDialogEx(playerid, DIALOG_DM, DIALOG_STYLE_LIST, i_str, dline, "Kiválaszt", "Kilépés");
		ShowPlayerDialogEx(playerid, DIALOG_DM, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Kiválaszt", "Kilépés");
	}
	else
	{
        if(bOnlyCompleted)
        {
			strcpy(i_str, "A szerveren nincs egy {" #XCOLOR_RED "}DM {" #XCOLOR_DEFAULT "}sem!");
		}
		else
		{
            strcpy(i_str, "A szerveren nincs egy {" #XCOLOR_KICK "}aktiválatlan {" #XCOLOR_RED "}DM {" #XCOLOR_DEFAULT "}sem!");
		}
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Szopacs :(", i_str, "Kiválaszt", "Kilépés");
	}
}

CMD:dms(playerid, params[], 0, D:< TAXI>)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/dms <Lista | Alapból: 1, Minden oldalon 50db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

    ShowDMList(playerid, --iLimit);
	return 1;
}

CMD:adms(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/adms <Lista | Alapból: 1, Minden oldalon 50db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

    ShowDMList(playerid, --iLimit, false);
	return 1;
}

CMD:createdm(playerid, params[], 0, 0)
{
	new
		szName[128];
    CHECK_SZINT(playerid, SZINT_CREATEDM);
	if(!(g_PlayerFlags[playerid] & e_CREATEDM_RIGHT)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_DM_KESZITESI_JOGOD_EL"));
	if(sscanf(params, "ffs[128]", Health, Armour, szName)) return SendUsage(playerid, "/create%sdm <Kezdõ élet> <Kezdõ páncél> <DM Név>", (datez == -5555) ? ("t") : (""));
	
	if(!(3 <= strlen(szName) <= 32)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_NEV_HOSSZUSAG_3"));
	if(g_CustomDMCount - 1 >= MAX_DM) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_MAXIMUM_DM_SZAM_ELERVE"));
	if(g_pDMID[playerid] != -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_MAR_SZERKESZTESZ_EGY_DMET"));
	if(g_pClanCreateState{playerid} != 0xFF) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_MAR_SZERKESZTESZ_EGY_KLANT"));

	if(!(0.0 <= Health <= 100.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE"));
	if(!(0.0 <= Armour <= 100.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE_1"));

	// A létrehozott DM SQL-be írása, ha véletlen kifagy a játékos akkor is tudja folytatni a készítést
	new
	    iRegID = PlayerInfo[playerid][pRegID],
	    iInterior = GetPlayerInterior(playerid),
	    dmid = g_CustomDMCount,
	    bool:tdm = !!(datez == -5555),
	    unix;

	getdate(year, month, day);
	gettime(hour, minute, second);
	unix = CurrentTimestamp();

	mysql_format(1, query, sizeof(query), "INSERT INTO `custom_dm`(`id`, `type`, `activated`, `completed`, `creator_id`, `name`, `team_1`, `team_2`, `in_clearworld`, `interior`, `health`, `armour`, `time`) VALUES (0, %d, 0, 0, %d, '%e', '*', '*', %d, %d, %f, %f, %d)",
		tdm, iRegID, szName, 0, iInterior, Health, Armour, unix);
	mysql_function_query(1, query, true, "THREAD_CreateCustomDM", "ddd", playerid, dmid, tdm);

	// Itt már nem esek ugyanabba a hibába, mind a klánoknál - Reálisan MAX_DM számú DM a módba, nem a MAX_DM határozza meg a max id-t ;)
    g_DMCreator[dmid] = iRegID;
    strcpy(g_DMCreatorName[dmid], pName(playerid), sizeof(g_DMCreatorName[]));
    strcpy(g_szDMName[dmid], szName);
    g_szDMCommand[dmid][0] = '*';

	g_DMInterior[dmid] = iInterior;
	g_DMHealth[dmid] = Health;
	g_DMArmour[dmid] = Armour;

    g_DMCreateTime[dmid] = unix;
    g_DMMaxPlayers[dmid] = 60;
    g_DMGravity[dmid] = 0.008;

	//if(bInClearworld) g_DMFlags[dmid] |= e_IN_CLEARWORLD;
	if(tdm) g_DMFlags[dmid] |= e_IS_TDM;
	g_pDMID[playerid] = dmid;
	g_pDMCreation[playerid] = 0;
	SetPVarInt(playerid, "CreatDMZone", 1); // Zónák lerakása megy elõször

	// DM számláló megemelése
	g_CustomDMCount++;
	Iter_Add(DeathMatches, dmid);
	return 2;
}

stock ShowCreateDMSpawnsMSG(playerid)
{
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_GOLD "}Infó..", "DM zóna készítés befejezve!\n\nMenj oda, ahova le szeretnéd rakni a DM {" #XCOLOR_ORANGE "}spawn helyeit{" #XCOLOR_DEFAULT "}, és nyomj {" #XCOLOR_PROPGREEN "}N{" #XCOLOR_DEFAULT "}-et!\nHa megvagy, írd be, hogy {" #XCOLOR_BLUE "}/megvan{" #XCOLOR_DEFAULT "}. Ha pedig nem szeretnéd menteni, akkor: {" #XCOLOR_RED "}/megse", "Oké");
}

CMD:createtdm(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid, SZINT_CREATEDM);
	datez = -5555;
	if(cmd_createdm(playerid, params) == 2)
	{
		SetPVarInt(playerid, "TDMCreate", 1);
		ShowCreateTDMDialog(playerid);
	}
	// TÖRÖLHETÕ
	datez = 0;
	return 1;
}
/*
CMD:ddmspawn(playerid, params[], 0, 0)
{
	new
	    spawnid,
	    dmid = g_pDMID[playerid];
	if(dmid == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_SZERKESZTESZ_DMET"));

	if(sscanf(params, "d", spawnid)) return SendUsage(playerid, "/ddmspawn <spawnid>");
	if(!(0 <= spawnid <= 30)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_SPAWN_ID_0__30_KOZOTT"));
	if(g_DMSpawns[dmid][spawnid][0] == 0.0 && g_DMSpawns[dmid][spawnid][1] == 0.0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_SPAWN_NINCS_LERAKVA"));

	return 1;
}
*/
forward THREAD_CreateCustomDM(playerid, dmid, type);
public THREAD_CreateCustomDM(playerid, dmid, type)
{
	new
	    id = cache_insert_id();

	g_DM_SQL_ID[dmid] = id;
	g_DM_ID_SQL{g_DM_SQL_ID[dmid]} = dmid;
	format(dline, sizeof(dline), "DM készítés elkezdve! -> {" #XCOLOR_GREEN "}DMID: {" #XCOLOR_SAMP "}%d, {" #XCOLOR_BLUE2 "}SQLID: {" #XCOLOR_RED "}%d\n\n{" #XCOLOR_DEFAULT "}Következõ lépés a DM zónájának lerakása, amin belül a DM lesz.\nFordulj ÉSZAKRA!!(N betû a minitérképen) és rakd le elõször a zóna BAL ALSÓ SARKÁT!\nA méret nem lényeges, minden DM külön világban van.\n\nLerakáshoz használd az {" #XCOLOR_YELLOW "}N {" #XCOLOR_DEFAULT "}gombot!", dmid, id);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_DM_KESZITES_ELKEZDVE__DMID"), dmid, id);

	// Ha DM akkor itt dobjuk ki neki a dialógot, ha nem akkor majd késõbb mivel a TDM itt másik dialógot mutat fel
	if(!type)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_GOLD "}Infó..", dline, "Oké");
	}

	// Elmentjük a dialóg strinjét mert ha elbassza a zóna lerakást akkor ugyanezt mutatjuk fel neki újra
    SetPVarString(playerid, "DMStr", dline);
	return 1;
}

stock ShowDMWeaponMenu(playerid)
{
	new
	    dmid = (GetPVarType(playerid, "EditDMWeap")) ? (GetPVarInt(playerid, "EditDMWeap")) : (g_pDMID[playerid]),
	    weaponid,
	    slot,
	    bool:bMegvan;
	dline[0] = EOS;
	for(new i; i != sizeof(g_szCustomDMWeapons); i++)
	{
		weaponid = GetWeaponIDFromName(g_szCustomDMWeapons[i][1]),
	    slot = GetWeaponSlot(weaponid);
        bMegvan = false;

		printf("%d, %d - %s", weaponid, slot, g_szCustomDMWeapons[i]);
		if(weaponid != -1 && slot != -1)
		{
		    if(g_DMWeapons[dmid][slot][0] == weaponid)
			{
				format(i_str, 64, "{FF0000}%s - %d\n", g_szCustomDMWeapons[i], g_DMWeapons[dmid][slot][1]);
			    strcat(dline, i_str);

			    bMegvan = true;
			}
		    else
			{
				strcat(dline, "{33FF33}");
			}
		}

		if(!bMegvan)
		{
			strcat(dline, g_szCustomDMWeapons[i], sizeof(dline));
			strcat(dline, "\n");
		}
	}

	// Ha nem szerkeszti, akkor hozzáadjuk a végéhez a 'Kész' részt is - szerkesztésnél nem mert csak bugokat csinálna
	if(!GetPVarType(playerid, "EditDMWeap")) strcat(dline, "Kész");
	ShowPlayerDialogEx(playerid, DIALOG_CREATEDM_WEAPONS, DIALOG_STYLE_LIST, "Válassz fegyvert", dline, "Oké", "Kilépés");
}

CMD:megvan(playerid, params[], 0, 0)
{
	if(g_pDMCreation[playerid] == -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEM_HASZNALHATOD_EZT_A"));

	new
	    dmid = g_pDMID[playerid];
	// Ha nem állított be semilyen spawn helyet, akkor hibaüzenetet írunk neki és nem engeggyük tovább
	if(g_DMFlags[dmid] & e_IS_TDM)
	{
		new
		    id = -1;
		if(g_DMUpperSpawnID{dmid} < 1) id = 0;
		else if(g_DMUpperSpawnID_2{dmid} < 1) id = 1;

		if(id != -1)
		{
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_CSAPATNAK_NEM_RAKTAL"), g_DMTeamColor[dmid][id] >>> 8, g_szDMTeams[dmid][id]);
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_IRD_BE_HOGY_SWITCHTEAM_ES_RAKJ"));
			return 1;
		}
	}
	else
	{
        if(g_DMUpperSpawnID_2{dmid} < 1)
        {
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_RAKTAL_LE_A_DMEDHEZ"));
			return 1;
		}
	}

	ShowDMWeaponMenu(playerid);
	return 1;
}

stock DeleteDMVars(playerid)
{
	for(new i; i != g_pDMCreation[playerid]; i++)
	{
        format(name, sizeof(name), "DMSO_%d", i);
        DestroyPlayerObject(playerid, GetPVarInt(playerid, name));
        DeletePVar(playerid, name);

        format(name, sizeof(name), "DMST_%d", i);
		DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, name));
        DeletePVar(playerid, name);
	}
	g_pDMCreation[playerid] = -1;
	g_pDMID[playerid] = -1;
	DeletePVar(playerid, "CreatDMZone");
	DeletePVar(playerid, "CreateTDM");
	DeletePVar(playerid, "TDMCreate");
	DeletePVar(playerid, "DMStr");
}

CMD:megse(playerid, params[], 0, 0)
{
	new
	    dmid = g_pDMID[playerid];
	if(dmid == -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEM_HASZNALHATOD_EZT_A"));

	// DM változók törlése játékosnak
    DeleteDMVars(playerid);

	// Törlésnek elmegy ez a megoldás is..
	g_DMFlags[dmid] &= ~e_COMPLETED;
	Iter_Remove(DeathMatches, dmid);

	// Textdraw törlése
	DeleteDMTextdraw(dmid);

	// Zóna törlése
	DeleteDMZone(dmid);

	SendClientMessage(playerid, -1, LANG(playerid, "MSG_DM_KESZITES_MEGSZAKITVA_DMED"));

	mysql_format(1, query, sizeof(query), "DELETE FROM `custom_dm` WHERE `id` = %d", DM_SQL(dmid));
	mysql_function_query(1, query, true, "", "");
	return 1;
}

CMD:setdmspawn(playerid, params[], 4, 0)
{
	new
	    dmid,
	    spawnid;
	if(sscanf(params, "dd", dmid, spawnid)) return SendUsage(playerid, "/gotodm <dmid> <spawnid>");
	if(!(0 <= dmid < MAX_DM)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_DM_ID_0___MAX_DM"));
	if(!(0 <= dmid < 30)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_SPAWN_ID_0__30_KOZOTT_1"));
	if(g_DMSpawns[dmid][spawnid][0] == 0.0) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_AZ_ALTALAD_MEGADOTT_SPAWNHELY"));

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);

	g_DMSpawns[dmid][spawnid][0] = X;
	g_DMSpawns[dmid][spawnid][1] = Y;
	g_DMSpawns[dmid][spawnid][2] = Z;
	g_DMSpawns[dmid][spawnid][3] = Angle;

	mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `spawn_%d` = '%f,%f,%f,%f' WHERE `id` = %d", spawnid, X, Y, Z, Angle, DM_SQL(dmid));
	mysql_function_query(1, query, true, "", "");
	return 1;
}

CMD:gotodm(playerid, params[], 3, 0)
{
	new
	    dmid,
	    spawnid;
	if(sscanf(params, "dd", dmid, spawnid)) return SendUsage(playerid, "/gotodm <dmid> <spawnid>");
	if(!(0 <= dmid < MAX_DM)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_DM_ID_0___MAX_DM"));
	if(!(0 <= dmid < 30)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_SPAWN_ID_0__30_KOZOTT_1"));
	if(g_DMSpawns[dmid][spawnid][0] == 0.0) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_AZ_ALTALAD_MEGADOTT_SPAWNHELY"));

    PlayerTele(playerid, g_DMSpawns[dmid][spawnid][0], g_DMSpawns[dmid][spawnid][1], g_DMSpawns[dmid][spawnid][2], g_DMInterior[dmid], g_DMSpawns[dmid][spawnid][3]);

    AdminCommandLog("GOTODM", playerid, -1);
	return 1;
}

CMD:switchteam(playerid, params[], 0, 0)
{
	new
		dmid = g_pDMID[playerid],
		id;
	if(dmid == -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEM_HASZNALHATOD_EZT_A"));
	if(!(g_DMFlags[dmid] & e_IS_TDM)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEM_TDMET_CSINALSZ_MILYEN"));

	if(GetPVarInt(playerid, "CreateTDM") == 1)
	{
		if(g_DMUpperSpawnID{dmid} == 15) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__NEVU_CSAPATHOZ_NEM"), g_DMTeamColor[dmid][0] >>> 8, g_szDMTeams[dmid][0]);

		id = 1;
		SetPVarInt(playerid, "CreateTDM", 2);
	}
	else
	{
		if(g_DMUpperSpawnID_2{dmid} == 30) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__NEVU_CSAPATHOZ_NEM"), g_DMTeamColor[dmid][0] >>> 8, g_szDMTeams[dmid][0]);

		id = 0;
		SetPVarInt(playerid, "CreateTDM", 1);
	}

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_ATMENTEL_AZ__NEVU_CSAPATBA"), g_DMTeamColor[dmid][id] >>> 8, g_szDMTeams[dmid][id]);
	return 1;
}

CMD:createdmright(playerid, params[], 3, 0)
{
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/createdmright <Játékos ID/Név>");
    g_PlayerFlags[player1] ^= e_CREATEDM_RIGHT;
	if(g_PlayerFlags[player1] & e_CREATEDM_RIGHT)
	{
	    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__D__NEVU_JATEKOSTOL_A_DM_KE"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
    	name = "Visszaadta";
   	}
  	else
	{
     	name = "Elvette"; //el
	    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__D__NEVU_JATEKOSTOL_A_DM_KE_2"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
    }
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN___A_DM_KESZITESI_JO"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, name);
    SaveFlags(player1);
    AdminCommandLog("CREATEDMRIGHT", playerid, player1, name);
	return 1;
}

CMD:createclanright(playerid, params[], 3, 0)
{
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/createclanright <Játékos ID/Név>");
    g_PlayerFlags[player1] ^= e_CREATECLAN_RIGHT;
	if(g_PlayerFlags[player1] & e_CREATECLAN_RIGHT)
	{
	    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__D__NEVU_JATEKOSTOL_A_KLAN"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
    	name = "Visszaadta";
   	}
  	else
	{
     	name = "Elvette"; //el
	    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__D__NEVU_JATEKOSTOL_A_KLAN_2"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
    }
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN___A_KLAN_KESZITESI_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, name);
    SaveFlags(player1);
    AdminCommandLog("CREATECLANRIGHT", playerid, player1, name);
	return 1;
}

CMD:clanzones(playerid, params[], 0, 0)
{
    g_PlayerFlags2[playerid] ^= e_HIDE_CLANZONES;
	if(g_PlayerFlags2[playerid] & e_HIDE_CLANZONES)
	{
	    name = "{" #XCOLOR_RED "}letiltva";
	    HideClanZones(playerid);
   	}
  	else
	{
	    name = "{" #XCOLOR_WHITE "}engedélyezve";
 		ShowClanZones(playerid);
    }
    SendClientMessagef(playerid, COLOR_GREEN, "*** Klánzónák %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_HIDE_CLANZONES, g_PlayerFlags2[playerid] & e_HIDE_CLANZONES);
    SaveFlags(playerid);
	return 1;
}

CMD:allowrecord(playerid, params[], 0, 0)
{
    if(PlayerInfo[playerid][pRegID] != 3) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/allowrecord <Játékos ID/Név>");
    g_PlayerFlags2[player1] ^= e_ALLOW_RACE_RECORD;
	if(g_PlayerFlags2[player1] & e_ALLOW_RACE_RECORD)
	{
	    name = "{" #XCOLOR_RED "}letiltva";
   	}
  	else
	{
	    name = "{" #XCOLOR_WHITE "}engedélyezve";
    }
    SendClientMessagef(playerid, COLOR_GREEN, "*** Rekorddöntés %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_ALLOW_RACE_RECORD, g_PlayerFlags2[player1] & e_ALLOW_RACE_RECORD);
   	SaveFlags(player1);
   	AdminCommandLog("ALLOWRECORD", playerid, player1, name);
	return 1;
}

CMD:clanmembers(playerid, params[], 0, 0)
{
	new
	    clanid = g_pClan{playerid},
	    count;
	if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));

	dline[0] = EOS;
	foreach(Player, i)
	{
		if(g_pClan{i} == clanid)
		{
			if(g_pClanRank{i} > 9)
			{
				printf("clanmembers rank: player: %s(%d) - clanid: %d, %d", pName(i), i, g_pClan{i}, g_pClanRank{i});
				continue;
			}

			format(i_str, sizeof(i_str), "%d. {%06x}%s(%d) {" #XCOLOR_DEFAULT "}- %s", ++count, GetPlayerColor(i) >>> 8, pName(i), i, gClanRankName[clanid][g_pClanRank{i}]);
			strcat(dline, i_str);
			strcat(dline, "\n");
		}
	}

	format(i_str, 64, "{" #XCOLOR_YELLOW "}%s - {" #XCOLOR_GREEN "}%d", gClanName[clanid], count);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");
	return 1;
}
CMD:cm(playerid, params[], 0, 0)
{
	return cmd_clanmembers(playerid, params);
}

CMD:clanhelp(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_CLANHELP"));
	return 1;
}

CMD:clancp(playerid, params[], 0, 0)
{
	new
	    clanid = g_pClan{playerid},
	    len;
	if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
	if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD"));

	// Ha a klánleírás hosszabb, mint 20 karakter, akkor csak 20 karaktert jelenítünk meg
	strunpack(i_str, gClanLeiras[clanid], sizeof(gClanLeiras[]));
	if((len = strlen(i_str)) > 40)
	{
		strdel(i_str, 40, len);
		strcat(i_str, "...");
	}

	date(gClanCreateTime[clanid], day, month, year, hour, minute, second);
	format(dline, sizeof(dline), "Klánnév: %s", gClanName[clanid]);
	format(dline, sizeof(dline), "%s\nKlánleírás %s", dline, i_str);
	format(dline, sizeof(dline), "%s\n{%06x}Klánszín: 0x%x", dline, gClanColor[clanid] >>> 8, gClanColor[clanid]);
	format(dline, sizeof(dline), "%s\nRangok", dline);
	format(dline, sizeof(dline), "%s\nJátékosok", dline);
	format(dline, sizeof(dline), "%s\nKlánlog", dline);
	format(dline, sizeof(dline), "%s\nLétrehozás dátuma: %02d.%02d.%02d %02d:%02d:%02d", dline, year, month, day, hour, minute, second);

    format(i_str, sizeof(i_str), "{%06x}%s - Klán CP", gClanColor[clanid] >>> 8, gClanName[clanid]);
	ShowPlayerDialogEx(playerid, DIALOG_CLAN_CP, DIALOG_STYLE_LIST, i_str, dline, "Megnyit", "Bezárás");
	return 1;
}

CMD:clans(playerid, params[], 0, 0)
{
	new
	    count,
	    members;
	dline[0] = EOS;
	foreach(clans, clanid)
	{
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) continue;

		members = 0;
		count++;

		for(new i; i != MAX_CLAN_PLAYERS; i++)
		{
			if(gClanPlayers[clanid][0][i] != -1)
			{
				members++;
			}
		}

		format(i_str, sizeof(i_str), "%d. {" #XCOLOR_RED "}%s - {" #XCOLOR_BLUE "}%d\n", clanid, gClanName[clanid], members);
		strcat(dline, i_str);
	}

	if(count)
	{
		format(i_str, 64, "Szereren lévõ klánok: {" #XCOLOR_GOLD "}%d", count);
		ShowPlayerDialogEx(playerid, DIALOG_CLAN_ACCEPTCLAN, DIALOG_STYLE_LIST, i_str, dline, "Megnyit", "Bezárás");
	}
	else
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Szopacs :(", "A szerveren nincs egy klán sem!", "Kilépés");
	}
	return 1;
}

CMD:aclans(playerid, params[], 1, 0)
{
	new
	    count;
	dline[0] = EOS;
	foreach(clans, clanid)
	{
		if(g_ClanFlags{clanid} & e_CLAN_ACTIVE) continue;

		count++;
		format(i_str, sizeof(i_str), "%d. {" #XCOLOR_RED "}%s\n", clanid, gClanName[clanid]);
		strcat(dline, i_str);
	}

	if(count)
	{
		format(i_str, 64, "Megerõsítésre váró klánok: {" #XCOLOR_GOLD "}%d", count);
		ShowPlayerDialogEx(playerid, DIALOG_CLAN_ACCEPTCLAN, DIALOG_STYLE_LIST, i_str, dline, "Megnyit", "Bezárás");
	}
	else
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "", "Jelenleg nincs egy megerõsítetlen klán sem!", "Oké");
	}
	return 1;
}

stock UpdateClanZone(clanid)
{
	if(g_ClanFlags{clanid} & e_CLAN_ACTIVE)
	{
		DestroyDynamicArea(gClanZone[clanid]);
        GangZoneHideForAll(gClanGangZone[clanid]);
        GangZoneDestroy(gClanGangZone[clanid]);

		gClanZone[clanid] = CreateDynamicCube(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][2], gClanArena[clanid][3], gClanArena[clanid][4], gClanArena[clanid][5]);
        gClanGangZone[clanid] = GangZoneCreate(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][3], gClanArena[clanid][4]);
        GangZoneShowForAll(gClanGangZone[clanid], gClanColor[clanid]);
	}
}

CMD:clanname(playerid, params[], 4, 0)
{
	new
	    clanid,
	    clanname[24];
	if(sscanf(params, "ds[24]", clanid, clanname)) return SendUsage(playerid, "/clanname <clanid> <Név");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);
	if(!(1 <= strlen(clanname) <= 24)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_HOSSZUSAG_1__24"));

	SendClientMessagef(playerid, COLOR_ORANGE, "-> Klánnév megváltoztatva: ID: %d {" #XCOLOR_SAMP "}Régi: %s | Új: %s",clanid, gClanName[clanid], clanname);
	format(i_str,128,"ID: %d | Old: %s | New: %s",CLAN_SQL(clanid),gClanName[clanid],clanname);

	gClanName[clanid][0] = EOS;
	strcat(gClanName[clanid], clanname, sizeof(gClanName[]));

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `clanname` = '%e' WHERE `id` = %d", clanname, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");
	AdminCommandLog("CLANNAME", playerid, -1, i_str);
	return 1;
}

CMD:clanmin(playerid, params[], 4, 0)
{
	new
	    clanid;
	if(sscanf(params, "dF(0.0)F(0.0)F(0.0)", clanid, X, Y, Z)) return SendUsage(playerid, "/clanmin <clanid> <X = 0> <Y = 0> <Z = 0>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

	if(X == 0.0 && Y == 0.0 && Z == 0.0)
	{
		GetPlayerPos(playerid, X, Y, Z);
	}

	gClanArena[clanid][0] = X;
	gClanArena[clanid][1] = Y;
	gClanArena[clanid][2] = Z;

    UpdateClanZone(clanid);
	SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG___NEVU_KLAN_ZONAJANAK_A_MINXYZ"), gClanName[clanid], X, Y, Z);

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `minx` = %f, `miny` = %f, `minz` = %f WHERE `id` = %d", X, Y, Z, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

    AdminCommandLog("CLANMIN", playerid, -1, "%d", clanid);
	return 1;
}

CMD:clanmax(playerid, params[], 4, 0)
{
	new
	    clanid;
	if(sscanf(params, "dF(0.0)F(0.0)F(0.0)", clanid, X, Y, Z)) return SendUsage(playerid, "/clanmax <clanid> <X = 0> <Y = 0> <Z = 0>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

	if(X == 0.0 && Y == 0.0 && Z == 0.0)
	{
		GetPlayerPos(playerid, X, Y, Z);
	}

	gClanArena[clanid][3] = X;
	gClanArena[clanid][4] = Y;
	gClanArena[clanid][5] = Z;

    UpdateClanZone(clanid);
	SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG___NEVU_KLAN_ZONAJANAK_A_MAXXYZ"), gClanName[clanid], X, Y, Z);

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `maxx` = %f, `maxy` = %f, `maxz` = %f WHERE `id` = %d", X, Y, Z, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

	valstr(name, clanid);
    AdminCommandLog("CLANMAX", playerid, -1, name);
	return 1;
}

CMD:clancolor(playerid, params[], 4, 0)
{
	new
	    clanid,
	    color;
	if(sscanf(params, "dn", clanid, color)) return SendUsage(playerid, "/clancolor <clanid> <color>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

    gClanColor[clanid] = color;
	SendClientMessagef(playerid, color, LANG(playerid, "MSG___NEVU_KLANNAK_MEGVALTOZTATTAD"), gClanName[clanid], color >>> 8, color);

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `color` = %d WHERE `id` = %d", color, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

    GangZoneHideForAll(gClanGangZone[clanid]);
	GangZoneShowForAll(gClanGangZone[clanid], color);

	valstr(name, clanid);
    AdminCommandLog("CLANCOLOR", playerid, -1, name);
	return 1;
}

CMD:clanstate(playerid, params[], 4, 0)
{
	new
	    clanid,
	    bool:bState;
	if(sscanf(params, "dd", clanid, bState)) return SendUsage(playerid, "/clanstate <clanid> <0/1>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

    g_ClanFlags{clanid} ^= e_CLAN_ACTIVE;
	if(g_ClanFlags{clanid} & e_CLAN_ACTIVE)
	{
		// Ha van bank
		if(gClanBankPos[clanid][0])
		{
			gClanBankCP[clanid] = CreateDynamicCP(gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2], 5.0);
            gClanBankText[clanid] = CreateDynamic3DTextLabel("{" #XCOLOR_BLUE3 "}Klánbank!\n{" #XCOLOR_PROPGREEN "}Bank használata: 'N'", -1, gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2]);
		}
		gClanZone[clanid] = CreateDynamicCube(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][2], gClanArena[clanid][3], gClanArena[clanid][4], gClanArena[clanid][5]);
        gClanGangZone[clanid] = GangZoneCreate(gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][3], gClanArena[clanid][4]);
        GangZoneShowForAll(gClanGangZone[clanid], gClanColor[clanid]);
	}
	else
	{
        if(gClanBankPos[clanid][0])
		{
			DestroyDynamicCP(gClanBankCP[clanid]);
			gClanBankCP[clanid] = -1;
			DestroyDynamic3DTextLabel(gClanBankText[clanid]);
		}
		DestroyDynamicArea(gClanZone[clanid]);
        GangZoneHideForAll(gClanGangZone[clanid]);
        GangZoneDestroy(gClanGangZone[clanid]);
	}

	SendClientMessagef(playerid, COLOR_GOLD, "-> {" #XCOLOR_BLUE2 "}%s {" #XCOLOR_GOLD "}nevû klán állását megváltoztattad; %s", gClanName[clanid], (g_ClanFlags{clanid} & e_CLAN_ACTIVE) ? ("{00FF00}Aktivált") : ("{FF0000}Deaktivált"));

	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `activated` = %d WHERE `id` = %d", bState, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

	valstr(name, clanid);
    AdminCommandLog("CLANSTATE", playerid, -1, name);
	return 1;
}

CMD:gotoclan(playerid, params[], 3, 0)
{
	new
	    clanid,
	    type;
	if(sscanf(params, "dd", clanid, type)) return SendUsage(playerid, "/gotoclan <clanid> <type [0 = spawn, 1 = minxyz, 2 = maxxyz, 3 = bank>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

	switch(type)
	{
		case 0: NormalTele(playerid, gClanSpawnPos[clanid][0], gClanSpawnPos[clanid][1], gClanSpawnPos[clanid][2], gClanSpawnInterior[clanid], gClanSpawnPos[clanid][3], gClanSpawnWorld[clanid]);
		case 1: NormalTele(playerid, gClanArena[clanid][0], gClanArena[clanid][1], gClanArena[clanid][2], gClanSpawnInterior[clanid], gClanSpawnPos[clanid][3], gClanSpawnWorld[clanid]);
		case 2: NormalTele(playerid, gClanArena[clanid][3], gClanArena[clanid][4], gClanArena[clanid][5], gClanSpawnInterior[clanid], gClanSpawnPos[clanid][3], gClanSpawnWorld[clanid]);
		case 3:
		{
			if(!gClanBankPos[clanid][0]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ENNEL_A_KLANNAL___NINC"), gClanName[clanid], clanid);

			NormalTele(playerid, gClanBankPos[clanid][0], gClanBankPos[clanid][1], gClanBankPos[clanid][2], gClanSpawnInterior[clanid], gClanSpawnPos[clanid][3], gClanSpawnWorld[clanid]);
		}
		default: return SendUsage(playerid, "/gotoclan <clanid> <type [0 = spawn, 1 = minxyz, 2 = maxxyz, 3 = bank>");
	}

	valstr(name, clanid);
    AdminCommandLog("GOTOCLAN", playerid, -1, name);
	return 1;
}

CMD:clan(playerid, params[], 0, 0)
{
	// Buzi ZCMD -.-
	new
	    szAction[128];
	if(sscanf(params, "s[128]", szAction)) return SendUsage(playerid, "/clan <create/invite/kick/leave/setrang>");

	if(!strcmp(szAction, "create", true, 6))
	{
        if(!(g_PlayerFlags[playerid] & e_CREATECLAN_RIGHT)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_KLAN_KESZITESI_JOGOD_EL"));

		new
		    szClanName[24],
		    clanid = g_pClan{playerid},
		    count;
		if(sscanf(params, "{s[24]}s[24]", szClanName)) return SendUsage(playerid, "/clan create <klánnév>");
		if(!IsValidNickName(szClanName)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VALID_NAME_CHARS"));
		if(Iter_Count(clans) == MAX_CLANS - 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TOBB_KLANT_NEM_LEHET_LETREHOZN"));
		if(g_pDMID[playerid] != -1) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_MAR_SZERKESZTESZ_EGY_DMET_1"));

		if(clanid != 0xFF) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_AZ__NEVU_KLANBAN"), gClanName[clanid]);
		if(GetPVarInt(playerid, "TotalHours") < 2 && g_pDebug{playerid} != 9) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEM_HOZHATSZ_LETRE_KLANT"));

		// Megnézzük, hogy a játékos RegID-jéhez mennyi klán tartozik
		foreach(clans, i)
		{
			if(gClanCreator[i] == PlayerInfo[playerid][pRegID]) count++;
		}
		// Ha már van létrehozva egy klánja, nem hozhat létre mégegyet
		if(count) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_MAR_VAN_EGY_KLANOD_NEM"));

		SendClientMessagef(playerid, -1, LANG(playerid, "MSG_KLAN_KESZITES_ELKEZDVE_KLANNEV"), szClanName);
		SetPVarString(playerid, "ClanName", szClanName);

        g_pClanCreateState{playerid} = 1;
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Klánkészítés - {33FF33}[2/6]", "1. lépésen már túlvagy!\nMenj oda, ahol szeretnéd, hogy a klán kezdõhelye legyen.\nPontosan állj be, forgás is számít\nAhogy beálsz, úgy fog mindenki spawnolni a klánban!\nInterior & Virtuális Világ is figyelésre kerül.\nÁllj oda, és nyomd le a görgõt.", "Tovább");
	}
	else if(!strcmp(szAction, "invite", true, 6))
	{
		new
		    clanid = g_pClan{playerid};
		if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_1"));


        if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_INVITE_MEMBERS) && !IsOwner(playerid))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MAS_EMBERT_1"));
		    return 1;
		}

		if(sscanf(params, "{s[24]}u", player1)) return SendUsage(playerid, "/clan invite <Játékos ID/Név>");
        if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

		if(g_pClan{player1} != 0xFF) return SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA__MAR_AZ__KLANBAN_VAN"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanName[g_pClan{player1}]);

		if(GetPVarType(player1, "ClanJoinPlayer"))
		{
			datez = GetPVarInt(player1, "ClanJoinPlayer");
			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_MAR_MEGHI"), GetPlayerColor(player1) >>> 8, pName(player1), player1, GetPlayerColor(datez) >>> 8, pName(datez), datez, gClanName[GetPVarInt(player1, "ClanJoin")]);
			return 1;
		}

		new
		    freeslot = -1;
		for(new i; i != MAX_CLAN_PLAYERS; i++)
		{
			//printf("invite: %d, %d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
			if(gClanPlayers[clanid][0][i] == -1)
			{
	   			printf("ÜRES TE FASZOM!!!!!! %d", i);
	   			freeslot = i;
				break;
			}
		}

		if(freeslot == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TELE_VAN_A_KLAN_MEGVAN"));

		SetPVarInt(player1, "ClanJoin", clanid);
		SetPVarInt(player1, "ClanJoinPlayer", playerid);

		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__MEGHIVTAD__NEVU_JATEKSOT_A"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanName[clanid]);
		SendClientMessagef(player1, COLOR_ORANGE, LANG(player1, "MSG___MEGHIVOTT_TEGED_AZ__KL"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanName[clanid]);

		strunpack(i_str, gClanLeiras[clanid], sizeof(gClanLeiras[]));
		format(tmp, sizeof(tmp), "{" #XCOLOR_YELLOW "}Klánmeghívó:\n{%06x}%s(%d) {" #XCOLOR_DEFAULT "}mehívott téged a(z) {" #XCOLOR_GREEN2 "}%s {" #XCOLOR_DEFAULT "}nevû klánba!\n\n{" #XCOLOR_YELLOW "}Infó a klánról:\n{" #XCOLOR_BLUE3 "}%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanName[clanid], i_str);

		format(i_str, 64, "Klánmeghívás - %s", i_str);
		ShowPlayerDialogEx(player1, DIALOG_CLAN_ACCEPT, DIALOG_STYLE_MSGBOX, i_str, tmp, "Elfogad", "Elutasít");
		SetPVarInt(playerid,"clan_action_id",player1);
	}
	else if(!strcmp(szAction, "kick", true, 4))
	{
		new
		    clanid = g_pClan{playerid};
		if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_2"));
		

		if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_KICK_MEMBERS) && !IsOwner(playerid))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MAS_EMBERT"));
		    return 1;
		}

		if(sscanf(params, "{s[24]}us[128]", player1, i_str)) return SendUsage(playerid, "/clan kick <Játékos ID/Név> <Indok>");
		if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

        if(IsFOOwner(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot

		if(g_pClan{player1} == 0xFF) return SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA__NEVU_JATEKOS_NINCS_SEMI"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

		if(g_pClan{player1} != clanid)
		{
			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA__NEVU_JATEKOS_AZ__NE"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanName[g_pClan{player1}]);
			return 1;
		}

        if(gClanCreator[clanid] == PlayerInfo[player1][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TE_VAGY_A_KLAN_TULAJA"));

		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__KIRUGTAD__NEVU_JATEKSOT_AZ"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanName[clanid]);
		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__INDOK_"), i_str);

		SendClientMessagef(player1, COLOR_ORANGE, LANG(player1, "MSG___KIRUGOTT_TEGED_AZ__KLA"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanName[clanid]);
        SaveClanLog(clanid, playerid, player1, "KICK", i_str);

		format(tmp, sizeof(tmp), "{" #XCOLOR_RED "}Sajnáljuk;\n{%06x}%s(%d) {" #XCOLOR_DEFAULT "}kirúgott téged a(z) {" #XCOLOR_BLUE3 "}%s {" #XCOLOR_DEFAULT "}nevû klánból!\n\n{" #XCOLOR_PINK "}Indok:\n{" #XCOLOR_PROPGREEN "}%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanName[clanid], i_str);
		format(i_str, 64, "Ki lettél rúgva a %s klánból", gClanName[clanid]);

		ShowPlayerDialogEx(player1, 5000, DIALOG_STYLE_MSGBOX, i_str, tmp, "Bezár");

		g_pClan{player1} = 0xFF;
		g_pClanRank{player1} = 0;

		for(new i; i != MAX_CLAN_PLAYERS; i++)
		{
			// Ha a klánban lévõ játékos RegID-je a kidobott játékosé, akkor töröljük a klánból
			if(gClanPlayers[clanid][0][i] == PlayerInfo[player1][pRegID])
			{
				gClanPlayers[clanid][0][i] = -1;
				gClanPlayers[clanid][1][i] = 0;
			}

			if(!i)
			{
				format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
			}
			else
			{
				format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
			}
		}
		mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
		mysql_function_query(1, query, false, "", "");
	}
	else if(!strcmp(szAction, "leave", true, 5))
	{
		new
		    clanid = g_pClan{playerid};
		if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_3"));

        if(gClanCreator[clanid] == PlayerInfo[playerid][pRegID])
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TE_VAGY_A_KLAN_TULAJA_1"));
			SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_INFO_HA_TOROLNI_SZERETNED_A"));
			return 1;
		}

		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__KILEPTEL_AZ__NEVU_KLANBOL"), gClanName[clanid]);
        SaveClanLog(clanid, playerid, -1, "LEAVE", "N/A");

		for(new i; i != MAX_CLAN_PLAYERS; i++)
		{
			// Ha a klánban lévõ játékos RegID-je a kidobott játékosé, akkor töröljük a klánból
			if(gClanPlayers[clanid][0][i] == PlayerInfo[playerid][pRegID])
			{
				gClanPlayers[clanid][0][i] = -1;
				gClanPlayers[clanid][1][i] = 0;
			}

			if(!i)
			{
				format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
			}
			else
			{
				format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
			}
		}

		g_pClan{playerid} = 0xFF;
		g_pClanRank{playerid} = 0;

		mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
		mysql_function_query(1, query, false, "", "");
	}
	else if(!strcmp(szAction, "setrang", true, 7))
	{
		new
		    clanid = g_pClan{playerid},
		    rank;
		if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_4"));

		if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_SET_RANK) && !IsOwner(playerid))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MAS_EMBERT_2"));
		    return 1;
		}

		if(sscanf(params, "{s[24]}ud", player1, rank)) return SendUsage(playerid, "/clan setrang <Játékos ID/Név> <Rang ID>");
		if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

        if(IsFOOwner(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot

		if(g_pClan{player1} == 0xFF) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_NINCS_SEMILYEN"));
		if(!(1 <= rank <= 10)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_RANG_0_ES_10_KOZOTT"));
		if(g_pClan{player1} != clanid && g_pClan{player1} != 0xFF)
		{
			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_HIBA__NEVU_JATEKOS_AZ__NE_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanName[g_pClan{player1}]);
			return 1;
		}

        SetClanRank(player1, rank - 1);

		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__ALLITOTTAD__NEVU_JATEKOS_RA"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanRankName[clanid][rank - 1]);
		SendClientMessagef(player1, COLOR_ORANGE, LANG(player1, "MSG___ALLITOTTA_A_RANGOD_UJ_RAN"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanRankName[clanid][rank - 1]);
		SaveClanLog(clanid, playerid, player1, "CLAN_SETRANG", gClanRankName[clanid][rank - 1]);
	}
	return 1;
}

stock SetClanRank(playerid, rank)
{
	new
	    clanid = g_pClan{playerid};
    g_pClanRank{playerid} = rank;

	for(new i; i != MAX_CLAN_PLAYERS; i++)
	{
		// Ha a klánban lévõ játékos RegID egyezik a játékoséval, akkor a rangját átállítjuk
		if(gClanPlayers[clanid][0][i] == PlayerInfo[playerid][pRegID]) gClanPlayers[clanid][1][i] = rank;

		if(!i)
		{
			format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
		else
		{
			format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
	}
	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");
	return 1;
}

stock ShowClanBankTD(playerid)
{
	for(new i; i != 9; i++)
	{
		TextDrawShowForPlayer(playerid, TD_CLAN_Log + Text:i);
	}
    g_pSelectTDFlags[playerid] |= e_SELECT_CLAN;
}

stock HideClanBankTD(playerid)
{
	for(new i; i != 9; i++)
	{
		TextDrawHideForPlayer(playerid, TD_CLAN_Log + Text:i);
	}
}

CMD:clanhome(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
	    clanid = g_pClan{playerid};
	if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
	if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_5"));

	ShowWelcome(playerid, LANG(playerid, "MSG_KLANDOHOZ_TELEPORTALTAL"));
	PlayerTele(playerid, gClanSpawnPos[clanid][0], gClanSpawnPos[clanid][1], gClanSpawnPos[clanid][2], gClanSpawnInterior[clanid], gClanSpawnPos[clanid][3], gClanSpawnWorld[clanid]);
	return 1;
}

CMD:clanspawn(playerid, params[], 0, 0)
{
	new
	    clanid = g_pClan{playerid},
	    szAction[128];
	if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
	if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_5"));

	if(sscanf(params, "s[128]", szAction)) return SendUsage(playerid, "/clanspawn <move>");

	if(!strcmp(szAction, "move", true, 4))
	{
		if(!IsPlayerInDynamicArea(playerid, gClanZone[clanid])) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANSPAWNOT_NEM_RAKHATOD"));

		if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_CAN_CHANGE_SPAWN_POS) && !IsOwner(playerid))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGVALTOZTATNI_3"));
		    return 1;
		}

		new
		    iInt = GetPlayerInterior(playerid),
		    iWorld = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

        gClanSpawnPos[clanid][0] = X;
        gClanSpawnPos[clanid][1] = Y;
        gClanSpawnPos[clanid][2] = Z;
        gClanSpawnPos[clanid][3] = Angle;
        gClanSpawnInterior[clanid] = iInt;
        gClanSpawnWorld[clanid] = iWorld;

		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__KLAN_SPAWN_HELYE_MEGVALTOZTATVA"), X, Y, Z, Angle, iInt, iWorld);
		GivePlayerMoneyEx(playerid, -20000, "ClanSpawnMove");

		mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `spawnx` = %f, `spawny` = %f, `spawnz` = %f, `spawna` = %f, `spawnint` = %d, `spawnworld` = %d WHERE `id` = %d", X, Y, Z, Angle, iInt, iWorld, CLAN_SQL(clanid));
		mysql_function_query(1, query, false, "", "");
		format(i_str, 128, "X: %.4f, Y: %.4f, Z: %.4f, Ang: %.4f Int: %d World: %d", X, Y, Z, Angle, iInt, iWorld);
		SaveClanLog(clanid, playerid, -1, "CLANSPAWN_MOVE", i_str);
	}
	else
	{
		SendUsage(playerid, "/clanspawn <move>");
	}
	return 1;
}

CMD:clanbank(playerid, params[], 0, 0)
{
	new
	    clanid = g_pClan{playerid},
	    szAction[128];
	if(clanid == 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CLAN"));
	if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_MEGEROSITVE_A_KLANOD_7"));

	if(sscanf(params, "s[128]", szAction)) return SendUsage(playerid, "/clanbank <buy/move>");

	if(!strcmp(szAction, "buy", true, 3))
	{
		if(gClanBankPos[clanid][0]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANODBAN_MAR_VAN_BANK"));
		if(g_ClanFlags{clanid} & e_CLAN_BANK_PLACING) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VALAKI_EPPEN_MOST_RAKJA"));
		if(!IsPlayerInDynamicArea(playerid, gClanZone[clanid])) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANBANKOT_NEM_RAKHATOD"));
		if(GetPlayerMoney(playerid) < 5000000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_3"));

		g_ClanFlags{clanid} |= e_CLAN_BANK_PLACING;
		g_pClanCreateState{playerid} = 15;

      //  GivePlayerMoneyEx(playerid, -5000000, "ClanBankBuy");

        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MENJ_ODA_AHOVA_LE_AKAROD_TENNI"));
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_Y_GOMB__LERAKAS_N_GOMB__MEGSZAKIT"));
        SaveClanLog(clanid, playerid, -1, "CLANBANK_BUY", "N/A");
	}
	else if(!strcmp(szAction, "move", true, 4))
	{
		if(!gClanBankPos[clanid][0]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANODBAN_MEG_NINCS"));
		if(!IsPlayerInDynamicArea(playerid, gClanZone[clanid])) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KLANBANKOT_NEM_RAKHATOD"));

		if(!(gClanRankFlags[clanid][g_pClanRank{playerid}] & _:e_CAN_CHANGE_BANK_POS) && !IsOwner(playerid))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_JOGOD_MEGVALTOZTATNI_4"));
		    return 1;
		}

		GetPlayerPos(playerid, X, Y, Z);

		gClanBankPos[clanid][0] = X;
		gClanBankPos[clanid][1] = Y;
		gClanBankPos[clanid][2] = Z;

		if(gClanBankCP[clanid] != -1)
		{
			DestroyDynamicCP(gClanBankCP[clanid]);
			gClanBankCP[clanid] = -1;
			DestroyDynamic3DTextLabel(gClanBankText[clanid]);
		}
		gClanBankCP[clanid] = CreateDynamicCP(X, Y, Z, 5.0);
        gClanBankText[clanid] = CreateDynamic3DTextLabel("{" #XCOLOR_BLUE3 "}Klánbank!\n{" #XCOLOR_PROPGREEN "}Bank használata: 'N'", -1, X, Y, Z);

        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_KLANBANK_ATHELYEZVE_20000_"), X, Y, Z);
		GivePlayerMoneyEx(playerid, -20000, "ClanBankMove");

		mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `bankx` = %f, `banky` = %f, `bankz` = %f WHERE `id` = %d", X, Y, Z, CLAN_SQL(clanid));
		mysql_function_query(1, query, false, "", "");

		format(i_str, 128, "X: %.4f, Y: %.4f, Z: %.4f", X, Y, Z);
		SaveClanLog(clanid, playerid, -1, "CLANBANK_MOVE", i_str);
	}
	else
	{
		SendUsage(playerid, "/clanbank <buy/move>");
	}
	return 1;
}

CMD:setclan___(playerid, params[], 4, 0)
{
	new
	    clanid,
	    clanrank;
	if(sscanf(params, "udD(0)", player1, clanid, clanrank)) return SendUsage(playerid, "/setclan <Játékos ID/Név> <ClanID> <ClanRank>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX_1"));
	if(!(0 <= clanrank <= 9)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_RANK_0__9_KOZOTT"));
	if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

	new
	    freeslot = -1;
	for(new i; i != MAX_CLAN_PLAYERS; i++)
	{
		if(gClanPlayers[clanid][0][i] == -1)
		{
   			printf("ÜRES TE FASZOM!!!!!! %d", i);
   			freeslot = i;
			break;
		}
	}

	if(freeslot == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TELE_VAN_A_KLAN_MEGVAN"));

    gClanPlayers[clanid][0][freeslot] = PlayerInfo[player1][pRegID];
    gClanPlayers[clanid][1][freeslot] = clanrank;

	for(new i; i != MAX_CLAN_PLAYERS; i++)
	{
		if(!i)
		{
			format(dline, sizeof(dline), "%d,%d", gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
		else
		{
			format(dline, sizeof(dline), "%s,%d,%d", dline, gClanPlayers[clanid][0][i], gClanPlayers[clanid][1][i]);
		}
	}
	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `players` = '%s' WHERE `id` = %d", dline, CLAN_SQL(clanid));

    g_pClan{player1} = clanid;
    g_pClanRank{player1} = clanrank;

    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__BERAKTAD__NEVU_JATEKOST_AZ"), GetPlayerColor(player1) >>> 8, pName(player1), player1, gClanColor[clanid] >>> 8, gClanName[clanid], gClanRankName[clanid][clanrank], clanrank);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN_BERAKOTT_TEGED_AZ_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, gClanColor[clanid] >>> 8, gClanName[clanid], gClanRankName[clanid][clanrank], clanrank);

    AdminCommandLog("SETCLAN", playerid, player1, "clanid: %d, rank: %d", clanid, clanrank);
	return 1;
}

CMD:smyclan(playerid, params[], 4, 0)
{
	new
	    clanid,
	    rank;
	if(sscanf(params, "dD(4)", clanid, rank)) return SendUsage(playerid, "/smyclan <ClanID> <Rank = 4>");
	if(!(0 <= rank <= 9)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_RANK_ID_0__9_KOZOTT"));

	if(clanid != 0xFF)
	{
		if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
		if(!gClanCreator[clanid]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_KLAN__NEM_LETEZIK"), clanid);

		SendClientMessagef(playerid, -1, "Clan %d - %s {" #XCOLOR_YELLOW "}Rank: %d - %s", clanid, gClanName[clanid], rank, gClanRankName[clanid][rank]);
        g_pClanRank{playerid} = rank;
	}
	else
	{
		SendClientMessage(playerid, -1, "Clan 0xFF - NONE");
		g_pClanRank{playerid} = 0;
	}

	g_pClan{playerid} = clanid;

	valstr(name, clanid);
    AdminCommandLog("SMYCLAN", playerid, -1, name);
	return 1;
}

CMD:smyclanrank(playerid, params[], 4, 0)
{
	new
	    clanrank;
	if(sscanf(params, "d", clanrank)) return SendUsage(playerid, "/smyclanrank <Rank>");

	if(!(0 <= clanrank <= 9)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_RANK_ID_0__9_KOZOTT"));

	g_pClanRank{playerid} = clanrank;
	SendClientMessagef(playerid, -1, "ClanRank %d - %s", clanrank, gClanRankName[g_pClan{playerid}][clanrank]);

	valstr(name, clanrank);
    AdminCommandLog("SMYCLANRANK", playerid, -1, name);
	return 1;
}

CMD:reconnect__(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_UJRACSATLAKOZAS"));
	SetPlayerChatBubble(playerid, COLOR_BLUE, 20.0, 3000, "MSG_CHATBUBBLE_RECONNECTING");

	g_PlayerData[playerid] |= e_RECONNECT;
	GetPlayerIp(playerid, ip, sizeof(ip));
	SetPVarString(playerid, "pIP", ip);

	SendRconCommandf("banip %s", ip);
	return 1;
}

CMD:ctc(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | GHOSTMODE | TAXI>)
{
//	if(g_PlayerFlags[playerid] & e_GOD) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_GOD_MODBAN_NEM_MEHETSZ"));
	if(GetAverageFPS(playerid) < MINIGAMES_MIN_FPS) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_LEGALABB__MINIGAMES_MIN"), MINIGAMES_MIN_FPS);
	if(GetAveragePing(playerid) > MINIGAMES_MAX_PING) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ATLAG_PINGEDNEK__MINIGAME"), MINIGAMES_MAX_PING);

	// Játékos pénzének ellenõrzése, hogy meg-e van az elegendõ
	MoneyCheck(playerid, CTC_WIN);

	new
		team,
		red,
		blue;
	foreach(Player, i)
	{
        if(g_pGamesData[i] & e_IN_CTC)
		{
			if(!GetPlayerTeam(i)) red++;
			else blue++;
		}
	}

	if(red != blue)
	{
		if(red < blue) team = 0;
		else team = 1;
	}
	else
	{
		team = random(2);
	}

	g_pGamesData[playerid] |= e_IN_CTC;
	SetGoodAllowed(playerid, false);
    g_pMinigameJoins[playerid][e_Count_CTC] ++;

	if(g_pMinigameJoins[playerid][e_Count_CTC] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_CTC"));

	//SendClientMessagef(playerid, -1, "red %d, blue %d, team %d", red, blue, team);
	SetPlayerVirtualWorld(playerid, 10);
	SetPlayerTeam(playerid, team);

	SetPlayerColor(playerid, (!team) ? (COLOR_RED) : (COLOR_BLUE));

	if(!g_RoundType) // 0 = Kocsi, 1 = Hajó
	{
		if(!team) // Lenti
		{
    		SetPlayerMapIcon(playerid, 85, -816.6125,1431.5752,13.7891, 51, 0, MAPICON_GLOBAL_CHECKPOINT); // Kocsi Fönti 2
			SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -783.5935, 1447.2168, 13.9453, 190.3076, 0, 0, 0, 0, 0, 0);
		}
		else
		{
    		SetPlayerMapIcon(playerid, 85, -776.6226,1636.3937,27.0529, 51, 0, MAPICON_GLOBAL_CHECKPOINT); // Kocsi Lenti 1
			SetSpawnInfo(playerid, 1, GetPlayerSkin(playerid), -761.6706,1644.8070,27.4381,189.6809, 0, 0, 0, 0, 0, 0);
		}
		InfoTD_MSG(playerid, 10000, LANG(playerid, "MSG_LENYEG_ELLOPNI_A_MASIK_CSAPATTOL"));
	}
	else
	{
		if(!team) // Lenti
		{
    		SetPlayerMapIcon(playerid, 85, 1961.0604,-245.3176,-0.4979, 9, 0, MAPICON_GLOBAL_CHECKPOINT); // Hajó Fönti 2
			SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), 1966.6354,-273.1029,3.1799,333.0532, 0, 0, 0, 0, 0, 0);
		}
		else
		{
    		SetPlayerMapIcon(playerid, 85, 2288.6980,508.2289,-0.4388, 9, 0, MAPICON_GLOBAL_CHECKPOINT); // Hajó Lenti 1
			SetSpawnInfo(playerid, 1, GetPlayerSkin(playerid), 2294.4548,528.3135,1.7944,179.2050, 0, 0, 0, 0, 0, 0);
		}
		InfoTD_MSG(playerid, 10000, LANG(playerid, "MSG_LENYEG_ELLOPNI_A_MASIK_CSAPATTOL_1"));
	}
	if(!(g_pTDFlags[playerid] & e_NOTD_CTC)) TextDrawShowForPlayer(playerid, TD_CTC);
	SpawnPlayer(playerid);
	HideClanZones(playerid);
	return 1;
}

CMD:ctcround(playerid, params[], 4, 0)
{
	if(params[0])
	{
    	g_RoundType = strval(params);
	}

	SendClientMessagef(playerid, -1, "g_RoundType = %d", g_RoundType);

	valstr(name, g_RoundType);
    AdminCommandLog("CTCROUND", playerid, -1, name);
	return 1;
}

stock ShowGangwarZones(playerid)
{
	// Gangwar zónák mutatása
	for(new i; i != 40; i++)
	{
		GangZoneShowForPlayer(playerid, i, GetGangwarZoneColorByTeam(g_ZoneOwner[i]));

		if(g_ZoneIsAttacked[i] == 2)
		{
			GangZoneFlashForPlayer(playerid, i, GetGangwarZoneColorByTeam(g_ZoneAttacker[i]));
		}
	}
}

stock HideGangwarZones(playerid)
{
	for(new i; i != 40; i++)
	{
		GangZoneHideForPlayer(playerid, i);
	}
}

CMD:gangwar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | GHOSTMODE>)
{
	if(g_pSelectTDFlags[playerid]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_JELENLEG_IS_VALAMILYEN"));
	if(g_PlayerFlags[playerid] & e_GOD) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_GOD_MODBAN_NEM_MEHETSZ_1"));
	if(g_PlayerData[playerid] & e_RACEMODE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLD_KI_A_RACEMODET_RACEMODE"));
	if(GetAverageFPS(playerid) < MINIGAMES_MIN_FPS) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_LEGALABB__MINIGAMES_MIN_1"), MINIGAMES_MIN_FPS);
	if(GetAveragePing(playerid) > MINIGAMES_MAX_PING) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ATLAG_PINGEDNEK__MINIGAME_1"), MINIGAMES_MAX_PING);

	if(g_pGangwarTeam[playerid] == 0xF)
	{
		TextDrawShowForPlayer(playerid, Text:TD_SelectGrove);
		TextDrawShowForPlayer(playerid, TD_SelectGrove + Text:1);

		TextDrawShowForPlayer(playerid, TD_SelectBallas);
		TextDrawShowForPlayer(playerid, TD_SelectBallas + Text:1);

		TextDrawShowForPlayer(playerid, TD_SelectVagos);
		TextDrawShowForPlayer(playerid, TD_SelectVagos + Text:1);

		TextDrawShowForPlayer(playerid, TD_SelectAztecas);
		TextDrawShowForPlayer(playerid, Text:TD_SelectAztecas + Text:1);

		TextDrawShowForPlayer(playerid, TD_SelectMessage);
	    SelectTextDraw(playerid, 0xFF33FFBB);
		g_pSelectTDFlags[playerid] |= e_SELECT_GANGWAR;
        SetGoodAllowed(playerid, false);

		InfoTD_MSG(playerid, 10000, LANG(playerid, "MSG_RGONDOLD_MEG_HOVA_CSATLAKOZOLW"));
	}
	else
	{
		new
		    gangid = g_pGangwarTeam[playerid];
		if(g_ZoneOwner[gangid * 10] != GetGangwarZoneID(gangid * 10))
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EHHEZ_A_BANDAHOZ_NEM_CSATLAKOZHATSZ"));
            HideGangwarTextdraw(playerid);
            return 1;
		}

			// PlayerTele(playerid, Float:x, Float:y, Float:z, interior = 0, Float:ang = 0.0, worldid = 0)
		new
		    id = random(sizeof(g_fGANGWAR_Grove));
		switch(gangid)
		{
			case TEAM_GROVE:
			{
				SetSpawnInfo(playerid, TEAM_GROVE, randomex(105, 108), g_fGANGWAR_Grove[id][0], g_fGANGWAR_Grove[id][1], g_fGANGWAR_Grove[id][2], g_fGANGWAR_Grove[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_BALLAS:
			{
				SetSpawnInfo(playerid, TEAM_BALLAS, randomex(102, 105), g_fGANGWAR_Ballas[id][0], g_fGANGWAR_Ballas[id][1], g_fGANGWAR_Ballas[id][2], g_fGANGWAR_Ballas[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_VAGOS:
			{
				SetSpawnInfo(playerid, TEAM_VAGOS, randomex(108, 111), g_fGANGWAR_Vagos[id][0], g_fGANGWAR_Vagos[id][1], g_fGANGWAR_Vagos[id][2], g_fGANGWAR_Vagos[id][3], 0, 0, 0, 0, 0, 0);
			}
			case TEAM_AZTECAS:
			{
				SetSpawnInfo(playerid, TEAM_AZTECAS, randomex(114, 117), g_fGANGWAR_Aztecas[id][0], g_fGANGWAR_Aztecas[id][1], g_fGANGWAR_Aztecas[id][2], g_fGANGWAR_Aztecas[id][3], 0, 0, 0, 0, 0, 0);
			}
		}
		SetPlayerColor(playerid, GetGangwarZoneColorByTeam(gangid));
		ShowGangwarZones(playerid);

		g_pGamesData[playerid] |= e_IN_GANGWAR;
		g_PlayerData[playerid] &= ~e_CLEARWORLD;
		SetGoodAllowed(playerid, false);
        g_pMinigameJoins[playerid][e_Count_GANGWAR] ++;
        HideClanZones(playerid);
	    HideGangwarTextdraw(playerid);
        SpawnPlayer(playerid);
	}
	return 1;
}
CMD:gw(playerid, params[], 0, 0)
{
	return cmd_gangwar(playerid, params);
}

CMD:leaveg(playerid, params[], 4, 0)
{
	g_pGangwarTeam[playerid] = strval(params);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `gangwar_team` = %d WHERE `reg_id` = %d", g_pGangwarTeam[playerid], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	valstr(name, g_pGangwarTeam[playerid]);
    AdminCommandLog("LEAVEG", playerid, -1, name);
	return 1;
}

CMD:wmenu__(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | GANGWAR | RANGE | RACE | CTC | POSTAS | PIZZAS>)
{
	if(g_pSelectTDFlags[playerid]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_JELENLEG_IS_VALAMILYEN"));

    new
        dmid = g_pDeathMatchID[playerid];
	if(dmid != -1)
	{
		if(!(g_DMFlags[dmid] & e_WEAPONS_BUY)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBEN_A_DMBEN_TILTVA_VAN"));
	}

 	for(new i = _:TD_WMenu_WStart-3; i != _:TD_WMenu_PEnd+1; i++)
	{
		TextDrawShowForPlayer(playerid, Text:i);
	}

	SelectTextDraw(playerid, 0xFF0000AA);
	g_pSelectTDFlags[playerid] |= e_SELECT_WEAPON;
	return 1;
}

CMD:tdsprite(playerid, params[], 4, 0)
{
	new
	    iStyle;
	if(sscanf(params, "s[" #STR_SIZE "]ffffD(4)", i_str, X, Y, V[0], V[1], iStyle)) return SendUsage(playerid, "/tdsprite <TXD Név> <fX> <fY> <fWidth> <fHeight>");

	new
		Text:txtSprite1 = TextDrawCreate(X, Y, i_str);
	TextDrawFont(txtSprite1, iStyle);
	TextDrawColor(txtSprite1, 0xFFFFFFFF);
	TextDrawTextSize(txtSprite1, V[0], V[1]);
	TextDrawShowForPlayer(playerid, txtSprite1);
	//TextDrawSetSelectable(txtSprite1, true);

	SendClientMessagef(playerid, COLOR_RED, "TextDrawID: %d", int:txtSprite1);
    AdminCommandLog("TDSPRITE", playerid, -1, i_str);
	return 1;
}

CMD:tdshow(playerid, params[], 4, 0)
{
	new
	    bool:IsShow;
	if(sscanf(params, "dd", datez, bool:IsShow)) return SendUsage(playerid, "/tdshow <TextDrawID> <0/1>");

	switch(IsShow)
	{
		case 0: TextDrawHideForPlayer(playerid, Text:datez);
		case 1: TextDrawShowForPlayer(playerid, Text:datez);
		default: SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HULYE_VAGY_CSAK_BOOL_ERTEK"));
	}

	valstr(name, datez);
    AdminCommandLog("TDSHOW", playerid, -1, name);
	return 1;
}

CMD:togglesel(playerid, params[], 4, 0)
{
	new
	    bool:IsShow;
	if(sscanf(params, "dd", datez, bool:IsShow)) return SendUsage(playerid, "/togglesel <TextDrawID> <0/1>");

    TextDrawSetSelectable(Text:datez, bool:IsShow);

	valstr(name, datez);
    AdminCommandLog("TOGGLESEL", playerid, -1, name);
	return 1;
}
/*
CMD:style(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS>)
{
	if(GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BEVAN_KAPCSOLVA_A_LEZERED"));
//    if(RaceBuilt == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_VERSENYT_SZERKESZTESZ"));

    GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);

	SetPVarFloat(playerid, "AfterClothesX", X);
	SetPVarFloat(playerid, "AfterClothesY", Y);
	SetPVarFloat(playerid, "AfterClothesZ", Z);
	SetPVarFloat(playerid, "AfterClothesInt", GetPlayerInterior(playerid));
	SetPVarFloat(playerid, "AfterClothesWorld", GetPlayerVirtualWorld(playerid));
	SetPVarFloat(playerid, "AfterClothesA", Angle);

	ShowPlayerDialogEx(playerid, 14291, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_LIGHTBLUE "}Öltözködés!", "{FFFFFF}Öltöztesd fel a karaktert tetszésed szerint!\nTehetsz a karakteredre szemüveget, órát, sapkát, stb...\nMegj: CJ-vel mûködik a legjobban, néhány skinnel kicsit bugos lehet\n{" #XCOLOR_BLUE "}Elszeretnéd kezdeni?", "Igen", "Nem");
	return 1;
}
CMD:clothes(playerid, params[], 0, 0)
{
	return cmd_style(playerid, params);
}*/

CMD:startbalon(playerid, params[], 0, 0)
{
	if(g_ServerFlags & e_LEGBALON_WAIT)
	{
        gLegbalonPos[0] = 1;
		MoveDynamicObject(gLegbalon, g_fLegbalonPos[gLegbalonPos[0]][0], g_fLegbalonPos[gLegbalonPos[0]][1], g_fLegbalonPos[gLegbalonPos[0]][2], 7.5);
        g_ServerFlags &= ~e_LEGBALON_WAIT;

		ShowWelcome(playerid, LANG(playerid, "MSG_LEGBALON_ELINDITVA"));
	}
	else
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_RA_LEGBALON_MAR_MEGYW"));
	}
	return 1;
}

CMD:playmusic(playerid, params[], 3, 0)
{
	if(isnull(params))
	{
        if(!GetPVarType(playerid, "Stream"))
        {
            SendClientMessage(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_JATSZ_LE_MAGADNAK_EGY_ZENET"));
			return 1;
		}
		else
		{
			GetPVarString(playerid, "Stream", tmp, 256);
		}
	}
	else
	{
		tmp[0] = EOS;
		strcat(tmp, params, 256);
	}

 	foreach(new i: Player)
	{
	    if(g_PlayerFlags[i] & e_MUSIC) //Mehet
		{
  			PlayAudioStreamForPlayer(i, tmp, 0.0, 0.0, 0.0, 0.0, false);
  			SendClientMessagef(i, COLOR_WHITE, LANG(playerid, "MSG__ZENE_LEJATSZVA_"), tmp);
  			SendClientMessagef(i, COLOR_BLUE, LANG(playerid, "MSG__ZENE_LEJATSZVA_1"));
		}
	}
	AdminCommandLog("PLAYMUSIC", playerid, -1, tmp);
	return 1;
}

CMD:addplayer(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", player1)) return SendUsage(playerid, "/addplayer <Játékos ID>");
	if(!IsPlayerConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    iPlayerID;
	valstr(name, player1);
	sscanf(name, "u", iPlayerID);

	if(iPlayerID == INVALID_PLAYER_ID)
	{
		GetPlayerName(player1, g_szaPlayerNames[player1], MAX_PLAYER_NAME);
		SSCANF_Join(player1, pName(player1), IsPlayerNPC(player1));

		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_JATEKOS_HOZZAADVA_AZ_SSCANFHEZ"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	}
	else
	{
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_RENDESEN"));
	}
	return 1;
}

CMD:playstream(playerid, params[], 0, 0)
{
	new
		Float:fDistance,
		bool:bUsepos;
	if(sscanf(params, "fds[" #STR_SIZE "]", fDistance, bool:bUsepos, i_str)) return SendUsage(playerid, "/playstream <fDistance> <bUsepos> <szUrl>");

	GetPlayerPos(playerid, X, Y, Z);
	PlayAudioStreamForPlayer(playerid, i_str, X, Y, Z, fDistance, bUsepos);
	return 1;
}

CMD:removebuilding(playerid, params[], 0, 0)
{
	new
		iModel,
        Float:fRadius;
	if(sscanf(params, "dF(50.0)", iModel, fRadius)) return SendUsage(playerid, "/removebuilding <iModel> <fRadius>");

    GetPlayerPos(playerid, X, Y, Z);
	RemoveBuildingForPlayer(playerid, iModel, X, Y, Z, fRadius);
	return 1;
}

CMD:nolights(playerid, params[], 0, 0)
{
	new
        Float:Radius;
	if(sscanf(params, "F(6000.0)", Radius)) return SendUsage(playerid, "/nolights <fRadius>");

    GetPlayerPos(playerid, X, Y, Z);
	RemoveBuildingForPlayer(playerid, 1223, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1226, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1231, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1232, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1290, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1294, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1297, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1298, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3853, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3460, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3463, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3472, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1283, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1284, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1315, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1350, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1351, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1352, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3855, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1215, X, Y, Z, Radius); // Kis Lámpa

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHLAMPAK_KIKAPCSOLVANBVISSZA"));
	return 1;
}

CMD:nopylons(playerid, params[], 0, 0)
{
	new
        Float:Radius;
	if(sscanf(params, "F(6000.0)", Radius)) return SendUsage(playerid, "/nopylons <fRadius>");

    GetPlayerPos(playerid, X, Y, Z);
	RemoveBuildingForPlayer(playerid, 1307, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 1308, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3459, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3454, X, Y, Z, Radius);
	RemoveBuildingForPlayer(playerid, 3875, X, Y, Z, Radius);

    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHVILLANYOSZLOPOK_KIKAPCSOLVAN"));
	return 1;
}

CMD:notrees(playerid, params[], 0, 0)
{
	new
        Float:Radius;
	if(sscanf(params, "F(6000.0)", Radius)) return SendUsage(playerid, "/notrees <fRadius>");

    GetPlayerPos(playerid, X, Y, Z);

	new
	    i = 615;
	for( ; i <= 792; i++)
	{
		RemoveBuildingForPlayer(playerid, i, X, Y, Z, Radius);
	}
	for(i = 3505; i <= 3512; i++)
	{
		RemoveBuildingForPlayer(playerid, i, X, Y, Z, Radius);
	}

    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFAK_KIKAPCSOLVANBVISSZARAK"));
	return 1;
}

CMD:closesto(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(30)", V[0])) return SendUsage(playerid, "/closesto {" #XCOLOR_YELLOW "}<Távolság = 30>");

	for(new i; i != MAX_OBJECTS; i++)
	{
        if(!IsValidPlayerObject(playerid, i)) continue;

		GetPlayerObjectPos(playerid, i, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, V[0], X, Y, Z))
		{
            SendClientMessagef(playerid, COLOR_GREEN, "-> %d, %.4f, %.4f, %.4f", i, X, Y, Z);
		}
	}
	return 1;
}

CMD:closestgo(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(30)", V[0])) return SendUsage(playerid, "/closesgto {" #XCOLOR_YELLOW "}<Távolság = 30>");

	for(new i; i != MAX_OBJECTS; i++)
	{
        if(!IsValidObject(i)) continue;

		GetObjectPos(i, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, V[0], X, Y, Z))
		{
            SendClientMessagef(playerid, COLOR_GREEN, "-> %d, %.4f, %.4f, %.4f", i, X, Y, Z);
		}
	}
	return 1;
}

CMD:freeslot(playerid, params[], 0, 0)
{
	for(new i = 0; i != MAX_OBJECTS; i++)
	{
		if(!IsValidObject(i))
		{
			SendClientMessagef(playerid, -1, "Freeslot: %d", i);
			break;
		}
	}
	return 1;
}

CMD:uspawn(playerid, params[], 0, 0)
{
	UpdatePlayerSpawnInfo(playerid);
	return 1;
}

CMD:gotoi(playerid, params[], 4, 0)
{
	new
		iType,
		iID;
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, iID)) return SendUsage(playerid, "/gotoi <Object/Pickup/CP/RaceCP/MapIcon/3DText> <Item ID>");

	if(!IsNumeric(i_str))
	{
		if(!strcmp(i_str, !"object", true))
		{
            iType = STREAMER_TYPE_OBJECT;
		}
		else if(!strcmp(i_str, !"pickup", true))
		{
            iType = STREAMER_TYPE_PICKUP;
		}
		else if(!strcmp(i_str, !"cp", true))
		{
            iType = STREAMER_TYPE_CP;
		}
		else if(!strcmp(i_str, !"racecp", true))
		{
            iType = STREAMER_TYPE_RACE_CP;
		}
		else if(!strcmp(i_str, !"mapicon", true))
		{
            iType = STREAMER_TYPE_MAP_ICON;
		}
		else if(!strcmp(i_str, !"3dtext", true))
		{
            iType = STREAMER_TYPE_3D_TEXT_LABEL;
		}
		else if(!strcmp(i_str, !"area", true))
		{
	        iType = STREAMER_TYPE_AREA;
		}
		else return SendUsage(playerid, "/gotoi <Object/Pickup/CP/RaceCP/MapIcon/3DText> <Item ID>");
	}
	else
	{
        iType = rand;
	}

	switch(iType)
	{
		case STREAMER_TYPE_OBJECT: if(!IsValidDynamicObject(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));
		case STREAMER_TYPE_PICKUP: if(!IsValidDynamicPickup(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_PICKUP_ID"));
		case STREAMER_TYPE_CP: if(!IsValidDynamicCP(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_CP_ID"));
		case STREAMER_TYPE_RACE_CP: if(!IsValidDynamicRaceCP(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_RACECP_ID"));
		case STREAMER_TYPE_MAP_ICON: if(!IsValidDynamicMapIcon(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_MAPICON_ID"));
		case STREAMER_TYPE_3D_TEXT_LABEL: if(!IsValidDynamic3DTextLabel(Text3D:iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_3D_TEXT_ID"));
		case STREAMER_TYPE_AREA: if(!IsValidDynamicArea(iID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_AREA_ID"));
		default: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS"));
	}

//	SendClientMessagef(playerid, COLOR_WHITE, "AreaType: %d", Streamer_GetIntData(STREAMER_TYPE_AREA, iID, E_STREAMER_TYPE));
	Streamer_GetFloatData(iType, iID, E_STREAMER_X, X);
	Streamer_GetFloatData(iType, iID, E_STREAMER_Y, Y);
	Streamer_GetFloatData(iType, iID, E_STREAMER_Z, Z);

	SimpleTele(playerid, X, Y, Z);

	valstr(name, iID);
    AdminCommandLog("GOTOI", playerid, -1, name);
	return 1;
}

CMD:append(playerid, params[], 4, 0)
{
	if(sscanf(params, "dD(0)", vID, datez)) return SendUsage(playerid, "/append <Object ID> <1/0> {" #XCOLOR_GREEN "}<%d>", Streamer_IsInArrayData(STREAMER_TYPE_OBJECT, vID, E_STREAMER_PLAYER_ID, playerid));

	if(datez)
	{
		Streamer_AppendArrayData(STREAMER_TYPE_OBJECT, vID, E_STREAMER_PLAYER_ID, playerid);
	}
	else
	{
		Streamer_RemoveArrayData(STREAMER_TYPE_OBJECT, vID, E_STREAMER_PLAYER_ID, playerid);
	}

	format(country, sizeof(country), "id: %d - %d", vID, datez);
    AdminCommandLog("APPEND", playerid, -1, country);
	return 1;
}

CMD:visible(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/visible <Object ID> {" #XCOLOR_GREEN "}<%d>", Streamer_IsItemVisible(playerid, STREAMER_TYPE_OBJECT, datez));
    SendClientMessagef(playerid, COLOR_RED, "Visible: {" #XCOLOR_GREEN "}%d", Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT));
	return 1;
}

CMD:getarray(playerid, params[], 4, 0)
{
	new
	    id;
	if(sscanf(params, "ddd", datez, id, player1)) return SendUsage(playerid, "/getarray <Streamer_Type> <ID> <Data>");

	Streamer_GetArrayData(datez, _:id, player1, i_str);
	SendClientMessage(playerid, COLOR_WHITE, i_str);

	valstr(name, id);
    AdminCommandLog("GETARRAY", playerid, -1, name);
	return 1;
}

CMD:upperb(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_OBJECT: {" #XCOLOR_GREEN "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_OBJECT), Streamer_CountItems(STREAMER_TYPE_OBJECT), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_PICKUP: {" #XCOLOR_BLUE "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_PICKUP), Streamer_CountItems(STREAMER_TYPE_PICKUP), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_PICKUP));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_CP: {" #XCOLOR_RED "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_CP), Streamer_CountItems(STREAMER_TYPE_CP), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_CP));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_RACE_CP: {" #XCOLOR_LIGHTRED "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_RACE_CP), Streamer_CountItems(STREAMER_TYPE_RACE_CP), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_RACE_CP));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_MAP_ICON: {" #XCOLOR_YELLOW "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_MAP_ICON), Streamer_CountItems(STREAMER_TYPE_MAP_ICON), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_MAP_ICON));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_3D_TEXT_LABEL: {" #XCOLOR_ORANGE "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_3D_TEXT_LABEL), Streamer_CountItems(STREAMER_TYPE_3D_TEXT_LABEL), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL));
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_AREA: {" #XCOLOR_WHITE "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_AREA), Streamer_CountItems(STREAMER_TYPE_AREA), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_AREA));
	#if defined UVS
	SendClientMessagef(playerid, COLOR_RED, "STREAMER_TYPE_VEHICLE: {" #XCOLOR_SAMP "}%d, MaxItems: %d, Visible: %d", Streamer_GetUpperBound(STREAMER_TYPE_VEHICLE), Streamer_CountItems(STREAMER_TYPE_VEHICLE), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_VEHICLE));
	#endif
	return 1;
}

CMD:cellsize(playerid, params[], 4, 0)
{
    Streamer_GetCellSize(X);
	if(sscanf(params, "f", V[0])) return SendUsage(playerid, "/cellsize <Float:fDistance> {" #XCOLOR_WHITE "}= {" #XCOLOR_GREEN "}%f", X);

    Streamer_CellSize(V[0]);

	valstr(name, floatround(V[0]));
    AdminCommandLog("CELLSIZE", playerid, -1, name);
	return 1;
}

CMD:celldistance(playerid, params[], 4, 0)
{
    Streamer_GetCellDistance(X);
	if(sscanf(params, "f", V[0])) return SendUsage(playerid, "/celldistance <Float:fDistance> {" #XCOLOR_WHITE "}= {" #XCOLOR_GREEN "}%f", X);

    Streamer_CellDistance(V[0]);

	valstr(name, floatround(V[0]));
    AdminCommandLog("CELLDISTANCE", playerid, -1, name);
	return 1;
}

CMD:maxitems(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", datez, vID))
	{
		SendUsage(playerid, "/maxitems <Típus> <Érték>");
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Streamer item típusok", "0 = STREAMER_TYPE_OBJECT\n1 = STREAMER_TYPE_PICKUP\n2 = STREAMER_TYPE_CP\n3 = STREAMER_TYPE_RACE_CP\n4 = STREAMER_TYPE_MAP_ICON\n5 = STREAMER_TYPE_3D_TEXT_LABEL\n6 = STREAMER_TYPE_AREA", "Bezárás");
		return 1;
	}

    Streamer_MaxItems(datez, vID);

	format(country, sizeof(country), "Type: %d - %d", datez, vID);
    AdminCommandLog("MAXITEMS", playerid, -1, country);
	return 1;
}

CMD:maxvitems(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", datez, vID))
	{
		SendUsage(playerid, "/maxvitems <Típus> <Érték>");
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Streamer item típusok", "0 = STREAMER_TYPE_OBJECT\n1 = STREAMER_TYPE_PICKUP\n2 = STREAMER_TYPE_CP\n3 = STREAMER_TYPE_RACE_CP\n4 = STREAMER_TYPE_MAP_ICON\n5 = STREAMER_TYPE_3D_TEXT_LABEL\n6 = STREAMER_TYPE_AREA", "Bezárás");
		return 1;
	}

    Streamer_VisibleItems(datez, vID);
    AdminCommandLog("MAXVITEMS", playerid, -1, "Type: %d - %d", datez, vID);
	return 1;
}

CMD:tickrate(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/tickrate <Érték> {" #XCOLOR_WHITE "}= {" #XCOLOR_GREEN "}%d", Streamer_GetTickRate());

    SendClientMessagef(playerid, COLOR_WHITE, "TickRate = {00FF00}%d, Old: {" #XCOLOR_SAMP "}%d", datez, Streamer_GetTickRate());
    Streamer_TickRate(datez);

	valstr(name, datez);
    AdminCommandLog("TICKRATE", playerid, -1, name);
	return 1;
}

CMD:myareas(playerid, params[], 4, 0)
{
	new
	    areas[128],
	    count = GetPlayerNumberDynamicAreas(playerid);
    GetPlayerDynamicAreas(playerid, areas, sizeof(areas));

    for(new i; i != count; i++)
    {
		SendClientMessagef(playerid, COLOR_ORANGE, "Area %d - %d", i, areas[i]);
	}
	SendClientMessagef(playerid, COLOR_WHITE, "All area: %d", count);

    AdminCommandLog("MYAREAS", playerid, -1);
	return 1;
}

CMD:internalid(playerid, params[], 4, 0)
{
	new
	    type,
	    id;
	if(sscanf(params, "dd", type, id))
	{
		SendUsage(playerid, "/internalid <type> <streamerid>");
   		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Streamer item típusok", "0 = STREAMER_TYPE_OBJECT\n1 = STREAMER_TYPE_PICKUP\n2 = STREAMER_TYPE_CP\n3 = STREAMER_TYPE_RACE_CP\n4 = STREAMER_TYPE_MAP_ICON\n5 = STREAMER_TYPE_3D_TEXT_LABEL\n6 = STREAMER_TYPE_AREA", "Bezárás");
		return 1;
	}

    SendClientMessagef(playerid, COLOR_WHITE, "Internal ID: {" #XCOLOR_GOLD "}%d", Streamer_GetItemInternalID(playerid, type, id));
    AdminCommandLog("INTERNALID", playerid, -1);
	return 1;
}

CMD:streamerid(playerid, params[], 4, 0)
{
	new
	    type,
	    id;
	if(sscanf(params, "dd", type, id))
	{
		SendUsage(playerid, "/streamerid <type> <internalid>");
   		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Streamer item típusok", "0 = STREAMER_TYPE_OBJECT\n1 = STREAMER_TYPE_PICKUP\n2 = STREAMER_TYPE_CP\n3 = STREAMER_TYPE_RACE_CP\n4 = STREAMER_TYPE_MAP_ICON\n5 = STREAMER_TYPE_3D_TEXT_LABEL\n6 = STREAMER_TYPE_AREA", "Bezárás");
		return 1;
	}

    SendClientMessagef(playerid, COLOR_WHITE, "Streamer ID: {" #XCOLOR_BLUE "}%d", Streamer_GetItemStreamerID(playerid, type, id));
    AdminCommandLog("STREAMERID", playerid, -1);
	return 1;
}

CMD:update(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(-1)F(-1)F(-1)", X, Y, Z)) return SendUsage(playerid, "/update <X> <Y> <Z>");

	if(X == -1)
	{
		return Streamer_Update(playerid);
	}
    Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	return 1;
}

CMD:activeitems(playerid, params[], 4, 0)
{
	Streamer_ProcessActiveItems();
    AdminCommandLog("ACTIVEITEMS", playerid, -1);
	return 1;
}

CMD:idleu(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/ideu <Érték>");

    Streamer_ToggleIdleUpdate(playerid, datez);
    AdminCommandLog("IDLEU", playerid, -1);
	return 1;
}

CMD:radiusmulty(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", datez, vID)) return SendUsage(playerid, "/radiusmulty <type> <amount>");

    Streamer_SetRadiusMultiplier(datez, vID, playerid);
    SendClientMessagef(playerid, -1, "%d = %d", datez, vID);
	return 1;
}

CMD:reoptimize(playerid, params[], 4, 4)
{
	CallRemoteFunction("OptimizeObjectsDrawDistance", "");
	SendClientMessage(playerid, -1, "OptimizeObjectsDrawDistance");
	return 1;
}

CMD:lift(playerid, params[], 0, 0)
{
    if(GetPVarInt(playerid, "HQ") != 2 && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEVILES"));

	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/lift {" #XCOLOR_ORANGE "}<0/1/2/3/4>");

	switch(datez)
	{
	    case 0: MoveDynamicObject(selift, -2996.7734, -2036.8261, 32.81742, 5.0);
	    case 1: MoveDynamicObject(selift, -2996.7734, -2036.8261, -0.18257, 5.0);
	    case 2: MoveDynamicObject(selift, -2996.7734, -2036.8261, 14.44742, 5.0);
	    case 3: MoveDynamicObject(selift, -2996.7734, -2036.8261, 32.81742, 5.0);
	    case 4: MoveDynamicObject(selift, -2996.7734, -2036.8261, 121.24742, 5.0);
	    default: SendUsage(playerid, "/lift <0/1/2/3/4>");
	}
	return 1;
}

CMD:elevator(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/elevator {" #XCOLOR_ORANGE "}<1/2/3/4/5/6/7>");

	switch(datez)
	{
	    case 1: NormalTeleEx(playerid, "~r~Lift ~w~1", "elevator", 1379.3635, -1143.0383, 23.6562, 175.1315);
	    case 2: NormalTeleEx(playerid, "~r~Lift ~w~2", "elevator", 1534.0292, -1227.1448, 17.4062, 179.2049);
	    case 3: NormalTeleEx(playerid, "~r~Lift ~w~3", "elevator", 1443.0267, -1033.0368, 23.6562, 172.3115);
	    case 4: NormalTeleEx(playerid, "~r~Lift ~w~4", "elevator", 1524.3339, -1057.2823, 25.0550, 238.1356);
	    case 5: NormalTeleEx(playerid, "~r~Lift ~w~5", "elevator", 1559.6630, -1158.6345, 23.9062, 10.6300);
	    case 6: NormalTeleEx(playerid, "~r~Lift ~w~6", "elevator", 363.7178, -1460.9759, 36.0325, 126.2511);
	    case 7: NormalTeleEx(playerid, "~r~Lift ~w~7", "elevator", 319.8477, -1603.7836, 33.1537, 126.9011);
	    default: SendUsage(playerid, "/elevator {" #XCOLOR_ORANGE "}<1/2/3/4/5/6/7>");
	}
	return 1;
}

CMD:uptime(playerid, params[], 0, 0)
{
    switch(up_days)
	{
	    case 0:
	    {
	        switch(up_hours)
	        {
	            case 0:
	            {
	                switch(up_minutes)
	                {
	                    case 0: format(i_str, 64, LANG(playerid, "MSG_UPTIME_1"), uptimeCount);
	                    default: format(i_str, 64, LANG(playerid, "MSG_UPTIME_2"), up_minutes);
					}
				}
				case 1: format(i_str, 64, LANG(playerid, "MSG_UPTIME_3"), uptimeCount);
				default: format(i_str, 64, LANG(playerid, "MSG_UPTIME_4"), up_hours);
			}
		}
		case 1:
		{
		    switch(up_hours)
		    {
		        case 0: format(i_str, 64, LANG(playerid, "MSG_UPTIME_5"));
		        case 1: format(i_str, 64, LANG(playerid, "MSG_UPTIME_6"));
				default: format(i_str, 64, LANG(playerid, "MSG_UPTIME_7"),up_hours);
			}
		}
		default:
		{
		    switch(up_hours)
		    {
				case 0: format(i_str, 64, LANG(playerid, "MSG_UPTIME_8"),up_days);
				case 1: format(i_str, 64, LANG(playerid, "MSG_UPTIME_9"),up_days);
				default: format(i_str, 64, LANG(playerid, "MSG_UPTIME_10"),up_days,up_hours);
			}
		}
	}

	date(session[startuptime], day, month, year, hour, minute, second);
	GetServerVarAsString("version", name, sizeof(name));

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_SZERVER_AZ_UTOLSO_RESTARTTOL"), i_str, year, month, day, hour, minute, second);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG___SQL_LEKERDEZES_ELKULDVE_"), session[queries], mysql_unprocessed_queries(), session[fqueries], name);
//	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG__A_LEGHOSSZABB_SQL_LEKERDEZES"), session[longest_query], session[max_query_len]);

	date(session[curr_maxplayers_time], day, month, year, hour, minute, second);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG__A_SZERVERHEZ__ALKALOMMAL_CSATL"), session[connections], ServerInfo[CurrPlayers], year, month, day, hour, minute, second);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG___UJ_JATEKOS_REGISZTRALT_A"), session[registrations][0], session[registrations][1]);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG___EMBERT_OLTEK_MEG_ES__JATEKO"), session[kills][0], session[kills][1]);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG___PARANCSOT_HASZNALTAK"), session[commands]);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG___UZENET_ELKULDVE_A_CHATBE"), session[messages]);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG__MEGNYERTEK__REAKCIOTESZTET"), session[wins][0], session[wins][1], session[wins][2]);
	return 1;
}

CMD:network(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/network {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SetPVarInt(playerid, "NetWorkID", player1);
    GetPlayerNetworkStats(player1, dline, sizeof(dline));
	GetPlayerVersion(playerid, name, sizeof(name));

    strcat(dline, "Version: ");
    strcat(dline, name);

    format(i_str, sizeof(i_str), "Network Statisztika: {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, DIALOG_NETWORK, DIALOG_STYLE_MSGBOX, i_str, dline, "Felújít", "Kilépés");
	return 1;
}
CMD:netstats(playerid, params[], 0, 0)
{
	return cmd_network(playerid, params);
}

CMD:version(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/version {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKNAK_NEM_LEHET_LEKERNI"));

	GetPlayerVersion(player1, name, sizeof(name));
	if(!strcmp(name, RAKSAMP_VERSION, true)) //Ha raksamp
	{
 		format(name, sizeof(name),"0.3.7");
	}

	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___SAMP_CLIENT_VERSION_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, name);
	return 1;
}

CMD:lookat(playerid, params[], 0, 0)
{
	if(sscanf(params, "fffD(1)", X, Y, Z, datez)) return SendUsage(playerid, "/lookat <X> <Y> <Z> <Type = 1>");

	SetPlayerCameraLookAt(playerid, X + (15 * floatsin(X, degrees)), Y + (15 * floatsin(Y, degrees)), Z, datez);
	SetPlayerCameraPos(playerid, X, Y, Z);

	SendClientMessagef(playerid, COLOR_WHITE, "X = %.4f, Y = %.4f, Z = %.4f", X, Y, Z);
	return 1;
}

CMD:editobject(playerid, params[], 4, 0)
{
	new
	    iObjectID,
	    IsPlayer;
	if(sscanf(params, "dD(0)", iObjectID, IsPlayer)) return SendUsage(playerid, "/editobject <iObjectID> <Type 0 = Dynamic, 1 = Global, 2 = Player>");

	switch(IsPlayer)
	{
		case 0: EditDynamicObject(playerid, iObjectID);
		case 1: EditObject(playerid, iObjectID);
		case 2: EditPlayerObject(playerid, iObjectID);
		default: SendUsage(playerid, "/editobject <iObjectID> <Type 0 = Dynamic, 1 = Global, 2 = Player>");
	}

	valstr(name, iObjectID);
    AdminCommandLog("EDITOBJECT", playerid, -1, name);
	return 1;
}

CMD:sobject(playerid, params[], 0, 0)
{
    SelectObject(playerid);
	SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_OBJECTSZERKEZTES_ELKEZDVE_KATTINS"));
	return 1;
}
CMD:selectobject(playerid, params[], 0, 0)
{
	return cmd_sobject(playerid, params);
}

CMD:cobject(playerid, params[], 0, 0)
{
	CancelEdit(playerid);
	SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_OBJECTSZERKEZTES_BEFEJEZVE"));
	return 1;
}
CMD:cancelobject(playerid, params[], 0, 0)
{
	return cmd_cobject(playerid, params);
}

CMD:std(playerid, params[], 4, 0)
{
	new
	    iColor;
	if(sscanf(params, "N(0xFF0000AA)", iColor)) return SendUsage(playerid, "/std <hovercolor>");

    SelectTextDraw(playerid, iColor);

	valstr(name, iColor);
    AdminCommandLog("STD", playerid, -1, name);
	return 1;
}

CMD:ctd(playerid, params[], 4, 0)
{
	CancelSelectTextDraw(playerid);

    AdminCommandLog("CTD", playerid, -1);
	return 1;
}

CMD:snetwork(playerid, params[], 0, 0)
{
    GetNetworkStats(dline, sizeof(dline));
	ShowPlayerDialogEx(playerid, DIALOG_NETWORK + 1, DIALOG_STYLE_MSGBOX, "Szerver Network Statisztika", dline, "Felújít", "Kilépés");
	return 1;
}

CMD:www(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_A_SZERVER_WEBOLDALANAK_CIME"));
	GameTextForPlayer(playerid, "~r~~h~w~h~w~h~w~w~.~b~~h~m~h~f~h~r~r~~w~~g~~h~se~g~~h~~h~rv~g~~h~~h~~h~er~w~.~y~n~y~~h~e~p~t", 5000, 3);
	ShowWelcome(playerid, LANG(playerid, "MSG_RHWHWHWWBHMHFHRR"), .time = 5000);
	InfoTD_MSG(playerid, 5000, "~r~~h~w~h~w~h~w~w~.~b~~h~m~h~f~h~r~r~~w~~g~~h~se~g~~h~~h~rv~g~~h~~h~~h~er~w~.~y~n~y~~h~e~p~t");
	return 1;
}

CMD:damage(playerid, params[], 0, D:<BCAR>)
{
    if(GetPVarInt(playerid, "AutoRepair") != 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLD_AT_AZ_AUTOMATIKUS"));
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
    if(g_BonusCarOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BONUSZAUTONAK_A_SERULESET"));

	ShowPlayerDialogEx(playerid, DIALOG_DAMAGE, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN3 "}Jármû sérülés beállítása", "{" #XCOLOR_PINK "}Lámpák\n{" #XCOLOR_PINK "}Kerekek\n{" #XCOLOR_PINK "}Ajtók\n{" #XCOLOR_PINK "}Panel\n{" #XCOLOR_PINK "}Egész jármû", "Választ", "Mégse");
	return 1;
}

CMD:autocolor(playerid, params[], 0, 0)
{
	new
		iColor,
		iSlot,
		color1, color2;
    if(sscanf(params, "dD(0)", iColor, iSlot)) return SendUsage(playerid, "/autocolor <Szín ID> <Slot>");
	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_EZT"));

    GetDynamicVehicleColor(vID, color1, color2);
    switch(iSlot)
    {
		case 0:
		{
			SetPVarInt(playerid, "FavCarColor_1", iColor);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				ChangeDynamicVehicleColor(vID, iColor, color2);
			}

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `carcolor` = %d WHERE `reg_id` = %d", iColor, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		case 1:
		{
			SetPVarInt(playerid, "FavCarColor_2", iColor);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				ChangeDynamicVehicleColor(vID, color1, iColor);
			}

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `carcolor_2` = %d WHERE `reg_id` = %d", iColor, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		default: return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_ROSSZ_SLOT_0__1"));
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_JARMU_SZINE_ELMENTVE_BESZALLASNAL"));
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHHHA_TOROLNI_AKAROD_AZ_ELMENT"));
	return 1;
}

CMD:disableautocolor(playerid, params[], 0, 0)
{
	new
	    iSlot;
    if(sscanf(params, "D(0)", iSlot)) return SendUsage(playerid, "/disableautocolor <Slot>");

    switch(iSlot)
    {
		case 0:
		{
			if(GetPVarInt(playerid, "FavCarColor_1") == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELMENTVE_SEMILYEN_SZINED"));

			SetPVarInt(playerid, "FavCarColor_1", -1);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `carcolor` = -1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		case 1:
		{
			if(GetPVarInt(playerid, "FavCarColor_2") == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELMENTVE_SEMILYEN_SZINED_1"));

			SetPVarInt(playerid, "FavCarColor_2", -1);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `carcolor_2` = -1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		default: return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_ROSSZ_SLOT_0__1"));
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_ELMENTETT_KOCSI_SZINED_TOROLVE"));
	return 1;
}

CMD:autopaintjob(playerid, params[], 0, 0)
{
	new
	    iPaintjob;
    if(sscanf(params, "d", iPaintjob)) return SendUsage(playerid, "/autopaintjob <Slot>");
	if(!(0 <= iPaintjob <= 3)) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_ROSSZ_PAINTJOB_ID_0__3"));
	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_EZT"));

	SetPVarInt(playerid, "AutoPaintjob", iPaintjob);
	ChangeDynamicVehiclePaintjob(vID, iPaintjob);
	SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_KEDVENC_FESTOMUNKA_LEMENTVE"), iPaintjob);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `paintjob` = %d WHERE `reg_id` = %d", iPaintjob, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}
CMD:autopj(playerid, params[], 0, 0)
{
	return cmd_autopaintjob(playerid, params);
}

CMD:disableautopaintjob(playerid, params[], 0, 0)
{
	DeletePVar(playerid, "AutoPaintjob");
	ChangeDynamicVehiclePaintjob(vID, 4);
	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KEDVENC_FESTOMUNKA_TOROLVE"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `paintjob` = 4 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}
CMD:disableautopj(playerid, params[], 0, 0)
{
	return cmd_disableautopaintjob(playerid, params);
}
CMD:dautopj(playerid, params[], 0, 0)
{
	return cmd_disableautopaintjob(playerid, params);
}

CMD:len(playerid, params[], 0, 0)
{
    if(isnull(params)) return SendUsage(playerid, "/len <Karatkerlánc>");

	SendClientMessagef(playerid, COLOR_LIGHTGREEN, "len: {" #XCOLOR_BLUE3 "}%d", strlen(params));
	return 1;
}

CMD:mysin(playerid, params[], 0, 0)
{
	new
		Float:fMultipier;
    if(sscanf(params, "ff", Angle, fMultipier)) return SendUsage(playerid, "/mysin <Angle> <fMultipier>");

	GetPlayerPos(playerid, X, Y, Z);

	X += (fMultipier * floatsin(-Angle, degrees));
	Y += (fMultipier * floatcos(-Angle, degrees));

	SendClientMessagef(playerid, COLOR_PROPGREEN, "%f, %f", X, Y);
	SimpleTele(playerid, X, Y, Z);
	return 1;
}

CMD:elore(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
		Float:fValue,
		bool:bHighestZ;
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
    if(sscanf(params, "fD(0)", fValue, bHighestZ)) return SendUsage(playerid, "/elore <fValue> <bFindZ = 0>");

    GetXYInFrontOfPlayer(playerid, X, Y, fValue);
	if(bHighestZ)
	{
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
	}
	else
	{
		GetPlayerPos(playerid, Z, Z, Z);
	}
	SendClientMessagef(playerid, COLOR_DEFAULT, "%f, %f, %f", X, Y, Z);

	new
	    bool:bIsOwner = !(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(!bIsOwner)
	{
		if(CheckHQZone(playerid, X, Y)) return 1;
		if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
        if(g_pRobCount{playerid}) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
		if(GetDistance2D(X, Y, goldpot[gLocX], goldpot[gLocY]) < IN_RANGE_DISTANCE && goldpot[gLocX]) return ShowWelcome(playerid, LANG(playerid, "MSG_RARANYTOJASHOZ_NEM_TELEZHETSZW"));

		if(GetDistance2D(X, Y, ZaszloPos[0], ZaszloPos[1]) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RZASZLOHOZ_NEM_TELEZHETSZW"));

		if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RBONUSZAUTOHOZ_NEM_TELEZHETSZW"));
	}

	MoneyCheck(playerid, PRICE_GOTO);
	SimpleTele(playerid, X, Y, Z + 0.5);
	return 1;
}

CMD:forward(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_elore(playerid, params);
}

CMD:oldalra(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
		Float:fValue,
		bool:bHighestZ;
    if(sscanf(params, "fD(0)", fValue, bHighestZ)) return SendUsage(playerid, "/oldalra <fValue> <bFindZ = 0>");
	if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));

	new
		Float:a;
	GetPlayerPos(playerid, X, Y, a);
	if((vID = GetPlayerDynamicVehicleID(playerid))) GetDynamicVehicleZAngle(vID, a);
	else GetPlayerFacingAngle(playerid, a);

	a = Clamp360(a + 90);
	X += (fValue * floatsin(-a, degrees));
	Y += (fValue * floatcos(-a, degrees));

	if(bHighestZ)
	{
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
	}
	else
	{
		GetPlayerPos(playerid, Z, Z, Z);
	}
	SendClientMessagef(playerid, COLOR_DEFAULT, "%f, %f, %f", X, Y, Z);

	new
	    bool:bIsOwner = !(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(!bIsOwner)
	{
		if(CheckHQZone(playerid, X, Y)) return 1;
		if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
        if(g_pRobCount{playerid}) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
		if(GetDistance2D(X, Y, goldpot[gLocX], goldpot[gLocY]) < IN_RANGE_DISTANCE && goldpot[gLocX]) return ShowWelcome(playerid, LANG(playerid, "MSG_RARANYTOJASHOZ_NEM_TELEZHETSZW"));

		if(GetDistance2D(X, Y, ZaszloPos[0], ZaszloPos[1]) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RZASZLOHOZ_NEM_TELEZHETSZW"));

		if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < IN_RANGE_DISTANCE) return ShowWelcome(playerid, LANG(playerid, "MSG_RBONUSZAUTOHOZ_NEM_TELEZHETSZW"));
	}

    MoneyCheck(playerid, PRICE_GOTO);
	SimpleTele(playerid, X, Y, Z + 0.5);
	return 1;
}
CMD:odara(playerid, params[], 0, 0)
{
	return cmd_oldalra(playerid, params);
}

CMD:myhealth(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/myhealth {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	GetPlayerHealth(player1, Health);
	GetPlayerArmour(player1, Armour);

	SendClientMessagef(playerid, COLOR_RED, "Health: %f | {" #XCOLOR_BLUE "}Armour: %f", Health, Armour);
	return 1;
}

CMD:mypos(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mypos {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	GetPlayerPos(player1, X, Y, Z);
	if((vID = GetPlayerDynamicVehicleID(player1)))
	{
		GetDynamicVehicleZAngle(vID, Angle);
		GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	}
	else
	{
		GetPlayerFacingAngle(player1, Angle);
		GetPlayerVelocity(player1, V[0], V[1], V[2]);
	}

	MapAndreas_FindZ_For2DCoord(X, Y, Health);
	SendClientMessagef(playerid, COLOR_RED, "X: {" #XCOLOR_BLUE3 "}%.4f {" #XCOLOR_RED "}Y: {" #XCOLOR_BLUE3 "}%.4f {" #XCOLOR_RED "}Z: {" #XCOLOR_BLUE3 "}%.4f {" #XCOLOR_RED "}A: {" #XCOLOR_BLUE3 "}%.4f ZMap: %.4f", X, Y, Z, Angle, Health);
	SendClientMessagef(playerid, COLOR_GREEN, "Interior: {" #XCOLOR_BLUE3 "}%d {" #XCOLOR_GREEN "}VirtualWorld: {" #XCOLOR_BLUE3 "}%d", GetPlayerInterior(player1), GetPlayerVirtualWorld(player1));
	SendClientMessagef(playerid, COLOR_RED, "VelX: {" #XCOLOR_BLUE3 "}%.4f {" #XCOLOR_RED "}VelY: {" #XCOLOR_BLUE3 "}%.4f {" #XCOLOR_RED "}VelZ: {" #XCOLOR_BLUE3 "}%.4f", V[0], V[1], V[2]);
	return 1;
}

CMD:myspeed(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mypos {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	if((vID = GetPlayerDynamicVehicleID(player1)))
	{
		GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	}
	else
	{
		GetPlayerVelocity(player1, V[0], V[1], V[2]);
	}

	SendClientMessagef(playerid, -1, "MySpeed: %f", VectorSize(V[0], V[1], V[2]));
	return 1;
}

/*
CMD:myvel(playerid, params[], 4, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/myvel {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(vID = GetPlayerDynamicVehicleID(player1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JATEKOS_NINCS_KOCSIBAN"));

    new
		File:bugfile = fopen("NMSS/reports/Camera.log", io_append);

	if(!bugfile) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_JELENLEG_NEM"));

	GetDynamicVehiclePos(vID, X, Y, Z);
	GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	GetDynamicVehicleZAngle(vID, Angle);

	format(tmp, sizeof(tmp), "SetDynamicVehiclePos(g_BonusCarID, %.4f, %.4f, %.4f);\n", X, Y, Z);
	fwrite(bugfile, tmp);
	format(tmp, sizeof(tmp), "SetDynamicVehicleVelocity(g_BonusCarID, %.4f, %.4f, %.4f);\n", V[0], V[1], V[2]);
	fwrite(bugfile, tmp);
	format(tmp, sizeof(tmp), "SetDynamicVehicleZAngle(g_BonusCarID, %.4f);\n\n", Angle);
	fwrite(bugfile, tmp);
	fclose(bugfile);

    AdminCommandLog("MYVEL", playerid, -1);
	return 1;
}
*/
CMD:mycam(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mycam {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	GetPlayerCameraPos(player1, X, Y, Z);
	GetPlayerCameraFrontVector(player1, V[0], V[1], V[2]);

	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_MODE__RATIO__ZOOM_"), GetPlayerCameraMode(player1), GetPlayerCameraAspectRatio(player1), GetPlayerCameraZoom(player1));
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_CAMX_4F_CAMY_4F_CAMZ_4F"), X, Y, Z);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VCAMX_4F_VCAMY_4F_VCAMZ_4F"), V[0], V[1], V[2]);
	return 1;
}

CMD:smycam(playerid, params[], 0, 0)
{
	new
	    Float:fCamPos[3],
	    Float:fCamLookAt[3];
	GetPlayerPos(playerid, X, Y, Z);
	format(i_str, sizeof(i_str), "F(0.0)F(0.0)F(0.0)F(%.4f)F(%.4f)F(%.4f)", X, Y, Z);
	if(sscanf(params, i_str, fCamPos[0], fCamPos[1], fCamPos[2], fCamLookAt[0], fCamLookAt[1], fCamLookAt[2])) return SendUsage(playerid, "/smycam <CamX> <CamY> <CamZ> {" #XCOLOR_YELLOW "}<X =%.4f> <Y =%.4f> <Z =%.4f>", X, Y, Z);

	if(fCamPos[0] == 0.0)
	{
		SetPVarFloat(playerid, "fCamPosX", X);
		SetPVarFloat(playerid, "fCamPosX", Y);
		SetPVarFloat(playerid, "fCamPosX", Z + 10.0);

		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_KAMERANEZETET_AZ_N_ES_AZ"));
	}
	else
	{
		SetPVarFloat(playerid, "fCamPosX", fCamPos[0]);
		SetPVarFloat(playerid, "fCamPosY", fCamPos[1]);
		SetPVarFloat(playerid, "fCamPosZ", fCamPos[2]);

		SetPlayerCameraPos(playerid, fCamPos[0], fCamPos[1], fCamPos[2]);
		SetPlayerCameraLookAt(playerid, fCamLookAt[0], fCamLookAt[1], fCamLookAt[2]);
	}

	SetPVarFloat(playerid, "fCamLookAtX", fCamLookAt[0]);
	SetPVarFloat(playerid, "fCamLookAtY", fCamLookAt[1]);
	SetPVarFloat(playerid, "fCamLookAtZ", fCamLookAt[2]);
	return 1;
}

CMD:interpolate(playerid, params[], 0, 0)
{
	new
	    Float:fCamPos[3],
	    Float:fCamLookAt[3];
	GetPlayerPos(playerid, X, Y, Z);
	format(i_str, sizeof(i_str), "ddF(0.0)F(0.0)F(0.0)F(%.4f)F(%.4f)F(%.4f)", X, Y, Z);
	if(sscanf(params, i_str, datez, vID, fCamPos[0], fCamPos[1], fCamPos[2], fCamLookAt[0], fCamLookAt[1], fCamLookAt[2])) return SendUsage(playerid, "/smycam <time ms> <mode 1/2> <CamX> <CamY> <CamZ> {" #XCOLOR_YELLOW "}<X =%.4f> <Y =%.4f> <Z =%.4f>", X, Y, Z);

	InterpolateCameraPos(playerid, X, Y, Z, fCamPos[0], fCamPos[1], fCamPos[2], datez, vID);
	InterpolateCameraLookAt(playerid, X, Y, Z, fCamLookAt[0], fCamLookAt[1], fCamLookAt[2], datez, vID);
	return 1;
}

CMD:rcam(playerid, params[], 0, 0)
{
	SetCameraBehindPlayer(playerid);

	if(GetPVarType(playerid, "fCamPosX"))
	{
		DeletePVar(playerid, "fCamPosX");
		DeletePVar(playerid, "fCamPosY");
		DeletePVar(playerid, "fCamPosZ");

		DeletePVar(playerid, "fCamLookAtX");
		DeletePVar(playerid, "fCamLookAtY");
		DeletePVar(playerid, "fCamLookAtZ");
	}
	return 1;
}

CMD:savecam(playerid, params[], 0, 0)
{
	if(sscanf(params, "s[128]", i_str)) return SendUsage(playerid, "/savecam <Név>");
	if(strlen(i_str) >= 32) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_NEV_MAXIMUM"));

	GetPlayerCameraPos(playerid, X, Y, Z);
	GetPlayerPos(playerid, V[0], V[1], V[2]);

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `cameras` WHERE name = '%e'", i_str);
    mysql_function_query(1, query, false, "THREAD_SaveCam", "dsffffffdd", playerid, i_str, X, Y, Z, V[0], V[1], V[2], GetPlayerInterior(playerid), g_pQueryQueue[playerid]);
    return 1;
}

forward THREAD_SaveCam(playerid, camname[], camx, camy, camz, lookatx, lookaty, lookatz, interior, queue);
public THREAD_SaveCam(playerid, camname[], camx, camy, camz, lookatx, lookaty, lookatz, interior, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveCam);

	if(cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_VAN_EGY__NEVU_KAMERA"), camname);
		return 1;
	}

	mysql_format(1, query, sizeof(query), "INSERT INTO `cameras`(`id`, `reg_id`, `creator`, `name`, `pos_x`, `pos_y`, `pos_z`, `lookat_x`, `lookat_y`, `lookat_z`, `interior`, `time`) VALUES (0, %d, '%s', '%e', %f, %f, %F, %f, %f, %f, %d, %d)", PlayerInfo[playerid][pRegID], pName(playerid), i_str, camx, camy, camz, lookatx, lookaty, lookatz, interior, CurrentTimestamp());
    mysql_function_query(1, query, false, "THREAD_SaveCam2", "dsffffffdd", playerid, i_str, X, Y, Z, V[0], V[1], V[2], GetPlayerInterior(playerid), g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SaveCam2(playerid, camname[], camx, camy, camz, lookatx, lookaty, lookatz, interior, queue);
public THREAD_SaveCam2(playerid, camname[], camx, camy, camz, lookatx, lookaty, lookatz, interior, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveCam2);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__JELENLEGI_KAMERA_ALLASOD_ELMENTVE"), camname, cache_insert_id());
	return 1;
}

CMD:loadcam(playerid, params[], 0, 0)
{
	new
	    id;
	if(sscanf(params, "d", id)) return SendUsage(playerid, "/loadcam <ID>");

	mysql_format(1, query, sizeof(query), "SELECT * FROM `cameras` WHERE `id` = %d", id);
    mysql_function_query(1, query, false, "THREAD_LoadCam", "dd", playerid, g_pQueryQueue[playerid]);
    return 1;
}

forward THREAD_LoadCam(playerid, queue);
public THREAD_LoadCam(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadCam);

	if(!cache_get_row_count())
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ILYEN_IDVEL_MENTETT"));
		return 1;
	}
/*
	new
	    id;
	cache_get_row_int(0, 0, id);
*/
	cache_get_row(0, 2, name);
	cache_get_row(0, 3, country);

	cache_get_row_float(0, 4, X);
	cache_get_row_float(0, 5, Y);
	cache_get_row_float(0, 6, Z);
	cache_get_row_float(0, 7, V[0]);
	cache_get_row_float(0, 8, V[1]);
	cache_get_row_float(0, 9, V[2]);
	cache_get_row_int(0, 10, vID);
	cache_get_row_int(0, 11, datez);

	SetPlayerCameraPos(playerid, X, Y, Z);
	SetPlayerCameraLookAt(playerid, V[0], V[1], V[2]);

	date(datez, day, month, year, hour, minute, second);
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG___NEVU_KAMERA_POZICIO_MENTES"), country, name, year, month, day, hour, minute, second);
	return 1;
}

CMD:noclip(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(g_pNoClipObject[playerid] == INVALID_OBJECT_ID)
	{
        RemovePlayerFromVehicleEx(playerid);

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);
		SetPVarFloat(playerid, "NoClipX", X);
		SetPVarFloat(playerid, "NoClipY", Y);
		SetPVarFloat(playerid, "NoClipZ", Z);
		SetPVarFloat(playerid, "NoClipA", Angle);

	    g_pNoClipObject[playerid] = CreatePlayerObject(playerid, 18641, X, Y, Z, 0.0, 0.0, 0.0);
		AttachCameraToPlayerObject(playerid, g_pNoClipObject[playerid]);

		SendClientMessage(playerid, COLOR_GREEN3, LANG(playerid, "MSG_SZABAD_KAMERA_MOD_BEKAPCSOLVA"));
	}
	else
	{
	    DestroyPlayerObject(playerid, g_pNoClipObject[playerid]);
	    g_pNoClipObject[playerid] = INVALID_OBJECT_ID;

        PlayerTele(playerid, GetPVarFloat(playerid, "NoClipX"), GetPVarFloat(playerid, "NoClipY"), GetPVarFloat(playerid, "NoClipZ"), GetPlayerInterior(playerid), GetPVarFloat(playerid, "NoClipA"), GetPlayerVirtualWorld(playerid));

		DeletePVar(playerid, "NoClipX");
		DeletePVar(playerid, "NoClipY");
		DeletePVar(playerid, "NoClipZ");
		DeletePVar(playerid, "NoClipA");

		SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_SZABAD_KAMERA_MOD_KIKAPCSOLVA"));
	}
	return 1;
}
CMD:freecam(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_noclip(playerid, params);
}

CMD:anim(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/anim {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		aIndex = GetPlayerAnimationIndex(player1);
	if(aIndex)
	{
		GetAnimationName(aIndex, i_str, 32, country, 32);
	}
	else
	{
        i_str[0] = EOS;
        country[0] = EOS;
	}
	SendClientMessagef(playerid, COLOR_WHITE, "AnimID: %d, Lib/Name: %s {" #XCOLOR_RED "}%s", aIndex, i_str, country);
	return 1;
}

CMD:rtime(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, COLOR_RED, "RaceTime: %d, RaceCount: %d, gTotalRaces: %d, FalloutPlayers: %d, AFK: %d", VersenyIdo, VersenyCount, Itter_Count(races), FalloutPlayers, PlayerInfo[playerid][pAFKTime]);
	return 1;
}

CMD:myclothes(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, COLOR_RED, "StyleTick: %d | GlassesCount: %d | WatchesCount: %d | WeaponsCount: %d | OthersCount: %d | P_HatsCount: %d",
	    PlayerInfo[playerid][P_StyleTick], PlayerInfo[playerid][P_GlassesCount], PlayerInfo[playerid][P_WatchesCount],
	    PlayerInfo[playerid][P_WeaponsCount], PlayerInfo[playerid][P_OthersCount], PlayerInfo[playerid][P_HatsCount]);
	return 1;
}

CMD:chatcolor(playerid, params[], 0, 0)
{
	new
	    Color;
    if(sscanf(params, "n", Color)) return SendUsage(playerid, "/chatcolor <Hexadecimális Színkód> | {" #XCOLOR_WHITE "}Játékos színének megtenkintése: /mycolor <Játékos ID/Név>");
    
    
    new r, g, b, a;
    rgba2hex(Color,r,g,b,a);
    if(r < 40 && g < 40 && b < 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));
    
    
    
    
//	if(IsBlack(Color)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));

	SetPVarInt(playerid, "ChatColor", Color);
	SendClientMessage(playerid, Color, LANG(playerid, "MSG__UZENETED_SZINE_MEGVALTOZATVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `chatcolor` = %d WHERE `reg_id` = %d", Color, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:removechatcolor(playerid, params[], 0, 0)
{
	SetPVarInt(playerid, "ChatColor", COLOR_WHITE);
	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__UZENETED_SZINE_VISSZAALLITVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `chatcolor` = %d WHERE `reg_id` = %d", COLOR_WHITE, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:idcolor(playerid, params[], 0, 0)
{
	new
	    Color;
    if(sscanf(params, "n", Color)) return SendUsage(playerid, "/idcolor <Hexadecimális Színkód> | {" #XCOLOR_WHITE "}Játékos színének megtenkintése: /mycolor <Játékos ID/Név>");
    
    
    new r, g, b, a;
    rgba2hex(Color,r,g,b,a);
    if(r < 40 && g < 40 && b < 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));
    
    
    
    
//	if(IsBlack(Color)) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));

	SetPVarInt(playerid, "IDColor", Color);
	SendClientMessage(playerid, Color, LANG(playerid, "MSG__UZENETED_ID_SZINE_MEGVALTOZATVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `idcolor` = %d WHERE `reg_id` = %d", Color, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:removeidcolor(playerid, params[], 0, 0)
{
	DeletePVar(playerid, "IDColor");
	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__UZENETED_ID_SZINE_TOROLVE"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `idcolor` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:viptext(playerid, params[], 0, 0)
{
    if(!g_pVIP[playerid]) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_NEM_VAGY_VIP"));
    g_PlayerFlags2[playerid] ^= e_VIP_TEXT;
	if(g_PlayerFlags2[playerid] & e_VIP_TEXT) //Be
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_FPSMOD_BE"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FPSMOD_KI"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:vipcolor(playerid, params[], 0, 0)
{
	new
	    Color;
 	if(!g_pVIP[playerid]) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_NEM_VAGY_VIP"));
    if(sscanf(params, "n", Color)) return SendUsage(playerid, "/vipcolor <Hexadecimális Színkód> | {" #XCOLOR_WHITE "}Játékos színének megtenkintése: /mycolor <Játékos ID/Név>");
    
    new r, g, b, a;
    rgba2hex(Color,r,g,b,a);
    if(r < 40 && g < 40 && b < 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));
    
    
    
//	if(IsBlack(Color)) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));

	SetPVarInt(playerid, "VIPColor", Color);
	SendClientMessage(playerid, Color, LANG(playerid, "MSG__VIP_UTENET_MEGVALTOZTATVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vipcolor` = %d WHERE `reg_id` = %d", Color, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:removevipcolor(playerid, params[], 0, 0)
{
    if(!g_pVIP[playerid]) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_NEM_VAGY_VIP"));
	DeletePVar(playerid, "VIPColor");
	//SetPVarInt(playerid, "VIPColor", -1);
	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG__VIP_UTENET_SZINE_TOROLVE"));
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vipcolor` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:mycolor(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mycolor {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    if(GetPVarInt(playerid,"Level") < 1 && PlayerInfo[player1][pRegID] == 3) return SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_NEM__1"));

    new
        iPlayerColor = GetPlayerColor(player1),
        iChatColor = GetPVarInt(player1, "ChatColor");

	SendClientMessagef(playerid, COLOR_RED, "Name Color:{%06x} 0x%x {" #XCOLOR_RED "}| {%06x} %d", iPlayerColor >>> 8, iPlayerColor, iPlayerColor >>> 8, iPlayerColor);
	if(iChatColor != COLOR_WHITE)
	{
		SendClientMessagef(playerid, COLOR_RED, "Chat Color:{%06x} 0x%x {" #XCOLOR_RED "}| {%06x} %d", iChatColor >>> 8, iChatColor, iChatColor >>> 8, iChatColor);
	}
	if(GetPVarType(player1, "IDColor"))
	{
		new
		    iIDColor = GetPVarInt(player1, "IDColor");
		SendClientMessagef(playerid, COLOR_RED, "ID Color:{%06x} 0x%x {" #XCOLOR_RED "}| {%06x} %d", iIDColor >>> 8, iIDColor, iIDColor >>> 8, iIDColor);
	}
	if(GetPVarType(player1, "VIPColor") && g_pVIP[player1])
	{
		new
		    iVIPColor = GetPVarInt(player1, "VIPColor");
		SendClientMessagef(playerid, COLOR_RED, "VIP Color:{%06x} 0x%x {" #XCOLOR_RED "}| {%06x} %d", iVIPColor >>> 8, iVIPColor, iVIPColor >>> 8, iVIPColor);
	}
	return 1;
}

CMD:tohex(playerid, params[], 0, 0)
{
    if(sscanf(params, "n", datez)) return SendUsage(playerid, "/tohex <Szám>");

    SendClientMessagef(playerid, COLOR_BLUE, "%d {" #XCOLOR_WHITE "}-> {" #XCOLOR_SAMP "}0x%x - {" #XCOLOR_GREEN2 "}0b%b", datez, datez, datez);
	return 1;
}

CMD:inwater(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mycolor {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_RED, "In Water: %d", IsPlayerInWater(player1));
	return 1;
}

CMD:mysurf(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mycolor {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_RED, "VehicleID: %d | ObjectID: %d", GetPlayerSurfingDynamicVehID(player1), GetPlayerSurfingObjectID(player1));
	return 1;
}

CMD:myammo(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, COLOR_RED, "Ammo: %d", GetPlayerAmmo(playerid));
	return 1;
}

CMD:mystate(playerid, params[], 0, 0)
{
	new
	    pState = GetPlayerState(playerid);
    switch(pState)
	{
		case 0: i_str = "PLAYER_STATE_NONE";
		case 1: i_str = "PLAYER_STATE_ONFOOT";
		case 2: i_str = "PLAYER_STATE_DRIVER";
		case 3: i_str = "PLAYER_STATE_PASSENGER";
		case 4: i_str = "PLAYER_STATE_EXIT_VEHICLE";
		case 5: i_str = "PLAYER_STATE_ENTER_VEHICLE_DRIVER";
		case 6: i_str = "PLAYER_STATE_ENTER_VEHICLE_PASSENGER";
		case 7: i_str = "PLAYER_STATE_WASTED";
		case 8: i_str = "PLAYER_STATE_SPAWNED";
		case 9: i_str = "PLAYER_STATE_SPECTATING";
	}
	SendClientMessagef(playerid, COLOR_RED, "State_%d: {" #XCOLOR_WHITE "}%s", pState, i_str);
	return 1;
}

CMD:wslot(playerid, params[], 0, 0)
{
	SendClientMessagef(playerid, COLOR_RED, "Slot: %d, Team: %d", GetWeaponSlot(GetPlayerWeapon(playerid)), GetPlayerTeam(playerid));
	return 1;
}

CMD:myskill(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/mycolor {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	for(new i; i != 11; i++)
	{
		SendClientMessagef(playerid, COLOR_RED, "Skill_%d: %d", i, g_pWeaponSkill[player1]);
	}
	return 1;
}

CMD:dmkills(playerid, params[], 0, 0)
{
	dline[0] = EOS;
	foreach(DeathMatches, dmid)
	{
		if(!(g_DMFlags[dmid] & e_COMPLETED)) continue;
		format(i_str, sizeof(i_str), "%d. %s\n", dmid, g_szDMName[dmid]);
		strcat(dline, i_str);
	}

    ShowPlayerDialogEx(playerid, DIALOG_DMKILLS, DIALOG_STYLE_LIST, "Válassz DM-et..", dline, "Ok");
    SetPVarInt(playerid, "TopNoBack", 1);
	return 1;
}

CMD:dmdeaths(playerid, params[], 0, 0)
{
	dline[0] = EOS;
	foreach(DeathMatches, dmid)
	{
		if(!(g_DMFlags[dmid] & e_COMPLETED)) continue;
		format(i_str, sizeof(i_str), "%d. %s\n", dmid, g_szDMName[dmid]);
		strcat(dline, i_str);
	}

    ShowPlayerDialogEx(playerid, DIALOG_DMKILLS + 1, DIALOG_STYLE_LIST, "Válassz DM-et..", dline, "Ok");
    SetPVarInt(playerid, "TopNoBack", 1);
	return 1;
}

CMD:killswith(playerid, params[], 0, 0)
{
    dline[0] = EOS;
	for(new i; i != sizeof(WeaponList_MySQL); i++)
	{
		if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN "}");
		else strcat(dline, "{" #XCOLOR_ORANGE "}");

		strunpack(name, WeaponList_MySQL[i][e_WeaponName], 20);
		strcat(dline, name);
	    strcat(dline, "\n");
	}
    ShowPlayerDialogEx(playerid, DIALOG_DMKILLS + 3, DIALOG_STYLE_LIST, !"Válassz fegyvert..", dline, !"Ok");
    SetPVarInt(playerid, "TopNoBack", 1);
	return 1;
}

CMD:deathswith(playerid, params[], 0, 0)
{
    dline[0] = EOS;
	for(new i; i != sizeof(WeaponList_MySQL); i++)
	{
		if(IsEven(i)) strcat(dline, "{" #XCOLOR_GREEN "}");
		else strcat(dline, "{" #XCOLOR_ORANGE"}");

		strunpack(name, WeaponList_MySQL[i][e_WeaponName], 20);
		strcat(dline, name);
	    strcat(dline, "\n");
	}
    ShowPlayerDialogEx(playerid, DIALOG_DMKILLS + 2, DIALOG_STYLE_LIST, !"Válassz fegyvert..", dline, !"Ok");
    SetPVarInt(playerid, "TopNoBack", 1);
	return 1;
}

CMD:quat(playerid, params[], 0, 0)
{
	if(isnull(params)) vID = GetPlayerDynamicVehicleID(playerid);
	else if(sscanf(params, "d", vID)) return SendUsage(playerid, "/quat {" #XCOLOR_YELLOW "}<vID>");

	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));

	new
		Float:A;

    GetDynamicVehicleRotationQuat(vID, V[0], X, Y, Z);
    GetDynamicVehicleVelocity(vID, V[1], V[2], Angle);
    GetVehicleRotation(vID, Health, Armour, A);

	SendClientMessagef(playerid, COLOR_RED, "W: %.4f X: %.4f Y: %.4f: Z: %.4f", V[0], X, Y, Z);
	SendClientMessagef(playerid, COLOR_RED, "X: %.4f Y: %.4f: Z: %.4f", V[1], V[2], Angle);
	SendClientMessagef(playerid, COLOR_RED, "NormX: %.4f NormY: %.4f: NormZ: %.4f", Health, Armour, A);
	return 1;
}

CMD:vid(playerid, params[], 0, 0)
{
	if(isnull(params)) vID = GetPlayerDynamicVehicleID(playerid);
	else if(sscanf(params, "d", vID)) return SendUsage(playerid, "/vID {" #XCOLOR_YELLOW "}<vID>");

	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));

	GetDynamicVehicleHealth(vID, Health);
	GetDynamicVehiclePos(vID, X, Y, Z);
	GetDynamicVehicleZAngle(vID, Angle);

	static const // maxspeed
	    Float:g_fMaxVehicleSpeed[212] =
	    {
	        160.00, 160.00, 200.00, 120.00, 150.00, 165.00, 110.00, 170.00, 110.00, 180.00, 160.00,
	        240.00, 160.00, 160.00, 140.00, 230.00, 155.00, 200.00, 150.00, 160.00, 180.00, 180.00,
	        165.00, 145.00, 170.00, 200.00, 200.00, 170.00, 170.00, 200.00, 190.00, 130.00, 80.000,
	        180.00, 200.00, 120.00, 160.00, 160.00, 160.00, 160.00, 160.00, 75.000, 150.00, 150.00,
	        110.00, 165.00, 190.00, 200.00, 190.00, 150.00, 120.00, 240.00, 190.00, 190.00, 190.00,
	        140.00, 160.00, 160.00, 165.00, 160.00, 200.00, 190.00, 260.00, 190.00, 75.000, 75.000,
	        160.00, 160.00, 190.00, 200.00, 170.00, 160.00, 190.00, 190.00, 160.00, 160.00, 200.00,
	        200.00, 150.00, 165.00, 200.00, 120.00, 150.00, 120.00, 190.00, 160.00, 100.00, 200.00,
	        200.00, 170.00, 170.00, 160.00, 160.00, 190.00, 220.00, 170.00, 200.00, 200.00, 140.00,
	        140.00, 160.00, 75.000, 260.00, 260.00, 160.00, 260.00, 230.00, 165.00, 140.00, 120.00,
	        140.00, 200.00, 200.00, 200.00, 120.00, 120.00, 165.00, 165.00, 160.00, 340.00, 340.00,
	        190.00, 190.00, 190.00, 110.00, 160.00, 160.00, 160.00, 170.00, 160.00, 60.000, 70.000,
	        140.00, 200.00, 160.00, 160.00, 160.00, 110.00, 110.00, 150.00, 160.00, 230.00, 160.00,
	        165.00, 260.00, 160.00, 160.00, 160.00, 200.00, 160.00, 160.00, 165.00, 160.00, 200.00,
	        170.00, 180.00, 110.00, 110.00, 200.00, 200.00, 200.00, 200.00, 200.00, 200.00, 75.000,
	        200.00, 160.00, 160.00, 170.00, 110.00, 110.00, 90.000, 60.000, 110.00, 60.000, 160.00,
	        160.00, 200.00, 110.00, 160.00, 165.00, 190.00, 160.00, 170.00, 120.00, 165.00, 260.00,
	        200.00, 140.00, 200.00, 260.00, 120.00, 200.00, 200.00, 60.000, 190.00, 200.00, 200.00,
	        200.00, 160.00, 165.00, 110.00, 200.00, 200.00, 260.00, 260.00, 160.00, 160.00, 160.00,
	        140.00, 160.00, 260.00
	    };

	new
	    iModel = GetDynamicVehicleModel(vID);
	SendClientMessagef(playerid, COLOR_RED, "vID: %d, Model: %d ( %s ), IsValid: %d, Occupied: %d, MaxPassenger: %d, YourSeat: %d, IsLicense: %d, MaxSpeed: %.2f", vID, iModel, VehName(vID), IsValidDynamicVehicle(vID), IsDynamicVehicleOccupied(vID), GetMaxPassengers(GetDynamicVehicleModel(vID)), GetPlayerVehicleSeat(playerid), IsLicensePlate(vID), g_fMaxVehicleSpeed[iModel - 400]);
	SendClientMessagef(playerid, COLOR_RED, "StreamedIn: %d, Trailer: %d (attached: %d), Health: %.4f, X: %.4f, Y: %.4f, Z: %.4f, A: %.4f, World: %d, Int: %d", IsDynamicVehicleStreamedIn(vID, playerid), GetDynamicVehicleTrailer(vID), IsTrailerAttachedToDynamicVeh(vID), Health, X, Y, Z, Angle, GetDynamicVehicleVirtualWorld(vID), GetDynamicVehicleInterior(vID));

	dline[0] = EOS;
	for(new i; i != 15; i++)
	{
		if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

		if(!i)
		{
			format(dline, 144, "%d: %d", i, gVehicleObject[vID][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, gVehicleObject[vID][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);

    dline[0] = EOS;
	for(new i = 15; i != MAX_VEH_OBJECT; i++)
	{
		if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

		if(i == 15)
		{
			format(dline, 144, "%d: %d", i, gVehicleObject[vID][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, gVehicleObject[vID][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);

    dline[0] = EOS;
	for(new i = 30; i != MAX_VEH_OBJECT; i++)
	{
		if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

		if(i == 30)
		{
			format(dline, 144, "%d: %d", i, gVehicleObject[vID][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, gVehicleObject[vID][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);

    dline[0] = EOS;
	for(new i = 45; i != MAX_VEH_OBJECT; i++)
	{
		if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

		if(i == 15)
		{
			format(dline, 144, "%d: %d", i, gVehicleObject[vID][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, gVehicleObject[vID][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);

    dline[0] = EOS;
	for(new i = 60; i != MAX_VEH_OBJECT; i++)
	{
		if(gVehicleObject[vID][i] == INVALID_OBJECT_ID) continue;

		if(i == 15)
		{
			format(dline, 144, "%d: %d", i, gVehicleObject[vID][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, gVehicleObject[vID][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);
	return 1;
}

CMD:vflags(playerid, params[], 0, 0)
{
	if(isnull(params)) vID = GetPlayerDynamicVehicleID(playerid);
	else if(sscanf(params, "d", vID)) return SendUsage(playerid, "/vID {" #XCOLOR_YELLOW "}<vID>");

	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));

	new color1, color2, flags;
	GetDynamicVehicleColor(vID, color1, color2);
	flags = GetVehicleFlags(vID);

	SendClientMessagef(playerid, COLOR_WHITE, "color1 = %d, color2 = %d, paintjob = %d, interior = %d, rcolor: %d, %d, bonnet: %d, boot: %d, stereo: %d, notele: %d", color1, color2, GetDynamicVehiclePaintjob(vID),
		0, !!(flags & e_NO_RAND_COLOR_1), !!(flags & e_NO_RAND_COLOR_2), !!(flags & e_BONNET_STATUS), !!(flags & e_BOOT_STATUS), !!(flags & e_STEREO_STATUS), !!(flags & e_NO_TELE), !!(flags & e_RESPAWNED));
	if(params[0]) SendClientMessagef(playerid, COLOR_DEFAULT, "%b", GetVehicleFlags(vID));
	return 1;
}

CMD:teststreamer(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/teststreamer {" #XCOLOR_YELLOW "}<Object ID>");

	vID = Streamer_GetIntData(STREAMER_TYPE_OBJECT, datez, E_STREAMER_ATTACHED_VEHICLE);
	player1 = Streamer_GetIntData(STREAMER_TYPE_OBJECT, datez, E_STREAMER_PLAYER_ID);

    SendClientMessagef(playerid, COLOR_RED, "%d %d", vID, player1);
    return 1;
}

CMD:damagestatus(playerid, params[], 0, 0)
{
	if(isnull(params)) vID = GetPlayerDynamicVehicleID(playerid);
	else if(sscanf(params, "d", vID)) return SendUsage(playerid, "/damagestatus {" #XCOLOR_YELLOW "}<vID>");

	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));

    GetDynamicVehicleDamageStatus(vID, panels, doors, lights, tires);
	SendClientMessagef(playerid, COLOR_RED, "panels: %d | %b, doors: %d | %b, lights: %d | %b, tires: %d | %b", panels, panels, doors, doors, lights, lights, tires, tires);
	return 1;
}

CMD:updatedamage(playerid, params[], 0, 0)
{
	if(sscanf(params, "bbbbD(-1)", panels, doors, lights, tires, vID)) return SendUsage(playerid, "/updatedamage <panels> <doors> <lights> <tires> {" #XCOLOR_YELLOW "}<vID>");
	if(vID == -1) vID = GetPlayerDynamicVehicleID(playerid);
	if(g_BonusCarID == vID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BONUSZAUTONAK_A_SERULESET"));

    if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));

    UpdateDynamicVehDamageStatus(vID, panels, doors, lights, tires);
	SendClientMessagef(playerid, COLOR_RED, "panels: %d | %b, doors: %d | %b, lights: %d | %b, tires: %d | %b", panels, panels, doors, doors, lights, lights, tires, tires);
	return 1;
}
CMD:updamage(playerid, params[], 0, 0)
{
	return cmd_updatedamage(playerid, params);
}

CMD:keychange(playerid, params[], 0, 0)
{
	format(tmp, 512,"{" #XCOLOR_BLUE "}SpeedBoost\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_BLUE "}VehicleJump\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_BLUE "}Flip\t\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_BLUE "}Teleport\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_BLUE "}CarFly\t\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_BLUE "}Fly\t\t\t{" #XCOLOR_YELLOW "}Jelenleg: {" #XCOLOR_GREEN "}%d\n{" #XCOLOR_ORANGE "}Alap beállítások",

    GetPVarInt(playerid, "SpeedBoostKey"),GetPVarInt(playerid, "VehicleHoppingKey"),GetPVarInt(playerid, "FlipKey"),GetPVarInt(playerid, "TeleportMenuKey"),GetPVarInt(playerid, "CarFlyKey"),GetPVarInt(playerid, "FlyKey"));
    ShowPlayerDialogEx(playerid, DIALOG_KEYCHANGE, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Gombok átálítása", tmp, "Ok", "Mégse");
	return 1;
}
CMD:vkey(playerid, params[], 0, 0)
{
	return cmd_keychange(playerid, params);
}

CMD:flag(playerid, params[], 0, 0)
{
	if(ZaszloOwner != INVALID_PLAYER_ID)
	{
		if(ZaszloOwner == playerid)
		{
			SendClientMessagef(playerid, 0x132CD5AA, LANG(playerid, "MSG__FLAG__A_ZASZLO__KOZELEBEN"), GetClosestZaszloPos(), ZaszloCount);
		}
		else
		{
			SendClientMessagef(playerid, 0x132CD5AA, LANG(playerid, "MSG__FLAG__A_ZASZLO__KOZELEBEN_1"), GetClosestZaszloPos(), GetPlayerColor(ZaszloOwner) >>> 8, pName(ZaszloOwner), ZaszloOwner);
			SendClientMessagef(playerid, 0x132CD5AA, LANG(playerid, "MSG__FLAG___MASODPERCE_TOLED_2F"), ZaszloCount, GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]));
			InitFlagDistance(playerid);
		}
	}
	else
	{
		SendClientMessagef(playerid, 0x132CD5AA, LANG(playerid, "MSG__FLAG__A_ZASZLO__KOZELEBEN_2"), GetClosestZaszloPos(), ZaszloRespawn, GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]));
        InitFlagDistance(playerid);
	}
	return 1;
}

CMD:bonuscar(playerid, params[], 0, 0)
{
    GetDynamicVehiclePos(g_BonusCarID, X, Y, Z);
    format(i_str, 128, "%s", GetZoneName(X, Y, Z));
	if(g_BonusCarOwner != INVALID_PLAYER_ID)
	{
		if(g_BonusCarOwner == playerid)
		{
			SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__BONUSZAUTO__A_BONUSZAUTO_"), i_str, GetClosestBonusCarPos(), g_BonusCarCount);
		}
		else
		{
			SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__BONUSZAUTO___A_BONUSZAUTO"), i_str, GetClosestBonusCarPos(), pName(g_BonusCarOwner), g_BonusCarOwner);
			InitBonusCarDistance(playerid);
		}
	}
	else
	{
		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG__BONUSZAUTO__A_BONUSZAUTO__1"), i_str, GetClosestBonusCarPos(), g_BonusCarCount, BonusCarDistance(playerid));
        InitBonusCarDistance(playerid);
	}
	return 1;
}

stock InitBonusCarDistance(playerid)
{
	new
	    Float:bCarPos[3],
	    Float:pPos[3],
		objectid;
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	GetDynamicVehiclePos(g_BonusCarID, bCarPos[0], bCarPos[1], bCarPos[2]);

	if(GetPVarType(playerid, "BCarTimer"))
	{
        KillTimer(GetPVarInt(playerid, "BCarTimer"));
		objectid = GetPVarInt(playerid, "BCarObject");
		DestroyPlayerObject(playerid, objectid);
		DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "BCarText3D"));
		DeletePVar(playerid, "BCarTimer");
		DeletePVar(playerid, "BCarText3D");
	}
    objectid = CreatePlayerObject(playerid, 1318, pPos[0], pPos[1], pPos[2], 0.0, 90.0, GetPointAngleToPoint(bCarPos[0], bCarPos[1], pPos[0], pPos[1]) - 270.0);

	SetPVarInt(playerid, "BCarTimer", SetTimerEx("DestroyBCarObject", 2500, false, "d", playerid));
	SetPVarInt(playerid, "BCarObject", objectid);

	format(i_str, sizeof(i_str), "A nyíl felé!\n{" #XCOLOR_SAMP "}%0.2f {" #XCOLOR_YELLOW "}méter!", BonusCarDistance(playerid));
	SetPVarInt(playerid, "BCarText3D", _:CreatePlayer3DTextLabel(playerid, i_str, COLOR_YELLOW, pPos[0], pPos[1], pPos[2]));
}

forward DestroyBCarObject(playerid);
public DestroyBCarObject(playerid)
{
    // printf("DestroyBCarObject(playerid = %d)", playerid);
    new
		objectid = GetPVarInt(playerid, "BCarObject");
	DestroyPlayerObject(playerid, objectid);
	DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "BCarText3D"));
	DeletePVar(playerid, "BCarTimer");
	DeletePVar(playerid, "BCarText3D");
	DeletePVar(playerid, "BCarObject");
}

////////////////////////////////////////////////////////////
stock InitFlagDistance(playerid)
{
	new
	    Float:pPos[3],
		objectid;
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

	if(GetPVarType(playerid, "FlagTimer"))
	{
        KillTimer(GetPVarInt(playerid, "FlagTimer"));
		objectid = GetPVarInt(playerid, "FlagObject");
		DestroyPlayerObject(playerid, objectid);
		DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "FlagText3D"));
		DeletePVar(playerid, "FlagTimer");
		DeletePVar(playerid, "FlagObject");
	}
    objectid = CreatePlayerObject(playerid, 1318, pPos[0], pPos[1], pPos[2], 0.0, 90.0, GetPointAngleToPoint(ZaszloPos[0], ZaszloPos[1], pPos[0], pPos[1]) - 270.0);

	SetPVarInt(playerid, "FlagTimer", SetTimerEx("DestroFlagObject", 2500, false, "d", playerid));
	SetPVarInt(playerid, "FlagObject", objectid);

	format(i_str, sizeof(i_str), "A nyíl felé!\n{" #XCOLOR_SAMP "}%0.2f {" #XCOLOR_YELLOW "}méter!", GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]));
	SetPVarInt(playerid, "FlagText3D", _:CreatePlayer3DTextLabel(playerid, i_str, COLOR_YELLOW, pPos[0], pPos[1], pPos[2]));
}

forward DestroFlagObject(playerid);
public DestroFlagObject(playerid)
{
    // printf("DestroFlagObject(playerid = %d)", playerid);
    new
		objectid = GetPVarInt(playerid, "FlagObject");
	DestroyPlayerObject(playerid, objectid);
	DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "FlagText3D"));
	DeletePVar(playerid, "FlagTimer");
	DeletePVar(playerid, "FlagText3D");
	DeletePVar(playerid, "FlagObject");
}

CMD:locate(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_LOCATE);

	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/locate <Játékos ID/Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    //if(player1 == playerid) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ELEG_ERDEKES_LEHET_SAJAT"));
	if(!(g_PlayerFlags[player1] & e_LOCATE) && GetPVarInt(playerid, "Level") < 2 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_LETILTOTTA"));

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerPos(player1, V[0], V[1], V[2]);

	new
	    objectid,
	    Float:Distance = GetPlayerDistanceFromPoint(playerid, V[0], V[1], V[2]);
	if(GetPVarType(playerid, "LocateTimer"))
	{
        KillTimer(GetPVarInt(playerid, "LocateTimer"));
		objectid = GetPVarInt(playerid, "LocateObject");
		DestroyPlayerObject(playerid, objectid);
		DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "LocateText3D"));
		DeletePVar(playerid, "LocateTimer");
		DeletePVar(playerid, "LocateText3D");
	}
    objectid = CreatePlayerObject(playerid, 1318, X, Y, Z, 0.0, 90.0, GetPointAngleToPoint(V[0], V[1], X, Y) - 270.0);

	SetPVarInt(playerid, "LocateTimer", SetTimerEx("DestroyLocateObject", 2500, false, "d", playerid));
	SetPVarInt(playerid, "LocateObject", objectid);

	format(i_str, sizeof(i_str), "A nyíl felé!\n{" #XCOLOR_SAMP "}%0.2f {" #XCOLOR_YELLOW "}méter!", Distance);
	SetPVarInt(playerid, "LocateText3D", _:CreatePlayer3DTextLabel(playerid, i_str, COLOR_YELLOW, X, Y, Z));
	
    new
		x,
		Float:dis = FLOAT_INFINITY,
		Float:dis2;
  	foreach(Teleports, i)
	{
		dis2 = GetDistance3D(V[0], V[1], V[2], g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2]);
        if(dis2 < dis)
        {
            dis = dis2;
            x = i;
        }
    }

    static
		szSpeed[128];
	    					
	GetPlayer2DZone(player1, szSpeed, sizeof(szSpeed));
	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_TAVOLSAG__NEVU_JATEKOSHOZ_2F"), GetPlayerColor(player1) >>> 8, pName(player1), player1, Distance);
	
	if(g_pDeathMatchID[player1] == -1)
	{
	    SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_LEGKOZELEBBI_TELEPORT_"), g_szTeleportName[x], g_szTeleportCommand[x], szSpeed);
	}
	else
	{
	    SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_LEGKOZELEBBI_TELEPORT_2"),g_szDMName[g_pDeathMatchID[player1]], g_szDMCommand[g_pDeathMatchID[player1]], szSpeed);
	}
	return 1;
}

CMD:cpoint(playerid, params[], 0, 0)
{
	GetPlayerPos(playerid, X, Y, Z);
    new
		x,
		Float:dis = FLOAT_INFINITY,
		Float:dis2,
		objectid;
		
	foreach(Teleports, i)
	{
		dis2 = GetDistance3D(X, Y, Z, g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2]);
        if(dis2 < dis)
        {
            dis = dis2;
            x = i;
        }
    }
   
	if(GetPVarType(playerid, "LocateTimer"))
	{
        KillTimer(GetPVarInt(playerid, "LocateTimer"));
		objectid = GetPVarInt(playerid, "LocateObject");
		DestroyPlayerObject(playerid, objectid);
		DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "LocateText3D"));
		DeletePVar(playerid, "LocateTimer");
		DeletePVar(playerid, "LocateText3D");
	}
    objectid = CreatePlayerObject(playerid, 1318, X, Y, Z, 0.0, 90.0, GetPointAngleToPoint(g_TeleportPos[x][0], g_TeleportPos[x][1], X, Y) - 270.0);

	SetPVarInt(playerid, "LocateTimer", SetTimerEx("DestroyLocateObject", 2500, false, "d", playerid));
	SetPVarInt(playerid, "LocateObject", objectid);

	format(i_str, sizeof(i_str), "A nyíl felé!\n{" #XCOLOR_SAMP "}%0.2f {" #XCOLOR_YELLOW "}méter!", dis);
	SetPVarInt(playerid, "LocateText3D", _:CreatePlayer3DTextLabel(playerid, i_str, COLOR_YELLOW, X, Y, Z));
    
	SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_LEGKOZELEBBI_TELEPORT__3F_"), g_szTeleportName[x], g_szTeleportCommand[x], dis);
	return 1;
}

forward DestroyLocateObject(playerid);
public DestroyLocateObject(playerid)
{
    // printf("DestroyLocateObject(playerid = %d)", playerid);
    new
		objectid = GetPVarInt(playerid, "LocateObject");
	DestroyPlayerObject(playerid, objectid);
	DeletePlayer3DTextLabel(playerid, PlayerText3D:GetPVarInt(playerid, "LocateText3D"));
	DeletePVar(playerid, "LocateTimer");
	DeletePVar(playerid, "LocateText3D");
	DeletePVar(playerid, "LocateObject");
}

CMD:dropflag(playerid, params[], 0, 0)
{
	if(ZaszloOwner != playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_NALAD_A_ZASZLO"));
	if(strval(params) != 0xFF)
	{
	    foreach(Player, i)
		{
		    if(g_pChatMSGFlags[i] & e_Flag_MSG) continue;
		    SendClientMessagef(i, 0x132CD5AA, LANG(i, "MSG__FLAG___ELDOBTA_A_ZASZLOT"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetClosestZaszloPos());
		}
	}
	
	if(!(g_pChatMSGFlags[playerid] & e_Flag_MSG)) ShowWelcome(playerid, LANG(playerid, "MSG_RELDOBTAD_A_ZASZLOT"));
	ZaszloOwner = INVALID_PLAYER_ID;
	ZaszloRespawn = 0;
	RemovePlayerAttachedObject(playerid, 9);
    g_pGamesData[playerid] &= ~e_FLAG_OWNER;

	GetPlayerPos(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]);
	ZaszloPickup = CreateDynamicPickup(2914, 1, ZaszloPos[0] + 2.5 , ZaszloPos[1] + 1.5, ZaszloPos[2], 0);
	return 1;
}

CMD:flagpos(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(0)", datez)) return SendUsage(playerid, "/flagpos <bool:goto = 0>");
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_X_4F_Y_4F_Z_4F_3"), ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]);

	if(datez) SetPlayerPos(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]);

	valstr(name, datez);
	AdminCommandLog("FLAGPOS", playerid, -1, name);
	return 1;
}

CMD:gpos(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(0)", datez)) return SendUsage(playerid, "/gpos <bool:goto = 0>");
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_X_4F_Y_4F_Z_4F_3"), goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]);

	if(datez && goldpot[gLocX]) SetPlayerPos(playerid, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]);

	valstr(name, datez);
	AdminCommandLog("GPOS", playerid, -1, name);
	return 1;
}

CMD:bcarpos(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(0)", datez)) return SendUsage(playerid, "/bcarpos <bool:goto = 0>");
	GetDynamicVehiclePos(g_BonusCarID, X, Y, Z);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_X_4F_Y_4F_Z_4F_3"), X, Y, Z);

	if(datez) SetPlayerPos(playerid, X, Y, Z + 5.0);

	valstr(name, datez);
	AdminCommandLog("BCARPOS", playerid, -1, name);
	return 1;
}

CMD:oneminute(playerid, params[], 4, 0)
{
    OneMinute();

    AdminCommandLog("ONEMINUTE", playerid, -1);
    return 1;
}

CMD:xmycolor(playerid, params[], 0, D:<GANGWAR | CTC>)
{
	new
		iHexValue;
 	if(sscanf(params, "n", iHexValue)) return SendUsage(playerid, "/xmycolor <Hexadecimális Szám>");

	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
	{
	    new r, g, b, a;
	    rgba2hex(iHexValue,r,g,b,a);
	    if(r < 40 && g < 40 && b < 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));
    	//if(IsBlack(iHexValue)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_HASZNALHATSZ"));
    }

	SetPlayerColor(playerid, iHexValue);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RSZHINHEHD_BMEGHVALHTO"));
	return 1;
}

CMD:togglevel(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_SPVEL;
	if(g_PlayerFlags[playerid] & e_SPVEL)
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_SEBESSEG_MENTES_BEKAPCSOLVA"));
 	}
 	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_SEBESSEG_MENTES_KIKAPCSOLVA"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:spin(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_SPIN;
	if(!(g_PlayerFlags[playerid] & e_SPIN))
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_JARMUVEL_VALO_FORGAS_KIKAPCSOLVA"));
 	}
 	else
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_JARMUVEL_VALO_FORGAS_BEKAPCSOLVA"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YERTEKEK_MODOSITASAWNGHH"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:spinx(playerid, params[], 0, 0)
{
	if(sscanf(params, "f", V[0])) return SendUsage(playerid, "/spinx <Érték>");

	SetPVarFloat(playerid, "SpinX", V[0]);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_SPINX_ERTEKE_MEGVALTOZTATVA"), V[0]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spin_x` = %.4f WHERE `reg_id` = %d", V[0], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:spiny(playerid, params[], 0, 0)
{
	if(sscanf(params, "f", V[0])) return SendUsage(playerid, "/spinx <Érték>");

	SetPVarFloat(playerid, "SpinY", V[0]);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_SPINY_ERTEKE_MEGVALTOZTATVA"), V[0]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spin_y` = %.4f WHERE `reg_id` = %d", V[0], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:spinz(playerid, params[], 0, 0)
{
	if(sscanf(params, "f", V[0])) return SendUsage(playerid, "/spinx <Érték>");

	SetPVarFloat(playerid, "SpinZ", V[0]);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_SPINZ_ERTEKE_MEGVALTOZTATVA"), V[0]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spin_z` = %.4f WHERE `reg_id` = %d", V[0], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

/* Lézer */
CMD:laseron(playerid, params[], 0, 0)
{
	ShowWelcome(playerid, LANG(playerid, "MSG_RHLEZER_GHBEKAPCSOLVA"));
	SetPVarInt(playerid, "LaserPointer", Lasers[random(sizeof(Lasers))]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:laseroff(playerid, params[], 0, 0)
{
	if(!GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_BEKAPCSOLVA_A_LEZERED"));

	RemovePlayerAttachedObject(playerid, 3);
	ShowWelcome(playerid, LANG(playerid, "MSG_RHLEZER_RHHKIGHKAPCSOL"));
	DeletePVar(playerid, "LaserPointer");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:lasercol(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/lasercol {" #XCOLOR_BLUE2 "}<Red/Blue/Pink/Orange/Green/Yellow>");

	new
	    i;
	if(!strcmp(params, "red", true))
	{
		i = 0;
		ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_RPIROSRA_WCSERELVEW"));
	}
	else if(!strcmp(params, "blue", true))
	{
        i = 1;
        ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_BKEKRE_WCSERELVEW"));
	}
	else if(!strcmp(params, "pink", true))
	{
        i = 2;
        ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_PROZSASZINRE_WCSERELVEW"));
	}
	else if(!strcmp(params, "orange", true))
	{
        i = 3;
    	ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_YNARANCSSARGARA_WCSERELV"));
	}
	else if(!strcmp(params, "green", true))
	{
        i = 4;
        ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_GZOLDRE_WCSERELVEW"));
	}
	else if(!strcmp(params, "yellow", true))
	{
        i = 5;
        ShowWelcome(playerid, LANG(playerid, "MSG_LEZERED_YHSARGARA_WCSERELVEW"));
	}
	else
	{
        SendUsage(playerid, "/lasercol {" #XCOLOR_BLUE2 "}<Red/Blue/Pink/Orange/Green/Yellow>");
		return 1;
	}
    SetPVarInt(playerid, "LaserPointer", Lasers[i]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laser` = %d WHERE `reg_id` = %d", Lasers[i], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

/* Kocsi */
CMD:veh(playerid, params[], 0, 0)
{
	new
		engine,
		alarm,
		bonnet,
		boot,
		objective;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if(isnull(params)) return SendUsage(playerid, "/veh <Engine/Lights/Alarm/Doors/Bonnet/Boot>");

	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_NEM"));
	GetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);

	if(!strcmp(params, "engine", true))
	{
		if(engine == 0)
		{
            SetDynamicVehicleParamsEx(vID, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHMOTORJA_GHBEKAPCS"), VehName(vID));
		}
		else if(engine == -1 || engine == 1)
		{
            SetDynamicVehicleParamsEx(vID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHMOTORJA_RKIKAPCSOLV"), VehName(vID));
		}
		return 1;
	}

	else if(!strcmp(params, "lights", true))
	{
		if(lights == 0 || lights == -1)
		{
            SetDynamicVehicleParamsEx(vID, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHVILLANYA_GHBEKAPC"), VehName(vID));
		}
		else
		{
            SetDynamicVehicleParamsEx(vID, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHVILLANYA_RKIKAPCSOL"), VehName(vID));
		}
		return 1;
	}

	else if(!strcmp(params, "alarm", true))
	{
		if(alarm == 0 || alarm == -1)
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHRIASZTOJA_GHBEKAP"), VehName(vID));
		}
		else
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHRIASZTOJA_RKIKAPCSO"), VehName(vID));
		}
		return 1;
	}

	else if(!strcmp(params, "doors", true))
	{
		if(doors == -1 || doors == 0)
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHAJTAJAI_GHBEZARVA"), VehName(vID));
		}
		else
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHAJTAJAI_RKINYITVAW"), VehName(vID));
		}
		return 1;
	}

	else if(!strcmp(params, "bonnet", true))
	{
		if(bonnet == 0 || bonnet == -1)
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHMOTORHAZTETOJE_GH"), VehName(vID));
		}
		else
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHMOTORHAZTETOJE_RBEC"), VehName(vID));
		}
		return 1;
	}

	else if(!strcmp(params, "boot", true))
	{
		if(boot == -1 || boot == 0)
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);
			strcpy(name, "~g~~h~kinyitva");
		}
		else
		{
            SetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);
			strcpy(name, "~r~becsukva");
		}

		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_BHCSOMAGTARTOJA_RW"), VehName(vID), name);
		return 1;
	}

	SendUsage(playerid, "/veh <Engine/Lights/Alarm/Doors/Bonnet/Boot>");
	return 1;
}

CMD:pvar(playerid, params[], 0, 0)
{
    if(!IsFOOwner(playerid) && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
	if(isnull(params)) player1 = playerid;
	else
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

		if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pvar {" #XCOLOR_YELLOW "}<Játékos ID/Név>");
	}
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    MaxID = GetPVarsUpperIndex(player1);

	dline[0] = EOS;
	for(new i; i != MaxID; i++)
	{
		if(!GetPVarNameAtIndex(player1, i, country, sizeof(country))) continue;
		// print(country);
		if(!i)
		{
			switch(GetPVarType(player1, country))
			{
				case PLAYER_VARTYPE_STRING:
				{
					GetPVarString(player1, country, i_str, sizeof(i_str));
					format(dline, sizeof(dline), "%s = %s", country, i_str);
				}
				case PLAYER_VARTYPE_INT:
				{
                    format(dline, sizeof(dline), "%s = %d", country, GetPVarInt(player1, country));
				}
				case PLAYER_VARTYPE_FLOAT:
				{
                    format(dline, sizeof(dline), "%s = %f", country, GetPVarFloat(player1, country));
				}
			}
		}
		else
		{
			switch(GetPVarType(player1, country))
			{
				case PLAYER_VARTYPE_STRING:
				{
					GetPVarString(player1, country, i_str, sizeof(i_str));
					format(dline, sizeof(dline), "%s\n%s = %s", dline, country, i_str);
				}
				case PLAYER_VARTYPE_INT:
				{
                    format(dline, sizeof(dline), "%s\n%s = %d", dline, country, GetPVarInt(player1, country));
				}
				case PLAYER_VARTYPE_FLOAT:
				{
                    format(dline, sizeof(dline), "%s\n%s = %f", dline, country, GetPVarFloat(player1, country));
				}
			}
		}
	}

	format(i_str, sizeof(i_str), "PVarLista {%06x}%s(%d) {" #XCOLOR_WHITE "}<%d>", GetPlayerColor(player1) >>> 8, pName(player1), player1, MaxID);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, i_str, dline, "Oké");

	AdminCommandLog("PVAR", playerid, player1);
	return 1;
}

CMD:changename(playerid, params[], 0, 0)
{/*
	// Ha nem admin, akkor spam ellenõrzés
	if(!(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)))
	{
		SPAM_CHECK(Changename, 10000) //10mp
	}
	else
	{
		SPAM_CHECK(Changename, 1200000) //20perc
	}
*/
    if((g_PlayerFlags2[playerid] & e_ALLOW_CHANGENAME)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_NEVVALTASI_JOGOD_EL"));
	switch(g_pSzint{playerid})
	{
	    case 1..5: CHANGENAME_PRICE = 5000;
	    case 6..12: CHANGENAME_PRICE = 10000;
	    case 13..22: CHANGENAME_PRICE = 20000;
	    case 23..33: CHANGENAME_PRICE = 30000;
	    case 34..42: CHANGENAME_PRICE = 40000;
	    case 43..50: CHANGENAME_PRICE = 50000;
	}

    if(g_pVIP[playerid]) CHANGENAME_PRICE = CHANGENAME_PRICE/2;

	if(GetPlayerMoneyEx(playerid) < CHANGENAME_PRICE)
		return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_4"), FormatNumber(CHANGENAME_PRICE));

	ChangeName(playerid);
	return 1;
}

CMD:call(playerid, params[], 0, 0)
{
    SPAM_CHECK(Call, 1500) //2mp
	new
		text,
		iTick;
    if(sscanf(params, "d", text)) return SendUsage(playerid, "/call <Megoldás>");
	if(!(g_ServerFlags & e_MATEK)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_NINCS_FELADVA_SEMILYEN"));
	if(text != g_iMatMegoldas)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_A_VALASZ"));
		GivePlayerXP(playerid, XP_ROSSZ_EREDMENY);
		return 1;
	}

    iTick = GetTickCount() - g_iMatTime;
    session[wins][1] ++;

	GivePlayerMoneyEx(playerid, g_iMatNyeremeny, "Matek");
	GivePlayerXP(playerid, XP_MATEK);
	PVarIntFel(playerid, "Maths");

	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
	 	SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK___MEGNYERTE_A_MATEK"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, (float(iTick) / 1000), text);
	}
		 
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PGRATULALOKNRMEGNYERTED_A_MAT"));

	getdate(year, month, day);
	gettime(hour, minute, second);

	strunpack(country, g_szMatFeladat);
	mysql_format(1, query, sizeof(query), "INSERT INTO `maths`(id, question, answer, winner, winner_regid, speed, time) VALUES(0, '%s', %d, '%s', %d, %.3f, '%02d.%02d.%02d/%02d.%02d.%02d')", country, g_iMatMegoldas, pName(playerid), PlayerInfo[playerid][pRegID], (float(iTick) / 1000), year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");

	g_ServerFlags &= ~e_MATEK;

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `maths` = `maths` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:givecash(playerid, params[], 0, 0)
{
    SPAM_CHECK(Givecash, 5000)
	new
		amount;
	if(sscanf(params, "ud", player1, amount)) return SendUsage(playerid, "/givecash <Játékos ID/Név> <Összeg>");
	if(GetPlayerMoneyEx(playerid) < amount) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ENNYI_PENZED"));
	if(IsNegative(amount)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKNAK_NEM_ADHATSZ_PENZT"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADNAK_NEM_ADHATSZ_PENZT"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    getdate(year, month, day);
	gettime(hour, minute, second);
	datez = CurrentTimestamp();

	mysql_format(1, query, sizeof(query), "SELECT id, reciever, money, time FROM givecash WHERE accept = 1 AND time > %d AND reg_id = %d", datez - 86400, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, true, "THREAD_GiveCash", "dddd", playerid, player1, amount, g_pQueryQueue[playerid]);
	//print(query);
	return 1;
}

forward THREAD_GiveCash(playerid, forplayerid, amount, queue);
public THREAD_GiveCash(playerid, forplayerid, amount, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_GiveCash);

	new
		rows = cache_get_row_count(),
		id,
	    money,
	    sum;
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, name);
		cache_get_row_int(i, 2, money);
		cache_get_row_int(i, 3, datez);

		sum += money;
		//printf("id: %d, name: %s, money: %d, sum: %d, datez: %d", id, name, money, sum, datez);
	}
	if(!IsFOOwner(playerid))
	{
 		if(g_pVIP[playerid])
		{
		    MAX_GIVECASH = 500000;
	    }
	    else MAX_GIVECASH = 200000;


		if(sum > MAX_GIVECASH)
		{
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ELMULT_24_ORABAN_A"), FormatNumber(MAX_GIVECASH));
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_KULDHETSZ_SENKINEK"));
			return 1;
		}

		if(amount + sum > MAX_GIVECASH)
		{
			SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_TUL_LEPTED_A_MAXIMUM_UTALHATO"));
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_UTOLSO_UTALASAID_MIATT"), MAX_GIVECASH - sum);
			return 1;
		}
	}

	foreach(new i: Player)
	{
		if(GetPVarInt(i, "SenderID") != playerid) continue;

		DeletePVar(i, "SenderID");
		DeletePVar(i, "SenderRegID");
		DeletePVar(i, "SendedMoney");
		break;
	}
	SetPVarInt(forplayerid, "SenderID", playerid);
	SetPVarInt(forplayerid, "SenderRegID", PlayerInfo[playerid][pRegID]);
	SetPVarInt(forplayerid, "SendedMoney", amount);

    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_FELAJANLOTTAD__NEVU_JATEKOSNAK"), GetPlayerColor(forplayerid) >>> 8, pName(forplayerid), forplayerid, amount);
	SendClientMessagef(forplayerid, COLOR_BLUE, LANG(forplayerid, "MSG___FELAJANLOTTA_HOGY_KULD_NEK"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, amount);

//	valstr(name, amount);
//    AdminCommandLog("GIVECASH", playerid, forplayerid, name);
	return 1;
}

CMD:mytransfers(playerid, params[], 0, 0)
{
    getdate(year, month, day);
	gettime(hour, minute, second);
	datez = CurrentTimestamp();

	mysql_format(1, query, sizeof(query), "SELECT id, reciever, money, time FROM givecash WHERE accept = 1 AND time > %d AND reg_id = %d", datez - 86400, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "THREAD_MyTransfers", "dd", playerid, g_pQueryQueue[playerid]);
	//print(query);
	return 1;
}

forward THREAD_MyTransfers(playerid, queue);
public THREAD_MyTransfers(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MyTransfers);

	new
		rows = cache_get_row_count(),
		id,
	    money,
	    sum;
	dline[0] = EOS;
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, name);
		cache_get_row_int(i, 2, money);
		cache_get_row_int(i, 3, datez);

		sum += money;
		date(datez, day, month, year, hour, minute, second);
		format(i_str, sizeof(i_str), "%d. {" #XCOLOR_GREEN2 "}${" #XCOLOR_GREEN "}%s {" #XCOLOR_DEFAULT "}-> {" #XCOLOR_BLUE "}%s \t\t{" #XCOLOR_DEFAULT "}Idõ: %02d.%02d.%02d %02d:%02d:%02d\n", id, FormatNumber(money), name, year, month, day, hour, minute, second);
		strcat(dline, i_str);
	}

	format(i_str, 64, "Összes utalásod az elmúlt 24órában: $%s", FormatNumber(sum));
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");
	return 1;
}

/*
CMD:givescore(playerid, params[], 0, 0)
{
	new
		amount;
	if(sscanf(params, "ud", player1, amount)) return SendUsage(playerid, "/givescore <Játékos ID/Név> <Összeg>");
	if(GetPlayerScore(playerid) < amount) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ENNYI_PONTOD"));
	if(IsNegative(amount)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKNAK_NEM_ADHATSZ_PENZT"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADNAK_NEM_ADHATSZ_PENZT"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	foreach(new i: Player)
	{
		if(GetPVarInt(i, "SenderID") != playerid) continue;

		DeletePVar(i, "SenderID");
		DeletePVar(i, "SenderRegID");
		DeletePVar(i, "SendedMoney");
		break;
	}
    SetPVarInt(player1, "SenderID_", playerid);
    SetPVarInt(player1, "SenderRegID_", PlayerInfo[playerid][pRegID]);
    SetPVarInt(player1, "SendedScore", amount);

    SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_FELAJANLOTTAD__NEVU_JATEKOSNAK_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1, amount);
	SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG___FELAJANLOTTA_HOGY_KULD_NEK_1"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, amount);

	valstr(name, amount);
    AdminCommandLog("GIVESCORE", playerid, player1, name);
	return 1;
}
*/
CMD:accept(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/accept <Cash>");

	if(!strcmp(params, "cash", true))
	{
		if(!GetPVarType(playerid, "SenderID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_SENKI_NEM_AJANLOTTA"));

 		player1 = GetPVarInt(playerid, "SenderID");
        if(GetPVarInt(playerid, "SenderRegID") != PlayerInfo[player1][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_MEGADOTT_JATEKOS_NINCS_A"));

		vID = GetPVarInt(playerid, "SendedMoney");

        InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHPENZ_ELFOGADVA_W_GH"), vID);

		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_PENZ_ELFOGADVA__KULDO_"), vID, GetPlayerColor(player1) >>> 8, pName(player1), player1);
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG_PENZ_ELKULDVE__FOGADO_"), vID, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

        InfoTD_MSGf(player1, MESSAGE_TIME, LANG(player1, "MSG_PENZED_ELKULDVE_"), vID);

	    DeletePVar(playerid, "SenderID");
	    DeletePVar(playerid, "SendedMoney");
	    DeletePVar(playerid, "SenderRegID");
        SavePlayer(playerid);

	    getdate(year, month, day);
		gettime(hour, minute, second);
		datez = CurrentTimestamp();
       	mysql_format(1, query, sizeof(query), "INSERT INTO `givecash`(`id`, `player`, `reg_id`, `player_cash`, `reciever`, `reciever_id`, `reciever_cash`, `money`, `accept`, `time`) VALUES (0, '%e', %d, %d, '%e', %d, %d, %d, 1, %d)", pName(player1), PlayerInfo[player1][pRegID], GetPlayerMoneyEx(player1), pName(playerid), PlayerInfo[playerid][pRegID], GetPlayerMoneyEx(playerid), vID, datez);
		mysql_function_query(1, query, false, "", "");

		GivePlayerMoneyEx(player1, (0 - vID), "GiveCash");
		GivePlayerMoneyEx(playerid, vID, "SendCash");
		return 1;
	}
	/*
	else if(!strcmp(params, "score", true))
	{
		if(!GetPVarType(playerid, "SenderID_")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_SENKI_NEM_AJANLOTTA_3"));

		player1 = GetPVarInt(playerid, "SenderID_");
        if(GetPVarInt(playerid, "SenderRegID_") != PlayerInfo[player1][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_MEGADOTT_JATEKOS_NINCS_A"));

	    vID = GetPVarInt(playerid, "SendedScore");

		GivePlayerXP(player1, (0 - vID));
		GivePlayerXP(playerid, vID);

        InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHPONT_ELFOGADVAW_GH"), vID);

		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_PONT_ELFOGADVA__KULDO_"), vID, GetPlayerColor(player1) >>> 8, pName(player1), player1);
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG_PONT_ELKULDVE__FOGADO_"), vID, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

	    DeletePVar(playerid, "SenderID_");
	    DeletePVar(playerid, "SendedScore");
	    DeletePVar(playerid, "SenderRegID_");
        SavePlayer(playerid);
		return 1;
	}
	*/
	SendUsage(playerid, "/accept <Cash>");
	return 1;
}

CMD:cancel(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/accept <Cash>");

	if(!strcmp(params, "cash", true))
	{
		if(!GetPVarType(playerid, "SenderID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_SENKI_NEM_AJANLOTTA_3"));

		player1 = GetPVarInt(playerid, "SenderID");
		vID = GetPVarInt(playerid, "SendedMoney");

		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG___NEMFOGADTA_EL_A_PENZT_AMIT"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, vID);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_PENZ_ELUTASITVA__KULDO_"), vID, GetPlayerColor(player1) >>> 8, pName(player1), player1);

	    getdate(year, month, day);
		gettime(hour, minute, second);
		datez = CurrentTimestamp();
       	mysql_format(1, query, sizeof(query), "INSERT INTO `givecash`(`id`, `player`, `reg_id`, `player_cash`, `reciever`, `reciever_id`, `reciever_cash`, `money`, `accept`, `time`) VALUES (0, '%e', %d, %d, '%e', %d, %d, %d, 0, %d)", pName(player1), PlayerInfo[player1][pRegID], GetPlayerMoneyEx(player1), pName(playerid), PlayerInfo[playerid][pRegID], GetPlayerMoneyEx(playerid), vID, datez);
		mysql_function_query(1, query, false, "", "");

		DeletePVar(playerid, "SenderID");
		DeletePVar(playerid, "SenderRegID");
		DeletePVar(playerid, "SendedMoney");
		return 1;
	}

	else if(!strcmp(params, "score", true))
	{
		if(!GetPVarType(playerid, "SenderID_")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_SENKI_NEM_AJANLOTTA_3"));

		player1 = GetPVarInt(playerid, "SenderID_");
		vID = GetPVarInt(playerid, "SendedScore");

		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG___NEMFOGADTA_EL_A_PONTOT_AMI"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, vID);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_PONT_ELUTASITVA__KULDO_"), vID, GetPlayerColor(player1) >>> 8, pName(player1), player1);

		DeletePVar(playerid, "SenderID_");
		DeletePVar(playerid, "SenderRegID_");
		DeletePVar(playerid, "SendedScore");
		return 1;
	}

	SendUsage(playerid, "/accept <Cash>");
	return 1;
}

CMD:bounty(playerid, params[], 0, 0)
{
	SPAM_CHECK(Bounty, 15000)

	new
	    bounty;
	if(sscanf(params, "ud", player1, bounty)) return SendUsage(playerid, "/bounty <Játékos ID/Név> <Összeg>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_SAJAT_FEJEDRE_NEM_TUZHETSZ"));
	if(GetPlayerMoneyEx(playerid) < bounty) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED"));
	if(bounty < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));

	if((g_pBounty[player1] + bounty) > 1000000000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAX_ERTEK_ATLEPVE_MAXIMUM_1"));

	// Ha túlcsordul, akkor valószínûleg kissebb lesz, mint a jelenlegi összeg.
	if((g_pBounty[player1] + bounty) < g_pBounty[player1]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAX_ERTEK_ATLEPVE_BIZTONSAGI"));

	g_pBounty[player1] += bounty;
	GivePlayerMoneyEx(playerid, -bounty, "Bounty");

	SendClientMessageToAllf(COLOR_ORANGE, "MSG_VERDIJ__KITUZOTT__VERDIJAT", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(bounty), GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(g_pBounty[player1]));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `bounty` = %d WHERE `reg_id` = %d", g_pBounty[player1], PlayerInfo[player1][pRegID]);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "INSERT INTO `bounty`(`id`, `player`, `reg_id`, `giver`, `giver_regid`, `bounty`, `total`, `time`) VALUES (0, '%s', %d, '%s', %d, %d, %d, %d)", pName(player1), PlayerInfo[player1][pRegID], pName(playerid), PlayerInfo[playerid][pRegID], bounty, g_pBounty[player1], CurrentTimestamp());
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:getbounty(playerid, params[], 0, 0)
{
	if(!sscanf(params, "u", player1))
	{
		if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

		if(!g_pBounty[player1])
		{
        	SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG___FEJEN_NINCS_VERDIJ"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
		}
		else
		{
        	SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG___FEJEN__VERDIJ_VAN"), GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(g_pBounty[player1]));
		}
	}
	else
	{
		foreach(new i: Player)
		{
            if(!g_pBounty[i]) continue;

			SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG___FEJEN__VERDIJ_VAN"), GetPlayerColor(i) >>> 8, pName(i), i, FormatNumber(g_pBounty[i]));
		}
	}
	return 1;
}

CMD:c(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/c <Szöveg> Közeli Chat");
    if(IPCheck(playerid, params, "/c"))
		return 1;

	if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

	new
	    pWorld = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, X, Y, Z);

	foreach(new i: Player)
	{
		if(GetPlayerVirtualWorld(i) != pWorld) continue;
		if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
		if(IsPlayerInRangeOfPoint(i, 15.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
		{
			SendClientMessagef(i, GetPlayerColor(playerid), LANG(i, "MSG__MONDJA_"), pName(playerid), playerid, ColouredText(params));
		}
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `chat_c`(ID, player, reg_id, msg, time) VALUES(0, '%e', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:sh(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/sh <Szöveg> Kiabálás");
    if(IPCheck(playerid, params, "/sh"))
		return 1;
		
 	if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;
		
	new
	    pWorld = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, X, Y, Z);
	foreach(new i: Player)
	{
		if(GetPlayerVirtualWorld(i) != pWorld) continue;
		if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
		if(IsPlayerInRangeOfPoint(i, 100.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
		{
			SendClientMessagef(i, GetPlayerColor(playerid), LANG(i, "MSG__KIALTJA_"), pName(playerid), playerid, ColouredText(params));
		}
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `chat_sh`(ID, player, reg_id, msg, time) VALUES(0, '%e', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:su(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/su <Szöveg> Suttogás");

	if(IPCheck(playerid, params, "/su"))
		return 1;
	
	if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

	new
	    pWorld = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, X, Y, Z);
	foreach(new i: Player)
	{
		if(GetPlayerVirtualWorld(i) != pWorld) continue;
		if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
		if(IsPlayerInRangeOfPoint(i, 5.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
		{
			SendClientMessagef(i, GetPlayerColor(playerid), LANG(i, "MSG__SUTTOGJA_"), pName(playerid), playerid, ColouredText(params));
		}
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `chat_su`(ID, player, reg_id, msg, time) VALUES(0, '%e', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:random(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | TAXI>)
{
    // Ha nem admin, akkor spam ellenõrzés
	if(!(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)))
	{
		//SPAM_CHECK(Random, 8000) //8mp
	}
	else
	{
		SPAM_CHECK(Random, 20000) //20mp
	}

	Ide:
	switch(random(18))
	{
	    case 0:
		{
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_NYERTEL_5000T"));
			SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__NYERT_5000T_RANDOM_PARANC", pName(playerid), playerid);
			GivePlayerMoneyEx(playerid, 5000, "Random");
		}
		case 1:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_VESZTETTEL_5000T"));
			GivePlayerMoneyEx(playerid, -5000, "Random");
		}
	    case 2:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_NYERTEL_EGY_NRG500_TIPUSU_MOTORT"));
			CarSpawner(playerid, 522);
		}
		case 3:
		{
			if(g_PlayerFlags[playerid] & e_GOD) goto Ide;

			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ELETED_ES_GOLYOALLO_MELLENYED"));
            SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
            SetPlayerArmour(playerid, 100.0);
		}
	    case 4:
		{
			SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__NYERT_EGY_VEGTELEN_SMGT_A", pName(playerid), playerid);
			GivePlayerWeapon(playerid, WEAPON_MP5, 9999);
		}
		case 5:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			if(g_PlayerFlags[playerid] & e_GOD) goto Ide;

			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ELETED_ELVEVE"));
			SetPlayerHealth(playerid, 10.0);
		}
	    case 6:
		{
			SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__NYERT_EGY_VEGTELEN_M4ET_A", pName(playerid), playerid);
			GivePlayerWeapon(playerid, WEAPON_M4, 99999);
		}
	    case 7:
		{
			SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__BEALLT_MINT_A_GEREBLYE", pName(playerid), playerid);
			SetPlayerDrunkLevel(playerid, 50000);
		}
		case 8:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_FELREPULTEL_5_METER_MAGASRA"));
			valstr(name, 5);
			cmd_dive(playerid, name);
		}
	    case 9:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_NYERTEL_EGY_NAGY_PENISZT_AZ"));
			cmd_lho(playerid, "Fasz 2");
		}
		case 10:
		{
			player1 = Itter_Random(Player);
			if(playerid == player1) goto Ide;
            if(GetPVarType(player1, "AFKTime")) goto Ide;

			SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__SZIVESEN_KOZOSULNE__NEV", pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1);
			SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_FU_OCSEM_LATOM_MAMA_KANOS_NAPOD"));
		}
	    case 11:
		{
			if(g_PlayerFlags[playerid] & e_GOD) goto Ide;
            if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
			SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_FEGYVEREID_TOROLVE_FAIL_P"));
			ResetPlayerWeapons(playerid);
		}
	    case 12:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
		    SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_GRATULALOK_NEM_NYERTEL_SEMMIT"));
		}
	    case 13:
		{
			goto Ide;
			//SendClientMessageToAllf(GetPlayerColor(playerid), "MSG__NYERT_EGY_MINIGUNT_A_RANDOM", pName(playerid), playerid);
			//GivePlayerWeapon(playerid, WEAPON_MINIGUN, 100);
		}
		case 14:
		{
		    if(g_pOtherFlags[playerid] & e_RAKSAMP) goto Ide;
		    i_str[0] = EOS;
		    new _rand = random(g_Hosets);

		    mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_set` WHERE `id` = '%d'", _rand);
			mysql_function_query(1, query, true, "THREAD_LoadHoldingObjectSet", "dsd", playerid, i_str, g_pQueryQueue[playerid]);
			switch(_rand)
			{
			    case 2: SetPlayerSkin(playerid,68);
			    case 3: SetPlayerSkin(playerid,294);
			    case 4: SetPlayerSkin(playerid,252);
			    case 7: SetPlayerSkin(playerid,5);
			}
		}
	    case 15: SendClientMessageToAllf(COLOR_PINK, "MSG_RANDOM_15", pName(playerid), playerid);
		case 16: SendClientMessageToAllf(COLOR_PINK, "MSG_RANDOM_16", pName(playerid), playerid);

		case 17:
		{
		    if(g_BonusCarOwner == playerid) goto Ide;
		    new rand_ = random(7);
		    switch(rand_)
			{
			    case 0: SpawnCar(playerid,"Sabre", "Sabre_Weed", 0, 0, 3);
      			case 1: SpawnCar(playerid,"Elegy", "Ben_Elegy", 161, 2, 1);
				case 2: SpawnCar(playerid,"Euros", "[Ben]Euros", 0, 0, 3);
                case 3: SpawnCar(playerid,"Alpha", "[Ben]Alpha-Zöld", 0, 0, 3);
				case 4: SpawnCar(playerid,"Elegy", "Ben_Elegy_Kek", 77, 116, 2); //
				case 5: SpawnCar(playerid,"Elegy", "Ben_Elegy_Voros2", 1, 1, 3);
				case 6: SpawnCar(playerid,"Elegy", "Elegy_GT-R", 1, 1, 3);
			}
			printf("%d",rand_);
		}
	}
	return 1;
}

/*
CMD:random(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC>)
{
    new rand_ = random(7);
    switch(rand_)
	{
 		case 0: SpawnCar(playerid,"Sabre", "Sabre_Weed", 0, 0, 3);
		case 1: SpawnCar(playerid,"Elegy", "Ben_Elegy", 161, 2, 1);
		case 2: SpawnCar(playerid,"Euros", "[Ben]Euros", 0, 0, 3);
        case 3: SpawnCar(playerid,"Alpha", "[Ben]Alpha-Zöld", 0, 0, 3);
		case 4: SpawnCar(playerid,"Elegy", "Ben_Elegy_Kek", 77, 116, 2);
		case 5: SpawnCar(playerid,"Elegy", "Ben_Elegy_Voros2", 1, 1, 3);
		case 6: SpawnCar(playerid,"Elegy", "Elegy_GT-R", 1, 1, 3);
	}
	printf("%d",rand_);
 	return 1;
}*/

stock SpawnCar(playerid,carname[],objects[],color1, color2, paintjob)
{
    vID = GetPlayerDynamicVehicleID(playerid);
    i_str[0] = EOS;
	format(i_str, 128, "%s %d %d", carname, color1, color2);
	cmd_v(playerid,i_str);
	
	SetTimerEx("AddObjectToPlayerVehicle", 1000, false, "ds", playerid, objects);
	ChangeDynamicVehiclePaintjob(vID, paintjob);
	//printf("SpawnCar: %s", objects);
	SendClientMessageToAllf(GetPlayerColor(playerid), "MSG_RANDOM_CAR", pName(playerid), playerid, carname);
}

CMD:skill(playerid, params[], 0, 0)
{
	new
		skill,
		level;

	if(sscanf(params, "ii", skill, level))
	{
		SendUsage(playerid, "/skill <Skill> <Level>");
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_PISZTOLY_0_TOMPITOTT_1_DESERT"));
		return 1;
	}

	SetPlayerSkillLevel(playerid, skill, level);
	return 1;
}

CMD:apa(playerid, params[], 0, 0)
{
	new
		lib[64],
		aname[64],
		Float:Delta,
		loop,
		lockx,
		locky,
		freeze,
		time,
		sync;
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]F(4.0)D(0)D(1)D(1)D(0)D(0)D(1)", lib, aname, Delta, loop, lockx, locky, freeze, time, sync))
	{
		SendUsage(playerid, "/apa <animlib[]>, <animname[]> <Float:fDelta> <loop> <lockx> <locky> <freeze> <time> <forcesync = 1>");
		return 1;
	}

	ApplyAnimation(playerid, lib, aname, Delta, loop, lockx, locky, freeze, time, sync);
	
	
//	LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:speciala(playerid, params[], 0, 0)
{
	new
	    iAction;
	if(sscanf(params, "d", iAction))
	{
		switch((datez = GetPlayerSpecialAction(playerid)))
		{
			case 0: i_str = "SPECIAL_ACTION_NONE";
			case 1: i_str = "SPECIAL_ACTION_DUCK";
			case 2: i_str = "SPECIAL_ACTION_USEJETPACK";
			case 3: i_str = "SPECIAL_ACTION_ENTER_VEHICLE";
			case 4: i_str = "SPECIAL_ACTION_EXIT_VEHICLE";
			case 5: i_str = "SPECIAL_ACTION_DANCE1";
			case 6: i_str = "SPECIAL_ACTION_DANCE2";
			case 7: i_str = "SPECIAL_ACTION_DANCE3";
			case 8: i_str = "SPECIAL_ACTION_DANCE4";
			case 10: i_str = "SPECIAL_ACTION_HANDSUP";
			case 11: i_str = "SPECIAL_ACTION_USECELLPHONE";
			case 12: i_str = "SPECIAL_ACTION_SITTING";
			case 13: i_str = "SPECIAL_ACTION_STOPUSECELLPHONE";
			case 14: i_str = "SPECIAL_ACTION_NIGHTVISION";
			case 15: i_str = "SPECIAL_ACTION_THERMALVISION";
			case 20: i_str = "SPECIAL_ACTION_DRINK_BEER";
			case 21: i_str = "SPECIAL_ACTION_SMOKE_CIGGY";
			case 22: i_str = "SPECIAL_ACTION_DRINK_WINE";
			case 23: i_str = "SPECIAL_ACTION_DRINK_SPRUNK";
			case 24: i_str = "SPECIAL_ACTION_CUFFED";
			case 25: i_str = "SPECIAL_ACTION_CARRY";
			case 68: i_str = "SPECIAL_ACTION_PISS";
		}

		SendUsage(playerid, "/speciala <Special Action ID> Curr: %d | {" #XCOLOR_WHITE "}%s", datez, i_str);
		return 1;
	}

	SetPlayerSpecialAction(playerid, iAction);
	return 1;
}

CMD:sdm(playerid, params[], 4, 0)
{
	new
		kid,
		pid,
		reason;
	if(sscanf(params, "uuD(5)", kid, pid, reason)) return SendUsage(playerid, "/sdm <Killer ID> <Player ID> <Reason ID>");

	SendDeathMessage(kid, pid, reason);
	AdminCommandLog("SDM", playerid, -1);
	return 1;
}

CMD:opd(playerid, params[], 4, 0)
{
	new
		kid,
		pid,
		reason;
	if(sscanf(params, "uuD(5)", pid, kid, reason)) return SendUsage(playerid, "/opd <Player ID> <Killer ID> <Reason ID>");

 	OnPlayerDeath(pid, kid, reason);
	AdminCommandLog("OPD", playerid, -1);
	return 1;
}

CMD:loadfs(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/loadfs <FilterScript név>");

    #if defined YSF
	SendClientMessagef(playerid, -1, "LoadFilterScript({" #XCOLOR_BLUE2 "}\"%s\"){FFFFFF} = %d", params, LoadFilterScript(params));
	#else
	SendRconCommandf("loadfs %s", params);
	#endif

	AdminCommandLog("LOADFS", playerid, -1, params);
	return 1;
}

CMD:unloadfs(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/unloadfs <FilterScript név>");

    #if defined YSF
	SendClientMessagef(playerid, -1, "UnLoadFilterScript({" #XCOLOR_BLUE2 "}\"%s\"){FFFFFF} = %d", params, UnLoadFilterScript(params));
	#else
    SendRconCommandf("unloadfs %s", params);
	#endif

	AdminCommandLog("UNLOADFS", playerid, -1, params);
	return 1;
}

CMD:reloadfs(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/reloadfs <FilterScript név>");

    #if defined YSF
	SendClientMessagef(playerid, -1, "UnLoadFilterScript({" #XCOLOR_BLUE2 "}\"%s\"){FFFFFF} = %d", params, UnLoadFilterScript(params));
	SendClientMessagef(playerid, -1, "LoadFilterScript({" #XCOLOR_BLUE2 "}\"%s\"){FFFFFF} = %d", params, LoadFilterScript(params));
	#else
    SendRconCommandf("reloadfs %s", params);
	#endif

	AdminCommandLog("RELOADFS", playerid, -1, params);
	return 1;
}
#if defined YSF
CMD:addserverrule(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[24]s[24]d", name, country, datez)) return SendUsage(playerid, "/addserverrule <name> <value> <flags>");

	AddServerRule(name, country, E_SERVER_RULE_FLAGS:datez);
	SendClientMessagef(playerid, -1, "AddServerRule: %s = %s", name, country);

	AdminCommandLog("ADDSERVERRULE", playerid, -1, "%s = %s [0x%x]", name, country, datez);
	return 1;
}

CMD:setserverrule(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[24]s[24]", name, country)) return SendUsage(playerid, "/setserverrule <name> <value>");

	SetServerRule(name, country);
	SendClientMessagef(playerid, -1, "SetServerRule: %s = %s", name, country);

	AdminCommandLog("SETSERVERRULE", playerid, -1, "%s = %s", name, country);
	return 1;
}

CMD:modifyflag(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[24]d", name, datez)) return SendUsage(playerid, "/setserverrule <name> <flags>");
	if(!(0 <= datez <= 4)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK"));

	if(datez & _:CON_VARFLAG_DEBUG) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_DEBUG_MOD_A_SAMP"));
	i_str[0] = EOS;

	if(datez & _:CON_VARFLAG_READONLY) strcat(i_str, "CON_VARFLAG_READONLY ");
	if(datez & _:CON_VARFLAG_RULE) strcat(i_str, "CON_VARFLAG_RULE ");

	ModifyFlag(name, datez);
	SendClientMessagef(playerid, -1, "ModifyFlag: %s = %s (%d)", name, i_str, datez);

	AdminCommandLog("MODIFYFLAG", playerid, -1, "%s = 0x%x", name, datez);
	return 1;
}

CMD:addban(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[17]D(0)", ip, datez)) return SendUsage(playerid, "/addban <ip> <time_ms = 0>");

	BlockIpAddress(ip, datez);
	SendClientMessagef(playerid, -1, LANG(playerid, "MSG__BANNOLVA__MS_IDORE"), ip, datez);

	AdminCommandLog("ADDBAN", playerid, -1, ip);
	return 1;
}

CMD:removeban(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/removebna <ip>");

	UnBlockIpAddress(params);
	SendClientMessagef(playerid, -1, LANG(playerid, "MSG__TOROLVE_A_BANLISTAROL"), params);

	AdminCommandLog("REMOVEBAN", playerid, -1, params);
	return 1;
}

CMD:clearbans(playerid, params[], 4, 0)
{
    ClearBanList();
	SendClientMessage(playerid, -1, LANG(playerid, "MSG_BAN_LISTA_KIURITVE"));

	AdminCommandLog("CLEARBANS", playerid, -1);
	return 1;
}

CMD:isbanned(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/isbanned <ip>");

	SendClientMessagef(playerid, -1, "isbanned(%s) -> %d", params, IsBanned(params));
	AdminCommandLog("ISBANNED", playerid, -1, params);
	return 1;
}

#endif

CMD:spsn(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/spsn <Név>");

	SetPlayerShopName(playerid, params);
	return 1;
}

CMD:spaw(playerid, params[], 0, 0)
{
	new
	    iWeaponID;
	if(sscanf(params, "d", iWeaponID)) return SendUsage(playerid, "/spaw <Weapon ID>");

	SetPlayerArmedWeapon(playerid, iWeaponID);
	return 1;
}

CMD:spfa(playerid, params[], 0, 0)
{
	if(sscanf(params, "f", Angle)) return SendUsage(playerid, "/spfa <fAngle>");

	if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		SetDynamicVehicleZAngle(vID, Angle);
	}
	else
	{
		SetPlayerFacingAngle(playerid, Angle);
	}
	return 1;
}

CMD:myface(playerid, params[], 0, 0)
{
	if(sscanf(params, "ff", V[0], V[1])) return SendUsage(playerid, "/myface <X> <Y>");

	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, GetAngleToPoint(V[0], V[1], X, Y));
	return 1;
}

CMD:pmarker(playerid, params[], 4, 0)
{
	if(sscanf(params, "ddd", datez, player1, vID)) return SendUsage(playerid, "/pmarker <playerid> <showplayerid> <color>");

	SetPlayerMarkerForPlayer(datez, player1, vID);
	AdminCommandLog("PMARKER", playerid, -1);
	return 1;
}

CMD:pnametag(playerid, params[], 4, 0)
{
	if(sscanf(params, "ddd", datez, player1, vID)) return SendUsage(playerid, "/pnametag <playerid> <showplayerid> <bool:show>");

	ShowPlayerNameTagForPlayer(datez, player1, vID);
	AdminCommandLog("PNAMETAG", playerid, -1);
	return 1;
}

CMD:radius(playerid, params[], 4, 0)
{
	new
	    Float:fRadius;
	if(sscanf(params, "f", fRadius)) return SendUsage(playerid, "/radius <Float:marker_radius>");

	LimitPlayerMarkerRadius(fRadius);

	valstr(name, floatround(fRadius));
	AdminCommandLog("RADIUS", playerid, -1, name);
	return 1;
}

CMD:spmi(playerid, params[], 4, 0)
{
	if(sscanf(params, "ddd", vID, datez, player1)) return SendUsage(playerid, "/spmi <MarkerType> <Color> <Style>");

	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerMapIcon(playerid, 90, X, Y, Z, vID, datez, player1);

	AdminCommandLog("SPMI", playerid, -1);
	return 1;
}

CMD:myweap(playerid, params[], 0, 0)
{
	GetWeaponName((datez = GetPlayerWeapon(playerid)), country, sizeof(country));
	SendClientMessagef(playerid, COLOR_RED, "WeapID: {" #XCOLOR_GREEN "}%d {" #XCOLOR_YELLOW "}%s", datez, country);
	return 1;
}

CMD:pinfo(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pinfo {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	vID = GetPlayerDynamicVehicleID(player1);
	SendClientMessagef(playerid, COLOR_RED, "Skin: %d, Team: %d, gwTeam: %d, CP: %d, vID: %d, vModel: %d, ConnectionStatus: %d", GetPlayerSkin(player1), GetPlayerTeam(player1), g_pGangwarTeam[player1], GetPlayerVisibleDynamicCP(player1), vID, GetDynamicVehicleModel(vID), NetStats_ConnectionStatus(player1));
//	SendClientMessagef(playerid, COLOR_BLUE, "pGamesData: %d", pGamesData[player1]);
	return 1;
}
CMD:myskin(playerid, params[], 0, 0)
{
	return cmd_pinfo(playerid, params);
}

CMD:pflags(playerid, params[], 3, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pflags {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_SPIN = %d", g_PlayerFlags[player1] & e_SPIN);
	format(dline, sizeof(dline), "%s\ne_READCMDS = %d", dline, g_PlayerFlags[player1] & e_READCMDS);
	format(dline, sizeof(dline), "%s\ne_FLY = %d", dline, g_PlayerFlags[player1] & e_FLY);
	format(dline, sizeof(dline), "%s\ne_ANTIFALL = %d", dline, g_PlayerFlags[player1] & e_ANTIFALL);
	format(dline, sizeof(dline), "%s\ne_SPEEDO = %d", dline, g_PlayerFlags[player1] & e_SPEEDO);
	format(dline, sizeof(dline), "%s\ne_STUNTBONUS = %d", dline, g_PlayerFlags[player1] & e_STUNTBONUS);
	format(dline, sizeof(dline), "%s\ne_STUNTS = %d", dline, g_PlayerFlags[player1] & e_STUNTS);
	format(dline, sizeof(dline), "%s\ne_GOTO = %d", dline, g_PlayerFlags[player1] & e_GOTO);
	format(dline, sizeof(dline), "%s\ne_TELE_MSG = %d", dline, g_PlayerFlags[player1] & e_TELE_MSG);
	format(dline, sizeof(dline), "%s\ne_GAME_HOUR = %d", dline, g_PlayerFlags[player1] & e_GAME_HOUR);
	format(dline, sizeof(dline), "%s\ne_NO_NAMETAG = %d", dline, g_PlayerFlags[player1] & e_NO_NAMETAG);
	format(dline, sizeof(dline), "%s\ne_SEENAMETAG = %d", dline, g_PlayerFlags[player1] & e_SEENAMETAG);
	format(dline, sizeof(dline), "%s\ne_CLICKTELE = %d", dline, g_PlayerFlags[player1] & e_CLICKTELE);
	format(dline, sizeof(dline), "%s\ne_SPVEL = %d", dline, g_PlayerFlags[player1] & e_SPVEL);
	format(dline, sizeof(dline), "%s\ne_SEEPMS = %d", dline, g_PlayerFlags[player1] & e_SEEPMS);
	format(dline, sizeof(dline), "%s\ne_FASTRESPAWN = %d", dline, g_PlayerFlags[player1] & e_FASTRESPAWN);
	format(dline, sizeof(dline), "%s\ne_GOD = %d", dline, g_PlayerFlags[player1] & e_GOD);
	format(dline, sizeof(dline), "%s\ne_MUSIC = %d", dline, g_PlayerFlags[player1] & e_MUSIC);
	format(dline, sizeof(dline), "%s\ne_CON_MSG = %d", dline, g_PlayerFlags[player1] & e_CON_MSG);
	format(dline, sizeof(dline), "%s\ne_LOCATE = %d", dline, g_PlayerFlags[player1] & e_LOCATE);
	format(dline, sizeof(dline), "%s\ne_CREATEDM_RIGHT = %d", dline, g_PlayerFlags[player1] & e_CREATEDM_RIGHT);
	format(dline, sizeof(dline), "%s\ne_CREATECLAN_RIGHT = %d", dline, g_PlayerFlags[player1] & e_CREATECLAN_RIGHT);
	format(dline, sizeof(dline), "%s\ne_MAX_DMPLAYERS = %d", dline, g_PlayerFlags[player1] & e_MAX_DMPLAYERS);
	format(dline, sizeof(dline), "%s\ne_AUTOLOGIN = %d", dline, g_PlayerFlags[player1] & e_AUTOLOGIN);
	format(dline, sizeof(dline), "%s\ne_AUTOSPAWN = %d", dline, g_PlayerFlags[player1] & e_AUTOSPAWN);
	format(dline, sizeof(dline), "%s\ne_CARFLY = %d", dline, g_PlayerFlags[player1] & e_CARFLY);
	format(dline, sizeof(dline), "%s\ne_SHOW_HIDED_CON_MSG = %d", dline, g_PlayerFlags[player1] & e_SHOW_HIDED_CON_MSG);
	format(dline, sizeof(dline), "%s\ne_HAS_VIP = %d", dline, g_PlayerFlags[player1] & e_HAS_VIP);
	format(dline, sizeof(dline), "%s\ne_ALLOW_SPEC = %d", dline, g_PlayerFlags[player1] & e_ALLOW_SPEC);


	format(i_str, 64, "g_PlayerFlags {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_PlayerFlags[%d] = %d | %b", player1, g_PlayerFlags[player1], g_PlayerFlags[player1]);
    AdminCommandLog("PFLAGS", playerid, player1);
	return 1;
}

CMD:pflags2(playerid, params[], 3, 0)
{
    if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pflags2 {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	dline[0] = EOS;
    format(dline, sizeof(dline), "e_HOUSE_ICONS = %d", dline, g_PlayerFlags2[player1] & e_HOUSE_ICONS);
    format(dline, sizeof(dline), "%s\ne_BIZNIS_ICONS = %d", dline, g_PlayerFlags2[player1] & e_BIZNIS_ICONS);
    format(dline, sizeof(dline), "%s\ne_PORTAL = %d", dline, g_PlayerFlags2[player1] & e_PORTAL);
    format(dline, sizeof(dline), "%s\ne_FPS_MOD = %d", dline, g_PlayerFlags2[player1] & e_FPS_MOD);
    format(dline, sizeof(dline), "%s\ne_VIP_TEXT = %d", dline, g_PlayerFlags2[player1] & e_VIP_TEXT);
	format(dline, sizeof(dline), "%s\ne_SHOW_CLAN_MSG = %d", dline, g_PlayerFlags2[player1] & e_SHOW_CLAN_MSG);
	format(dline, sizeof(dline), "%s\ne_ALLOW_CHANGENAME = %d", dline, g_PlayerFlags2[player1] & e_ALLOW_CHANGENAME);
	format(dline, sizeof(dline), "%s\ne_RACE_ICONS = %d", dline, g_PlayerFlags2[player1] & e_RACE_ICONS);
	format(dline, sizeof(dline), "%s\ne_HIDE_CLANZONES = %d", dline, g_PlayerFlags2[player1] & e_HIDE_CLANZONES);
    format(dline, sizeof(dline), "%s\ne_HUD = %d", dline, g_PlayerFlags2[player1] & e_HUD);
    format(dline, sizeof(dline), "%s\ne_ALLOW_RACE_RECORD = %d", dline, g_PlayerFlags2[player1] & e_ALLOW_RACE_RECORD);
    //format(dline, sizeof(dline), "%s\ne_PLAYER_DM_MODE = %d", dline, g_PlayerFlags2[player1] & e_PLAYER_DM_MODE);
    
    
    
	format(i_str, 64, "g_PlayerFlags2 {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_PlayerFlags2[%d] = %d | %b", player1, g_PlayerFlags2[player1], g_PlayerFlags2[player1]);
    AdminCommandLog("PFLAGS2", playerid, player1);
    return 1;
}

CMD:ptdflags(playerid, params[], 3, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/ptdflags {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_NOTD_FELIRAT = %d", g_pTDFlags[player1] & e_NOTD_FELIRAT);
	format(dline, sizeof(dline), "%s\ne_NOTD_HONLAP = %d", dline, g_pTDFlags[player1] & e_NOTD_HONLAP);
	format(dline, sizeof(dline), "%s\ne_NOTD_ORA = %d", dline, g_pTDFlags[player1] & e_NOTD_ORA);
	format(dline, sizeof(dline), "%s\ne_NOTD_XP = %d", dline, g_pTDFlags[player1] & e_NOTD_XP);
	format(dline, sizeof(dline), "%s\ne_NOTD_XPCSIK = %d", dline, g_pTDFlags[player1] & e_NOTD_XPCSIK);
	format(dline, sizeof(dline), "%s\ne_NOTD_XPSZINT = %d", dline, g_pTDFlags[player1] & e_NOTD_XPSZINT);
	format(dline, sizeof(dline), "%s\ne_NOTD_DMINFO = %d", dline, g_pTDFlags[player1] & e_NOTD_DMINFO);
	format(dline, sizeof(dline), "%s\ne_NOTD_DMKILLS = %d", dline, g_pTDFlags[player1] & e_NOTD_DMKILLS);
	format(dline, sizeof(dline), "%s\ne_NOTD_TELE = %d", dline, g_pTDFlags[player1] & e_NOTD_TELE);
	format(dline, sizeof(dline), "%s\ne_NOTD_FALLOUT = %d", dline, g_pTDFlags[player1] & e_NOTD_FALLOUT);
	format(dline, sizeof(dline), "%s\ne_NOTD_CTC = %d", dline, g_pTDFlags[player1] & e_NOTD_CTC);
	format(dline, sizeof(dline), "%s\ne_NOTD_WELCOME = %d", dline, g_pTDFlags[player1] & e_NOTD_WELCOME);
	format(dline, sizeof(dline), "%s\ne_NOTD_INFOTD = %d", dline, g_pTDFlags[player1] & e_NOTD_INFOTD);
	format(dline, sizeof(dline), "%s\ne_NOTD_HEALTH = %d", dline, g_pTDFlags[player1] & e_NOTD_HEALTH);
	format(dline, sizeof(dline), "%s\ne_NOTD_ARMOUR = %d", dline, g_pTDFlags[player1] & e_NOTD_ARMOUR);
	format(dline, sizeof(dline), "%s\ne_TD_GPS = %d", dline, g_pTDFlags[player1] & e_TD_GPS);
	format(dline, sizeof(dline), "%s\ne_NOTD_GIVEDAMAGE = %d", dline, g_pTDFlags[player1] & e_NOTD_GIVEDAMAGE);
	format(dline, sizeof(dline), "%s\ne_NOTD_TAKEDAMAGE = %d", dline, g_pTDFlags[player1] & e_NOTD_TAKEDAMAGE);
	format(dline, sizeof(dline), "%s\ne_NOTD_FPS = %d", dline, g_pTDFlags[player1] & e_NOTD_FPS);
	format(dline, sizeof(dline), "%s\ne_NOTD_DM_INFO_HELP = %d", dline, g_pTDFlags[player1] & e_NOTD_DM_INFO_HELP);
    format(dline, sizeof(dline), "%s\ne_NOTD_SPEC = %d", dline, g_pTDFlags[player1] & e_NOTD_SPEC);
	format(i_str, 64, "g_pTDFlags {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_pTDFlags[%d] = %d | %b", player1, g_pTDFlags[player1], g_pTDFlags[player1]);
    AdminCommandLog("TDFLAGS", playerid, player1);
	return 1;
}

CMD:pdata(playerid, params[], 3, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pdata {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_INVIS = %d", g_PlayerData[player1] & e_INVIS);
	format(dline, sizeof(dline), "%s\ne_NORELOAD = %d", dline, g_PlayerData[player1] & e_NORELOAD);
	format(dline, sizeof(dline), "%s\ne_REJTETT = %d", dline, g_PlayerData[player1] & e_REJTETT);
	format(dline, sizeof(dline), "%s\ne_NOCARMSG = %d", dline, g_PlayerData[player1] & e_NOCARMSG);
	format(dline, sizeof(dline), "%s\ne_FALLED = %d", dline, g_PlayerData[player1] & e_FALLED);
	format(dline, sizeof(dline), "%s\ne_TIMESSPAWNED = %d", dline, g_PlayerData[player1] & e_TIMESSPAWNED);
	format(dline, sizeof(dline), "%s\ne_FIRST_CLASS = %d", dline, g_PlayerData[player1] & e_FIRST_CLASS);
	format(dline, sizeof(dline), "%s\ne_LOGGED_IN = %d", dline, g_PlayerData[player1] & e_LOGGED_IN);
	format(dline, sizeof(dline), "%s\ne_THREADS_DONE = %d", dline, g_PlayerData[player1] & e_THREADS_DONE);
	format(dline, sizeof(dline), "%s\ne_ON_STYLE = %d", dline, g_PlayerData[player1] & e_ON_STYLE);
	format(dline, sizeof(dline), "%s\ne_SAVE_STYLE = %d", dline, g_PlayerData[player1] & e_SAVE_STYLE);
	format(dline, sizeof(dline), "%s\ne_RACEMODE = %d", dline, g_PlayerData[player1] & e_RACEMODE);
	format(dline, sizeof(dline), "%s\ne_CLEARWORLD = %d", dline, g_PlayerData[player1] & e_CLEARWORLD);
	format(dline, sizeof(dline), "%s\ne_CLEARWORLD_NOOBJECTS = %d", dline, g_PlayerData[player1] & e_CLEARWORLD_NOOBJECTS);
	format(dline, sizeof(dline), "%s\ne_NOVOBJECTS = %d", dline, g_PlayerData[player1] & e_NOVOBJECTS);
	format(dline, sizeof(dline), "%s\ne_CMDCOUNT = %d", dline, g_PlayerData[player1] & e_CMDCOUNT);
	format(dline, sizeof(dline), "%s\ne_SPAWN_SP = %d", dline, g_PlayerData[player1] & e_SPAWN_SP);
	format(dline, sizeof(dline), "%s\ne_MUST_LOGIN = %d", dline, g_PlayerData[player1] & e_MUST_LOGIN);
	format(dline, sizeof(dline), "%s\ne_USE_LOOP_ANIM = %d", dline, g_PlayerData[player1] & e_USE_LOOP_ANIM);
	format(dline, sizeof(dline), "%s\ne_NO_SYNC = %d", dline, g_PlayerData[player1] & e_NO_SYNC);
	format(dline, sizeof(dline), "%s\ne_AFK = %d", dline, g_PlayerData[player1] & e_AFK);
	format(dline, sizeof(dline), "%s\ne_SPEEDO_TD = %d", dline, g_PlayerData[player1] & e_SPEEDO_TD);
	format(dline, sizeof(dline), "%s\ne_BEBASZVA = %d", dline, g_PlayerData[player1] & e_BEBASZVA);
	format(dline, sizeof(dline), "%s\ne_MYTEXT = %d", dline, g_PlayerData[player1] & e_MYTEXT);
	format(dline, sizeof(dline), "%s\ne_KOCSI_RESPAWN = %d", dline, g_PlayerData[player1] & e_KOCSI_RESPAWN);
	format(dline, sizeof(dline), "%s\ne_RACE_KICKED = %d", dline, g_PlayerData[player1] & e_RACE_KICKED);
	format(dline, sizeof(dline), "%s\ne_CTC_VOTED = %d", dline, g_PlayerData[player1] & e_CTC_VOTED);
	format(dline, sizeof(dline), "%s\ne_RECONNECT = %d", dline, g_PlayerData[player1] & e_RECONNECT);
	format(dline, sizeof(dline), "%s\ne_ZASZLONA_MEGDOGLOTT = %d", dline, g_PlayerData[player1] & e_ZASZLONA_MEGDOGLOTT);
	format(dline, sizeof(dline), "%s\ne_EXPLOSION_AMMO = %d", dline, g_PlayerData[player1] & e_EXPLOSION_AMMO);

	format(i_str, 64, "g_PlayerData {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_PlayerData[%d] = %d | %b", player1, g_PlayerData[player1], g_PlayerData[player1]);
    AdminCommandLog("PDATA", playerid, player1);
	return 1;
}

CMD:pgames(playerid, params[], 3, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pgames {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_IN_DERBY = %d", g_pGamesData[player1] & e_IN_DERBY);
	format(dline, sizeof(dline), "%s\ne_IN_FALLOUT = %d", dline, g_pGamesData[player1] & e_IN_FALLOUT);
	format(dline, sizeof(dline), "%s\ne_IN_DM = %d", dline, g_pGamesData[player1] & e_IN_DM);
	format(dline, sizeof(dline), "%s\ne_IN_TRUCKING = %d", dline, g_pGamesData[player1] & e_IN_TRUCKING);
	format(dline, sizeof(dline), "%s\ne_IN_RANGE = %d", dline, g_pGamesData[player1] & e_IN_RANGE);
	format(dline, sizeof(dline), "%s\ne_IN_RACE = %d", dline, g_pGamesData[player1] & e_IN_RACE);
	format(dline, sizeof(dline), "%s\ne_RABOL = %d", dline, g_pGamesData[player1] & e_RABOL);
	format(dline, sizeof(dline), "%s\ne_KOCSIT_LOP = %d", dline, g_pGamesData[player1] & e_KOCSIT_LOP);
	format(dline, sizeof(dline), "%s\ne_IN_GANGWAR = %d", dline, g_pGamesData[player1] & e_IN_GANGWAR);
	format(dline, sizeof(dline), "%s\ne_IN_CTC = %d", dline, g_pGamesData[player1] & e_IN_CTC);
	format(dline, sizeof(dline), "%s\ne_FLAG_OWNER = %d", dline, g_pGamesData[player1] & e_FLAG_OWNER);
	format(dline, sizeof(dline), "%s\ne_BCAR_OWNER = %d", dline, g_pGamesData[player1] & e_BCAR_OWNER);
	format(dline, sizeof(dline), "%s\ne_NOTELE = %d", dline, g_pGamesData[player1] & e_NOTELE);
	format(dline, sizeof(dline), "%s\ne_GRAV = %d", dline, g_pGamesData[player1] & e_GRAV);
	format(dline, sizeof(dline), "%s\ne_WORLDEDIT = %d", dline, g_pGamesData[player1] & e_WORLDEDIT);
	format(dline, sizeof(dline), "%s\ne_GHOSTMODE = %d", dline, g_pGamesData[player1] & e_GHOSTMODE);
	format(dline, sizeof(dline), "%s\ne_IN_TAXI = %d", dline, g_pGamesData[player1] & e_IN_TAXI);

	format(i_str, 64, "g_pGamesData {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_pGamesData[%d] = %d | %b", player1, g_pGamesData[player1], g_pGamesData[player1]);
    AdminCommandLog("PGAMES", playerid, player1);
	return 1;
}

CMD:pother(playerid, params[], 3, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pother {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_NOBACK = %d", g_pOtherFlags[player1] & e_NOBACK);
	format(dline, sizeof(dline), "%s\ne_HOUSEMENU = %d", dline, g_pOtherFlags[player1] & e_HOUSEMENU);
	format(dline, sizeof(dline), "%s\ne_HAVE_CLIENT = %d", dline, g_pOtherFlags[player1] & e_HAVE_CLIENT);
	format(dline, sizeof(dline), "%s\ne_CLIENT_CHECKED = %d", dline, g_pOtherFlags[player1] & e_CLIENT_CHECKED);
	format(dline, sizeof(dline), "%s\ne_RAKSAMP = %d", dline, g_pOtherFlags[player1] & e_RAKSAMP);
	format(dline, sizeof(dline), "%s\ne_NO_TEXTDRAWS = %d", dline, g_pOtherFlags[player1] & e_NO_TEXTDRAWS);
	format(dline, sizeof(dline), "%s\ne_FINDMODE = %d", dline, g_pOtherFlags[player1] & e_FINDMODE);
	format(dline, sizeof(dline), "%s\ne_JETPACK = %d", dline, g_pOtherFlags[player1] & e_JETPACK);
	format(dline, sizeof(dline), "%s\ne_KICKED = %d", dline, g_pOtherFlags[player1] & e_KICKED);
	format(dline, sizeof(dline), "%s\ne_HAVE_TICKET = %d", dline, g_pOtherFlags[player1] & e_HAVE_TICKET);
	format(dline, sizeof(dline), "%s\ne_GOD_ALLOWED = %d", dline, g_pOtherFlags[player1] & e_GOD_ALLOWED);
	format(dline, sizeof(dline), "%s\ne_GOD_SETTED = %d", dline, g_pOtherFlags[player1] & e_GOD_SETTED);
	format(dline, sizeof(dline), "%s\ne_BEMENT_BIZNISZBE = %d", dline, g_pOtherFlags[player1] & e_BEMENT_BIZNISZBE);
	format(dline, sizeof(dline), "%s\ne_ZONE_UPDATE_DISABLED = %d", dline, g_pOtherFlags[player1] & e_ZONE_UPDATE_DISABLED);
	format(dline, sizeof(dline), "%s\ne_IN_HOUSE = %d", dline, g_pOtherFlags[player1] & e_IN_HOUSE);
    
	format(i_str, 64, "g_pOtherFlags {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_pOtherFlags[%d] = %d | %b", player1, g_pOtherFlags[player1], g_pOtherFlags[player1]);
    AdminCommandLog("POTHER", playerid, player1);
	return 1;
}

CMD:sflags(playerid, params[], 3, 0)
{
    dline[0] = EOS;
	format(dline, sizeof(dline), "e_RACEDEBUG = %d", g_ServerFlags & e_RACEDEBUG);
	format(dline, sizeof(dline), "%s\ne_ANTIMOP = %d", dline, g_ServerFlags & e_ANTIMOP);
	//format(dline, sizeof(dline), "%s\ne_CMDFLOOD = %d", dline, g_ServerFlags & e_CMDFLOOD);
	format(dline, sizeof(dline), "%s\ne_INSTAGIB = %d", dline, g_ServerFlags & e_INSTAGIB);
	format(dline, sizeof(dline), "%s\ne_AUTOGATE = %d", dline, g_ServerFlags & e_AUTOGATE);
	format(dline, sizeof(dline), "%s\ne_GROVEFAL = %d", dline, g_ServerFlags & e_GROVEFAL);
	format(dline, sizeof(dline), "%s\ne_MATEK = %d", dline, g_ServerFlags & e_MATEK);
	format(dline, sizeof(dline), "%s\ne_TELEPORT = %d", dline, g_ServerFlags & e_TELEPORT);
	format(dline, sizeof(dline), "%s\ne_DERBY_STARTED = %d", dline, g_ServerFlags & e_DERBY_STARTED);
	format(dline, sizeof(dline), "%s\ne_FALLOUT_STARTED = %d", dline, g_ServerFlags & e_FALLOUT_STARTED);
	format(dline, sizeof(dline), "%s\ne_RACE_MAJSTART = %d", dline, g_ServerFlags & e_RACE_MAJSTART);
	format(dline, sizeof(dline), "%s\ne_RACE_START = %d", dline, g_ServerFlags & e_RACE_START);
	format(dline, sizeof(dline), "%s\ne_RACE_ACTIVE = %d", dline, g_ServerFlags & e_RACE_ACTIVE);
	format(dline, sizeof(dline), "%s\ne_WHEEL_ALTERNATE = %d", dline, g_ServerFlags & e_WHEEL_ALTERNATE);
	format(dline, sizeof(dline), "%s\ne_LEGBALON_WAIT = %d", dline, g_ServerFlags & e_LEGBALON_WAIT);
	format(dline, sizeof(dline), "%s\ne_DERBY_CAN_START = %d", dline, g_ServerFlags & e_DERBY_CAN_START);
	format(dline, sizeof(dline), "%s\ne_IPLIMIT = %d", dline, g_ServerFlags & e_IPLIMIT);
	format(dline, sizeof(dline), "%s\ne_DATA_LOADED = %d", dline, g_ServerFlags & e_DATA_LOADED);
	format(dline, sizeof(dline), "%s\ngIP_Count = %d", dline, gIP_Count);
	format(dline, sizeof(dline), "%s\ne_ANTI_SOBEIT_KICK = %d", dline, g_ServerFlags & e_ANTI_SOBEIT_KICK);
	format(dline, sizeof(dline), "%s\ne_ANTIDB = %d", dline, g_ServerFlags & e_ANTIDB);

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "g_ServerFlags", dline, "Oké");
	SendClientMessagef(playerid, -1, "g_ServerFlags = %d | %b", g_ServerFlags, g_ServerFlags);
    AdminCommandLog("SFLAGS", playerid, -1);
	return 1;
}

CMD:chatflags(playerid, params[], 3, 0)
{
    if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/chatflags {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	dline[0] = EOS;
    format(dline, sizeof(dline), "e_TeleTest_MSG = %d", dline, g_pChatMSGFlags[player1] & e_TeleTest_MSG);
    format(dline, sizeof(dline), "%s\ne_MathsTest_MSG = %d", dline, g_pChatMSGFlags[player1] & e_MathsTest_MSG);
    format(dline, sizeof(dline), "%s\ne_ReactionTest_MSG = %d", dline, g_pChatMSGFlags[player1] & e_ReactionTest_MSG);
    format(dline, sizeof(dline), "%s\ne_Race_MSG = %d", dline, g_pChatMSGFlags[player1] & e_Race_MSG);
    format(dline, sizeof(dline), "%s\ne_Info_MSG = %d", dline, g_pChatMSGFlags[player1] & e_Info_MSG);
    format(dline, sizeof(dline), "%s\ne_ClanChat_MSG = %d", dline, g_pChatMSGFlags[player1] & e_ClanChat_MSG);
    format(dline, sizeof(dline), "%s\ne_Goldpot_MSG = %d", dline, g_pChatMSGFlags[player1] & e_Goldpot_MSG);
    format(dline, sizeof(dline), "%s\ne_MinigameJoins_MSG = %d", dline, g_pChatMSGFlags[player1] & e_MinigameJoins_MSG);
    format(dline, sizeof(dline), "%s\ne_Flag_MSG = %d", dline, g_pChatMSGFlags[player1] & e_Flag_MSG);
    format(dline, sizeof(dline), "%s\ne_BonusCar_MSG = %d", dline, g_pChatMSGFlags[player1] & e_BonusCar_MSG);
    format(dline, sizeof(dline), "%s\ne_DMJoin_MSG = %d", dline, g_pChatMSGFlags[player1] & e_DMJoin_MSG);
	format(i_str, 64, "g_pChatMSGFlags {%06x}%s(%d)", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Oké");

	SendClientMessagef(playerid, -1, "g_pChatMSGFlags[%d] = %d | %b", player1, g_pChatMSGFlags[player1], g_pChatMSGFlags[player1]);
    AdminCommandLog("CHATFLAGS", playerid, player1);
    return 1;
}

CMD:dobject(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/dobject <Név>");

	new
		File:fSaveFile = fopen("/NMSS/DerbySpawns.txt", io_append);
	if(!fSaveFile) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	format(tmp, sizeof(tmp), "CreateDynamicObject(5020, %.4f, %.4f, %.4f, 0.0, 90.0, 0.0, 11); // %s\n{%.4f, %.4f, %.4f}, // %s\n\n", X, Y, Z, params, X, Y, Z + 2.0, params);
	fwrite(fSaveFile, tmp);
	fclose(fSaveFile);

	CreateDynamicObject(5020, X, Y, Z, 0.0, 90.0, 0.0);
	SendClientMessagef(playerid, -1, LANG(playerid, "MSG_OBJECT_MENTVE_"), params);

    AdminCommandLog("DOBJECT", playerid, -1);
	return 1;
}

CMD:mycomp(playerid, params[], 0, 0)
{
	new
		bool:IsSave;
	if(sscanf(params, "D(-1)D(0)", vID, bool:IsSave)) return SendUsage(playerid, "/mycomp {" #XCOLOR_YELLOW "}<Jármû ID = -1> <Mentés = 0>");
	if(!IsPlayerInAnyDynamicVehicle(playerid) && vID == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_JARMUBEN"));

	if(IsSave)
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) IsSave = false;
	}

	if(vID == -1) vID = GetPlayerDynamicVehicleID(playerid);

    fcheck("/NMSS/CarComponents.ini");
    new
		File:SaveFile = fopen("/NMSS/CarComponents.ini", io_append);

	if(IsSave && SaveFile)
	{
	    getdate(year, month, day);
		gettime(hour, minute, second);
		format(tmp, sizeof(tmp), "[%02d.%02d.%02d %02d:%02d:%02d] %s <%d>\n", year, month, day, hour, minute, second, VehName(vID), GetDynamicVehicleModel(vID));
        fwrite(SaveFile, tmp);
	}
	for(new i; i != 14; i++)
	{
        if(!(datez = GetDynamicVehComponentInSlot(vID, i))) continue;
        SendClientMessagef(playerid, COLOR_YELLOW, ":: COMPONENT {" #XCOLOR_BLUE2 "}%d {" #XCOLOR_YELLOW "}:: {" #XCOLOR_GREEN "}%d", i, datez);

		if(IsSave && SaveFile)
		{
    		format(tmp, sizeof(tmp), "AddDynamicVehicleComponent(vID, %d);\n", datez);
            fwrite(SaveFile, tmp);
		}
	}

    if(IsSave && SaveFile)
	{
		fwrite(SaveFile, "\n");
		fclose(SaveFile);
	}
	return 1;
}

CMD:infotd(playerid, params[], 3, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/infotd <Üzenet>");
    if(!IsSafeForTextdraw(params)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZOVEG_NEM_MEFELELO"));

	foreach(new i: Player)
	{
		InfoTD_MSG(i, MESSAGE_TIME, params);
	}

    AdminCommandLog("INFOTD", playerid, -1, params);
	return 1;
}

CMD:welcome(playerid, params[], 3, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/welcome <Üzenet>");
    if(!IsSafeForTextdraw(params)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZOVEG_NEM_MEFELELO"));

	foreach(new i: Player)
	{
		ShowWelcome(i, params, true);
	}

    AdminCommandLog("WELCOME", playerid, -1, params);
	return 1;
}

CMD:setpvarint(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]d", player1, i_str, datez)) return SendUsage(playerid, "/setpvarint <Játékos ID/Név> <Név> <Érték {" #XCOLOR_BLUE "}int{" #XCOLOR_RED "}>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SetPVarInt(player1, i_str, datez);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RPVAR_ERTEKE_ATTALITVA_NBH"), pName(player1), player1, i_str, datez);

	format(i_str, sizeof(i_str), "\"%s\" = %d", i_str, datez),
	AdminCommandLog("SETPVARINT", playerid, player1, i_str);
 	return 1;
}

CMD:deletepvar(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/deletepvar <Játékos ID/Név> <Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	DeletePVar(player1, i_str);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RPVAR_TOROLVEW"));

	AdminCommandLog("DELETEPVAR", playerid, player1, i_str);
 	return 1;
}

CMD:getpvarint(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/getpvarint <Játékos ID/Név> <Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_RED, "GetPVarInt({" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}, {" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%d", player1, i_str, (datez = GetPVarInt(player1, i_str)));

	format(i_str, sizeof(i_str), "\"%s\" = %d", i_str, datez),
	AdminCommandLog("GETPVARINT", playerid, player1, i_str);
	return 1;
}

CMD:getpvartype(playerid, params[], 3, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/getpvartype <Játékos ID/Név> <Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_RED, "GetPVarType({" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}, {" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%d", player1, i_str, GetPVarType(player1, i_str));

	AdminCommandLog("GETPVARTYPE", playerid, player1, i_str);
	return 1;
}

CMD:getpvarfloat(playerid, params[], 3, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/getpvarfloat <Játékos ID/Név> <Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_RED, "GetPVarFloat({" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}, {" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%f", player1, i_str, (X = GetPVarFloat(player1, i_str)));

	format(i_str, sizeof(i_str), "\"%s\" = %.4f", i_str, X),
	AdminCommandLog("GETPVARFLOAT", playerid, player1, i_str);
	return 1;
}

CMD:setpvarfloat(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]f", player1, i_str, V[0])) return SendUsage(playerid, "/setpvarfloat <Játékos ID/Név> <Név> <Érték {" #XCOLOR_BLUE "}float{" #XCOLOR_RED "}>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SetPVarFloat(player1, i_str, V[0]);
 	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RPVAR_ERTEKE_ATTALITVA_NBH_1"), pName(player1), player1, i_str, V[0]);

	format(i_str, sizeof(i_str), "\"%s\" = %.4f", i_str, V[0]),
	AdminCommandLog("SETPVARFLOAT", playerid, player1, i_str);
	return 1;
}

CMD:setpvarstring(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]s[" #STR_SIZE "]", player1, i_str, tmp)) return SendUsage(playerid, "/setpvarstring <Játékos ID/Név> <Név> <Karakterlánc>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SetPVarString(player1, i_str, tmp);
	SendClientMessagef(playerid, COLOR_RED, "SetPVarString(%d, %s) = %s", player1, i_str, tmp);

	format(i_str, sizeof(i_str), "\"%s\" = \"%s\"", i_str, tmp),
	AdminCommandLog("SETPVARSTRING", playerid, player1, i_str);
	return 1;
}

CMD:getpvarstring(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/getpvarstring <Játékos ID/Név> <Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	GetPVarString(player1, i_str, tmp, sizeof(tmp));
	SendClientMessagef(playerid, COLOR_RED, "GetPVarString(%d, \"%s\") = %s", player1, i_str, tmp);

	format(i_str, sizeof(i_str), "\"%s\" = \"%s\"", i_str, tmp),
	AdminCommandLog("GETPVARSTRING", playerid, player1, i_str);
	return 1;
}

// GVar //
CMD:getgvarint(playerid, params[], 3, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, player1)) return SendUsage(playerid, "/getpvarint <Név> <ID>");

	SendClientMessagef(playerid, COLOR_RED, "GetGVarInt({" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}, {" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%d", i_str, player1, GetGVarInt(i_str, player1));
	return 1;
}

CMD:getgvarfloat(playerid, params[], 3, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, player1)) return SendUsage(playerid, "/getgvarfloat <Név> <ID>");

	SendClientMessagef(playerid, COLOR_RED, "GetGVarFloat({" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}, {" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%f", i_str, player1, GetGVarFloat(i_str, player1));
	return 1;
}

CMD:setgvarint(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]dd", i_str, player1, datez)) return SendUsage(playerid, "/setgvarint <Név> <ID> <Érték {" #XCOLOR_BLUE "}int{" #XCOLOR_RED "}>");

	SetGVarInt(i_str, datez, player1);
 	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RGVAR_ERTEKE_ATTALITVA_NBH"), player1, i_str, datez);
	return 1;
}

CMD:setgvarfloat(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]df", i_str, player1, V[0])) return SendUsage(playerid, "/setgvarfloat <Név> <ID> <Érték {" #XCOLOR_BLUE "}float{" #XCOLOR_RED "}>");

	SetGVarFloat(i_str, V[0], player1);
 	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RGVAR_ERTEKE_ATTALITVA_NBH_1"), player1, i_str, V[0]);
	return 1;
}

CMD:deletegvar(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, player1)) return SendUsage(playerid, "/deletegvar <Név> <ID>");

	DeleteGVar(i_str, player1);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RGVAR_TOROLVEW"));
 	return 1;
}

CMD:getgvartype(playerid, params[], 3, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, player1)) return SendUsage(playerid, "/getpvartype <Név> <ID>");

	SendClientMessagef(playerid, COLOR_RED, "GetGVarType({" #XCOLOR_WHITE "}\"%s\"{" #XCOLOR_RED "}, {" #XCOLOR_BLUE "}%d{" #XCOLOR_RED "}) = {" #XCOLOR_BLUE2 "}%d", i_str, player1, GetGVarType(i_str, player1));
	return 1;
}

CMD:getgvarstring(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]d", i_str, player1)) return SendUsage(playerid, "/getgvarstring <Név> <ID>");

	new
	    szRet[1024];
	GetGVarString(i_str, szRet, sizeof(szRet), player1);
	SendClientMessagef(playerid, COLOR_RED, "GetGVarString(\"%s\", %d) = %s", i_str, player1, szRet);
	printf("szRet: %s - %s", i_str, szRet);
	return 1;
}

CMD:setgvarstring(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]ds[" #STR_SIZE "]", i_str, player1, tmp)) return SendUsage(playerid, "/setgvarstring <Név> <ID> <Szöveg>");

	SetGVarString(i_str, tmp, player1);
	SendClientMessagef(playerid, COLOR_RED, "SetGVarString(\"%s\", %d) = %s", i_str, player1, tmp);
	return 1;
}

// NPC //
CMD:addnpc(playerid, params[], 3, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", i_str, tmp)) return SendUsage(playerid, "/addnpc <NPC Név> <Felvétel Név>");
	if(strlen(i_str) > 20) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_NEV_TUL_HOSSZU_MAXIMUM"));
 	if(strlen(tmp) > 20) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_NEV_TUL_HOSSZU_MAXIMUM"));

   	ConnectNPC(i_str, tmp);
 	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNPC_CSATLAKOZTATVA_BH"), i_str);

	format(i_str, sizeof(i_str), "%s - %s", i_str, tmp),
	AdminCommandLog("ADDNPC", playerid, -1, i_str);
	return 1;
}

CMD:createactor(playerid, params[], 3, 0)
{
	new modelid;
	if(sscanf(params, "D(-1)", modelid)) return SendUsage(playerid, "/createactor <ModelID>");
	if(modelid == -1) modelid = random(312);

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	GetXYInFrontOfPlayer(playerid, X, Y, 5.0);
	datez = CreateActor(modelid, X, Y, Z, -Angle);
	SetActorInvulnerable(datez, false);
	SendClientMessagef(playerid, COLOR_WHITE, "Actor létrehozva: %d", datez);
	return 1;
}

CMD:dactor(playerid, params[], 3, 0)
{
	new actorid;
	if(sscanf(params, "d", actorid)) return SendUsage(playerid, "/dactor <actorid>");
	if(!IsValidActor(actorid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz actor ID");

	DestroyActor(actorid);
	return 1;
}

CMD:actorv(playerid, params[], 3, 0)
{
	new actorid;
	if(sscanf(params, "d", actorid)) return SendUsage(playerid, "/dactor <actorid>");
	if(!IsValidActor(actorid)) return SendClientMessage(playerid, COLOR_RED, "HIBA: Rossz actor ID");

	SetActorInvulnerable(actorid, !IsActorInvulnerable(actorid));

	SendClientMessagef(playerid, COLOR_RED, "IsActorInvulnerable: %d", IsActorInvulnerable(actorid));
	return 1;
}

/*
CMD:queue(playerid, params[], 4, 0)
{
	g_pQueryQueue[playerid]++;
	return 1;
}
*/
CMD:zcount(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", player1, datez)) return SendUsage(playerid, "/zcount <Player Másodperc> <Respawn Másodperc>{" #XCOLOR_WHITE "}:: {" #XCOLOR_GREEN "}Jelenleg: %d, %d", ZaszloCount, ZaszloRespawn);

	ZaszloCount = player1;
	ZaszloRespawn = datez;

	format(i_str, sizeof(i_str), "count: %d, respawn: %d", player1, datez),
	AdminCommandLog("ZCOUNT", playerid, -1, i_str);
	return 1;
}

CMD:fcount(playerid, params[], 4, 0)
{
	if(sscanf(params, "dD(1)", player1, datez)) return SendUsage(playerid, "/fcount <Játékosok> <bool:Active>{" #XCOLOR_WHITE "}:: {" #XCOLOR_GREEN "}Jelenleg: Total: %d, Ranking = %d", FalloutPlayers, FalloutRanking);

	FalloutPlayers = player1;
	//if(datez) FalloutActivePlayers = player1;

	format(i_str, sizeof(i_str), FixGameString("~r~~h~Játékosok: ~b~~h~%d~w~/~b~~h~%d ~r~~h~Objectek: ~b~~h~%d~w~/~b~~h~%d"), FalloutPlayers, (GetMaxPlayers() - Iter_Count(Bot)), FalloutOCount, sizeof(FalloutObject));
   	TextDrawSetString(FalloutTextdraw, i_str);

	format(i_str, sizeof(i_str), "players: %d, active: %d", player1, datez),
	AdminCommandLog("FCOUNT", playerid, -1, i_str);
	return 1;
}

CMD:dcount(playerid, params[], 4, 0)
{
	if(sscanf(params, "dD(-1)", player1, datez)) return SendUsage(playerid, "/dcount <g_iDerbyRoundCount> <g_iDerbyStartCount>{" #XCOLOR_WHITE "}:: {" #XCOLOR_GREEN "}Jelenleg: %d, %d", g_iDerbyRoundCount, g_iDerbyStartCount);

	g_iDerbyRoundCount = player1;
	if(datez != -1) g_iDerbyStartCount = datez;

	format(i_str, sizeof(i_str), "round: %d, start: %d", player1, datez),
	AdminCommandLog("DCOUNT", playerid, -1, i_str);
	return 1;
}

CMD:bcount(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", player1, datez)) return SendUsage(playerid, "/bcount <Count> <Respawn>{" #XCOLOR_WHITE "}:: {" #XCOLOR_GREEN "}Jelenleg: %d, %d", g_BonusCarCount, g_BonusCarRespawn);

	g_BonusCarCount = player1;
	g_BonusCarRespawn = datez;

	format(i_str, sizeof(i_str), "count: %d, respawn: %d", player1, datez),
	AdminCommandLog("BCOUNT", playerid, -1, i_str);
	return 1;
}

CMD:levels(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/levels <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

    if(g_pLang{playerid} == LANGUAGE_HU) mysql_format(1, query, sizeof(query), "SELECT `level`, `description_hu` FROM `szintek` ORDER BY `level` ASC LIMIT %d, 30", --iLimit * 30);
	else mysql_format(1, query, sizeof(query), "SELECT `level`, `description_en` FROM `szintek` ORDER BY `level` ASC LIMIT %d, 30", --iLimit * 30);

	mysql_function_query(1, query, true, "THREAD_SzintList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SzintList(playerid, queue);
public THREAD_SzintList(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SzintList);

	new
	    rows = cache_get_row_count(),
	    count,
	    color;
    dline[0] = EOS;
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, datez);
		cache_get_row(i, 1, i_str);

		if(g_pSzint{playerid} >= datez)
		{
			count++;
			color = 0xffe330;
		}
		else
		{
            color = COLOR_RED >>> 8;
		}

		format(tmp, 128, "{%06x}%d - %s\n", color, datez, i_str);
		strcat(dline, tmp);
	}

	format(country, sizeof(country), "{" #XCOLOR_BLUE "}Általad elérhetõ dolgok %d/%d", count, rows);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, country, dline, "Bezárás");
	return 1;
}

/* Felcsatolható Objectek */
CMD:holdingoff(playerid, params[], 0, 0)
{
	new
		slot;
	if(sscanf(params, "d", slot)) return SendUsage(playerid, "/rmho <Slot> (-1 = Mindet törli)");
	if(!(-1 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_1__9"));

	if(slot != -1)
	{
		if(!IsPlayerAttachedObjectSlotUsed(playerid, slot)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOTBAN_NINCS_FELCSATOLVA"), slot);
	    if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_NEM_HASZNALHATOD"));
	    if(slot == 3 && GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BE_VAN_KAPCSOLVA_A_LEZER_A"));

		format(name, sizeof(name), "%d_Model", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_Bone", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_OffsetX", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_OffsetY", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_OffsetZ", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_RotationX", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_RotationY", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_RotationZ", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_ScaleX", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_ScaleY", slot);
		DeletePVar(playerid, name);

		format(name, sizeof(name), "%d_ScaleZ", slot);
		DeletePVar(playerid, name);

	    RemovePlayerAttachedObject(playerid, slot);

		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFELCSATOLT_OBJECT_HTOROLVEW"), slot);
	}
	else
	{
		for(slot = 0; slot < MAX_PLAYER_ATTACHED_OBJECTS; slot++)
		{
			if(slot == 9 && ZaszloOwner == playerid) break;
			RemovePlayerAttachedObject(playerid, slot);
		}
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFELCSATOLT_OBJECTEK_HTOROLVE"));
	}
	return 1;
}
CMD:rmho(playerid, params[], 0, 0)
{
	return cmd_holdingoff(playerid, params);
}
CMD:rmhos(playerid, params[], 0, 0)
{
	return cmd_holdingoff(playerid, "-1");
}

stock StoreHoldingObjectData(playerid, slot, modelid, bone, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ, materialcolor1, materialcolor2)
{
	new szName[24];
	format(szName, sizeof(szName), "%d_Model", slot);
	SetPVarInt(playerid, szName, modelid);

	format(szName, sizeof(szName), "%d_Bone", slot);
	SetPVarInt(playerid, szName, bone);

	format(szName, sizeof(szName), "%d_OffsetX", slot);
	SetPVarFloat(playerid, szName, fX);

	format(szName, sizeof(szName), "%d_OffsetY", slot);
	SetPVarFloat(playerid, szName, fY);

	format(szName, sizeof(szName), "%d_OffsetZ", slot);
	SetPVarFloat(playerid, szName, fZ);

	format(szName, sizeof(szName), "%d_RotationX", slot);
	SetPVarFloat(playerid, szName, fRotX);

	format(szName, sizeof(szName), "%d_RotationY", slot);
	SetPVarFloat(playerid, szName, fRotY);

	format(szName, sizeof(szName), "%d_RotationZ", slot);
	SetPVarFloat(playerid, szName, fRotZ);

	format(szName, sizeof(szName), "%d_ScaleX", slot);
	SetPVarFloat(playerid, szName, fScaleX);

	format(szName, sizeof(szName), "%d_ScaleY", slot);
	SetPVarFloat(playerid, szName, fScaleY);

	format(szName, sizeof(szName), "%d_ScaleZ", slot);
	SetPVarFloat(playerid, szName, fScaleZ);

	format(szName, sizeof(szName), "%d_Color1", slot);
	SetPVarInt(playerid, szName, materialcolor1);

	format(szName, sizeof(szName), "%d_Color2", slot);
	SetPVarInt(playerid, szName, materialcolor2);
}

CMD:holding(playerid, params[], 0, 0)
{
	new
		object,
		bone,
		slot,
		iMaterial1,
		iMaterial2;
		//Float:Scale[3];
	//dD(0)D(2)F(0)F(0)F(0)F(0)F(0)F(0)F(1.0)F(1.0)F(1.0)N(0)N(0)
	//SendUsage(playerid, "/holding <Model ID> {" #XCOLOR_YELLOW "}<Slot> <Bone> <OffX> <OffY> <OffZ> <RotX> <RotY> <RotZ> <ScaX> <ScaY> <ScaZ> <Color1> <Color2>");
	if(sscanf(params, "dD(0)D(0)N(0)N(0)", object, slot, bone,/*, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], */iMaterial1, iMaterial2))
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_MHO_HELP"));
        SendUsage(playerid, "/holding <Model ID> {" #XCOLOR_YELLOW "}<Slot> <Bone> <Color1> <Color2>");
		return 1;
	}
	if(!(1 <= bone <= 18)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_TESTRESZ__BONES__1__18"));
	if(!(0 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));

    if(!IsValidObjectModel(object)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_MODEL_NEM_MEGFELELO"));
    if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_9ES_SLOTBA"));
    if(slot == 3 && GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BE_VAN_KAPCSOLVA_A_LEZER_NEM"));


	// Adatok elmentése
	/*
	StoreHoldingObjectData(playerid, slot, object, bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], iMaterial1, iMaterial2);
	SetPlayerAttachedObject(playerid, slot, object, bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], ShiftRGBAToARGB(iMaterial1), ShiftRGBAToARGB(iMaterial2));
	*/

	StoreHoldingObjectData(playerid, slot, object, bone, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, iMaterial1, iMaterial2);
	SetPlayerAttachedObject(playerid, slot, object, bone, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, ShiftRGBAToARGB(iMaterial1), ShiftRGBAToARGB(iMaterial2));
	EditAttachedObject(playerid, slot);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BFELCSATOLTAL_RHEGY_GHHO"));
	return 1;
}
CMD:mho(playerid, params[], 0, 0)
{
	return cmd_holding(playerid, params);
}

CMD:mhocolor(playerid, params[], 0, 0)
{
	new
	    slot,
	    iMaterial1,
	    iMaterial2;
	if(sscanf(params, "dnN(0)", slot, iMaterial1, iMaterial2)) return SendUsage(playerid, "/mhocolor <Slot> <Szín1> <Szín2>");
	if(!(0 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));
	if(!IsPlayerAttachedObjectSlotUsed(playerid, slot)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOTBAN_NINCS_FELCSATOLVA"), slot);

	gAOColor1[playerid][slot] = ShiftRGBAToARGB(iMaterial1);
	gAOColor2[playerid][slot] = ShiftRGBAToARGB(iMaterial2);

	SetPlayerAttachedObject(playerid, slot, gAOModel[playerid][slot], gAOBone[playerid][slot],
		gAOOffSet_X[playerid][slot], gAOOffSet_Y[playerid][slot], gAOOffSet_Z[playerid][slot],
		gAORot_X[playerid][slot], gAORot_Y[playerid][slot], gAORot_Z[playerid][slot],
		gAOScale_X[playerid][slot], gAOScale_Y[playerid][slot], gAOScale_Z[playerid][slot],
		gAOColor1[playerid][slot], gAOColor2[playerid][slot], false);

	format(name, sizeof(name), "%d_Bone", slot);
	if(GetPVarType(playerid, name))
	{
		format(name, sizeof(name), "%d_Color1", slot);
		SetPVarInt(playerid, name, iMaterial1);

		format(name, sizeof(name), "%d_Color2", slot);
		SetPVarInt(playerid, name, iMaterial2);
	}
	return 1;
}

CMD:sho(playerid, params[], 0, 0)
{
	new
	    slot,
	    Bone;
	if(sscanf(params, "ds[" #STR_SIZE "]", slot, i_str)) return SendUsage(playerid, "/saveholding(/sho) <Slot> <FájlNév>");
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));
    if(!(0 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));
    if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_ZASZLOT"));
    if(slot == 3 && GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BE_VAN_KAPCSOLVA_A_LEZER_A_2"));

	format(name, sizeof(name), "%d_Bone", slot);
	Bone = GetPVarInt(playerid, name);

	if(!Bone)
	{
        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__AZ__SLOT_URES_2"), slot);
		return 1;
	}

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_SaveHoldingObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}
CMD:smho(playerid, params[], 0, 0)
{
	return cmd_sho(playerid, params);
}

forward THREAD_SaveHoldingObject(playerid, slot, objectname[], queue);
public THREAD_SaveHoldingObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveHoldingObject);

	if(cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_MAR_LETEZIK"), objectname);
		return 1;
	}

	new
		ModelID,
		Bone,
		Float:Scale[3],
		iMaterial1,
		iMaterial2;
	format(name, sizeof(name), "%d_Model", slot);
	ModelID = GetPVarInt(playerid, name);

	format(name, sizeof(name), "%d_Bone", slot);
	Bone = GetPVarInt(playerid, name);

	format(name, sizeof(name), "%d_OffsetX", slot);
	X = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_OffsetY", slot);
	Y = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_OffsetZ", slot);
	Z = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationX", slot);
	V[0] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationY", slot);
	V[1] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationZ", slot);
	V[2] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleX", slot);
	Scale[0] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleY", slot);
	Scale[1] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleZ", slot);
	Scale[2] = GetPVarFloat(playerid, name);

    format(name, sizeof(name), "%d_Color1", slot);
	iMaterial1 = GetPVarInt(playerid, name);

    format(name, sizeof(name), "%d_Color2", slot);
	iMaterial2 = GetPVarInt(playerid, name);

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_LETREHOZVA_ES_AZ"), objectname);
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__HA_AZ_OBJECTET_BE_AKAROD_TOLTENI"), objectname);

	getdate(year, month, day);
	gettime(hour, minute, second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `holdingobjects`(id, name, reg_id, objectname, object_id, bone_id, offset_x, offset_y, offset_z, rotation_x, rotation_y, rotation_z, scale_x, scale_y, scale_z, materialcolor1, materialcolor2, time) VALUES(0, '%e', %d, '%e', %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d, %d, '%02d.%02d.%02d/%02d.%02d.%02d')",
	pName(playerid), PlayerInfo[playerid][pRegID], objectname, ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], iMaterial1, iMaterial2, year, month, day, hour, minute, second);

	mysql_function_query(1, query, false, "", "d", playerid);
	return 1;
}

CMD:fsho(playerid, params[], 0, 0)
{
	new
	    slot,
	    Bone;
	if(sscanf(params, "ds[" #STR_SIZE "]", slot, i_str)) return SendUsage(playerid, "/fsho <Slot> <FájlNév>");
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));
    if(!(0 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));
    if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_ZASZLOT"));
    if(slot == 3 && GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BE_VAN_KAPCSOLVA_A_LEZER_A_2"));

	format(name, sizeof(name), "%d_Bone", slot);
	Bone = GetPVarInt(playerid, name);

	if(!Bone)
	{
        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__AZ__SLOT_URES_2"), slot);
		return 1;
	}

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_WriteSaveHoldingObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_WriteSaveHoldingObject(playerid, slot, objectname[], queue);
public THREAD_WriteSaveHoldingObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_WriteSaveHoldingObject);

	new
	    iRegID;
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK_IGY"), objectname);
		return 1;
	}

	cache_get_row_int(0, 2, iRegID);
	if(iRegID != PlayerInfo[playerid][pRegID] && !IsOwner(playerid))
	{
        cache_get_row(0, 1, name);
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__A__NEVU_OBJECTET__KESZITETTE"), objectname, name);
		return 1;
	}

	new
		ModelID,
		Bone,
		Float:Scale[3],
		iMaterial1,
		iMaterial2;
	format(name, sizeof(name), "%d_Model", slot);
	ModelID = GetPVarInt(playerid, name);

	format(name, sizeof(name), "%d_Bone", slot);
	Bone = GetPVarInt(playerid, name);

	format(name, sizeof(name), "%d_OffsetX", slot);
	X = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_OffsetY", slot);
	Y = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_OffsetZ", slot);
	Z = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationX", slot);
	V[0] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationY", slot);
	V[1] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_RotationZ", slot);
	V[2] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleX", slot);
	Scale[0] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleY", slot);
	Scale[1] = GetPVarFloat(playerid, name);

	format(name, sizeof(name), "%d_ScaleZ", slot);
	Scale[2] = GetPVarFloat(playerid, name);

    format(name, sizeof(name), "%d_Color1", slot);
	iMaterial1 = GetPVarInt(playerid, name);

    format(name, sizeof(name), "%d_Color2", slot);
	iMaterial2 = GetPVarInt(playerid, name);

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_FELULIRVA"), objectname);

	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects` SET `object_id` = %d, `bone_id` = %d, `offset_x` = %f, `offset_y` = %f, `offset_z` = %f, `rotation_x` = %f, `rotation_y` = %f, `rotation_z` = %f, `scale_x` = %f, `scale_y` = %f, `scale_z` = %f, `materialcolor1` = %d, `materialcolor2` = %d WHERE `objectname` = '%e'", ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], iMaterial1, iMaterial2, objectname);
	mysql_function_query(1, query, false, "", "d", playerid);
	return 1;
}

CMD:lhoset(playerid, params[], 0, D:<FLAG | BCAR | RACE | DM >)
{
	if(isnull(params)) return SendUsage(playerid, "/lvoset <FájlNév>");
    mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_set` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_LoadHoldingObjectSet", "dsd", playerid, params, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_LoadHoldingObjectSet(playerid, objectname[], queue);
public THREAD_LoadHoldingObjectSet(playerid, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadHoldingObjectSet);
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK"), objectname);
		return 1;
	}
	new
		szObjects[1024],
		setname[24],
  		hObjects[MAX_PLAYER_ATTACHED_OBJECTS];

    cache_get_row(0, 1, name); //Készítõ
    cache_get_row(0, 3, setname); //Objectset neve
    cache_get_row(0, 4, country); //Idõ
	cache_get_row(0, 6, szObjects); //Objectek

	sscanf(szObjects, "p<,>dddddddddd",hObjects[0],hObjects[1],hObjects[2],hObjects[3],hObjects[4],hObjects[5],hObjects[6],hObjects[7],hObjects[8],hObjects[9]);

    mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
 	hObjects[0],hObjects[1],hObjects[2],hObjects[3],hObjects[4],hObjects[5],hObjects[6],hObjects[7],hObjects[8],hObjects[9]);
	mysql_function_query(1, query, true, "THREAD_LoadHoldingObjectSet2", "dsssd", playerid, name, setname, country, g_pQueryQueue[playerid]);
//	printf(query);
	return 1;
}

forward THREAD_LoadHoldingObjectSet2(playerid, creator[], objectname[], time[], queue);
public THREAD_LoadHoldingObjectSet2(playerid, creator[], objectname[], time[], queue)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadHoldingObjectSet2);

	new
	    rows = cache_get_row_count(),
	    ModelID,
	    Bone,
		Float:Scale[3],
		iMaterial1,
		iMaterial2;

    for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(i == 9 && ZaszloOwner == playerid) break;
		RemovePlayerAttachedObject(playerid, i);
	}
    for(new x; x != rows; x++)
	{
		cache_get_row_int(x, 4, ModelID);
		cache_get_row_int(x, 5, Bone);
		cache_get_row_float(x, 6, X);
		cache_get_row_float(x, 7, Y);
		cache_get_row_float(x, 8, Z);
		cache_get_row_float(x, 9, V[0]);
		cache_get_row_float(x, 10, V[1]);
		cache_get_row_float(x, 11, V[2]);
		cache_get_row_float(x, 12, Scale[0]);
		cache_get_row_float(x, 13, Scale[1]);
		cache_get_row_float(x, 14, Scale[2]);
		cache_get_row_int(x, 15, iMaterial1);
		cache_get_row_int(x, 16, iMaterial2);
		cache_get_row(x, 17, country);
		cache_get_row(x, 1, name);

		StoreHoldingObjectData(playerid, x, ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], iMaterial1, iMaterial2);
		SetPlayerAttachedObject(playerid, x, ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], ShiftRGBAToARGB(iMaterial1), ShiftRGBAToARGB(iMaterial2));
	}
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_OBJECTSET_BETOLTVE_KESZITE"), objectname, creator, time);
	return 1;
}

CMD:lho(playerid, params[], 0, 0)
{
	new
	    slot;
	if(sscanf(params, "s[" #STR_SIZE "]D(0)", i_str, slot)) return SendUsage(playerid, "/loadholdingobject(/lho) <FájlNév> {" #XCOLOR_YELLOW "}<Slot>");
    if(!(0 <= slot <= (MAX_PLAYER_ATTACHED_OBJECTS - 1))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__9"));
	if(slot == 9 && ZaszloOwner == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_ZASZLO_A_9ES_SLOTBA_1"));
    if(slot == 3 && GetPVarType(playerid, "LaserPointer")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BE_VAN_KAPCSOLVA_A_LEZER_NEM_1"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_LoadHoldingObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_LoadHoldingObject(playerid, slot, objectname[], queue);
public THREAD_LoadHoldingObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadHoldingObject);

	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK"), objectname);
		return 1;
	}

	new
	    SQLID,
	    ModelID,
	    Bone,
		Float:Scale[3],
		iMaterial1,
		iMaterial2;

	cache_get_row_int(0, 0, SQLID);

	cache_get_row_int(0, 4, ModelID);
	cache_get_row_int(0, 5, Bone);
	cache_get_row_float(0, 6, X);
	cache_get_row_float(0, 7, Y);
	cache_get_row_float(0, 8, Z);
	cache_get_row_float(0, 9, V[0]);
	cache_get_row_float(0, 10, V[1]);
	cache_get_row_float(0, 11, V[2]);
	cache_get_row_float(0, 12, Scale[0]);
	cache_get_row_float(0, 13, Scale[1]);
	cache_get_row_float(0, 14, Scale[2]);
	cache_get_row_int(0, 15, iMaterial1);
	cache_get_row_int(0, 16, iMaterial2);
	cache_get_row(0, 17, country);
	cache_get_row(0, 1, name);


	g_HoldingObject[playerid][slot] = SQLID;

    StoreHoldingObjectData(playerid, slot, ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], iMaterial1, iMaterial2);
	SetPlayerAttachedObject(playerid, slot, ModelID, Bone, X, Y, Z, V[0], V[1], V[2], Scale[0], Scale[1], Scale[2], ShiftRGBAToARGB(iMaterial1), ShiftRGBAToARGB(iMaterial2));
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_OBJECT_BETOLTVE_KESZITE"), objectname, name, country);
	return 1;
}

forward THREAD_LoadAttachedObject(playerid, slot, objectname[], queue);
public THREAD_LoadAttachedObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadAttachedObject);

	if((e_FLAG_OWNER | e_BCAR_OWNER) & g_pGamesData[playerid]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NALAD_VAN_A_ZASZLO_VAGY"));

	if(!cache_get_row_count())
	{
        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK"), objectname);
		return 1;
	}
	new
	    iHouseCarID = GetGVarInt("HouseCar", GetPVarInt(playerid, "PlayerProp"));
 	if(GetPlayerDynamicVehicleID(playerid) != GetPVarInt(playerid, "pCar") &&  GetPlayerDynamicVehicleID(playerid) != iHouseCarID && !IsPlayerNPC(playerid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_A_TE_JARMUVED"));

	new
	    Date[24],
	    iID,
	    ModelID,
	    house;
     vID = GetPlayerDynamicVehicleID(playerid);
 	foreach(houseid: houses)
	{
		if(GetGVarInt("HouseCar", houseid) == vID)
		{
            if(GetGVarInt("PropOwnerRegID", houseid) != PlayerInfo[playerid][pRegID])
			{
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_NEM_TE_HAZAUTOD_NEM"));
			}
			else
			{
                house = houseid;
				break;
			}
		}
	}
	foreach(Player, i)
	{
		if(GetPVarInt(i, "AttachVehicleID") == vID && i != playerid)
		{
            //SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_EZEN_A_JARMUVON_MAS_JATEKOS"));
			//return 1;
		}
	}

	cache_get_row_int(0, 0, iID);
	cache_get_row_int(0, 4, ModelID);
	cache_get_row_float(0, 5, X);
	cache_get_row_float(0, 6, Y);
	cache_get_row_float(0, 7, Z);
	cache_get_row_float(0, 8, V[0]);
	cache_get_row_float(0, 9, V[1]);
	cache_get_row_float(0, 10, V[2]);
	cache_get_row(0, 11, Date);



	new id = AddObjectToVehicle(playerid, vID, slot, ModelID, X, Y, Z, V[0], V[1], V[2], iID, house);
	LoadVehicleObjectMaterial(id);
	
	//ShowWelcomef(playerid,  LANG(playerid, "MSG_ROBJECT_FELKAPCSOLVANBHN"), objectname, Date);
	return 1;
}

CMD:holist(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/holist <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_HoldingObjectList", "ddd", playerid, 0, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_HoldingObjectList(playerid, type, queue);
public THREAD_HoldingObjectList(playerid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_HoldingObjectList);

	new
	    rows = cache_get_row_count();
    dline[0] = EOS;
    if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Objectek", "Ezen az oldalon nincs egy object sem!", "Ok");
		return 1;
	}
	
	for(new i; i != rows; i++)
	{
		cache_get_row(i, 0, i_str);
		strcat(dline, i_str, sizeof(dline));
		strcat(dline, "\n", sizeof(dline));
	}
	switch(type)
	{
		case 0: ShowPlayerDialogEx(playerid, DIALOG_HOLIST, DIALOG_STYLE_LIST, !"{" #XCOLOR_BLUE3 "}Felcsatolható Objectek", dline, !"Ok", !"Mégse");
		case 1: ShowPlayerDialogEx(playerid, DIALOG_VOLIST, DIALOG_STYLE_LIST, !"{" #XCOLOR_BLUE3 "}Autóra Felrakható Objectek", dline, !"Ok", !"Mégse");
		case 2:
		{
		    CHECK_SZINT(playerid,SZINT_VOSETS);
			ShowPlayerDialogEx(playerid, DIALOG_VOLIST + 2, DIALOG_STYLE_LIST, !"{" #XCOLOR_BLUE3 "}Autóra Felrakható Objectsetek", dline, !"Ok", !"Mégse");
		}
		case 3: ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 5, DIALOG_STYLE_LIST, !"{" #XCOLOR_BLUE3 "}Felcsatolhat Objectsetek", dline, !"Ok", !"Mégse");
	}
	return 1;
}

CMD:volist(playerid, params[], 0, D:<BCAR>)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/volist <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects_v` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_HoldingObjectList", "ddd", playerid, 1, g_pQueryQueue[playerid]);
	return 1;
}

CMD:vosets(playerid, params[], 0, D:<BCAR >)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/volist <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects_vset` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_HoldingObjectList", "ddd", playerid, 2, g_pQueryQueue[playerid]);
	return 1;
}

CMD:hosets(playerid, params[], 0, D:<FLAG | BCAR | RACE | DM >)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/hosets <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects_set` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_HoldingObjectList", "ddd", playerid, 3, g_pQueryQueue[playerid]);
	return 1;
}

CMD:shoset(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/shoset <FájlNév>");

 	if(g_HoldingObject[playerid][0] == -1)
  	{
   		SendClientMessagef(playerid, -1, "Lementeni csak olyan objectet tudsz amit a /lho parancsal csatoltál magadra!");
		return 1;
	}
	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_set` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_SaveHoldingObjectSet", "dsdd", playerid, params, 0, g_pQueryQueue[playerid]);
	return 1;
}

CMD:fshoset(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/fshoset <FájlNév>");

 	if(g_HoldingObject[playerid][0] == -1)
  	{
   		SendClientMessagef(playerid, -1, "Lementeni csak olyan objectet tudsz amit a /lho parancsal csatoltál magadra!");
		return 1;
	}
	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_set` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_SaveHoldingObjectSet", "dsdd", playerid, params, 1, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SaveHoldingObjectSet(playerid, setname[], type, queue);
public THREAD_SaveHoldingObjectSet(playerid, setname[], type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveAttachedObjectSet);

	for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(!i)
		{
			format(dline, 1024, "%d", g_HoldingObject[playerid][i]);
		}
		else
		{
            format(dline, 1024, "%s,%d", dline, g_HoldingObject[playerid][i]);
		}
	}
	for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
    	g_HoldingObject[playerid][i] = -1;
	}
	getdate(year, month, day);
	gettime(hour, minute, second);

	switch(type)
	{
		case 0: //Mentés
		{
		    if(cache_get_row_count())
			{
				SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_MAR_LETEZIK"), setname);
				return 1;
			}
		    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_SET_LETREHOZVA_ES_AZ"), setname);
    		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__HA_A_SETET_BE_AKAROD_TOLTENI"), setname);
    		
 			mysql_format(1, query, sizeof(query), "INSERT INTO `holdingobjects_set`(id, name, reg_id, objectname, time, lastedit, objects) VALUES(0, '%e', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d', '%02d.%02d.%02d/%02d.%02d.%02d', '%s')",
			pName(playerid), PlayerInfo[playerid][pRegID], setname, year, month, day, hour, minute, second, year, month, day, hour, minute, second, dline);
		}
		case 1: //Felülírás
		{
		    if(!cache_get_row_count())
			{
				SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK_IGY"), setname);
				return 1;
			}
		    new
		        iRegID;
		    cache_get_row_int(0, 2, iRegID);
		    if(iRegID != PlayerInfo[playerid][pRegID] && !IsOwner(playerid))
			{
		        cache_get_row(0, 1, name);
				SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__A__NEVU_OBJECTET__KESZITETTE"), setname, name);
				return 1;
			}
 			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_FELULIRVA"), setname);
  			mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_set` SET `lastedit` = '%02d.%02d.%02d/%02d.%02d.%02d', `objects` = '%s' WHERE `objectname` = '%e'", year, month, day, hour, minute, second, dline, setname);
    		mysql_function_query(1, query, false, "", "");
		}
	}
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:myobjects(playerid, params[], 0, D:<BCAR>)
{
	CHECK_SZINT(playerid, SZINT_HOBJECTS);

	mysql_format(1, query, sizeof(query), "SELECT `id`,`objectname` FROM `holdingobjects` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d", g_pSavedObject[playerid][0], g_pSavedObject[playerid][1], g_pSavedObject[playerid][2], g_pSavedObject[playerid][3], g_pSavedObject[playerid][4], g_pSavedObject[playerid][5], g_pSavedObject[playerid][6], g_pSavedObject[playerid][7], g_pSavedObject[playerid][8], g_pSavedObject[playerid][9]);
	mysql_function_query(1, query, true, "THREAD_MyObjects", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:myvobjects(playerid, params[], 0, 0)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_NEM"));

    new
	    iLimit;

	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/myvobjects <Lista | Alapból: 1, Minden oldalon 40db van>");
	if(!(1 <= iLimit <= 3)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));
	
	switch(iLimit)
	{
	    case 1:
	    {
            mysql_format(1, dline, sizeof(dline), "SELECT `id`, `objectname` FROM `holdingobjects_v` WHERE\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
		    gPlayerVehicleObjectID[playerid][0], gPlayerVehicleObjectID[playerid][1], gPlayerVehicleObjectID[playerid][2], gPlayerVehicleObjectID[playerid][3], gPlayerVehicleObjectID[playerid][4], gPlayerVehicleObjectID[playerid][5], gPlayerVehicleObjectID[playerid][6], gPlayerVehicleObjectID[playerid][7], gPlayerVehicleObjectID[playerid][8], gPlayerVehicleObjectID[playerid][9],
			gPlayerVehicleObjectID[playerid][10], gPlayerVehicleObjectID[playerid][11], gPlayerVehicleObjectID[playerid][12], gPlayerVehicleObjectID[playerid][13], gPlayerVehicleObjectID[playerid][14], gPlayerVehicleObjectID[playerid][15], gPlayerVehicleObjectID[playerid][16], gPlayerVehicleObjectID[playerid][17], gPlayerVehicleObjectID[playerid][18],
			gPlayerVehicleObjectID[playerid][19], gPlayerVehicleObjectID[playerid][20], gPlayerVehicleObjectID[playerid][21], gPlayerVehicleObjectID[playerid][22], gPlayerVehicleObjectID[playerid][23], gPlayerVehicleObjectID[playerid][24], gPlayerVehicleObjectID[playerid][25], gPlayerVehicleObjectID[playerid][26], gPlayerVehicleObjectID[playerid][27],
			gPlayerVehicleObjectID[playerid][28], gPlayerVehicleObjectID[playerid][29], gPlayerVehicleObjectID[playerid][30], gPlayerVehicleObjectID[playerid][31], gPlayerVehicleObjectID[playerid][32], gPlayerVehicleObjectID[playerid][33], gPlayerVehicleObjectID[playerid][34], gPlayerVehicleObjectID[playerid][35], gPlayerVehicleObjectID[playerid][36],
			gPlayerVehicleObjectID[playerid][37], gPlayerVehicleObjectID[playerid][38], gPlayerVehicleObjectID[playerid][39]);
	    }
	    case 2:
	    {
	        mysql_format(1, dline, sizeof(dline), "SELECT `id`, `objectname` FROM `holdingobjects_v` WHERE\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
            gPlayerVehicleObjectID[playerid][40], gPlayerVehicleObjectID[playerid][41], gPlayerVehicleObjectID[playerid][42], gPlayerVehicleObjectID[playerid][43], gPlayerVehicleObjectID[playerid][44], gPlayerVehicleObjectID[playerid][45],
			gPlayerVehicleObjectID[playerid][46], gPlayerVehicleObjectID[playerid][47], gPlayerVehicleObjectID[playerid][48], gPlayerVehicleObjectID[playerid][49], gPlayerVehicleObjectID[playerid][50], gPlayerVehicleObjectID[playerid][51], gPlayerVehicleObjectID[playerid][52], gPlayerVehicleObjectID[playerid][53], gPlayerVehicleObjectID[playerid][54],
			gPlayerVehicleObjectID[playerid][55], gPlayerVehicleObjectID[playerid][56], gPlayerVehicleObjectID[playerid][57], gPlayerVehicleObjectID[playerid][58], gPlayerVehicleObjectID[playerid][59], gPlayerVehicleObjectID[playerid][60], gPlayerVehicleObjectID[playerid][61], gPlayerVehicleObjectID[playerid][62], gPlayerVehicleObjectID[playerid][63],
			gPlayerVehicleObjectID[playerid][64], gPlayerVehicleObjectID[playerid][65], gPlayerVehicleObjectID[playerid][66], gPlayerVehicleObjectID[playerid][67], gPlayerVehicleObjectID[playerid][68], gPlayerVehicleObjectID[playerid][69], gPlayerVehicleObjectID[playerid][70], gPlayerVehicleObjectID[playerid][71], gPlayerVehicleObjectID[playerid][72],
	        gPlayerVehicleObjectID[playerid][73], gPlayerVehicleObjectID[playerid][74], gPlayerVehicleObjectID[playerid][75], gPlayerVehicleObjectID[playerid][76], gPlayerVehicleObjectID[playerid][77], gPlayerVehicleObjectID[playerid][78], gPlayerVehicleObjectID[playerid][79]);
	    }
	    case 3:
	    {
	        mysql_format(1, dline, sizeof(dline), "SELECT `id`, `objectname` FROM `holdingobjects_v` WHERE\
   				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR\
				`id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
			gPlayerVehicleObjectID[playerid][80], gPlayerVehicleObjectID[playerid][81],
			gPlayerVehicleObjectID[playerid][82], gPlayerVehicleObjectID[playerid][83], gPlayerVehicleObjectID[playerid][84], gPlayerVehicleObjectID[playerid][85], gPlayerVehicleObjectID[playerid][86], gPlayerVehicleObjectID[playerid][87], gPlayerVehicleObjectID[playerid][88], gPlayerVehicleObjectID[playerid][89], gPlayerVehicleObjectID[playerid][90],
			gPlayerVehicleObjectID[playerid][91], gPlayerVehicleObjectID[playerid][92], gPlayerVehicleObjectID[playerid][93], gPlayerVehicleObjectID[playerid][94], gPlayerVehicleObjectID[playerid][95], gPlayerVehicleObjectID[playerid][96], gPlayerVehicleObjectID[playerid][97], gPlayerVehicleObjectID[playerid][98], gPlayerVehicleObjectID[playerid][99],
	        gPlayerVehicleObjectID[playerid][100], gPlayerVehicleObjectID[playerid][101], gPlayerVehicleObjectID[playerid][102], gPlayerVehicleObjectID[playerid][103], gPlayerVehicleObjectID[playerid][104], gPlayerVehicleObjectID[playerid][105], gPlayerVehicleObjectID[playerid][106], gPlayerVehicleObjectID[playerid][107], gPlayerVehicleObjectID[playerid][108],
			gPlayerVehicleObjectID[playerid][109], gPlayerVehicleObjectID[playerid][110], gPlayerVehicleObjectID[playerid][111], gPlayerVehicleObjectID[playerid][112], gPlayerVehicleObjectID[playerid][113], gPlayerVehicleObjectID[playerid][114], gPlayerVehicleObjectID[playerid][115], gPlayerVehicleObjectID[playerid][116], gPlayerVehicleObjectID[playerid][117], gPlayerVehicleObjectID[playerid][118], gPlayerVehicleObjectID[playerid][119]);
	    }
	}
	mysql_function_query(1, dline, true, "THREAD_VehicleObjects", "ddd", playerid, iLimit, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_VehicleObjects(playerid, list, queue);
public THREAD_VehicleObjects(playerid, list, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_VehicleObjects);

	new
		rows = cache_get_row_count(),
		bool:found,
		asdaaa = 0;
		
    switch(list)
	{
	    case 1: asdaaa = 0;
	    case 2: asdaaa = 40;
	    case 3: asdaaa = 80;
	}
	//printf("rows %d | fields: %d", rows, fields);
	for(new i; i != 40; i++) // Minden objectra megy..
	{
		found = false;
		for(new x; x < rows; x++)
		{
			if(gPlayerVehicleObjectID[playerid][i + asdaaa] == cache_get_row_int_ex(x, 0))
			{
				cache_get_row(x, 1, i_str);
				format(i_str, 128, "%s\t%d\t%d", i_str, Streamer_GetIntData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][i + asdaaa], E_STREAMER_MODEL_ID), gPlayerVehicleObject[playerid][i + asdaaa]);
                found = true;
				break;
			}
		}

		if(!found)
		{
			if(!gPlayerVehicleObjectID[playerid][i + asdaaa])
			{
				i_str = "Üres";
			}
			else
			{
                i_str = "Ismeretlen";
			}
		}

		if(!i)
		{
			format(dline, sizeof(dline), "{" #XCOLOR_GREEN2 "}%d.{" #XCOLOR_WHITE "}\t%s", i + asdaaa, i_str);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_GREEN2 "}%d.{" #XCOLOR_WHITE "}\t%s", dline, i + asdaaa, i_str);
			if(i == (40 - 1))
			{
			    if(GetPVarType(playerid,"Voset_Name"))
			    {
			        GetPVarString(playerid, "Voset_Name", country, sizeof(country));
			    	GetPVarString(playerid, "Voset_Creator", name, sizeof(name));
			    	format(i_str, sizeof(i_str),"{" #XCOLOR_GREEN "}Object: {" #XCOLOR_BLUE "}%s {" #XCOLOR_YELLOW "}Készítette: %s(%d)",country, name, GetPVarInt(playerid,"Voset_CreatorID"));
			    }
			    else format(i_str, sizeof(i_str),"{" #XCOLOR_GREEN "}Kocsidon lévõ objectek");

                format(dline2, sizeof(dline2), "Slot\tObject\tModelID\tObjectID\n%s",dline);
			    ShowPlayerDialogEx(playerid, DIALOG_VOLIST + 5, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline2, !"Ok", !"Mégse");
				break;
			}
		}
	}
	return 1;
}

forward THREAD_MyObjects(playerid, queue);
public THREAD_MyObjects(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MyObjects);

	new
		rows = cache_get_row_count(),
		bool:found;
//	printf("rows %d | fields: %d", rows, fields);

	for(new i; i != 10; i++) // Minden objectra megy..
	{
		found = false;
		for(new x; x != rows; x++)
		{
			if(g_pSavedObject[playerid][i] == cache_get_row_int_ex(x, 0))
			{
				cache_get_row(x, 1, i_str);
				strcat(i_str, " )", sizeof(i_str));
                found = true;
				break;
			}
		}

		if(!found)
		{
            if(IsPlayerAttachedObjectSlotUsed(playerid, i))
            {
                i_str = "{" #XCOLOR_ORANGE "}Ismeretlen {" #XCOLOR_WHITE "})";
			}
			else
			{
				i_str = "Üres )";
			}
		}

		if(!i)
		{
			format(tmp, sizeof(tmp), "Slot {" #XCOLOR_GREEN2 "}%d{" #XCOLOR_WHITE "}: ( %s", i, i_str);
		}
		else
		{
			format(tmp, sizeof(tmp), "%s\nSlot {" #XCOLOR_GREEN2 "}%d{" #XCOLOR_WHITE "}: ( %s", tmp, i, i_str);
			if(i == 9)
			{
				strcat(tmp, "\n{" #XCOLOR_RED "}Felfrissítés");

				ShowPlayerDialogEx(playerid, DIALOG_HOLIST + 2, DIALOG_STYLE_LIST, !"{" #XCOLOR_GREEN "}Felcsatolható objectek", tmp, !"Ok", !"Mégse");
				break;
			}
		}
	}
	return 1;
}

CMD:findrace(playerid, params[], 0, 0)
{
	new
	    iLimit,
	    szPlayer[128],
	    iType,
	    bool:bID;
	if(sscanf(params, "s[128]D(1)D(1)", szPlayer, iLimit, iType))
 	{
	 	SendUsage(playerid, "/findrace <Részlet> <Lista = 1> <Mit = 1>");
	 	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MIT_VERSENYNEV__1__HOLDER_"));
		return 1;
	}
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	switch(iType)
	{
		case 1: name = "race";
		case 2: name = "holder";
		case 3: name = "regid", bID = true;
		case 4: name = "vehicle";
		case 5: name = "cpsize", bID = true;
		case 6: name = "money", bID = true;
		default: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS_TIPUSOKERT"));
	}

    if(bID)
    {
        mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `%s` = %d ORDER BY `raceid` LIMIT %d, 150", name, strval(szPlayer), --iLimit * 150);
	}
	else
	{
        mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `%s` LIKE '%s%e%s' ORDER BY `raceid` LIMIT %d, 150", name, "%%", szPlayer, "%%", --iLimit * 150);
	}
	mysql_function_query(1, query, true, "THREAD_RaceList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:finddm(playerid, params[], 0, 0)
{
	new
	    iLimit,
	    szPlayer[128],
	    iType,
	    bool:bID;
	if(sscanf(params, "s[128]D(1)D(1)", szPlayer, iLimit, iType))
 	{
	 	SendUsage(playerid, "/finddm <Részlet> <Lista = 1> <Mit = 1>");
	 	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MIT_DMNEV__1__NAME_"));
		return 1;
	}
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	switch(iType)
	{
		case 1: name = "name";
		case 2: name = "cmd";
		case 3: name = "creator_id", bID = true;
		/*case 4: name = "vehicle";
		case 5: name = "cpsize", bID = true;
		case 6: name = "money", bID = true;*/
		default: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS_TIPUSOKERT_2"));
	}

    if(bID)
    {
        mysql_format(1, query, sizeof(query), "SELECT * FROM `custom_dm` WHERE `%s` = %d ORDER BY `id` LIMIT %d, 150", name, strval(szPlayer), --iLimit * 150);
	}
	else
	{
        mysql_format(1, query, sizeof(query), "SELECT * FROM `custom_dm` WHERE `%s` LIKE '%s%e%s' ORDER BY `id` LIMIT %d, 150", name, "%%", szPlayer, "%%", --iLimit * 150);
	}
	mysql_function_query(1, query, true, "THREAD_FindDMList", "dsd", playerid, szPlayer, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_FindDMList(playerid, reszlet[], queue);
public THREAD_FindDMList(playerid, reszlet[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_FindDMList);

	new
	    rows = cache_get_row_count(),
	    i,
	    completed,
	    dmid;

	if(!rows)
	{
     	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", reszlet, rows);
     	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, tmp, !"{" #XCOLOR_RED "}Üres", !"Ok");
		return 1;
	}

	tmp[0] = EOS;
	dline[0] = EOS;
	format(dline, sizeof(dline), "ID\tNév\tJátékosok\tCMD\n");
    for( ; i != rows; i++)
	{
        cache_get_row_int(i, 0, datez); //DM id
		cache_get_row_int(i, 3, completed);
		dmid = SQL_DM(datez);

		if(completed != 0)
		{
		    format(i_str, sizeof(i_str), "%d.\t{" #XCOLOR_KICK "}%s {" #XCOLOR_WHITE "}- %s\t{" #XCOLOR_YELLOW "}%d\t{" #XCOLOR_BLUE2 "}%s\n", dmid, g_szDMName[dmid], (g_DMFlags[dmid] & e_IS_TDM) ? ("{" #XCOLOR_BASIC "}TDM") : ("{" #XCOLOR_PROPGREEN "}DM"), g_InDMPlayerCount{dmid + 10}, g_szDMCommand[dmid]);
			strcat(dline, i_str);
		}
	}
	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", reszlet, rows);
	ShowPlayerDialogEx(playerid, DIALOG_DM, DIALOG_STYLE_TABLIST_HEADERS, tmp, dline, "Kiválaszt", "Kilépés");
	return 1;
}

CMD:findrecord(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findrecord <Verseny Névrészlet>");

	mysql_format(1, query, sizeof(query), "SELECT `race`, `record`, `holder`, `vehicle`, from_unixtime(recordtime) FROM `racedata` WHERE `race` LIKE '%s%e%s' ORDER BY `raceid` LIMIT 0, 30", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_RaceRecordList", "ddd", playerid, 0, g_pQueryQueue[playerid]);
	return 1;
}

CMD:races(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/races <Lista | Alapból: 1, Minden oldalon 40darab van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));


	mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` ORDER BY `raceid` LIMIT %d, 40", --iLimit * 40);
    mysql_function_query(1, query, true, "THREAD_RaceList", "ddd", playerid, g_pQueryQueue[playerid], iLimit);
	return 1;
}

forward THREAD_RaceList(playerid, queue, list);
public THREAD_RaceList(playerid, queue, list)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RaceList);

    new
	    rows = cache_get_row_count(),
	    rekord,
	    id,
	    regid,
	    racename[48],
	    TempTime[3];
	    
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, !"{" #XCOLOR_GREEN "}Versenyek listája", "Üres", !"Start", !"Mégse");
		return 1;
	}
	dline[0] = EOS;
	format(dline, sizeof(dline), "ID\tNév\tRekordtartó\tRekord\n");
   	for(new x; x != rows; x++)
	{
	    cache_get_row_int(x, 0, id); //id
	    cache_get_row(x, 1, racename); //Név
	    cache_get_row(x, 8, name);
	    cache_get_row_int(x, 9, regid);
	    cache_get_row_int(x, 10, rekord); //Rekord
	    
    	ConvertTime(var1, rekord, TempTime[0], TempTime[1], TempTime[2]);
	    //date(rekord, day, month, year, hour, minute, second);
	    
		format(i_str, sizeof(i_str), "%d.\t{" #XCOLOR_BLUE3 "}%s\t{" #XCOLOR_GREEN "}%s{" #XCOLOR_GOLD "}(%d)\t{" #XCOLOR_YELLOW "}%02d:%02d.%02d\n", id, racename, name, regid, TempTime[0], TempTime[1], TempTime[2]);
		strcat(dline, i_str);
	}
/*	if(list == 1)
	{
	    strcat(dline, ">>");
	}
	else
	{
	    strcat(dline, "<<\n");
	    strcat(dline, ">>");
	}
	
	*/
	format(i_str, sizeof(i_str), "{" #XCOLOR_GREEN "}Versenyek listája - %d", Itter_Count(races));
    ShowPlayerDialogEx(playerid, DIALOG_RACES, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, !"Start", !"Mégse");
	return 1;
}

CMD:records(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/races <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `race`, `record`, `holder`, `vehicle`, from_unixtime(recordtime) FROM `racedata` ORDER BY `raceid` LIMIT %d, 30", --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_RaceRecordList", "ddd", playerid, 0, g_pQueryQueue[playerid]);
	return 1;
}
CMD:racerecords(playerid, params[], 0, 0)
{
	return cmd_records(playerid, params);
}

CMD:myrecords(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/races <Lista | Alapból: 1, Minden oldalon 30db van>");
	//if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));
	//if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	//if(player1 == -1) player1 = playerid;
	mysql_format(1, query, sizeof(query), "SELECT `race`, `record`, `holder`, `vehicle`, from_unixtime(recordtime) FROM `racedata` WHERE `regid` = %d ORDER BY `raceid` LIMIT %d, 30", PlayerInfo[playerid][pRegID], --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_RaceRecordList", "ddd", playerid, 1, g_pQueryQueue[playerid]);
	//printf(query);
	return 1;
}

forward THREAD_RaceRecordList(playerid, type, queue);
public THREAD_RaceRecordList(playerid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RaceRecordList);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, !"{" #XCOLOR_YELLOW "}Versenyrekordok listája", !"{" #XCOLOR_RED "}Ezen a listán nincs egy rekord sem!", !"Bezárás");
		return 1;
	}

	new
		TempTime[3],
		szDate[24],
		Record;

	for(new i; i != rows; i++)
	{
        cache_get_row(i, 0, i_str); // race
        cache_get_row_int(i, 1, Record); // record
        cache_get_row(i, 2, name); /// holder
        cache_get_row(i, 3, country); // vehicle
        cache_get_row(i, 4, szDate); /// record datez

		ConvertTime(var1, Record, TempTime[0], TempTime[1], TempTime[2]);

		if(!i)
		{
		    format(dline, sizeof(dline), "{" #XCOLOR_GREEN "}%s {" #XCOLOR_WHITE "}%d:%02d.%03d {" #XCOLOR_YELLOW "}%s {" #XCOLOR_BLUE "}%s {" #XCOLOR_RED "}%s", i_str, TempTime[0], TempTime[1], TempTime[2], name, country, szDate);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n{" #XCOLOR_GREEN "}%s {" #XCOLOR_WHITE "}%d:%02d.%03d {" #XCOLOR_YELLOW "}%s {" #XCOLOR_BLUE "}%s {" #XCOLOR_RED "}%s", dline, i_str, TempTime[0], TempTime[1], TempTime[2], name, country, szDate);
		}
	}

	if(!type)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, !"{" #XCOLOR_YELLOW "}Versenyrekordok listája", dline, !"Oké");
	}
	else
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, !"{" #XCOLOR_YELLOW "}Versenyrekordjaid listája", dline, !"Oké");
	}
	return 1;
}

CMD:goldpots(playerid, params[], 4, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/goldpots <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `id`, `hint`,`hint_en`  FROM `goldpot_data` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
    mysql_function_query(1, query, true, "THREAD_GoldpotsList", "dd", playerid, g_pQueryQueue[playerid]);

	AdminCommandLog("GOLDPOTS", playerid, -1);
	return 1;
}

forward THREAD_GoldpotsList(playerid, queue);
public THREAD_GoldpotsList(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_GoldpotsList);

	new
	    rows = cache_get_row_count(),
	    i;
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Aranytojások listája", !"Üres", !"Lehívás", !"Bezárás");
		return 1;
	}

	for( ; i != rows; i++)
	{
        cache_get_row_int(i, 0, datez);
        if(g_pLang{playerid} == LANGUAGE_HU) cache_get_row(i, 1, i_str);
		else cache_get_row(i, 2, i_str);

		if(!i)
		{
		    format(dline, sizeof(dline), "%d. %s", datez, i_str);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n%d. %s", dline, datez, i_str);
		}
	}

	ShowPlayerDialogEx(playerid, DIALOG_RACES + 789, DIALOG_STYLE_LIST, !"{" #XCOLOR_ORANGE "}Aranytojások listája", dline, !"Lehívás", !"Bezárás");
	return 1;
}

CMD:gotohorseshoe(playerid, params[], 4, 0)
{
	new
	    iID;
	if(sscanf(params, "d", iID)) return SendUsage(playerid, "/gotohorseshoe <ID>");
    if(!(0 <= iID < sizeof(HorseShoes))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ID_0__49"));

	PlayerTele(playerid, HorseShoes[iID][0], HorseShoes[iID][1], HorseShoes[iID][2]);

	valstr(name, iID);
	AdminCommandLog("GOTOHORSESHOE", playerid, -1, name);
	return 1;
}

CMD:gotooyster(playerid, params[], 4, 0)
{
	new
	    iID;
	if(sscanf(params, "d", iID)) return SendUsage(playerid, "/gotooyster <ID>");
    if(!(0 <= iID < sizeof(Oysters))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ID_0__49"));

	PlayerTele(playerid, Oysters[iID][0], Oysters[iID][1], Oysters[iID][2]);

	valstr(name, iID);
	AdminCommandLog("GOTOOYSTER", playerid, -1, name);
	return 1;
}

CMD:gotophoto(playerid, params[], 4, 0)
{
	new
	    iID;
	if(sscanf(params, "d", iID)) return SendUsage(playerid, "/gotophoto <ID>");
    if(!(0 <= iID < sizeof(PhotoPos))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ID_0__49"));

	PlayerTele(playerid, PhotoPos[iID][0], PhotoPos[iID][1], PhotoPos[iID][2]);

	valstr(name, iID);
	AdminCommandLog("GOTOPHOTO", playerid, -1, name);
	return 1;
}

CMD:gotojump(playerid, params[], 4, 0)
{
	new
	    iID,
	    type,
	    start;
	if(sscanf(params, "dD(0)", iID, type)) return SendUsage(playerid, "/gotojump <ID> <Type = 0 (0 = Start | 1 = Land | 2 = Camera)>");
    if(!(0 <= iID < sizeof(g_Jumps))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ID_0__69"));
	if(!(0 <= type <= 2)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS_0__2_0__START"));

	switch(type)
	{
		case 0: start = 0;
		case 1: start = 6;
		case 2: start = 12;
	}
	PlayerTele(playerid, g_Jumps[iID][start], g_Jumps[iID][start + 1], g_Jumps[iID][start + 2]);

	valstr(name, iID);
	AdminCommandLog("GOTOJUMP", playerid, -1, name);
	return 1;
}

CMD:gototag(playerid, params[], 4, 0)
{
	new
	    iID;
	if(sscanf(params, "d", iID)) return SendUsage(playerid, "/gototag <ID>");
    if(!(0 <= iID < sizeof(g_Tags))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ID_0__99"));

	PlayerTele(playerid, g_Tags[iID][e_tPos][0], g_Tags[iID][e_tPos][1], g_Tags[iID][e_tPos][2]);

	valstr(name, iID);
	AdminCommandLog("GOTOTAG", playerid, -1, name);
	return 1;
}

/*
CMD:igteles(playerid, params[], 0, 0)
{
	dline[0] = EOS;
	for(new i; i != 300; i++)
	{
		if(!i)
		{
		    format(dline, sizeof(dline), "%d. Ez most itt az << Sor. Tesztnek jó lesz :D", i);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n%d. Ez most itt az << Sor. Tesztnek jó lesz :D", dline, i);
		}
	}

	ShowPlayerDialogEx(playerid, DIALOG_RACES + 55, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Teleportok listája", dline, "Ok", "Mégse");
	return 1;
}
*/
/* Object létrehozás */
/*
CMD:particle(playerid, params[], 0, 0)
{
	new
	    ModelID;
	if(sscanf(params, "d", ModelID)) return SendUsage(playerid, "/particle <Model ID>");

	GetPlayerPos(playerid, X, Y, Z);
	if(GetPVarType(playerid, "ParticleModel"))
	{
		DestroyDynamicObject(GetPVarInt(playerid, "ParticleObject"));
	}
	SetPVarInt(playerid, "ParticleModel", ModelID);
	SetPVarInt(playerid, "ParticleObject", CreateDynamicObjectEx(ModelID, X, Y, Z, 0.0, 0.0, 0.0));
	return 1;
}

CMD:dparticle(playerid, params[], 0, 0)
{
	if(!GetPVarType(playerid, "ParticleModel")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_FELRAKVA_SEMILYEN_OBJECT"));

	DeletePVar(playerid, "ParticleModel");
	DestroyDynamicObject(GetPVarInt(playerid, "ParticleObject"));
	DeletePVar(playerid, "ParticleObject");
	return 1;
}

CMD:sparticle(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/sparticle <Komment>");

    fcheck("NMSS/Particles.txt");
    new
		File:TeleFile = fopen("NMSS/GangZones.txt", io_append);
	if(!TeleFile) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_JELENLEG_NEM_1"));

	new
		ObjID = GetPVarInt(playerid, "ParticleObject");
	GetDynamicObjectPos(ObjID, X, Y, Z);
	format(tmp, 128, "CreateDynamicObjectEx(%d, %.4f, %.4f, %.4f, 0.0, 0.0, 0.0); // %s\n", GetPVarInt(playerid, "ParticleModel"), X, Y, Z, params);
	fwrite(TeleFile, tmp);

	fclose(TeleFile);
	return 1;
}
*/
/*
CMD:ooffset(playerid, params[], 0, 0)
{
	new
		iObjectID;
	if(sscanf(params, "d", iObjectID)) return SendUsage(playerid, "/iModelID <gObjectID>");
	if(!IsValidObject(iObjectID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	vID = GetPlayerDynamicVehicleID(playerid);
	if(!vID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));

	new
	    Float:fVPosX,
	    Float:fVPosY,
	    Float:fVPosZ;

	GetDynamicVehiclePos(vID, fVPosX, fVPosY, fVPosZ);
	GetObjectPos(iObjectID, X, Y, Z);

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG___4F_4F_4F_1"), iObjectID, fVPosX - X, fVPosY - Y, fVPosZ - Z);
	return 1;
}
*/
CMD:material_(playerid, params[], 0, 0)
{
	new
	    objectid,
	    materialindex,
	    modelid,
	    txdname[128],
	    texturename[128],
	    materialcolor;

	if(sscanf(params, "ddds[" #STR_SIZE "]s[" #STR_SIZE "]X(0x0)", objectid, materialindex, modelid, txdname, texturename, materialcolor)) return SendUsage(playerid, "/material objectid, materialindex, modelid, txdname, texturename, materialcolor");
	if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

    SetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, ShiftRGBAToARGB(materialcolor));
	return 1;
}

CMD:gmaterial(playerid, params[], 0, 0)
{
	new
	    objectid,
	    materialindex,
	    modelid,
	    txdname[128],
	    texturename[128],
	    materialcolor;

	if(sscanf(params, "dd", objectid, materialindex)) return SendUsage(playerid, "/gmaterial <Object ID> <MaterialIndex>");
    if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, materialcolor);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_SLOT__MODEL__TXD__TEXTUR"), materialindex, modelid, txdname, texturename, materialcolor);
	return 1;
}

CMD:modelinfo(playerid, params[], 0, 0)
{
	new
	    infotype,
	    modelid;
	if(sscanf(params, "dD(-1)", infotype, modelid)) return SendUsage(playerid, "/modelinfo <InfoType> <Model ID>");
	if(!(1 <= infotype <= 9)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS_1__9"));

	if(!IsPlayerInAnyDynamicVehicle(playerid) && modelid == -1) return SendUsage(playerid, "/modelinfo <InfoType> <Model ID>");
	else if(IsPlayerInAnyDynamicVehicle(playerid) && modelid == -1)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
		modelid = GetDynamicVehicleModel(vID);
	}

	if(!IsValidModel(modelid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_MODEL_NEM_LETEZIK"));

	switch(infotype)
	{
		case 1: i_str = "VEHICLE_MODEL_INFO_SIZE";
		case 2: i_str = "VEHICLE_MODEL_INFO_FRONTSEAT";
		case 3: i_str = "VEHICLE_MODEL_INFO_REARSEAT";
		case 4: i_str = "VEHICLE_MODEL_INFO_PETROLCAP";
		case 5: i_str = "VEHICLE_MODEL_INFO_WHEELSFRONT";
		case 6: i_str = "VEHICLE_MODEL_INFO_WHEELSREAR";
		case 7: i_str = "VEHICLE_MODEL_INFO_WHEELSMID";
		case 8: i_str = "VEHICLE_MODEL_INFO_FRONT_BUMPER_Z";
		case 9: i_str = "VEHICLE_MODEL_INFO_REAR_BUMPER_Z";
	}

    GetVehicleModelInfo(modelid, infotype, X, Y, Z);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG______4F_4F_4F"), i_str, g_szVehicleNames[modelid - 400], modelid, X, Y, Z);
	return 1;
}

CMD:materialtext(playerid, params[], 0, 0)
{
	new
		objectid,
		materialindex,
		materialsize,
		fontface[128],
		fontsize,
		bold,
		fontcolor,
		backcolor,
		textalignment;
	if(sscanf(params, "ds[" #STR_SIZE "]dD(90)S(Arial)[" #STR_SIZE "]D(24)D(1)N(0xFFFFFFFF)N(0)D(0)", objectid, i_str, materialindex, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment))
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OBJECTID_TEXT_MATERIALINDEX"));
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FONTFACE__ARIAL_FONTSIZE__2"));
		return 1;
	}
	if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));

	ConvertNewLine(i_str);
	SetDynamicObjectMaterialText(objectid, materialindex, ColouredText(i_str), materialsize, fontface, fontsize, bold, ShiftRGBAToARGB(fontcolor), ShiftRGBAToARGB(backcolor), textalignment);
	return 1;
}

CMD:gmaterialtext(playerid, params[], 0, 0)
{
	new
	    objectid,
	    materialindex,
		text[128],
		materialsize,
		fontface[128],
		fontsize,
		bold,
		fontcolor,
		backcolor,
		textalignment;

	if(sscanf(params, "dd", objectid, materialindex)) return SendUsage(playerid, "/gmaterialtext <Object ID> <MaterialIndex>");
    if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectMaterialText(objectid, materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_SLOT__TEXT__SIZE_"), materialindex, text, materialsize);
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_FONTFACE___FONTSIZE___BOLD"), fontface, fontsize, bold, fontcolor, backcolor, textalignment);
	return 1;
}

CMD:szmtext(playerid, params[], 0, 0)
{
	new
		objectid,
		text[128],
		materialindex,
		materialsize,
		fontface[128],
		fontsize,
		bold,
		fontcolor,
		backcolor,
		textalignment;
	if(sscanf(params, "dds[" #STR_SIZE "]", objectid, materialindex, i_str)) return SendUsage(playerid, "/szmtext <Object ID> <Material Index> <Szöveg>");
    if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));

    GetDynamicObjectMaterialText(objectid, materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);

    ConvertNewLine(i_str);
	SetDynamicObjectMaterialText(objectid, materialindex, i_str, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);
	return 1;
}

CMD:cdo_(playerid, params[], 4, 0)
{
	new
		ModelID,
		ObjID,
		Float:fDrawDistance;

	if(sscanf(params, "dD(0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(300.0)", ModelID, datez, X, Y, Z, V[0], V[1], V[2], fDrawDistance)) return SendUsage(playerid, "/cdo <Model ID> {" #XCOLOR_YELLOW "}<TYPE> <PosX> <PosY> <PosZ> <RotX> <RotY> <RotZ> <DrawDistance>");
//    if(!IsValidObjectModel(ModelID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_MODEL_NEM_MEGFELELO_1"));

	if(!(X && Y))
	{
		GetPlayerPos(playerid, X, Y, Z);
	}

	switch(datez)
	{
		case 0:
		{
			ObjID = CreateDynamicObjectEx(ModelID, X, Y, Z, V[0], V[1], V[2], .drawdistance = fDrawDistance, .streamdistance = fDrawDistance);
			SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_DYNAMIC_LETREHOZVA_"), ModelID, ObjID, X, Y, Z, V[0], V[1], V[2]);

		    new
				File:ObjFile = fopen("NMSS/Objects.txt", io_append);
			if(ObjFile)
			{
				format(tmp, sizeof(tmp), "CreateDynamicObjectEx(%d, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f);\n", ModelID, X, Y, Z, V[0], V[1], V[2]);
				fwrite(ObjFile, tmp);
				fclose(ObjFile);
			}
		}
		case 1:
		{
			ObjID = CreateObject(ModelID, X, Y, Z, V[0], V[1], V[2], fDrawDistance);
			return SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_GLOBAL_LETREHOZVA__ID"), ModelID, ObjID, X, Y, Z, V[0], V[1], V[2]);
		}
		case 2:
		{
			ObjID = CreatePlayerObject(playerid, ModelID, X, Y, Z, V[0], V[1], V[2], fDrawDistance);
			return SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_PLAYER_LETREHOZVA__ID"), ModelID, ObjID, X, Y, Z, V[0], V[1], V[2]);
		}
		default: SendUsage(playerid, "/cdo <Model ID> {" #XCOLOR_YELLOW "}<TYPE> <PosX> <PosY> <PosZ> <RotX> <RotY> <RotZ> <DrawDistance>");
	}

	valstr(name, ModelID);
    AdminCommandLog("CDO", playerid, -1, name);
	return 1;
}
/*
CMD:adotv(playerid, params[], 4, 0)
{
	new
	    objectid,
	    vehicleid,
		Float:fOffSet[3],
		Float:fRot[3];
	if(sscanf(params, "ddF(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)", objectid, vehicleid, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2])) return SendUsage(playerid, "/adotv <objectid> <vehicleid> <offsetx> <offsety> <offsetz> <rotx> <roty> <rotz>");
	if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));

	AttachDynamicObjectToVehicle(objectid, vehicleid, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2]);
	Streamer_Update(playerid);
	return 1;
}

CMD:aotp(playerid, params[], 4, 0)
{
	new
	    objectid,
		Float:fOffSet[3],
		Float:fRot[3];
	if(sscanf(params, "duF(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)", objectid, player1, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2])) return SendUsage(playerid, "/aotp <objectid> <playerid> <offsetx> <offsety> <offsetz> <rotx> <roty> <rotz>");

	AttachObjectToPlayer(objectid, player1, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2]);
    Streamer_Update(playerid);
	return 1;
}

CMD:apotp(playerid, params[], 4, 0)
{
	new
	    objectid,
	    objectplayer,
		Float:fOffSet[3],
		Float:fRot[3];
	if(sscanf(params, "duuF(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)", objectid, objectplayer, player1, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2])) return SendUsage(playerid, "/aotp <objectid> <objectplayer> <attachplayer> <offsetx> <offsety> <offsetz> <rotx> <roty> <rotz>");

	AttachPlayerObjectToPlayer(objectplayer, objectid, player1, fOffSet[0], fOffSet[1], fOffSet[2], fRot[0], fRot[1], fRot[2]);
    Streamer_Update(playerid);
	return 1;
}
*/
CMD:actdo(playerid, params[], 0, 0)
{
	new
	    objectid;
	if(sscanf(params, "d", objectid)) return SendUsage(playerid, "/actdo <objectid>");
	if(!IsValidDynamicObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));

	AttachCameraToDynamicObject(playerid, objectid);
	return 1;
}

CMD:acto(playerid, params[], 0, 0)
{
	new
	    objectid;
	if(sscanf(params, "d", objectid)) return SendUsage(playerid, "/acto <objectid>");
    if(!IsValidObject(objectid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZO_OBJECT_ID"));

	AttachCameraToObject(playerid, objectid);
	return 1;
}

CMD:mo(playerid, params[], 4, 0)
{
	new
	    ObjectID,
	    Speed;
	if(sscanf(params, "dfffdF(-1000.0)F(-1000.0)F(-1000.0)", ObjectID, X, Y, Z, Speed, V[0], V[1], V[2]))
		return SendUsage(playerid, "/mo <Object ID> <PosX> <PosY> <PosZ> <Speed> <RotX = -1000.0> <RotY = -1000.0> <RotZ = -1000.0>");

	if(!IsValidObject(ObjectID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	MoveObject(ObjectID, X, Y, Z, Speed, V[0], V[1], V[2]);
	return 1;
}

CMD:actpo(playerid, params[], 4, 0)
{
	new
	    ObjectID;
	if(sscanf(params, "d", ObjectID)) return SendUsage(playerid, "/actpo <Object ID>");

	if(!IsValidPlayerObject(playerid, ObjectID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	AttachCameraToPlayerObject(playerid, ObjectID);
	return 1;
}

CMD:so(playerid, params[], 4, 0)
{
	new
	    ObjectID;
	if(sscanf(params, "d", ObjectID)) return SendUsage(playerid, "/so <Object ID>");

	if(!IsValidObject(ObjectID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	StopObject(ObjectID);
	return 1;
}

CMD:aoto(playerid, params[], 4, 0)
{
	new
	    ObjectID,
	    Attachtoid;
	if(sscanf(params, "dd", ObjectID, Attachtoid, X, Y, Z, V[0], V[1], V[2], datez))
		return SendUsage(playerid, "/aoto <Object ID> <AttachObjectID> <PosX> <PosY> <PosZ> <RotX> <RotY> <RotZ> <bool:SyncRot>");

	if(!IsValidObject(ObjectID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_OBJECT_ID_OBJECTID"));
	if(!IsValidObject(Attachtoid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_OBJECT_ID_ATTACHTOID"));

	AttachObjectToObject(ObjectID, Attachtoid, X, Y, Z, V[0], V[1], V[2], datez);
	return 1;
}

CMD:pickup(playerid, params[], 4, 0)
{
	new
		ModelID;

	if(sscanf(params, "ddD(-1)", ModelID, datez, vID)) return SendUsage(playerid, "/pickup <Model ID> {" #XCOLOR_YELLOW "}<Type> <World = -1>");

	GetPlayerPos(playerid, X, Y, Z);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_PICKUP_LETREHOZVA_"), CreateDynamicPickup(ModelID, datez, X + 2.0, Y, Z, vID));
	return 1;
}

CMD:dpickup(playerid, params[], 4, 0)
{
	new
		ModelID;

	if(sscanf(params, "d", ModelID)) return SendUsage(playerid, "/dpickup <Pickup ID>");

	DestroyDynamicPickup(ModelID);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_PICKUP_TOROLVE_"), ModelID);
	return 1;
}

CMD:sdor(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "dfff", ObjID, X, Y, Z)) return SendUsage(playerid, "/sdor <Model ID> {" #XCOLOR_BLUE "}<RotX> <RotY> <RotZ>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	SetDynamicObjectRot(ObjID, X, Y, Z);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_FORDULASA_ATTALITVA"), ObjID, X, Y, Z);
	return 1;
}

CMD:sdorx(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdorx <Model ID> {" #XCOLOR_BLUE "}<RotX>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectRot(ObjID, X, Y, Z);
	SetDynamicObjectRot(ObjID, X + V[0], Y, Z);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_FORDULASA_ATTALITVA_1"), ObjID, X + V[0], Y, Z);
	return 1;
}

CMD:sdory(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdory <Model ID> {" #XCOLOR_BLUE "}<RotY>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectRot(ObjID, X, Y, Z);
	SetDynamicObjectRot(ObjID, X, Y + V[0], Z);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_FORDULASA_ATTALITVA_2"), ObjID, X, Y + V[0], Z);
	return 1;
}

CMD:sdorz(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdorz <Model ID> {" #XCOLOR_BLUE "}<RotZ>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectRot(ObjID, X, Y, Z);
	SetDynamicObjectRot(ObjID, X, Y, Z+ V[0]);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_FORDULASA_ATTALITVA_3"), ObjID, X, Y, Z+ V[0]);
	return 1;
}

CMD:sdop(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "dfff", ObjID, X, Y, Z)) return SendUsage(playerid, "/sdop <Model ID> {" #XCOLOR_BLUE "}<PosX> <PosY> <PosZ>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	SetDynamicObjectPos(ObjID, X, Y, Z);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_POZICIOJA_ATTALITVA"), ObjID, X, Y, Z);
	return 1;
}

CMD:sdopx(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdopx <Model ID> {" #XCOLOR_BLUE "}<PosX>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectPos(ObjID, X, Y, Z);
	SetDynamicObjectPos(ObjID, X + V[0], Y, Z);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_POZICIOJA_ATTALITVA_1"), ObjID, X + V[0], Y, Z);
	return 1;
}

CMD:sdopy(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdopy <Model ID> {" #XCOLOR_BLUE "}<PosY>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectPos(ObjID, X, Y, Z);
	SetDynamicObjectPos(ObjID, X, Y+ V[0], Z);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_POZICIOJA_ATTALITVA_2"), ObjID, X, Y + V[0], Z);
	return 1;
}

CMD:sdopz(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "df", ObjID, V[0])) return SendUsage(playerid, "/sdopz <Model ID> {" #XCOLOR_BLUE "}<PosZ>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectPos(ObjID, X, Y, Z);
	SetDynamicObjectPos(ObjID, X, Y, Z + V[0]);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_POZICIOJA_ATTALITVA_3"), ObjID, X, Y, Z+ V[0]);
	return 1;
}

CMD:dupl(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "d", ObjID)) return SendUsage(playerid, "/dupl <Object ID>");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	GetDynamicObjectPos(ObjID, X, Y, Z);
	GetDynamicObjectRot(ObjID, V[0], V[1], V[2]);
    datez = Streamer_GetIntData(STREAMER_TYPE_OBJECT, ObjID, E_STREAMER_MODEL_ID);

	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_OBJECT_MEGDUPLAZVA_ID_"), CreateDynamicObjectEx(datez, X, Y, Z, V[0], V[1], V[2]));
	return 1;
}

CMD:movedo(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "dffffF(-1000.0)F(-1000.0)F(-1000.0)", ObjID, Angle, X, Y, Z, V[0], V[1], V[2])) return SendUsage(playerid, "/movedo <Object ID> <fSebesség> <X> <Y> <Z> <RotX> <RotY> <RotZ>");
	if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	MoveDynamicObject(ObjID, X, Y, Z, Angle, V[0], V[1], V[2]);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_MOVEDYNAMICOBJECT_ID__SPEED"), ObjID, Angle, X, Y, Z, V[0], V[1], V[2]);
	return 1;
}

CMD:stopdo(playerid, params[], 4, 0)
{
	new
		ObjID;

	if(sscanf(params, "d", ObjID)) return SendUsage(playerid, "/stopdo <Object ID> ");
    if(!IsValidDynamicObject(ObjID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

	StopDynamicObject(ObjID);
	SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_OBJECT_MEGALLITVA_OBJECT_ID"), ObjID);
	return 1;
}

CMD:sdo(playerid, params[], 4, 0)
{
	new
		ModelID;

	if(sscanf(params, "dS(*)[" #STR_SIZE "]", ModelID, i_str)) return SendUsage(playerid, "/sdo <Object ID> {" #XCOLOR_YELLOW "}<Komment>");
    if(!IsValidDynamicObject(ModelID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_OBJECT_ID"));

    fcheck("NMSS/Objects.txt");
    new
		File:ObjFile = fopen("NMSS/Objects.txt", io_append);

	if(!ObjFile) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_JELENLEG_NEM_1"));

	GetDynamicObjectPos(ModelID, X, Y, Z);
	GetDynamicObjectRot(ModelID, V[0], V[1], V[2]);
    datez = Streamer_GetIntData(STREAMER_TYPE_OBJECT, ModelID, E_STREAMER_MODEL_ID);

    if(i_str[0] == '*')
    {
		format(tmp, sizeof(tmp), "CreateDynamicObjectEx(%d, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f);\n", datez, X, Y, Z, V[0], V[1], V[2]);
	}
	else
	{
		format(tmp, sizeof(tmp), "CreateDynamicObjectEx(%d, %.4f, %.4f, %.4f, %.4f, %.4f, %.4f); // %s\n", datez, X, Y, Z, V[0], V[1], V[2], i_str);
	}
	SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_OBJECT_ELMENTVE"));

	fwrite(ObjFile, tmp);
	fclose(ObjFile);

	valstr(name, ModelID);
    AdminCommandLog("SDO", playerid, -1, name);
	return 1;
}

CMD:ddo(playerid, params[], 4, 0)
{
	new
		ModelID;
	if(sscanf(params, "dD(0)", ModelID, datez)) return SendUsage(playerid, "/ddo <Object ID> {" #XCOLOR_YELLOW "}<Type>");

	switch(datez)
	{
		case 0:
		{
            DestroyDynamicObject(ModelID);
            return SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_DYNAMIC_TOROLVE_ID_"), ModelID);
		}
		case 1:
		{
            DestroyObject(ModelID);
            return SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_GLOBAL_TOROLVE_ID_"), ModelID);
		}
		case 2:
		{
            DestroyPlayerObject(playerid, ModelID);
            return SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_OBJECT_PLAYER_TOROLVE_ID_"), ModelID);
		}
		default: SendUsage(playerid, "/ddo <Object ID> {" #XCOLOR_YELLOW "}<Type>");
	}
	valstr(name, ModelID);
    AdminCommandLog("DDO", playerid, -1, name);
	return 1;
}

/* 3D Textek */
/*
new
	Text:Textdraw2,
	Text:Textdraw3;

#define pb_percent(%1,%2,%3,%4)	((%1 - 6.0) + ((((%1 + 6.0 + %2 - 2.0) - %1) / %3) * %4))
// /text 490.0 72.0 162.0 162
CMD:text(playerid, params[], 0, 0)
{
	sscanf(params, "fffd", X, Y, Z, datez);

	if(_:Textdraw2)
	{
		TextDrawDestroy(Textdraw2);
		TextDrawDestroy(Textdraw3);

		TextDrawHideForPlayer(playerid, Textdraw2);
		TextDrawHideForPlayer(playerid, Textdraw3);
	}

	Textdraw2 = TextDrawCreate(486.000000, 426.000000, "_");
	TextDrawBackgroundColor(Textdraw2, 255);
	TextDrawFont(Textdraw2, 2);
	TextDrawLetterSize(Textdraw2, 0.899999, 0.000000);
	TextDrawColor(Textdraw2, -1);
	TextDrawSetOutline(Textdraw2, 1);
	TextDrawSetProportional(Textdraw2, 1);
	TextDrawUseBox(Textdraw2, 1);
	TextDrawBoxColor(Textdraw2, 255);
	TextDrawTextSize(Textdraw2, 557.000000, -130.000000);

	Textdraw3 = TextDrawCreate(487.000000, 427.000000, "_");
	TextDrawBackgroundColor(Textdraw3, 255);
	TextDrawFont(Textdraw3, 2);
	TextDrawLetterSize(Textdraw3, 0.899999, -0.199999);
	TextDrawColor(Textdraw3, -1);
	TextDrawSetOutline(Textdraw3, 1);
	TextDrawSetProportional(Textdraw3, 1);
	TextDrawUseBox(Textdraw3, 1);
	TextDrawBoxColor(Textdraw3, -1); // pb_percent(x, width, max, 1.0)
	TextDrawTextSize(Textdraw3, pb_percent(X, Y, Z, datez), 0.0);

	TextDrawShowForPlayer(playerid, Textdraw2);
	TextDrawShowForPlayer(playerid, Textdraw3);
	return 1;
}
*/
 // /tdsprite intro2:intro2 383.000000 0 255 195
CMD:atext(playerid, params[], 4, 0)
{
	new
	    Float:fTextSizeX,
	    Float:fTextSizeY;
	if(sscanf(params, "dff", datez, fTextSizeX, fTextSizeY))
	    return SendUsage(playerid, "/atext <ID> <fTextSizeX> <fTextSizeY>");

	TextDrawHideForAll(Text:datez);
	TextDrawTextSize(Text:datez, fTextSizeX, fTextSizeY);
    TextDrawSetSelectable(Text:datez, 1);
	TextDrawShowForAll(Text:datez);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TEXTID_"), _:datez);
    AdminCommandLog("ATEXT", playerid, -1);
	return 1;
}

CMD:prevmodel(playerid, params[], 4, 0)
{
	new
	    modelindex;
	if(sscanf(params, "dd", datez, modelindex))
	    return SendUsage(playerid, "/prevmodel <ID> <ModelIndex>");

	TextDrawHideForAll(Text:datez);
	TextDrawSetPreviewModel(Text:datez, modelindex);
	TextDrawShowForAll(Text:datez);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TEXTID__MODELINXED_"), _:datez, modelindex);
	return 1;
}

CMD:prevrot(playerid, params[], 4, 0)
{
	new
	    Float:fRotX,
	    Float:fRotY,
	    Float:fRotZ,
	    Float:fZoom;
	if(sscanf(params, "dfffF(1.0)", datez, fRotX, fRotY, fRotZ, fZoom))
	    return SendUsage(playerid, "/prevmodel <ID> <fRotX> <fRotY> <fRotZ> <fZoom = 1.0>");

	TextDrawHideForAll(Text:datez);
	TextDrawSetPreviewRot(Text:datez, fRotX, fRotY, fRotZ, fZoom = 1.0);
	TextDrawShowForAll(Text:datez);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TEXTID_"), _:datez);
	return 1;
}

CMD:prevvcolor(playerid, params[], 4, 0)
{
	new
		color1,
		color2;
	if(sscanf(params, "ddd", datez, color1, color2))
	    return SendUsage(playerid, "/prevmodel <ID> <color1> <color2>");

	TextDrawHideForAll(Text:datez);
	TextDrawSetPreviewVehCol(Text:datez, color1, color2);
	TextDrawShowForAll(Text:datez);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TEXTID_"), _:datez);
	return 1;
}

CMD:text3d(playerid, params[], 4, 0)
{
	if(sscanf(params, "s[128]", i_str)) return SendUsage(playerid, "/text3d <Szöveg>");

    ConvertNewLine(i_str);
	GetPlayerPos(playerid, X, Y, Z);
    new
		File:ObjFile = fopen("NMSS/Objects.txt", io_append);

	if(ObjFile)
	{
		format(tmp, sizeof(tmp), "CreateDynamic3DTextLabel(\"%s\", COLOR_RED, %f, %f, %f, MAX_TEXT_DISTANCE);\n", i_str, X, Y, Z);
		fwrite(ObjFile, tmp);
		fclose(ObjFile);
	}
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_3D_TEXT_LETREHOZVA_ID_"), _:CreateDynamic3DTextLabel(ColouredText(i_str), COLOR_RED, X, Y, Z, MAX_TEXT_DISTANCE));
    AdminCommandLog("TEXT3D", playerid, -1);
	return 1;
}

CMD:ptext3d(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/ptext3d <LOS>");

	GetPlayerPos(playerid, X, Y, Z);
	SendClientMessagef(playerid, COLOR_BLUE, "3D Text létrehozva! ID: {" #XCOLOR_RED "}%d", _:CreatePlayer3DTextLabel(playerid, !"Test String", COLOR_GREEN, X, Y, Z, .testLOS = datez));
	return 1;
}
/*
CMD:dptext3d(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/dptext3d <TextID>");

    DeletePlayer3DTextLabel(playerid, _:datez);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_3D_TEXT_LETREHOZVA_ID_"), datez);
	return 1;
}
*/
CMD:dtext3d(playerid, params[], 4, 0)
{
	new
		ID;

	if(sscanf(params, "d", ID)) return SendUsage(playerid, "/dtext3d <ID>");

	DestroyDynamic3DTextLabel(Text3D:ID);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_3D_TEXT_TOROLVE_ID_"), ID);

	AdminCommandLog("DTEXT3D", playerid, -1);
	return 1;
}

CMD:aptext3d(playerid, params[], 4, 0)
{
	new
		ID;

	if(sscanf(params, "duF(0)F(0)F(0)", ID, player1, X, Y, Z)) return SendUsage(playerid, "/aptext3d <TextID> <Játékos ID/Név> <OffsetX> <OffsetY> <OffsetZ>");

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_3D_TEXT_HOZZAKOTVE_A__NEVU"), pName(player1), player1, ID);
	Attach3DTextLabelToPlayer(Text3D:ID, player1, X, Y, Z);

	AdminCommandLog("APTEXT3D", playerid, -1);
	return 1;
}

CMD:avtext3d(playerid, params[], 4, 0)
{
	if(sscanf(params, "dfffs[128]", vID, X, Y, Z, i_str)) return SendUsage(playerid, "/avtext3d <vID> <OffsetX> <OffsetY> <OffsetZ> <szöveg>");

	datez = _:CreateDynamic3DTextLabel(i_str, 0xFF0000AA, X, Y, Z, 50.0, .attachedvehicle = vID);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_3D_TEXT_HOZZAKOTVE_A___NEVU"), VehName(vID), vID, datez);

    AdminCommandLog("AVTEXT3D", playerid, -1);
	return 1;
}

CMD:zone(playerid, params[], 4, 0)
{
	GetPlayerPos(playerid, X, Y, Z);
    GangZoneShowForAll(CreateZoneSquare(X, Y, float(strval(params))), COLOR_RED);
	return 1;
}

CMD:pzone(playerid, params[], 4, 0)
{
	GetPlayerPos(playerid, X, Y, Z);
    GangZoneShowForAll(CreatePlayerZoneSquare(playerid, X, Y, float(strval(params))), COLOR_RED);
	return 1;
}

/*
CMD:gzshow(playerid, params[], 0, 0)
{
	new
	    bool:IsShow;
	if(sscanf(params, "ddN(0xFF0000AA)", datez, bool:IsShow, vID)) return SendUsage(playerid, "/gzshow <GangZoneID> <0/1> <Color = 0xFF0000AA>");

	switch(IsShow)
	{
		case 0: GangZoneHideForPlayer(playerid, datez);
		case 1: GangZoneShowForPlayer(playerid, datez, vID);
		default: SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HULYE_VAGY_CSAK_BOOL_ERTEK"));
	}
	AdminCommandLog("GZSHOW", playerid, -1);
	return 1;
}
*/
CMD:gzpos(playerid, params[], 4, 0)
{
	if(sscanf(params, "dffff", datez, X, Y, Z, Angle)) return SendUsage(playerid, "/ganzone <ID> <X> <Y> <X> <Y>");

	GangZoneDestroy(datez);
	GangZoneCreate(X, Y, Z, Angle);
	AdminCommandLog("GZPOS", playerid, -1);
	return 1;
}

CMD:gzhide(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/gzhide <ID>");

	GangZoneHideForAll(datez);
	SendClientMessagef(playerid, COLOR_BLUE, "GangZone elrejtve! ID: %d", datez);

	AdminCommandLog("GZHIDE", playerid, -1);
	return 1;
}

CMD:pgzhide(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/pgzhide <ID>");

	PlayerGangZoneHide(playerid, datez);
	SendClientMessagef(playerid, COLOR_BLUE, "Player GangZone elrejtve! ID: %d", datez);

	AdminCommandLog("PGZHIDE", playerid, -1);
	return 1;
}

CMD:gzshow(playerid, params[], 4, 0)
{
	if(sscanf(params, "dx", datez, vID)) return SendUsage(playerid, "/gzshow <ID> <Color>");

	GangZoneShowForAll(datez, vID);
	SendClientMessagef(playerid, COLOR_BLUE, "GangZone felmutatva! ID: %d, 0x%x", datez, vID);

	AdminCommandLog("GZSHOW", playerid, -1);
	return 1;
}

CMD:pgzshow(playerid, params[], 4, 0)
{
	if(sscanf(params, "dx", datez, vID)) return SendUsage(playerid, "/pgzshow <ID> <Color>");

	PlayerGangZoneShow(playerid, datez, vID);
	SendClientMessagef(playerid, COLOR_BLUE, "Player GangZone felmutatva! ID: %d, 0x%x", datez, vID);

	AdminCommandLog("PGZSHOW", playerid, -1);
	return 1;
}

CMD:gzd(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/dgz <ID>");

	GangZoneHideForAll(datez);
	GangZoneDestroy(datez);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_GANGZONE_TOROLVE_ID_"), datez);

	AdminCommandLog("GZD", playerid, -1);
	return 1;
}

CMD:gzflash(playerid, params[], 4, 0)
{
	if(sscanf(params, "dx", vID, datez)) return SendUsage(playerid, "/gzflash <ID> <Szín>");

	GangZoneFlashForAll(vID, datez);
	AdminCommandLog("GZFLASH", playerid, -1);
	return 1;
}

CMD:pgzflash(playerid, params[], 4, 0)
{
	if(sscanf(params, "dx", vID, datez)) return SendUsage(playerid, "/gzflash <ID> <Szín>");

	PlayerGangZoneFlash(playerid, vID, datez);
	AdminCommandLog("PGZFLASH", playerid, -1);
	return 1;
}

CMD:gzsflash(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", vID)) return SendUsage(playerid, "/gzsflash <ID>");

	GangZoneStopFlashForAll(vID);
	AdminCommandLog("GZSFLASH", playerid, -1);
	return 1;
}

CMD:pgzsflash(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", vID)) return SendUsage(playerid, "/pgzsflash <ID>");

	PlayerGangZoneStopFlash(playerid, vID);
	AdminCommandLog("PGZSFLASH", playerid, -1);
	return 1;
}

CMD:vparams(playerid, params[], 0, 0)
{
    if(IsPlayerInDynamicVehicle(playerid, g_BonusCarID) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_NEM_HASZNALHATOD"));

	new
		engine,
		alarm,
		bonnet,
		boot,
		objective;
	GetDynamicVehicleParamsEx((vID = GetPlayerDynamicVehicleID(playerid)), engine, lights, alarm, doors, bonnet, boot, objective);

	format(i_str, sizeof(i_str), "D(%d)D(%d)D(%d)D(%d)D(%d)D(%d)D(%d)D(%d)", engine, lights, alarm, doors, bonnet, boot, objective, vID);
	if(sscanf(params, i_str, engine, lights, alarm, doors, bonnet, boot, objective, vID)) return SendUsage(playerid, "/vparams <engine %d> <lights %d> <alarm %d> <doors %d> <bonnet %d> <boot %d> <objective %d> <vID %d>", engine, lights, alarm, doors, bonnet, boot, objective, vID);

	SetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, (!GetPVarInt(playerid, "Level")) ? (0) : (objective));
	return 1;
}

CMD:vwindows(playerid, params[], 0, 0)
{
    if(IsPlayerInDynamicVehicle(playerid, g_BonusCarID) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_NEM_HASZNALHATOD"));

	new driver, passenger, backleft, backright;
	GetDynamicVehParamsCarWindows((vID = GetPlayerDynamicVehicleID(playerid)), driver, passenger, backleft, backright);

	format(i_str, sizeof(i_str), "D(%d)D(%d)D(%d)D(%d)", driver, passenger, backleft, backright);
	if(sscanf(params, i_str, driver, passenger, backleft, backright)) return SendUsage(playerid, "/vparams <driver %d> <passenger %d> <backleft %d> <backright %d>", driver, passenger, backleft, backright);

	SetDynamicVehParamsCarWindows(vID, driver, passenger, backleft, backright);
	return 1;
}

CMD:vdoors(playerid, params[], 0, 0)
{
    if(IsPlayerInDynamicVehicle(playerid, g_BonusCarID) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_NEM_HASZNALHATOD"));

	new driver, passenger, backleft, backright;
	GetDynamicVehParamsCarDoors((vID = GetPlayerDynamicVehicleID(playerid)), driver, passenger, backleft, backright);

	format(i_str, sizeof(i_str), "D(%d)D(%d)D(%d)D(%d)", driver, passenger, backleft, backright);
	if(sscanf(params, i_str, driver, passenger, backleft, backright)) return SendUsage(playerid, "/vparams <driver %d> <passenger %d> <backleft %d> <backright %d>", driver, passenger, backleft, backright);

	SetDynamicVehParamsCarDoors(vID, driver, passenger, backleft, backright);
	return 1;
}

CMD:angular(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	if(sscanf(params, "fF(0)F(0)", V[0], V[1], V[2])) return SendUsage(playerid, "/angular <X> <Y> <Z> ");

    SetDynamicVehAngularVelocity(GetPlayerDynamicVehicleID(playerid), V[0], V[1], V[2]);
	return 1;
}

CMD:velocity(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	if(sscanf(params, "fF(0)F(0)", V[0], V[1], V[2])) return SendUsage(playerid, "/velocity <X> <Y> <Z> ");

    SetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), V[0], V[1], V[2]);
	return 1;
}

CMD:plate(playerid, params[], 0, 0)
{
    if(!(vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
    if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_A_SORFOR_ULESEN"));

	if(isnull(params)) return SendUsage(playerid, "/plate <Rendszám>");
	if(!IsLicensePlate(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEK_A_JARMUNEK_NINCS_RENDSZAMA"));
	if(strlen(params) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_RENDSZAM_MAXIMUM"));
    if(vID == g_BonusCarID) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RA_BONUSZAUTO_RENDSZAMAT_HNEM"));

	new iCompID[14];
	for(new i; i != 14; i++)
	{
        if(!(iCompID[i] = GetDynamicVehComponentInSlot(vID, i))) continue;
	}

	SetDynamicVehicleNumberPlate(vID, ColouredText(params));

	GetDynamicVehiclePos(vID, X, Y, Z);
	GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	GetDynamicVehicleZAngle(vID, Angle);

	foreach(new i: Player)
	{
		if(!IsPlayerInDynamicVehicle(i, vID)) continue;

		if(GetPlayerVehicleSeat(i) != 0)
		{
			SimpleTele(i, X - 3, Y + 3, Z);

			SetTimerEx("RePutInVeh", 150, false, "ddd", i, vID, GetPlayerVehicleSeat(i));
		}
	}

	SetVehicleFlags(vID, GetVehicleFlags(vID) | e_RESPAWNED);
	SetDynamicVehicleToRespawn(vID);

	SetDynamicVehiclePos(vID, X, Y, Z);
	SetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	SetDynamicVehicleZAngle(vID, Angle);

	// Random kerék rárakása
	new
	    pWheel = GetPVarInt(playerid, "FavWheel");
	if(pWheel == -1)
    {
		AddDynamicVehicleComponent(vID, wheels[random(sizeof(wheels))]);
	}
	else if(pWheel > 1)
	{
		AddDynamicVehicleComponent(vID, pWheel);
	}

	for(new i; i != 14; i++)
	{
		if(!iCompID[i]) continue;
		AddDynamicVehicleComponent(vID, iCompID[i]);
	}
    FilterColorTags(params);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_RRENDSZAMTABLAJA_HKICSE"), VehName(vID), params, vID);
	return 1;
}


CMD:randplate(playerid, params[], 0, 0)
{
    if(!(vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
	if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_A_SORFOR_ULESEN"));

	if(!IsLicensePlate(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEK_A_JARMUNEK_NINCS_RENDSZAMA"));

    RandomNumberPlate(vID);
	GetDynamicVehiclePos(vID, X, Y, Z);
	GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	GetDynamicVehicleZAngle(vID, Angle);

	foreach(new i: Player)
	{
		if(!IsPlayerInDynamicVehicle(i, vID)) continue;

		if(GetPlayerVehicleSeat(i) != 0)
		{
			SimpleTele(i, X - 3, Y + 3, Z);

			SetTimerEx("RePutInVeh", 150, false, "ddd", i, vID, GetPlayerVehicleSeat(i));
		}
	}
	SetDynamicVehicleToRespawn(vID);

	SetDynamicVehiclePos(vID, X, Y, Z);
	SetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	SetDynamicVehicleZAngle(vID, Angle),

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YH_RRENDSZAMTABLAJA_HKICSE_1"), VehName(vID));
	return 1;
}

forward RePutInVeh(playerid, vehicleid, seatid);
public RePutInVeh(playerid, vehicleid, seatid)
{
    // printf("RePutInVeh(playerid = %d, vehicleid = %d, seatid = %d)", playerid, vehicleid, seatid);
	PutPlayerInDynamicVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:bomb(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | RANGE | RACE | GANGWAR | CTC | POSTAS | PIZZAS>)
{
	CHECK_SZINT(playerid, SZINT_BOMB);

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MEGFIGYELES_KOZBEN_NEM"));

	if(GetPVarType(playerid, "BombX")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EGYSZERRE_CSAK_EGY_BOMBAT_RAKHATSZ"));
	if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_A_RANGE_ZONABAN_NEM_RAKHATSZ"));
    if(IsPlayerInDynamicArea(playerid, gSpawnZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_SPAWN_ZONABAN_NEM_RAKHATSZ"));
    if(IsPlayerInDynamicArea(playerid, gDavidHaza)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_ISTEN_HAZANAL_NEM_RAKHASZT"));

    new
        dmid = g_pDeathMatchID[playerid],
		bomb_second;
		
	if(dmid != -1)
	{
		if(!(g_DMFlags[dmid] & e_PLACE_BOMB)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBEN_A_DMBEN_TILTVA_VAN_1"));
	}
	if(sscanf(params, "D(8)", bomb_second)) return SendUsage(playerid, "/bomb <Robbanási Idõ másodperc>");
	if(!(3 <= bomb_second <= 300) && !IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ROBBANASI_IDO_3"));

	if(!g_pVIP[playerid])
	{
		MoneyCheck(playerid, 7500);
	}
	else
	{
		MoneyCheck(playerid, 3000);
	}

	ClearAnimations(playerid);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	GetPlayerPos(playerid, X, Y, Z);
	SetPVarFloat(playerid, "BombX", X);
	SetPVarFloat(playerid, "BombY", Y);
	SetPVarFloat(playerid, "BombZ", Z);

	V[0] = GetPVarFloat(playerid, "BombX");
	V[1] = GetPVarFloat(playerid, "BombY");
	SetPVarInt(playerid, "BombTick", GetTickCount());

	GetXYInFrontOfPlayer(playerid, V[0], V[1], 0.7);
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_BOMBA_ELHELYEZVE__MASODPERC"), bomb_second);

	SetPVarInt(playerid, "BombObject", CreateDynamicObject(1252, X, Y, Z - 0.8, 270.0, 0.0, 0.0));
	SetPVarInt(playerid, "BombTimer", SetTimerEx("BombExplode", bomb_second * 1000, false, "d", playerid));
	Streamer_Update(playerid);
	return 1;
}

CMD:killbomb(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_KILLBOMB);

	foreach(new i: Player)
	{
		if(!GetPVarType(i, "BombX")) continue;
		if(IsPlayerInRangeOfPoint(playerid, 1.3, GetPVarFloat(i, "BombX"), GetPVarFloat(i, "BombY"), GetPVarFloat(i, "BombZ")))
		{
			if((GetTickCount() - GetPVarInt(i, "BombTick")) < 3000) return ShowWelcome(playerid, LANG(playerid, "MSG_RMEG_LESE_RAKTA_A_BOMBAT_WO"));

			DestroyDynamicObject(GetPVarInt(i, "BombObject"));
		    DeletePVar(i, "BombObject");

			DeletePVar(i, "BombX");
			DeletePVar(i, "BombY");
			DeletePVar(i, "BombZ");
			DeletePVar(i, "BombTick");

		    KillTimer(GetPVarInt(i, "BombTimer"));
		    DeletePVar(i, "BombTimer");

			if(playerid != i)
			{
			    ShowWelcomef(i, LANG(i, "MSG_YHFAILNB_HMEGSEMMISI"), pName(playerid), playerid);
			}

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			ShowWelcome(playerid, LANG(playerid, "MSG_WBOMBA_MEGSEMMISITVE"));
			return 1;
		}
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_BOMBA_A_KOZELEDBEN"));
	return 1;
}

stock CheckHQZone(playerid, Float:x, Float:y)
{
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
	{
		new
		    pHQ = GetPVarInt(playerid, "HQ");
		//if(IsPointInDynamicArea(gGroveZone, x, y, 0.0) && pHQ != 1) return ShowWelcome(playerid, LANG(playerid, "MSG_RHNEM_VAGY_GGROVERHSW"));
		if(IsPointInDynamicArea(gSevileZone, x, y, 0.0) && pHQ != 2) return ShowWelcome(playerid, LANG(playerid, "MSG_RHNEM_VAGY_BHSEVILERHS"));
		if(IsPointInDynamicArea(gLMZone, x, y, 0.0) && pHQ != 3) return ShowWelcome(playerid, LANG(playerid, "MSG_RHNEM_VAGY_BLWBMRHES"));
	}
	return 0;
}

CMD:gotoprop(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "i", houseid)) return SendUsage(playerid, "/gotoprop <Ház ID>");

	X = GetGVarFloat("PropX", houseid);
	Y = GetGVarFloat("PropY", houseid);
	Z = GetGVarFloat("PropZ", houseid);
    if(!(X && Y)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_INGATLAN_NEM_LETEZIK"));
    if((goldpot[gPickup]) && GetDistance3D(X, Y, Z, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < IN_RANGE_DISTANCE) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_AZ_ARANYTOJAS_TUL_KOZEL"));

    foreach(new i: Player)
    {
		if(GetPVarInt(i, "LofaszHouseID") == houseid && g_pRobCount{i}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_HAZAT_EPPEN_RABOLJAK"));
	}

 	if(!CheckHQZone(playerid, X, Y)) PlayerTele(playerid, X, Y, Z, GetGVarInt("OutInt", houseid), GetGVarFloat("PropA", houseid));
	return 1;
}
CMD:gtp(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_gotoprop(playerid, params);
}

CMD:gotoinprop(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "i", houseid)) return SendUsage(playerid, "/gotoinprop <Ház ID>");
	if(GetGVarType("PropLocked", houseid) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_HAZ_BE_VAN_ZARVA_NEM_MEHETSZ"));

	X = GetGVarFloat("InX", houseid);
	Y = GetGVarFloat("InY", houseid);
	Z = GetGVarFloat("InZ", houseid);
    if(!(X && Y)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_INGATLAN_MEG_NINCS_BEFEJEZV"));

    foreach(new i: Player)
    {
		if(GetPVarInt(i, "LofaszHouseID") == houseid && g_pRobCount{i}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_HAZAT_EPPEN_RABOLJAK"));
	}

	if(!CheckHQZone(playerid, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid))) PlayerTele(playerid, X, Y, Z, GetGVarInt("Interior", houseid), GetGVarFloat("InA", houseid), GetGVarInt("VirtualWorld", houseid));
	return 1;
}
CMD:gip(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_gotoinprop(playerid, params);
}

CMD:gotobiz(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "i", houseid)) return SendUsage(playerid, "/gotobiz <Biznisz ID>");

	X = GetGVarFloat("BizX", houseid);
	Y = GetGVarFloat("BizY", houseid);
	Z = GetGVarFloat("BizZ", houseid);
    if(!(X && Y)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_A_BIZNISZ_NEM_LETEZIK"));

    if((goldpot[gPickup]) && GetDistance3D(X, Y, Z, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < IN_RANGE_DISTANCE) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_AZ_ARANYTOJAS_TUL_KOZEL_1"));

 	if(!CheckHQZone(playerid, X, Y)) PlayerTele(playerid, X, Y, Z, 0, GetGVarFloat("BizA", houseid));
	return 1;
}
CMD:gb(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_gotobiz(playerid, params);
}

CMD:gotoinbiz(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "i", houseid)) return SendUsage(playerid, "/gotoinbiz <Biznisz ID>");
	if(GetGVarType("BizLocked", houseid) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_BIZNISZ_BE_VAN_ZARVA_NEM"));

	EnterBiznis(playerid, houseid);
	return 1;
}
CMD:gib(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_gotoinbiz(playerid, params);
}

CMD:home(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(!GetPVarType(playerid, "PlayerProp")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD"));

    houseid = GetPVarInt(playerid, "PlayerProp");
    foreach(new i: Player)
    {
		if(GetPVarInt(i, "LofaszHouseID") == houseid && g_pRobCount{i}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_HAZAD_EPPEN_RABOLJAK_NEM"));
	}

 	PlayerTele(playerid, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid), GetGVarInt("OutInt", houseid), GetGVarFloat("PropA", houseid));
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHHAZAMENTELW"));
	return 1;
}

CMD:mybiz(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(!GetPVarType(playerid, "PlayerBiz")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_BIZNISZED"));

    houseid = GetPVarInt(playerid, "PlayerBiz");

 	PlayerTele(playerid, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid), 0, GetGVarFloat("BizA", houseid));
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHODATELEPORTALTAL_HA_GHBI"));
	return 1;
}

CMD:dive(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "F(50)", V[0])) return SendUsage(playerid, "/dive <Magasság>");
	if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
    if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
	new
	    pHQ = GetPVarInt(playerid, "HQ");
	/*if(IsPlayerInDynamicArea(playerid, gGroveZone) && pHQ != 1)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD"));
*/
	if(IsPlayerInDynamicArea(playerid, gSevileZone) && pHQ != 2)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_1"));

	else if(IsPlayerInDynamicArea(playerid, gLMZone) && pHQ != 3)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_2"));

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		GetDynamicVehiclePos((vID = GetPlayerDynamicVehicleID(playerid)), X, Y, Z);
		SetDynamicVehiclePos(vID, X, Y, Z + V[0]);
	}
	else
	{
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z + V[0]);
		g_PlayerData[playerid] &= ~e_FALLED;
	}

	if(IsNegative(V[0]))
	{
		format(i_str, sizeof(i_str), "Ledobva ~b~%.0f ~w~méterrel!", V[0]);
	}
	else
	{
		format(i_str, sizeof(i_str), "Feldobva ~b~%.0f ~w~méterrel!", V[0]);
	}
	ShowWelcome(playerid, i_str);
	return 1;
}

CMD:k(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(sscanf(params, "F(2.5)", V[0])) return SendUsage(playerid, "/k <Magasság>");
	if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
    if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
	new
	    pHQ = GetPVarInt(playerid, "HQ");
	/*if(IsPlayerInDynamicArea(playerid, gGroveZone) && pHQ != 1)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD"));

	else */if(IsPlayerInDynamicArea(playerid, gSevileZone) && pHQ != 2)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_1"));

	else if(IsPlayerInDynamicArea(playerid, gLMZone) && pHQ != 3)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_2"));

	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z + V[0]);
    g_PlayerData[playerid] &= ~e_FALLED;

	if(IsNegative(V[0]))
	{
		format(i_str, sizeof(i_str), "Ledobva ~b~%.0f ~w~méterrel!", V[0]);
	}
	else
	{
		format(i_str, sizeof(i_str), "Feldobva ~b~%.0f ~w~méterrel!", V[0]);
	}
	ShowWelcome(playerid, i_str);
	return 1;
}

CMD:members(playerid, params[], 0, 0)
{
	if(isnull(params))
	{
		ShowPlayerDialogEx(playerid, DIALOG_MEMBERS, DIALOG_STYLE_LIST, !"Klántagok", !"Grove\nSevile\nL&M.", !"Ok", !"Mégse");
		return 1;
	}

	new
	    i;
	if(!strcmp(params, "grove", true))
	{
		i = 1;
	}
	else if(!strcmp(params, "sevile", true))
	{
		i = 2;
	}
	else if(!strcmp(params, "lm", true) || !strcmp(params, "l&m", true))
	{
		i = 3;
	}
	else
	{
		ShowPlayerDialogEx(playerid, DIALOG_MEMBERS, DIALOG_STYLE_LIST, "Klántagok", "Grove\nSevile\nL&M.", "Ok", "Mégse");
		return 1;
	}

	mysql_format(1, query, sizeof(query), "SELECT `name` FROM `players` WHERE `hq` = %d", i);
	mysql_function_query(1, query, true, "THREAD_Members", "dd", playerid, g_pQueryQueue[playerid]);
	SetPVarInt(playerid, "MembersNoBack", 1);
	return 1;
}

CMD:leavehq(playerid, params[], 0, 0)
{
	new
	    pHQ = GetPVarInt(playerid, "HQ");
	if(!pHQ) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_SEMILYEN_HQBAN"));

	foreach(new i: Player)
	{
		if(playerid == i) continue;
		if(GetPVarInt(i, "HQ") == pHQ)
		{
			SendClientMessagef(i, COLOR_RED, LANG(i, "MSG___KILEPETT_A_HQBOL_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		}
	}

	DeletePVar(playerid, "HQ");
    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__KILEPTEL_A_HQBOL"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

stock CheckHQRegID(pregid, hqid)
{
	switch(hqid)
	{
		case 1: // grove
		{
			switch(pregid)
			{
				case 1, 2, 3, 18487: return 1;
				default: return 0;
			}
		}
		case 2: // sevile
		{
			switch(pregid)
			{
				case 193, 20: return 1;
				default: return 0;
			}
		}
		case 3: // lm
		{
			switch(pregid)
			{
				case 2532, 14388, 20, 38192: return 1;
				default: return 0;
			}
		}
	}
	return 0;
}

CMD:set(playerid, params[], 0, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]u", i_str, player1)) return SendUsage(playerid, "/set <Grove/Sevile/L&M> <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKAT_NEM_RAKHATSZ_BE_SEMILYEN"));

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)),
		i;
//		iSpawn;
    if(GetPVarType(player1, "HQ") && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_JELENLEG_BENNE"));

	if(!strcmp(i_str, "grove", true))
	{
		i = 1;
		name = "Grove";
	}
	else if(!strcmp(i_str, "sevile", true))
	{
		i = 2;
		name = "Sevile";
	}
	else if(!strcmp(i_str, "lm", true) || !strcmp(i_str, "l&m", true))
	{
		i = 3;
		name = "L&M";
	}
	else
	{
        SendUsage(playerid, "/set <Grove/Sevile/L&M> <Játékos ID/Név>");
		return 1;
	}

	if(!CheckHQRegID(PlayerInfo[playerid][pRegID], i) && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_JOGOD_BERAKNI_JATEKOST"));
	if(GetPVarInt(player1, "HQ") == i) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_MAR_EBBEN_A_CSAPATBAN"));

	SendClientMessagef(playerid, COLOR_GREEN2, LANG(playerid, "MSG__BERAKTAD__NEVU_JATEKOST_AZ_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1, name);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_LIGHTGREEN, LANG(player1, "MSG__HQ_TULAJ__BERAKOTT_TEGED_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, name);

	SendClientMessage(player1, COLOR_YELLOW, LANG(player1, "MSG_HQ_PARANCSOK_HQHELP"));
	SetPVarInt(player1, "HQ", i);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '%d' WHERE `reg_id` = %d", i, PlayerInfo[player1][pRegID]);
    mysql_function_query(1, query, false, "", "");
/*
    iSpawn = GetPVarInt(player1, "SpawnLocation");
    datez = -1;
	switch(i)
	{
		case 1:
		{
			cmd_grove(player1, "");
   			if(2 <= iSpawn <= 4) datez = 1;
		}
		case 2:
		{
			cmd_sevile(player1, "");
			switch(iSpawn)
			{
				case 1, 3, 4: datez = 2;
			}
		}
		case 3:
		{
//			cmd_lm(playerid, "");
			switch(iSpawn)
			{
				case 1, 2, 4: datez = 0;
			}
		}
	}

	if(datez != -1)
	{
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '%d' WHERE `reg_id` = %d", datez, PlayerInfo[player1][pRegID]);
	    //mysql_function_query(1, query, false, "", ""); // FASZNAK EZ, grove má törûve a listárú

		SetPVarInt(player1, "SpawnLocation", datez);
	    UpdatePlayerSpawnInfo(player1);
	}
	*/
	return 1;
}

CMD:remove(playerid, params[], 0, 0)
{
	if(sscanf(params, "s[" #STR_SIZE "]u", i_str, player1)) return SendUsage(playerid, "/remove <Grove/Sevile/L&M> <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKAT_NEM_DOBHATSZ_KI_SEMILYEN"));
    if(!GetPVarType(player1, "HQ")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_JELENLEG_NINCS"));

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(!strcmp(i_str, "grove", true))
	{
        if(PlayerInfo[playerid][pRegID] != 846 && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_CSAPAT_ATI__KOICSE_CSAK"));

		if(GetPVarInt(player1, "HQ") != 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_NEM_GROVES"));
	    SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_KIDOBTAD__NEVU_JATEKOST_A_GROV"), pName(player1), player1);
		if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__HQ_TULAJ__KIDOBOTT_TEGED_"), pName(playerid), playerid);

        DeletePVar(player1, "HQ");
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '0' WHERE `reg_id` = %d", PlayerInfo[player1][pRegID]);
	    mysql_function_query(1, query, false, "", "");
/*
		if(GetPVarInt(player1, "SpawnLocation") == 1)
		{
			SetPVarInt(player1, "SpawnLocation", 0);
		}
*/
		UpdatePlayerSpawnInfo(player1);
		SpawnPlayer(player1);
		return 1;
	}
	else if(!strcmp(i_str, "sevile", true))
	{
        if(PlayerInfo[playerid][pRegID] != 144 && PlayerInfo[playerid][pRegID] != 19013 && PlayerInfo[playerid][pRegID] != 2767 && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_CSAPAT_MIKE_CSAK_O_DOBHAT"));

		if(GetPVarInt(player1, "HQ") != 3) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_NEM_SEVILES"));
	    SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_KIDOBTAD__NEVU_JATEKOST_A_SEVI"), pName(player1), player1);
		if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__HQ_TULAJ__KIDOBOTT_TEGED__1"), pName(playerid), playerid);
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '0' WHERE `reg_id` = %d", PlayerInfo[player1][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		DeletePVar(player1, "HQ");
/*
		if(GetPVarInt(player1, "SpawnLocation") == 3)
		{
			SetPVarInt(player1, "SpawnLocation", 0);
		}

		UpdatePlayerSpawnInfo(player1);
*/
		SpawnPlayer(player1);
		return 1;
	}
	else if(!strcmp(i_str, "l&m", true))
	{
        if(PlayerInfo[playerid][pRegID] != 2532 && PlayerInfo[playerid][pRegID] != 14388 && PlayerInfo[playerid][pRegID] != 20 && PlayerInfo[playerid][pRegID] != 38192 && bIsNotOwner) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_CSAPAT_ARPIE_CSAK_OK_DOBHATNA"));
		if(GetPVarInt(player1, "HQ") != 7) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_NEM_LMES"));

		SendClientMessagef(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_KIDOBTAD__NEVU_JATEKOST_AZ"), pName(player1), player1);
		if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__HQ_TULAJ__KIDOBOTT_TEGED__2"), pName(playerid), playerid);
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hq` = '0' WHERE `reg_id` = %d", PlayerInfo[player1][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		DeletePVar(player1, "HQ");

		UpdatePlayerSpawnInfo(player1);
		SpawnPlayer(player1);
		return 1;
	}

	SendUsage(playerid, "/remove <Grove/Sevile/L&M> <Játékos ID/Név>");
	return 1;
}

CMD:mytext(playerid, params[], 0, 0)
{
	new
	    MyTextColor = (GetPVarType(playerid, "Text3DColor")) ? (GetPVarInt(playerid, "Text3DColor")) : ((random(0xFFFFFF) << 8) | 0xFF),
	    Float:MyTextOffset = (GetPVarType(playerid, "MyTextOffset")) ? (GetPVarFloat(playerid, "MyTextOffset")) : (0.4);
	if(isnull(params))
	{
        if(g_PlayerData[playerid] & e_MYTEXT)
        {
			GetPVarString(playerid, "MyTextString", i_str, sizeof(i_str));
			SendUsage(playerid, "/mytext <Szöveg> {" #XCOLOR_WHITE "}Jelenleg%s(%.2f | 0x%x)", (PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID) ? (" ") : (" Rejtve"), MyTextOffset, MyTextColor);
			SendClientMessagef(playerid, MyTextColor, "-> \"%s\"", i_str);
		}
		else
		{
			SendUsage(playerid, "/mytext <Szöveg>");
		}
		return 1;
	}
    if(IPCheck(playerid, params, "/mytext"))
		return 1;

    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

	tmp[0] = EOS;
	strcat(tmp, ColouredText(params));
	if(strlen(tmp) > 128) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_AZ_UZENETED"));

	i_str[0] = EOS;
	strcat(i_str, tmp);
    RemoveHexColorFromString(i_str);
	if(strlen(i_str) >= MAX_MYTEXT_CHAR) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_SZOVEG_MAXIMUM"));

    ConvertNewLine(tmp);

	if(g_PlayerData[playerid] & e_MYTEXT)
	{
		if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
		{
			Update3DTextLabelText(PlayerInfo[playerid][p3DText], MyTextColor, tmp);
			Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, MyTextOffset);
		}
	}
	else
	{
		PlayerInfo[playerid][p3DText] = Create3DTextLabel(tmp, MyTextColor, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, MyTextOffset);
        g_PlayerData[playerid] |= e_MYTEXT;
	}

	SetPVarString(playerid, "MyTextString", tmp);
	SetPVarInt(playerid, "Text3DColor", MyTextColor);
	ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_FELRAKVANNSZINEZES_B"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `mytext` = '1,%.4f,%d,%e' WHERE `reg_id` = %d", MyTextOffset, MyTextColor, tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}
CMD:headtext(playerid, params[], 0, 0)
{
	return cmd_mytext(playerid, params);
}

CMD:cmytext(playerid, params[], 0, 0)
{
	if(!(g_PlayerData[playerid] & e_MYTEXT)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_MYTEXT"));

	new
	    xColor;
	if(sscanf(params, "n", xColor)) return SendUsage(playerid, "/cmytext <Hexadecimális szám> {" #XCOLOR_WHITE "}Ha a beírt szám nem megy, akkor írj elé 0x elõtagot! Pl: 0xFFFF00");

	new
	    Float:MyTextOffset = (GetPVarType(playerid, "MyTextOffset")) ? (GetPVarFloat(playerid, "MyTextOffset")) : (0.4);
    GetPVarString(playerid, "MyTextString", i_str, sizeof(i_str));

    if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
    {
		Update3DTextLabelText(PlayerInfo[playerid][p3DText], xColor, i_str);
		Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, MyTextOffset);
	}

	SetPVarInt(playerid, "Text3DColor", xColor);
	ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_ATSZINEZVE"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `mytext` = '1,%.4f,%d,%e' WHERE `reg_id` = %d", MyTextOffset, xColor, i_str, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:ofmytext(playerid, params[], 0, 0)
{
	if(!(g_PlayerData[playerid] & e_MYTEXT)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_MYTEXT"));

	new
	    Float:fValue;
	if(sscanf(params, "f", fValue)) return SendUsage(playerid, "/ofmytext <fOffset>");
	if(!(0.0 <= fValue <= 1.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEK_00__10"));

	new
	    MyTextColor = GetPVarInt(playerid, "Text3DColor");
    GetPVarString(playerid, "MyTextString", i_str, sizeof(i_str));

    if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
    {
		Update3DTextLabelText(PlayerInfo[playerid][p3DText], MyTextColor, i_str);
		Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, fValue);
	}

	SetPVarFloat(playerid, "MyTextOffset", fValue);
	ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_ATHELYEZVE"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `mytext` = '1,%.4f,%d,%e' WHERE `reg_id` = %d", fValue, MyTextColor, i_str, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:dmytext(playerid, params[], 0, 0)
{
	if(!(g_PlayerData[playerid] & e_MYTEXT)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_MYTEXT"));

    if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
    {
		Delete3DTextLabel(PlayerInfo[playerid][p3DText]);
		PlayerInfo[playerid][p3DText] = Text3D:INVALID_3DTEXT_ID;
	}

	DeletePVar(playerid, "Text3DColor");
	DeletePVar(playerid, "MyTextString");
	DeletePVar(playerid, "MyTextOffset");
	g_PlayerData[playerid] &= ~e_MYTEXT;

	ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_RTOROLVEW"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `mytext` = '0,0.4,0,*' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:smytext(playerid, params[], 0, 0)
{
	if(!(g_PlayerData[playerid] & e_MYTEXT)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NO_MYTEXT"));

	new
	    MyTextColor = GetPVarInt(playerid, "Text3DColor"),
	    Float:MyTextOffset = GetPVarFloat(playerid, "MyTextOffset");
    GetPVarString(playerid, "MyTextString", i_str, sizeof(i_str));

	if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID)
	{
		Delete3DTextLabel(PlayerInfo[playerid][p3DText]);
		PlayerInfo[playerid][p3DText] = Text3D:INVALID_3DTEXT_ID;
        ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_RHELREJTVEW"));
	}
	else
	{
		PlayerInfo[playerid][p3DText] = Create3DTextLabel(i_str, MyTextColor, 0.0, 0.0, 0.0, 50.0, 0, 1);
		Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, MyTextOffset);
        ShowWelcome(playerid, LANG(playerid, "MSG_UZENET_BMEGJELENITVEW"));
	}

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `mytext` = '%d,%.4f,%d,%e' WHERE `reg_id` = %d", (PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID), MyTextOffset, MyTextColor, i_str, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:mtid(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", player1)) return SendUsage(playerid, "/mtid <Játékos ID/Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    new
        iMyTextColor = GetPVarInt(player1, "Text3DColor");
    SendClientMessagef(playerid, iMyTextColor, "TextID: %d, Used: %d, Color: 0x%x, Offset: %.4f", _:PlayerInfo[player1][p3DText], g_PlayerData[player1] & e_MYTEXT, iMyTextColor, GetPVarFloat(player1, "MyTextOffset"));
	return 1;
}
/*
CMD:autogate(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_AUTOGATE);

	if(IsPlayerInDynamicCP(playerid, gCP_GATE))
	{
		if(GetPVarInt(playerid, "HQ") != 1 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES"));

		if(!(g_ServerFlags & e_AUTOGATE))
		{
	        if(g_GateFlags & (1 << 18)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_KAPU_MAR_KI_VAN_NYITVA_ELOSZOR"));

			mysql_function_query(1, "UPDATE `config` SET `autogate` = 1 WHERE `id` = 1", false, "", "");
	        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPU_ATTALITVA_AUTOMATARA"));
		}
		else
		{
			mysql_function_query(1, "UPDATE `config` SET `autogate` = 0 WHERE `id` = 1", false, "", "");

	        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPU_ATTALITVA_MANUALISRA"));
		}
		g_ServerFlags ^= e_AUTOGATE;
	}

	else SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_AZ_AJTONAL_LEVO_CHECKPOINTB"));
	return 1;
}
*/
CMD:hqhelp(playerid, params[], 0, 0)
{
	new
	    pHQ = GetPVarInt(playerid, "HQ");
	if(!pHQ) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_SEMILYEN_CSAPATBAN"));

	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__HQ_PARANCSOK_"));
    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NUM_6__HQ_KAPU_KINYITASA_ES"));
	switch(pHQ)
	{
		case 1:
		{
			SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_AUTOGATE_HQ_KAPU_AUTOMATIKUS"));
			SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_KAPUK_NYITASA_GROVEHELI_GROVEFAL"));
		}
	}

	SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_SPAWNPLACE_KEZDOHELY_BEALLITASA"));
	SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_LEAVEHQ__HQ_ELHAGYASA__AZAZ"));
	//SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_A_BANDACHATBE_VALO_IRASHOZ"));
	return 1;
}

CMD:cmdlist(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/cmdlist <Lista | Alapból: 1, Minden oldalon 150db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	datez = --iLimit * 150;
	dline[0] = EOS;
	for(new i; i != 150; i++, datez++)
	{
		if(datez > g_iMaxCMD) break;

	    GetGVarString("CMD", country, sizeof(country), datez);
		strcat(dline, country);
		strcat(dline, "\n");
	}

	format(tmp, 128, "Parancslista {00FF00}%d {" #XCOLOR_DEFAULT "}- {FF0000}%d", datez - 150, datez);
	ShowPlayerDialogEx(playerid, DIALOG_CMDLIST, DIALOG_STYLE_LIST, tmp, dline, "Elküld");
	return 1;
}

CMD:findcmd(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findcmd <Parancs részlet>");

	new
		match;
	dline[0] = EOS;
	for(new i; i != g_iMaxCMD; i++)
	{
		GetGVarString("CMD", country, sizeof(country), i);
		if(strfind(country, params, true) != -1)
		{
			if(match++ > 180) break;

			strcat(dline, country);
			strcat(dline, "\n");
		}
	}

	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", params, match);
	ShowPlayerDialogEx(playerid, DIALOG_CMDLIST, DIALOG_STYLE_LIST, tmp, dline, "Elküld");
	return 1;
}

CMD:cme(playerid, params[], 0, 0)
{
	datez = 696969;
	cmd_me(playerid, params);
	datez = -1;
	return 1;
}

CMD:me(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/%sme <Cselekvés>", (datez == 696969) ? ("c") : (""));

	if(strfind(params, "rcon login", true) != -1)
		return 0;

	if(strfind(params, "/q", true) != -1)
		return 0;
    if(strfind(params, "/ q", true) != -1)
		return 0;
		
  	/*if(!IsOwner(playerid)) */for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;
		
	// Közeli /me-n nincs spam ellenõrzéss.. mi a fasznak mégis?
	if(datez != 696969) SPAM_CHECK(Me, 3000)

	// Ha a megadott szöveg IP-t tartalmaz, nem engedjük elküldeni
	if(IPCheck(playerid, params, "/me"))
		return 1;

	// Ha a közeli /me
	strcpy(i_str, ColouredText(params));
    if(datez == 696969)
    {
		new
		    pWorld = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, X, Y, Z);
		format(tmp, 144, "***%s(%d) %s", pName(playerid), playerid, i_str);

		foreach(new i: Player)
		{
			if(GetPlayerVirtualWorld(i) != pWorld) continue;
			if(IsPlayerInRangeOfPoint(i, 15.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
			{
			    if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
				SendClientMessage(i, COLOR_PINK, tmp);
			}
		}
	}
	else
	{
	    foreach(new i: Player)
		{
	    	if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			SendClientMessagef(i, COLOR_PINK, "***%s(%d) {" #XCOLOR_PINK "}%s", pName(playerid), playerid, i_str);
		}
	}
	return 1;
}

CMD:ctry(playerid, params[], 0, 0)
{
	datez = 696969;
	cmd_try(playerid, params);
	datez = -1;
	return 1;
}

CMD:try(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/%stry <Cselekvés>", (datez == 696969) ? ("c") : (""));

 	if(strfind(params, "rcon login", true) != -1)
		return 0;

	if(strfind(params, "/q", true) != -1)
		return 0;

	// Közeli /try-n nincs spam ellenõrzéss.. mi a fasznak mégis?
	if(datez != 696969) SPAM_CHECK(Try, 7000)

	// Ha a megadott szöveg IP-t tartalmaz, nem engedjük elküldeni
	if(IPCheck(playerid, params, "/try")) return 1;

    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

	switch(random(2))
	{
	    case 0: format(tmp, sizeof(tmp), LANG(playerid, "MSG_TRY_1"),pName(playerid), playerid, ColouredText(params)), vID = 0x8fa134AA;
	    case 1: format(tmp, sizeof(tmp), LANG(playerid, "MSG_TRY_2"),pName(playerid), playerid, ColouredText(params)), vID = 0xb32b06AA;
	}

	// Ha közeli try
    if(datez == 696969)
    {
		new
		    pWorld = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, X, Y, Z);

		foreach(new i: Player)
		{
			if(GetPlayerVirtualWorld(i) != pWorld) continue;
			if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			if(IsPlayerInRangeOfPoint(i, 15.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(i, vID, tmp);
			}
		}
	}
	else
	{

	    foreach(new i: Player)
		{
		    if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			SendClientMessagef(i, vID, tmp);
		}
	}
	return 1;
}

CMD:cdo(playerid, params[], 0, 0)
{
	datez = 696969;
	cmd_do(playerid, params);
	datez = -1;
	return 1;
}

CMD:do(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/%sdo <Cselekvés>", (datez == 696969) ? ("c") : (""));

 if(strfind(params, "rcon login", true) != -1)
		return 0;

	if(strfind(params, "/q", true) != -1)
		return 0;

	// Közeli /do-n nincs spam ellenõrzéss.. mi a fasznak mégis?
	if(datez != 696969) SPAM_CHECK(Do, 3000)

	// Ha a megadott szöveg IP-t tartalmaz, nem engedjük elküldeni
	if(IPCheck(playerid, params, "/do"))
		return 1;

	// Ha a közeli /do
	strcpy(i_str, ColouredText(params));
    if(datez == 696969)
    {
		new
		    pWorld = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, X, Y, Z);
		format(tmp, 144, "* %s (( {%06x}%s(%d){" #XCOLOR_WHITE "} ))", i_str, GetPlayerColor(playerid) >>>8, pName(playerid), playerid);

		foreach(new i: Player)
		{
			if(GetPlayerVirtualWorld(i) != pWorld) continue;
			if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			if(IsPlayerInRangeOfPoint(i, 15.0, X, Y, Z) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(i, COLOR_WHITE, tmp);
			}
		}
	}
	else
	{
		foreach(new i: Player)
		{
		    if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			SendClientMessagef(i, COLOR_WHITE, "* %s (( {%06x}%s(%d){" #XCOLOR_WHITE "} ))", i_str, GetPlayerColor(playerid) >>>8, pName(playerid), playerid);
		}
	}
	return 1;
}

CMD:balance(playerid, params[], 0, 0)
{
    if(IsPlayerInBank(playerid))
	{
	    SendClientMessage(playerid, COLOR_GREY, LANG(playerid, "MSG___BANKBAN_LEVO_OSSZEG_"));
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BANKBAN_LEVO_PENZED__GETPVARIN"), GetPVarInt(playerid, "Bank"));
		SendClientMessage(playerid, COLOR_GREY, "| -----------------------------");
		return 1;
	}
	else if((houseid = IsPlayerInOwnBiznis(playerid)))
	{
	    SendClientMessage(playerid, COLOR_GREY, LANG(playerid, "MSG___BIZNISZ_SZEFBEN_LEVO_OSSZEG"));
		SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_SZEF_TARATLMA__GETGVARINTBIZ"), GetGVarInt("BizBalance", houseid));
		SendClientMessage(playerid, COLOR_GREY, "| -----------------------------");
		return 1;
	}

    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_A_BANKNAL_MENNY_A"));
	return 1;
}

CMD:withdraw(playerid, params[], 0, 0)
{
	new
		amount, bank;
	if(sscanf(params, "i", amount)) return SendUsage(playerid, "/withdraw <Összeg>");
    if(IsNegative(amount)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));

    if(IsPlayerInBank(playerid))
	{
		if(amount > GetPVarInt(playerid, "Bank")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VEHETSZ_KI_TOBB_PENZT_MIND"));

		bank = GetPVarInt(playerid, "Bank") - amount;
		GivePlayerMoneyEx(playerid, amount, "BankWithdraw", true);
		SavePlayer(playerid);

		SetPVarInt(playerid, "Bank", bank);
		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_KIVETTEL_A_SZAMLADROL_T_UJ"), amount, bank);
		return 1;
	}
	else if((houseid = IsPlayerInOwnBiznis(playerid)))
	{
		if(amount > GetGVarInt("BizBalance", houseid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VEHETSZ_KI_TOBB_PENZT_MIND_1"));

		bank = GetGVarInt("BizBalance", houseid) - amount;
		SetGVarInt("BizBalance", bank, houseid);

		GivePlayerMoneyEx(playerid, amount,"BizniszWithdraw", true);
		SavePlayer(playerid);

		mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `balance` = %d WHERE `id` = %d", bank, houseid);
		mysql_function_query(1, query, false, "", "");

		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_KIVETTEL_A_SZAMLADROL_T_UJ"), amount, bank);
		return 1;
	}

    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_A_BANKNAL_MENNY_A"));
	return 1;
}

CMD:deposit(playerid, params[], 0, 0)
{
    new
		amount;
    if(sscanf(params, "i", amount)) return SendUsage(playerid, "/deposit <Összeg>");

	if(amount > 1000000000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EGYSZERRE_CSAK_EGY_MILLIARDOT"));
	if(IsNegative(amount)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));
    if(!IsPlayerInBank(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_A_BANKNAL_MENNY_A_1"));
	if(amount > GetPlayerMoneyEx(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELEG_PENZED"));

	new
	    iCurrBank = GetPVarInt(playerid, "Bank");
	if((iCurrBank + amount) > MAX_BANK_MONEY) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_MAXIMUM_ELERVE_TOBB_PENZT_NEM"), FormatNumber(MAX_BANK_MONEY));

	// Ha túlcsordul, akkor valószínûleg kissebb lesz, mint a jelenlegi összeg.
	if((iCurrBank + amount) < iCurrBank) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAX_ERTEK_ATLEPVE_BIZTONSAGI"));

	SetPVarInt(playerid, "Bank", iCurrBank + amount);

	GivePlayerMoneyEx(playerid, -amount, "BankDeposit", true);
	SavePlayer(playerid);

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_BETETTEL_A_SZAMLADRA_T_UJ_EGYEN"), amount, GetPVarInt(playerid, "Bank"));
	return 1;
}

CMD:respawntrailer(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_RESPAWNTRAILER);

	for(new i = gTrailers[0]; i <= gTrailers[1]; i++)
	{
		SetDynamicVehicleToRespawn(i);
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_GHTRAILEREK_VISSZARAKVAW"));
	return 1;
}

#if defined YSF
CMD:vrespawn(playerid, params[], 3, 0)
{
    new
		Float:fRange;
    if(sscanf(params, "F(500.0)", fRange)) return SendUsage(playerid, "/vrespawn <fRange>");
	GetPlayerPos(playerid, X, Y, Z);

	printf("VRESPAWN <START>");
	new
	    i;
    #if defined UVS
	for( ; i != Streamer_GetUpperBound(STREAMER_TYPE_VEHICLE); i++)
	#else
	for( ; i != MAX_VEHICLES; i++)
	#endif
	{
		if(!IsValidDynamicVehicle(i) || i == g_BonusCarID) continue;
		if(GetDynamicVehicleVirtualWorld(i) != 5 && GetDynamicVehDistanceFromPoint(i, X, Y, Z) < fRange)
		{
			if(!IsDynamicVehicleOccupied(i))
			{
                SetVehicleFlags(i, GetVehicleFlags(i) | e_RESPAWNED);
				SetDynamicVehicleToRespawn(i);
			}
		}
	}

	foreachex(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, fRange, X, Y, Z))
			GameTextForPlayer(i, LANG(i, "MSG_GAMETEXT_VRESPAWN"), 3000,3);
	}

    AdminCommandLog("VRESPAWN", playerid, -1);
    printf("VRESPAWN <END>");
	return 1;
}
#endif

CMD:giveweapon(playerid, params[], 1, 0)
{
    //if(!IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
    new
		ammo,
		weaponid;
    if(sscanf(params, "us[" #STR_SIZE "]D(500)", player1, i_str, ammo)) return SendUsage(playerid, "/giveweapon <Játékos ID/Név> <Fegyver ID/Név> ( <Lõszer> )");

	if(!IsNumeric(i_str))
	{
		weaponid = GetWeaponIDFromName(i_str);
	}
	else
	{
	    weaponid = strval(i_str);
	}

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!IsValidWeapon(weaponid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_FEGYVER_ID"));
	if((IN_MINIGAME_AND_SHITS & g_pGamesData[player1]) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_JELENLEG"));

	if(weaponid == 38 || weaponid == 35 || weaponid == 36)
	{
	    if(!IsOwner(playerid) && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
	}
	if(weaponid == 6) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot

	/*if(!IsFOOwner(playerid))
	{
		if(GetPVarInt(player1,"Level") > 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
		if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, "HIBA: Magadnak nem adhatsz fegyvert!");
 	}*/

	GetWeaponName(weaponid, i_str, 32);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__ADTAL__NEVU_JATEKOSNAK_T_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str, weaponid, ammo);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__ADOTT_NEKED_EGY_T"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str, weaponid, ammo);
	GivePlayerWeapon(player1, weaponid, ammo);

    AdminCommandLog("GIVEWEAPON", playerid, player1, i_str);
	return 1;
}

CMD:setcash(playerid, params[], 4, 0)
{
	new
		cash;
  	if(sscanf(params, "ui", player1, cash)) return SendUsage(playerid, "/setcash <Játékos ID/Név> <Összeg>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_PENZET_NEM_ALLITHATOD"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		old = GetPlayerMoneyEx(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékos pénzét; {" #XCOLOR_SAMP "}Régi: $%s | Új: $%s", GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(old), FormatNumber(cash));
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin:{%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a pénzed; {" #XCOLOR_SAMP "}Régi: $%s | Új: $%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(old), FormatNumber(cash));

	SetPlayerMoneyEx(player1, cash);
	
	valstr(name, cash);
 	AdminCommandLog("SETCASH", playerid, player1, name);
	return 1;
}

CMD:setbank(playerid, params[], 4, 0)
{
	new
		cash;
	if(sscanf(params, "ui", player1, cash)) return SendUsage(playerid, "/setbank <Játékos ID/Név> <Összeg>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_BANKBAN_LEVO_PENZET"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		old = GetPVarInt(player1, "Bank");
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékos bankban lévõ pénzét; {" #XCOLOR_SAMP "}Régi: $%d | Új: $%d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, cash);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a bankban lévõ pénzed; {" #XCOLOR_SAMP "}Régi: $%d | Új: $%d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, cash);

	SetPVarInt(player1, "Bank", cash);

	valstr(name, cash);
	AdminCommandLog("SETBANK", playerid, player1, name);
	return 1;
}

CMD:setscore(playerid, params[], 4, 0)
{
	new
		score;
	if(sscanf(params, "ui", player1, score)) return SendUsage(playerid, "/setscore <Játékos ID/Név> <Pont>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_PONTJAT_NEM_ALLITHAOTD"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		old = GetPlayerScore(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak a pontját; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(old), FormatNumber(score));
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}állította a pontodat; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(old), FormatNumber(score));

	SetPlayerScore(player1, score);

	valstr(name, score);
 	AdminCommandLog("SETSCORE", playerid, player1, name);
	return 1;
}

CMD:setclanbank(playerid, params[], 4, 0)
{
	new
	    clanid,
		cash;
		
	if(sscanf(params, "di", clanid, cash)) return SendUsage(playerid, "/setclanbank <ClanID> <Érték>");
	if(!(0 <= clanid < MAX_CLANS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_HIBA_ROSSZ_KLAN_ID_0___MAX"));
	new
		old = gClanBankMoney[clanid];
	
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s {" #XCOLOR_BLUE "}nevû klánnak a pénzét. {" #XCOLOR_SAMP "}Régi: %s | Új: %s", gClanColor[clanid] >>> 8, gClanName[clanid], FormatNumber(old), FormatNumber(cash));
	gClanBankMoney[clanid] = cash;

   	mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `bankmoney` = %d WHERE `id` = %d", cash, CLAN_SQL(clanid));
	mysql_function_query(1, query, false, "", "");

 	format(i_str, sizeof(i_str), "%s(%d):  old: %s | new: %s",gClanName[clanid], CLAN_SQL(clanid), FormatNumber(old), FormatNumber(cash));
 	AdminCommandLog("SETCLANBANK", playerid, -1, i_str);
	return 1;
}

CMD:givexp(playerid, params[], 4, 0)
{
	new
		score;
	if(sscanf(params, "ui", player1, score)) return SendUsage(playerid, "/givexp <Játékos ID/Név> <XP>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_PONTJAT_NEM_ALLITHAOTD"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
//	if(IsNegative(score)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEGATIV_SZAMOT_NEM_IRHATSZ_1"));

	new
		old = GetPlayerScore(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Adtál {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak %s XP-t; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(score), FormatNumber(old), FormatNumber(old + score));
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}adott neked %s XP-t; {" #XCOLOR_SAMP "}Régi: %s | Új: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(score), FormatNumber(old), FormatNumber(old + score));

	GivePlayerScore(player1, score);
	SavePlayer(player1);

	valstr(name, score);
    AdminCommandLog("GIVEXP", playerid, player1, name);
	return 1;
}

CMD:setdrunk(playerid, params[], 2, 0)
{
    new
		drunk;
    if(sscanf(params, "ui", player1, drunk)) return SendUsage(playerid, "/setdrunk <Játékos ID/Név> <Bebaszás Szint>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_BEBASZASI_SZINTJET"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(0 <= drunk <= 50000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_0__50000"));

	new
	    old = GetPlayerDrunkLevel(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak a bebaszási szintéjét; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, drunk);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}bebaszás szintedet; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, drunk);

	SetPlayerDrunkLevel(player1, drunk);

	valstr(name, drunk);
    AdminCommandLog("SETDRUNK", playerid, player1, name);
	return 1;
}

CMD:mytime(playerid, params[], 0, 0)
{
    if(g_pDeathMatchID[playerid] != -1 && g_DM_Time[g_pDeathMatchID[playerid]] != -1) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_DMBE_NEM_LEHET2"));
	if(sscanf(params, "dD(0)D(0)", hour, minute, datez))
	{
		GetPlayerTime(playerid, hour, minute);
		SendUsage(playerid, "/mytime <Óra> {" #XCOLOR_YELLOW "}<Perc> <Mentse-e? 1 : 0> Jelenleg: %02d:%02d", hour, minute);
		return 1;
	}

	if(!(0 <= hour <= 24)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__ROSSZ_ORA_0__23_KOZO"), hour);
	if(!(0 <= minute <= 59)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__ROSSZ_PERC_0__59_KOZ"), minute);

	SetPlayerTime(playerid, hour, minute);
	switch(datez)
	{
		case 0:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_IDOD_BEALLITVA_2D2DRARE"), hour, minute);
		}
		case 1:
		{
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PIDO_HELMENTVENRTORLESEW"));
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_IDOD_BEALLITVA_2D2DRARE_ES"), hour, minute);

			SetPVarInt(playerid, "PlayerTime_Hour", hour);
			SetPVarInt(playerid, "PlayerTime_Minute", minute);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `time` = %d WHERE `reg_id` = %d", (hour * 60) + minute, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		default:
		{
            SendUsage(playerid, "/mytime <Óra> {" #XCOLOR_YELLOW "}<Perc> <Mentse e ? 1 : 0>");
            return 1;
		}
	}
	return 1;
}

CMD:resettime(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ELMENTETT_IDOD_TOROLVE"));
    DeletePVar(playerid, "PlayerTime_Hour");
    DeletePVar(playerid, "PlayerTime_Minute");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `time` = -1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:myweather(playerid, params[], 0, 0)
{
	new
		weatherid;

	if(g_pDeathMatchID[playerid] != -1 && g_DM_Weather[g_pDeathMatchID[playerid]] != -1) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_DMBE_NEM_LEHET"));
	if(sscanf(params, "D(-1)D(0)", weatherid, datez)) return SendUsage(playerid, "/myweather <Idõjárás ID> {" #XCOLOR_YELLOW "}<Mentse e ? 1 : 0>");

	if(IsNegative(weatherid))
	{
		dline[0] = EOS;
		for(new i; i != sizeof(g_szWeatherNames); i++)
		{
			if(IsEven(i)) strcat(dline, "{FF0000}");
			else strcat(dline, "{00FF00}");

			strcat(dline, g_szWeatherNames[i]);
			strcat(dline, "\n");
		}
		ShowPlayerDialogEx(playerid, DIALOG_WEATHER, DIALOG_STYLE_LIST, "Válassz idõjárást!", dline, "Oké", "Kilépés");
		return 1;
	}

	SetPlayerWeather(playerid, weatherid);
	switch(datez)
	{
		case 0:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__IDOJARASOD_BEALLITVA_ID_"), weatherid);
		}
		case 1:
		{
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PIDOJARAS_HELMENTVENRTORLES"));
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__IDOJARASOD_BEALLITVA_ES_ELMENTVE"), weatherid);
	        SetPVarInt(playerid, "PlayerWeather", weatherid);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weather` = %d WHERE `reg_id` = %d", weatherid, PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}
		default:
		{
            SendUsage(playerid, "/myweather <Idõjárás ID> {" #XCOLOR_YELLOW "}<Mentse e ? 1 : 0>");
            return 1;
		}
	}
	return 1;
}

CMD:resetweather(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ELMENTETT_IDOJARASOD_TOROLVE"));
	DeletePVar(playerid, "PlayerWeather");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weather` = 255 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}
CMD:resetmyweather(playerid, params[], 0, 0)
{
	return cmd_resetweather(playerid, params);
}

CMD:armedweap(playerid, params[], 0, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/armedweap <Fegyver ID>");
	if(!IsValidWeapon(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_FEGYVER_ID"));

	SetPlayerArmedWeapon(playerid, datez);
	SetPVarInt(playerid, "ArmedWeapon", datez);

	i_str[0] = EOS;
	GetWeaponName(datez, i_str, 32);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHKEZDO_FEGYVERED_ATTALITVA"), i_str);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `armedweapon` = %d WHERE `reg_id` = %d", datez, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:setcolor(playerid, params[], 1, 0)
{
    new
		color;
    if(sscanf(params, "un", player1, color)) return SendUsage(playerid, "/setcolor <Játékos ID/Név> <Szín ID>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    old = GetPlayerColor(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak a színét; {" #XCOLOR_SAMP "}Régi: 0x%x | Új: 0x%x", old >>> 8, pName(player1), player1, old, color);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította színed; {" #XCOLOR_SAMP "}Régi: 0x%x | Új: 0x%x", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, color);

	SetPlayerColor(player1, color);

	valstr(name, color);
    AdminCommandLog("SETCOLOR", playerid, player1, name);
	return 1;
}

CMD:setskin(playerid, params[], 1, 0)
{
    new
		skin;
    if(sscanf(params, "ui", player1, skin)) return SendUsage(playerid, "/setskin <Játékos ID/Név> <Skin ID>");
	if(!IsValidSkin(skin)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SKIN_ID"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(skin == ADMIN_SKIN_ID && !GetPVarInt(player1, "Level")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JATEKOSNAK_NEM_ALLITHATSZ"));

	new
	    old = GetPlayerSkin(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak a skinjét; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, skin);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a skined; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, skin);

	SetPlayerSkin(player1, skin);

	valstr(name, skin);
    AdminCommandLog("SETSKIN", playerid, player1, name);
	return 1;
}

CMD:skinchange(playerid, params[], 0, 0)
{
	new
	    iStart;
    if(sscanf(params, "D(-1)", iStart)) return SendUsage(playerid, "/skinchange <Kezdõ ID = -1> {" #XCOLOR_WHITE "}(-1 = Jelenleg beállított skined)");
    if(iStart == -1) iStart = GetPlayerSkin(playerid);
	if(!IsValidSkin(iStart)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SKIN_ID"));

	SetPVarInt(playerid, "StartSkinID", iStart);

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_SKINVALASZTAS_ELKEZDVE_KEZDO"), iStart);
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_BEFEJEZESHEZ_IRD_BE_STOPCHANGE"));
	return 1;
}
CMD:changeskin(playerid, params[], 0, 0)
{
	return cmd_skinchange(playerid, params);
}

CMD:stopchange(playerid, params[], 0, 0)
{
	DeletePVar(playerid, "StartSkinID");
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SKINVALASZTAS_BEFEJEZVE"));
	return 1;
}

CMD:setwanted(playerid, params[], 1, 0)
{
    new
		wanted;
    if(sscanf(params, "ui", player1, wanted)) return SendUsage(playerid, "/setwanted <Játékos ID/Név> <Körözési Szint>");
	if(wanted > 6) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_KOROZESI_SZINT_06"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_KOROZESI_SZINTJET"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    old = GetPlayerWantedLevel(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}körözési szintjét; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, wanted);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a körözési szinted; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, wanted);

	SetPlayerWantedLevel(player1, wanted);

	valstr(name, wanted);
    AdminCommandLog("SETWANTED", playerid, player1, name);
	return 1;
}

CMD:setworld(playerid, params[], 2, 0)
{
    new
		vw;
    if(sscanf(params, "ui", player1, vw)) return SendUsage(playerid, "/setworld <Játékos ID/Név> <Virtuális Világ>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
//    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_VIRTUALIS_VILAGAT"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(GetPVarType(player1, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_VERSENYBEN"));
	if(GetPVarType(player1, "FalloutState")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_FALLOUTBAN"));
	if(GetPVarType(player1, "Trucking")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_KAMIONOZIK"));

	new
		old = GetPlayerVirtualWorld(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak a virtuális világát; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, vw);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a viruális világodat; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, vw);

	PlayerPlaySound(player1, 1057);
	SetPlayerVirtualWorld(player1, vw);
	RemovePlayerFromClearworld(player1);

	if((vID = GetPlayerDynamicVehicleID(player1)))
	{
	    SetDynamicVehicleVirtualWorld(vID, vw);
		foreach(new i: Player)
		{
			if(i == player1) continue;
			if(IsPlayerInDynamicVehicle(i, vID))
			{
				SetPlayerVirtualWorld(i, vw);
			}
		}
 	}
	valstr(name, vw);
	AdminCommandLog("SETWORLD", playerid, player1, name);
	return 1;
}

CMD:setinterior(playerid, params[], 1, 0)
{
	new
		interior;
    if(sscanf(params, "ui", player1, interior)) return SendUsage(playerid, "/setint <Játékos ID/Név> <Interior>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_INTERIORJAT_NEM"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(0 <= interior <= 20)) return SendUsage(playerid, "/setint <Játékos ID/Név> <Interior>");
	if(GetPVarType(player1, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_VERSENYBEN_1"));

	new
	    old = GetPlayerInterior(player1);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}nevû játékosnak az interiorját; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, interior);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította az interiorod; {" #XCOLOR_SAMP "}Régi: %d | Új: %d", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, interior);

	PlayerPlaySound(player1, 1057);
	SetPlayerInterior(player1, interior);

	if((vID = GetPlayerDynamicVehicleID(player1)))
	{
	    LinkDynamicVehicleToInterior(vID, interior);
		foreach(new i: Player)
		{
			if(i == player1) continue;
			if(IsPlayerInDynamicVehicle(i, vID))
			{
				LinkDynamicVehicleToInterior(i, interior);
			}
		}
 	}

	valstr(name, interior);
    AdminCommandLog("SETINTERIOR", playerid, player1, name);
    return 1;
}
CMD:setint(playerid, params[], 1, 0)
{
	return cmd_setinterior(playerid, params);
}

CMD:eject(playerid, params[], 1, 0)
{
    if(sscanf(params, "uF(10)", player1, V[0])) return SendUsage(playerid, "/eject <Játékos ID/Név> <fMagasság = 10.0>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsPlayerNPC(player1) && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_DOBHATSZ_KI"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!IsPlayerInAnyDynamicVehicle(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_NEM_UL_JARMUBEN"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__KIDOBTAD_A_JARMUVEBOL__NEVU"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__KIDOBOTT_TEGED_A_JAR"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

	GetPlayerPos(player1, X, Y, Z);
	SimpleTele(player1, X, Y, Z + V[0]);

    AdminCommandLog("EJECT", playerid, player1);
	return 1;
}

CMD:lock(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_HIBA_A_BONUSZAUTOT_NEM_ZARHATOD"));

	new
		engine,
		alarm,
		bonnet,
		boot,
		objective;
	GetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	SetDynamicVehicleParamsEx(vID, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAZ_YH_RHNEVU_JARMU"), VehName(vID));
	SetPVarInt(playerid, "LockedCar", vID);
	return 1;
}

CMD:unlock(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
    if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_HIBA_A_BONUSZAUTOT_NEM_NYITHATOD"));

	new
		engine,
		alarm,
		bonnet,
		boot,
		objective;
	GetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	SetDynamicVehicleParamsEx(vID, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAZ_YH_RHNEVU_JARMU_1"), VehName(vID));
	DeletePVar(playerid, "LockedCar");
	return 1;
}

CMD:burn(playerid, params[], 1, 0)
{
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/burn <Játékos ID/Név>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_GYUJTHATSZ"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__FELGYUJTOTTAD__NEVU_JATEKOST"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FELGYUJTOTT_TEGED"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	GetPlayerPos(player1, X, Y, Z);
	CreateExplosionForPlayer(player1, X, Y, Z + 3.0, 1, 10);

    AdminCommandLog("BURN", playerid, player1);
    return 1;
}

CMD:respawn(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/respawn <Játékos ID/Név>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__UJRASPAWNOLTAD__NEVU_JATEKOS"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__UJRASPAWNOLT_TEGED"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

    if(GetPVarInt(playerid, "Level") < 4 && g_pDeathMatchID[player1] != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_SPAWNOLHATOD_UJRA"));

	if(IsPlayerNPC(player1))
	{
		OnPlayerSpawn(player1);
	}
	else
	{
        UpdatePlayerSpawnInfo(player1);
		SpawnPlayer(player1);
	}

    AdminCommandLog("RESPAWN", playerid, player1);
	return 1;
}

CMD:spawn(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "Level") < 4 && g_pDeathMatchID[playerid] != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_DMBEN_NEM_SPAWNOLHATOD_UJRA"));

	if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RJELENLEG_NEM_SPAWNOLHATSZW"));

	UpdatePlayerSpawnInfo(playerid);
	SpawnPlayer(playerid);
	return 1;
}

CMD:dspawn(playerid, params[], 0, 0)
{
	if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RJELENLEG_NEM_SPAWNOLHATSZW"));

    PlayerTele(playerid, 2125.2859, 1286.5763, 12.4058, 0, 92.1933, 0);
	return 1;
}

CMD:kezd(playerid, params[], 0, 0)
{
	return cmd_dspawn(playerid,"");
}


CMD:disarm(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/disarm <Játékos ID/Név>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_FEGYVEREZHETSZ"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__LEFEGYVEREZTED__NEVU_JATEKOS"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__LEFEGYVERZETT_TEGED"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

	ResetPlayerWeapons(player1);
	PlayerPlaySound(player1, 1057);

	AdminCommandLog("DISARM", playerid, player1);
	return 1;
}

CMD:pip(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/pip <Játékos ID/Név>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_KERHETED_LE"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    if(g_pOtherFlags[player1] & e_RAKSAMP) //Ha raksamp
	{
		new
 			szIP[16];
    	GetPVarString(player1, "FakeIP", szIP, sizeof(szIP));
	    strcat(ip, szIP, sizeof(ip));
	}
	else GetPlayerIp(player1, ip, sizeof(ip));

	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG___IP_CIME_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, ip);
    AdminCommandLog("PIP", playerid, player1, ip);
	return 1;
}

CMD:orszagok(playerid, params[], 0, 0)
{
	new
	    szOrszagok[MAX_PLAYERS][45],
		OrszagokCount[MAX_PLAYERS],
	    count,
	    bool:bMegvan;
	foreach(Player, i)
	{
 		GetPlayerIp(i, ip, sizeof(ip));
		if(!GetCountryName(ip, country, sizeof(country)))
		{
			country[0] = EOS;
			strcat(country, "N/A");
		}

		printf("%s - %s", pName(i), country);

		for(new x; x != sizeof(szOrszagok); x++)
		{
			if(!strcmp(szOrszagok[x], country))
			{
                OrszagokCount[x]++;
                bMegvan = true;
                break;
			}
		}

		if(!bMegvan)
		{
            strcpy(szOrszagok[count++], country, 45);
            printf("strcpy");
		}
	}

	printf("count: %d", count);
	for(new i; i != count; i++)
	{
		SendClientMessagef(playerid, COLOR_WHITE, "%s - %d", szOrszagok[i], OrszagokCount[i]);
	}
	return 1;
}

CMD:geoip(playerid, params[], 0, 0)
{
	if(sscanf(params, "uS(*)[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/geoip <Játékos ID/Név> <IP = '*'>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BOTOKNAK_NEM_LEHET_LEKERNI_1"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	if(i_str[0] == '*')
	{
	    if(g_pOtherFlags[player1] & e_RAKSAMP) //Ha raksamp
		{
		    new
            	szIP[16];
		    GetPVarString(player1, "FakeIP", szIP, sizeof(szIP));
		    strcat(ip, szIP, sizeof(ip));
		}
		else GetPlayerIp(player1, ip, sizeof(ip));
	}
	else
	{
		ip[0] = EOS;
		strcat(ip, i_str, sizeof(ip));
	}
	GetPlayerVersion(player1, name, sizeof(name));
	if(!GetCountryName(ip, country, sizeof(country)))
	{
		country[0] = EOS;
		strcat(country, "N/A");
	}
	

	if(GetCityLongitude(ip, V[0]))
	{
 		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG___ORSZAG___GMT_00_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, country, floatround(V[0] / 15.0), name);
	}
	else
	{
 		SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG___ORSZAG___GMT_NA__"), GetPlayerColor(player1) >>> 8, pName(player1), player1, country, name);
	}
	return 1;
}

CMD:serial(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/serial <Játékos ID/Név>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_KERHETED_LE_1"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	gpci(player1, i_str, sizeof(i_str));
	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG___SERIAL_NUMBER_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);

    AdminCommandLog("SERIAL", playerid, player1, i_str);
	return 1;
}
CMD:gpci(playerid, params[], 1, 0)
{
	return cmd_serial(playerid, params);
}

CMD:class(playerid, params[], 0, 0)
{
	ForceClassSelection(playerid);
	SetPlayerHealth(playerid, 0.0);
	SetPlayerArmour(playerid, 0.0);
	InfoTD_MSG(playerid, 250, LANG(playerid, "MSG_RHHUDV_A_MENNYBEN"));
	return 1;
}

CMD:kill(playerid, params[], 0, 0)
{
	SetPlayerHealth(playerid, 0.0);
	SetPlayerArmour(playerid, 0.0);
	InfoTD_MSG(playerid, 2000, LANG(playerid, "MSG_RHHUDV_A_MENNYBEN"));
	return 1;
}

CMD:ahelp(playerid, params[], 0, 0)
{
	new
	    pLevel = GetPVarInt(playerid, "Level");
	if(pLevel < 1 && !IsPlayerAdmin(playerid))
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG______ADMINOKNAK_"));
	switch(pLevel)
	{
		case 1: SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ALTALAD_ELERHETO_ADMIN_PARANCSOK"));
		case 2: SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ALTALAD_ELERHETO_ADMIN_PARANCSOK_1"));
		case 3: SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ALTALAD_ELERHETO_ADMIN_PARANCSOK_2"));
		case 4: SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_ALTALAD_ELERHETO_ADMIN_PARANCSOK_3"));

	}
    SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_ADMINCHAT__SZOVEG_CTRL__ALT"));
	return 1;
}

CMD:level1(playerid, params[], 1, 0)
{
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG______MODERATOR_PARANCSOK_"));
	SendClientMessage(playerid, COLOR_GOLD, !"/asay /ping /burn /respawn /disarm /write /serial /aka /pip /kick /admins /get");
	SendClientMessage(playerid, COLOR_GREEN, !"/giveweapon /lgoto /warn /(un)mute /(un)jail /un(freeze) /slap /eject /spec(off, vehicle)");
	SendClientMessage(playerid, COLOR_LIGHTRED, !"/setskin /setwanted /setint /cc /startrace /setcolor");
	return 1;
}

CMD:level2(playerid, params[], 2, 0)
{
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG______ADMINISZTRATOR_PARANCSOK"));
	SendClientMessage(playerid, COLOR_RED, !"/tempban /setdrunk /invis /setskill /(destroy, respawn)car /akill /setworld /explode /seepms");
	SendClientMessage(playerid, COLOR_GOLD, !"/racekick /endrace /vgoto (zárt kocsiba), /poke, bemehetsz zárt ingatlanba");
	return 1;
}

CMD:level3(playerid, params[], 3, 0)
{
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG______FOADMINISZTRATOR_PARANCSOK"));
	SendClientMessage(playerid, COLOR_YELLOW, !"/sethealth /setarmour /infotd /welcome /ann2 /healall /armourall /setname /sp /hide /giveallweapon");
	SendClientMessage(playerid, COLOR_RED, !"/dsp /carhealth /getpvartype /getpvarfloat /getgvarint /getgvarfloat /getgvartype /createdmright /createclanright"); // /startfallout /endfallout
	SendClientMessage(playerid, COLOR_GREEN, !"/weather /time /ban /vrespawn /pflags /pflags2 /ptdflags /pdata /pgames /sflags /bcar /cflag /playmusic");
	return 1;
}

CMD:cwtfisrcon(playerid, params[], 0, 0)
{
    if(!IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

	new
	    szRCON[64];
	GetServerVarAsString(!"rcon_password", szRCON, sizeof(szRCON));
	SendClientMessagef(playerid, COLOR_WHITE, "RCON Password: {" #XCOLOR_PROPGREEN "}%s {" #XCOLOR_ORANGE "}(RCON_PASSWORD = " RCON_PASSWORD ")", szRCON);
	return 1;
}

CMD:date(playerid, params[], 0, 0)
{
	if(sscanf(params, "ddd", year, month, day)) return SendUsage(playerid, "/date <Év> <Hónap> <Nap>");

	mysql_format(1, query, sizeof(query), "SELECT DATE_FORMAT('%d-%d-%d', '", year, month, day);
	strcat(query, "%w %M %Y')");
	mysql_function_query(1, query, true, "THREAD_RealDate", "ddddd", playerid, year, month, day, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_RealDate(playerid, _year, _month, _day, queue);
public THREAD_RealDate(playerid, _year, _month, _day, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RealDate);

	new
	    Week,
		WeekStr[3];

	cache_get_row(0, 0, i_str);
	sscanf(i_str, "s[3]dd", WeekStr, _month, _year);
	if(WeekStr[0] == '0')
	{
	    Week = strval(WeekStr[1]);
	}
	else
	{
        Week = strval(WeekStr[0]);
	}

	name[0] = EOS;
	country[0] = EOS;
	switch(Week)
	{
		case 1: name = "Hétfõ";
		case 2: name = "Kedd";
		case 3: name = "Szerda";
		case 4: name = "Csütörtök";
		case 5: name = "Péntek";
		case 6: name = "Szombat";
		case 7: name = "Vasárnap";
	}

	switch(_month)
	{
		case 1: country = "Január";
		case 2: country = "Február";
		case 3: country = "Március";
		case 4: country = "Áprílis";
		case 5: country = "Május";
		case 6: country = "Június";
		case 7: country = "Július";
		case 8: country = "Augusztus";
		case 9: country = "Szeptember";
		case 10: country = "Október";
		case 11: country = "November";
		case 12: country = "December";
	}
	SendClientMessagef(playerid, COLOR_WHITE, "%d %s %d. %s", _year, country, _day, name);
	return 1;
}

CMD:sql(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/sql <SQL Parancs>");

	if(strfind(params, "DELETE", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_DELETE_KULCSSZO_NEM_ENGEDELYEZETT"));

	if(strfind(params, "TRUNCATE", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_TRUNCATE_KULCSSZO_NEM_ENGEDELYEZET"));

	if(strfind(params, "DROP", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_DROP_KULCSSZO_NEM_ENGEDELYEZETT"));

    mysql_function_query(1, params, false, "THREAD_CustomQuery", "dsd", playerid, params, g_pQueryQueue[playerid]);
    AdminCommandLog("SQL", playerid, -1, params);
	return 1;
}

forward THREAD_CustomQuery(playerid, sql_query[], queue);
public THREAD_CustomQuery(playerid, sql_query[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CustomQuery);

	new
	    errorid = mysql_errno();
    dline = "MySQL Query lefuttatva: ";
	if(!errorid)
	{
		 strcat(dline, "{" #XCOLOR_GREEN "}true");
	}
	else
	{
		format(dline, 64, "%s{"#XCOLOR_RED"}false {FFFFFF}(%d)", errorid);
	}
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "MySQL Lekérdezés", dline, "Oké");
	return 1;
}

CMD:result(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/result <SQL Parancs>");

	if(strfind(params, "DELETE", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_DELETE_KULCSSZO_NEM_ENGEDELYEZETT"));

	if(strfind(params, "TRUNCATE", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_TRUNCATE_KULCSSZO_NEM_ENGEDELYEZET"));

	if(strfind(params, "DROP", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_DROP_KULCSSZO_NEM_ENGEDELYEZETT"));

	if(strfind(params, "UPDATE", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AZ_UPDATE_KULCSSZO_NEM_ENGEDELYEZETT"));

    mysql_function_query(1, params, false, "THREAD_CustomResult", "dd", playerid, g_pQueryQueue[playerid]);
    AdminCommandLog("RESULT", playerid, -1, params);
	return 1;
}

forward THREAD_CustomResult(playerid, queue);
public THREAD_CustomResult(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CustomResult);

	new
	    errorid = mysql_errno();
	if(errorid) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HIBAS_LEKERDEZES_ERRORID"), errorid);

	dline[0] = EOS;
	new
	    rows = cache_get_row_count(),
	    fields = cache_get_field_count();
	for(new i; i != rows; i++)
	{
		for(new x; x != fields; x++)
		{
			cache_get_row(i, x, name);
			strcat(dline, name);
			if(x != fields - 1) strcat(dline, ", ");
		}
		strcat(dline, "\n");
	}

	if(!dline[0])
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "MySQL Lekérdezés", "{" #XCOLOR_RED "}Üres sorokat adott vissza a lekérdezés!", "Oké");
		return 1;
	}

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "MySQL Lekérdezés", dline, "Oké");
	return 1;
}

CMD:console(playerid, params[], 4, 0)
{
	if(g_ConsolePlayer == -1)
	    g_ConsolePlayer = playerid;
	else
	    g_ConsolePlayer = 1;
 	return 1;
}

CMD:abacktrace(playerid, params[], 4, 0)
{
	dline[0] = EOS;
	GetAmxBacktrace(dline);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "AMX-Backtrace", dline, "Oké");

    AdminCommandLog("ABACKTRACE", playerid, -1);
	return 1;
}

CMD:nbacktrace(playerid, params[], 4, 0)
{
	dline[0] = EOS;
	GetNativeBacktrace(dline);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Native-Backtrace", dline, "Oké");

    AdminCommandLog("NBACKTRACE", playerid, -1);
	return 1;
}

CMD:debug(playerid, params[], 1, 0)
{
	new
	    iDebug;
	if(sscanf(params, "d", iDebug)) return SendUsage(playerid, "/debug <0 - 15>");

	switch(iDebug)
	{
	    case 0:
		{
			g_pDebug{playerid} = 0;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_KIKAPCSOLVA"));
		}
		case 1:
		{
			g_pDebug{playerid} = 1;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP"));
		}
	    case 2:
		{
			g_pDebug{playerid} = 2;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_1"));
		}
	    case 3:
	    {
	        g_pDebug{playerid} = 3;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_2"));
		}
	    case 4:
	    {
			g_pDebug{playerid} = 4;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_3"));
		}
	    case 5:
	    {
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

			g_pDebug{playerid} = 5;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_4"));
		}
	    case 6:
	    {
			g_pDebug{playerid} = 6;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_5"));
		}
	    case 7:
	    {
			g_pDebug{playerid} = 7;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_6"));
		}
	    case 8:
	    {
			g_pDebug{playerid} = 8;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_7"));
		}
	    case 9:
	    {
			g_pDebug{playerid} = 9;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_8"));
		}
	    case 10:
	    {
			g_pDebug{playerid} = 10;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_9"));
		}
	    case 11:
	    {
			g_pDebug{playerid} = 11;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_10"));
		}
	    case 12:
	    {
			g_pDebug{playerid} = 12;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_11"));
		}
	    case 13:
	    {
			g_pDebug{playerid} = 13;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_12"));
		}
	    case 14:
	    {
			g_pDebug{playerid} = 14;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_13"));
		}
	    case 15:
	    {
			g_pDebug{playerid} = 15;
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RDEBUG_MOD_BEKAPCSOLVAWN_KIKAP_14"));
		}
	    case 255:
	    {
			g_pDebug{playerid} = 0xFF;
		}
		default: SendUsage(playerid, "/debug <0 - 15>");
	}
	return 1;
}

CMD:count(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_COUNT);

	new
	    count;
	if(sscanf(params, "D(6)", count)) return SendUsage(playerid, "/count <másodpercek (3 - 10 között)>");
    if(GetPlayerMoneyEx(playerid) < 2000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELEG_PENZED_2000_KENE"));
    if(CountDown != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_VISSZASZAMLALAS_MAR"));
	if(!(3 <= count <= 10)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDOT_ADTAL_MEG_3"));

	CountDown = count + 1;
    SPAM_CHECK(Count, 20000) //20 mp
	if(!g_pVIP[playerid])
	{
		datez = count * 800;
		GivePlayerMoneyEx(playerid, -datez, "Count");

		SendClientMessageToAllf(COLOR_YELLOW, "MSG_COUNT___ELINDITOTTA_A_VISSZA", GetPlayerColor(playerid) >>>8, pName(playerid), playerid, datez);
	}
	else
	{
		SendClientMessageToAllf(COLOR_YELLOW, "MSG_COUNT___ELINDITOTTA_A_VISSZA_1", GetPlayerColor(playerid) >>>8, pName(playerid), playerid);
	}
	SetTimer("countdown", 1000, false);
	return 1;
}

CMD:gotocar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if((vID = GetPVarInt(playerid, "pCar")) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_LESPAWNOLVA_JARMUVED"));

	new
		bool:bPutInVeh;
	if(sscanf(params, "D(0)", bool:bPutInVeh)) return SendUsage(playerid, "/gotocar <Bele-e rakjon = 0>");

	if(bPutInVeh)
	{
        if(IsPlayerInDynamicVehicle(playerid, vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_IS_AZ_ALTALAD_LERAKOTT"));
		foreach(new i: Player)
		{
			if(GetPlayerDynamicVehicleID(i) == vID)
			{
				if(GetPlayerVehicleSeat(i) == 0)
				{
					SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG__EZT_A_JARMUVET__HOZTA_LETRE"), pName(playerid), playerid);

					g_PlayerData[i] &= ~(e_FALLED | e_NOCARMSG);
					DeletePVar(i, "GetCarID");

					GetPlayerPos(i, X, Y, Z);
					SetPlayerPos(i, X, Y, Z + 2.0);
					break;
				}
			}
		}
		PutPlayerInDynamicVehicle(playerid, vID, 0);
	}
	else
	{
		new
		    Float:fVPos[3];

		GetDynamicVehiclePos(vID, fVPos[0], fVPos[1], fVPos[2]);
		PlayerTele(playerid, fVPos[0], fVPos[1], fVPos[2], GetDynamicVehicleInterior(vID), -1000.0, GetDynamicVehicleVirtualWorld(vID));
	}
	return 1;
}

CMD:getcar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if((vID = GetPVarInt(playerid, "pCar")) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_LESPAWNOLVA_JARMUVED"));

	new
		bool:bPutInVeh;
	if(sscanf(params, "D(0)", bool:bPutInVeh)) return SendUsage(playerid, "/getcar <Bele-e rakjon = 0>");

	if(bPutInVeh)
	{
        if(IsPlayerInDynamicVehicle(playerid, vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_IS_AZ_ALTALAD_LERAKOTT"));
		foreach(new i: Player)
		{
			if(GetPlayerDynamicVehicleID(i) == vID)
			{
				if(GetPlayerVehicleSeat(i) == 0)
				{
					SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG__EZT_A_JARMUVET__HOZTA_LETRE_1"), pName(playerid), playerid);

					g_PlayerData[i] &= ~(e_FALLED | e_NOCARMSG);
					DeletePVar(i, "GetCarID");

					GetPlayerPos(i, X, Y, Z);
					SetPlayerPos(i, X, Y, Z + 2.0);
					break;
				}
			}
		}
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

		X += (2.3 * floatsin(-Angle, degrees));
		Y += (2.3 * floatcos(-Angle, degrees));

		SetDynamicVehiclePos(vID, X, Y, Z);
		SetDynamicVehicleZAngle(vID, Angle);
		LinkDynamicVehicleToInterior(vID, GetPlayerInterior(playerid));
		SetDynamicVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));
		PutPlayerInDynamicVehicle(playerid, vID, 0);
	}
	else
	{
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

		X += (2.3 * floatsin(-Angle, degrees));
		Y += (2.3 * floatcos(-Angle, degrees));

		SetDynamicVehiclePos(vID, X, Y, Z);
		SetDynamicVehicleZAngle(vID, Angle);
		LinkDynamicVehicleToInterior(vID, GetPlayerInterior(playerid));
		SetDynamicVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

CMD:mycarhealth(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if((vID = GetPVarInt(playerid, "pCar")) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_LESPAWNOLVA_JARMUVED"));

	if(sscanf(params, "f", Health)) return SendUsage(playerid, "/mycarhealth <fHealth>");
    if(!(0.0 <= Health <= 1000.0) && GetPVarInt(playerid, "Level") < 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__100"));

    SetDynamicVehicleHealth(vID, Health);
	return 1;
}

CMD:fixcarobjects(playerid, params[], 0, 0)
{
	vID = GetPlayerDynamicVehicleID(playerid);
	if(!vID) return 1;

	for(new i; i != Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i++)
	{
		if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_ATTACHED_VEHICLE) == vID)
		{
			DestroyDynamicObject(i);
		}
	}
	return 1;
}

CMD:tuning(playerid, params[], 0, 0)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
    new modelid = GetDynamicVehicleModel(GetPlayerDynamicVehicleID(playerid));

    switch(modelid)
    {
        case 534 .. 536, 558 .. 562, 565, 567, 575, 576:
        {
            mysql_format(1, query, sizeof(query), "SELECT part FROM vehicle_components WHERE cars=%i OR cars=-1 GROUP BY part", modelid);
            mysql_function_query(1, query, true, "THREAD_VehicleComponents", "ddd", playerid, 0, g_pQueryQueue[playerid]);
        }
        default:
        {
            mysql_format(1, query, sizeof(query),
            "SELECT " \
            "IF(parts & 1 <> 0,'Exhausts','')," \
            "IF(parts & 2 <> 0,'Hood','')," \
            "IF(parts & 4 <> 0,'Hydraulics','')," \
            "IF(parts & 8 <> 0,'Lights','')," \
            "IF(parts & 16 <> 0,'Roof','')," \
            "IF(parts & 32 <> 0,'Side Skirts','')," \
            "IF(parts & 64 <> 0,'Spoilers','')," \
            "IF(parts & 128 <> 0,'Vents','')," \
            "IF(parts & 256 <> 0,'Wheels','') " \
            "FROM vehicle_model_parts WHERE modelid=%i", modelid);
            mysql_function_query(1, query, true, "THREAD_VehicleComponents", "ddd", playerid, 1, g_pQueryQueue[playerid]);
        }
    }
    //printf(query);
 	return 1;
}

CMD:car(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
	new
		color[2],
		carid,
		PutInVeh,
		siren;

	if(sscanf(params, "S(*)[" #STR_SIZE "]D(-1)D(-1)D(1)D(0)", i_str, color[0], color[1], PutInVeh, siren)) return SendUsage(playerid, "/car <Model ID/Név> {" #XCOLOR_YELLOW "}<Szín 1 = -1> <Szín 2 = -1> <PutInVeh = 1> <addsiren = 0>");
	if(!(-1 <= color[0] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDT_IRTAL_BE_AZ"));
	if(!(-1 <= color[1] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDT_IRTAL_BE_A_MASODIK"));
    if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_RANGE_ZONABAN_NEM_RAKHATSZ"));
    if(IsPlayerInDynamicArea(playerid, gSpawnZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_SPAWN_ZONABAN_NEM_SPAWNOLHAT"));
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));

    if(!IsNumeric(i_str))
	{
		carid = GetVehicleModelIDFromName(i_str);
	}
	else
	{
		carid = strval(i_str);
	}
	if(GetPVarInt(playerid, "RaceParticipant"))
	{
        if(RaceVehicle != -1 && carid != RaceVehicle)
        {
            return SendClientMessage(playerid, COLOR_RED, "HIBA: Ebben a versenybe nem spawnolhatsz jármûvet!");
        }
		if(RaceType == 0 && strfind(g_szRaceName_, "Drag", true) != -1 && carid == 522)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NRG_NEM"));
	  		return 1;
		}
	}
    if(GetPVarType(playerid, "RaceParticipant"))
    {
		switch(RaceType)
		{
			case 0:
			{
				switch(GetVehicleType(carid))
				{
					case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET"));
				}
			}
			case 1:
			{
				if(GetVehicleType(carid) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
			}
			case 2:
			{
				new
				    iType = GetVehicleType(carid);
				if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
				{
                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
					return 1;
				}
			}
			case 3: return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EBBE_A_VERSENYBE_CSAK_GYALOG"));
		}
	}

	if(i_str[0] == '*')
	{
	 	ShowPlayerDialogEx(playerid, 3434, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN3 "}Jármû lehívása", "Repülõk\nHelikopterek\nMotorok\nMinden féle\nMunka Jármûvek\nLowriderek\nTerepjárók\nSzerviz jármûvek\nSzalon jármûvek\nSportautók\nNagy Csomagtartósok\nHajók\nEgyedi Jármûvek\nTrailerek\nTuningolt Jármûvek\nJármû keresése", "Tovább", "Mégse");
		return 1;
	}

	if(ZaszloOwner == playerid)
	{
	    if(carid == 571) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
	    switch(GetVehicleType(carid))
		{
			case VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_BOAT, VEHICLE_TRAIN, VEHICLE_TRAM:
			{
   				return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
			}
		}
	}
	if(!IsValidModel(carid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_MODEL_NEM_LETEZIK"));
	/*
    // Ha nem admin, akkor spam ellenõrzés
    if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid) && !GetPVarInt(playerid, "RaceParticipant"))
	{
		 SPAM_CHECK(CarSpawner, 5000) //5mp
	}
	*/
	if(color[0] == -1) color[0] = RandomColor;
	if(color[1] == -1) color[1] = RandomColor;

	new
	    pWheel = GetPVarInt(playerid, "pCar");
	if(pWheel != INVALID_VEHICLE_ID)
	{
/*
		if(GetVehicleType(GetDynamicVehicleModel(pWheel)) == VEHICLE_TRAIN)
		{
			DestroyDynamicVehicle(pWheel + 3);
			DestroyDynamicVehicle(pWheel + 2);
			DestroyDynamicVehicle(pWheel + 1);
		}
*/
		DestroyDynamicVehicle(pWheel);

	}

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
/*
	if(GetVehicleType(carid) == VEHICLE_TRAIN)
	{
		vID = AddStaticVehicleEx(carid, X, Y, Z, Angle, color[0], color[1], -1);
	}
	else
	{
		vID = CreateDynamicVehicle(carid, X, Y, Z, Angle, color[0], color[1], -1);
	}
*/
    vID = CreateDynamicVehicle(carid, X, Y, Z, Angle, color[0], color[1], -1, siren);
	if(vID == INVALID_VEHICLE_ID)
	{
		SetPVarInt(playerid, "pCar", INVALID_VEHICLE_ID);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_LIMIT_REACHED"));
		return 1;
	}

	pWheel = GetPVarInt(playerid, "FavWheel");
	if(pWheel == -1)
    {
		AddDynamicVehicleComponent(vID, wheels[random(sizeof(wheels))]);
	}
	else if(pWheel > 1)
	{
		AddDynamicVehicleComponent(vID, pWheel);
	}

	switch(GetPVarInt(playerid, "HydType"))
	{
		case 1: AddDynamicVehicleComponent(vID, 1087);
		case 2: RemoveDynamicVehicleComponent(vID, 1087);
	}

	RandomNumberPlate(vID);


	SetPVarInt(playerid, "pCar", vID);
	SetPVarInt(playerid, "GetCarID", vID);

	LinkDynamicVehicleToInterior(vID, GetPlayerInterior(playerid));
	SetDynamicVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));
    if(PutInVeh)
	{
	    if(g_PlayerFlags[playerid] & e_SPEEDO)
	    	g_PlayerData[playerid] |= e_NOCARMSG;

		PutPlayerInDynamicVehicle(playerid, vID, 0);
	}

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_WSPAWNOLTAL_EGY_JARMUVET_YH"), VehName(vID), carid);
	if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, CARSPAWN_PRICE, "CarSpawn");
	AntiDB(playerid, true);
	return 1;
}
CMD:v(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car(playerid, params);
CMD:vehicle(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car(playerid, params);
CMD:carspawn(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car(playerid, params);
CMD:spawncar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car(playerid, params);

CMD:car2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RACE | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
	new
		color[2],
		carid,
		PutInVeh,
		siren;
    
	if(sscanf(params, "s[" #STR_SIZE "]D(-1)D(-1)D(0)D(0)", i_str, color[0], color[1], PutInVeh, siren)) return SendUsage(playerid, "/car2 <Model ID/Név> {" #XCOLOR_YELLOW "}<Szín 1 = -1> <Szín 2 = -1> <PutInVeh = 1> <addsiren = 0>");
	if(!(-1 <= color[0] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDT_IRTAL_BE_AZ"));
	if(!(-1 <= color[1] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDT_IRTAL_BE_A_MASODIK"));
    if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_RANGE_ZONABAN_NEM_RAKHATSZ"));
	if(IsPlayerInDynamicArea(playerid, gSpawnZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_SPAWN_ZONABAN_NEM_SPAWNOLHAT"));
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));

	if(!IsNumeric(i_str))
	{
		carid = GetVehicleModelIDFromName(i_str);
	}
	else
	{
		carid = strval(i_str);
	}

	if(!IsValidModel(carid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_MODEL_NEM_LETEZIK"));
	/*if(!IsFOOwner(playerid))
	{
		if(carid == 432) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TANKOT_NEM_SPAWNOLHATSZ"));
	}*/

    if(ZaszloOwner == playerid)
	{
	    if(!IsFOOwner(playerid))
		{
			if(carid == 406) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
		}
	    switch(GetVehicleType(carid))
		{
			case VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_BOAT, VEHICLE_TRAIN, VEHICLE_TRAM:
			{
   				return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
			}
		}
	}
	if(GetPVarInt(playerid, "RaceParticipant"))
	{
        if(RaceVehicle != -1 && carid != RaceVehicle)
        {
            return SendClientMessage(playerid, COLOR_RED, "HIBA: Ebben a versenybe nem spawnolhatsz jármûvet!");
        }
		if(RaceType == 0 && strfind(g_szRaceName_, "Drag", true) != -1 && carid == 522)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NRG_NEM"));
	  		return 1;
		}
	}
    if(GetPVarType(playerid, "RaceParticipant"))
    {
		switch(RaceType)
		{
			case 0:
			{
				switch(GetVehicleType(carid))
				{
					case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET"));
				}
			}
			case 1:
			{
				if(GetVehicleType(carid) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
			}
			case 2:
			{
				new
				    iType = GetVehicleType(carid);
				if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
				{
                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
					return 1;
				}
			}
			case 3: return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EBBE_A_VERSENYBE_CSAK_GYALOG"));
		}
	}
	/*
    if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid) && !GetPVarInt(playerid, "RaceParticipant"))
	{
		 SPAM_CHECK(CarSpawner, 5000) //5mp
	}*/
	if(color[0] == -1) color[0] = RandomColor;
	if(color[1] == -1) color[1] = RandomColor;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	new
	    pWheel = GetPVarInt(playerid, "pCar2");
	if(pWheel != INVALID_VEHICLE_ID)
	{
/*
		if(GetVehicleType(GetDynamicVehicleModel(pWheel)) == VEHICLE_TRAIN)
		{
			DestroyDynamicVehicle(pWheel + 3);
			DestroyDynamicVehicle(pWheel + 2);
			DestroyDynamicVehicle(pWheel + 1);
		}
*/
		DestroyDynamicVehicle(pWheel);
	}
/*
	if(GetVehicleType(carid) == VEHICLE_TRAIN)
	{
		vID = AddStaticVehicleEx(carid, X, Y, Z, Angle, color[0], color[1], -1);
	}
	else
	{
		vID = CreateDynamicVehicle(carid, X, Y, Z, Angle, color[0], color[1], -1);
	}
*/
	vID = CreateDynamicVehicle(carid, X, Y, Z, Angle, color[0], color[1], -1, siren);
	if(vID == INVALID_VEHICLE_ID)
	{
		SetPVarInt(playerid, "pCar2", INVALID_VEHICLE_ID);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_LIMIT_REACHED"));
		return 1;
	}
	pWheel = GetPVarInt(playerid, "FavWheel");
	if(pWheel == -1)
    {
		AddDynamicVehicleComponent(vID, wheels[random(sizeof(wheels))]);
	}
	else if(pWheel > 1)
	{
		AddDynamicVehicleComponent(vID, pWheel);
	}

	switch(GetPVarInt(playerid, "HydType"))
	{
		case 1: AddDynamicVehicleComponent(vID, 1087);
		case 2: RemoveDynamicVehicleComponent(vID, 1087);
	}

	RandomNumberPlate(vID);

	SetPVarInt(playerid, "pCar2", vID);
	LinkDynamicVehicleToInterior(vID, GetPlayerInterior(playerid));
	SetDynamicVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));
    if(PutInVeh)
	{
	    if(g_PlayerFlags[playerid] & e_SPEEDO)
	    	g_PlayerData[playerid] |= e_NOCARMSG;

		PutPlayerInDynamicVehicle(playerid, vID, 0);
	}
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_MASODLAGOS_JARMU_LERAKVA_ID"), vID);
	if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, CARSPAWN_PRICE, "CarSpawn");
	AntiDB(playerid, true);
	return 1;
}
CMD:v2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car2(playerid, params);
CMD:vehicle2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car2(playerid, params);
CMD:carspawn2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car2(playerid, params);
CMD:spawncar2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car2(playerid, params);

CMD:dcar2(playerid, params[], 0, 0)
{
	new
	    pCar = GetPVarInt(playerid, "pCar2");
	if(pCar != INVALID_VEHICLE_ID)
	{
		DestroyDynamicVehicle(pCar);
		SetPVarInt(playerid, "pCar2", INVALID_VEHICLE_ID);
        SendClientMessagef(playerid, COLOR_SAMP, LANG(playerid, "MSG_MASODLAGOS_JARMUVED_TOROLVE"));
	}
	else
	{
        SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NINCS_LERAKVA_MASODLAGOS_JARMUVED"));
	}
	return 1;
}
/*
forward SetFavRadioStation(playerid);
public SetFavRadioStation(playerid)
{
	if(Audio_IsClientConnected(playerid))
	{
		Audio_SetRadioStation(playerid, GetPVarInt(playerid, "FavRadioStation"));
	}
	return 1;
}
*/
CMD:findcar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
	if(isnull(params))
	{
		ShowPlayerDialogEx(playerid, DIALOG_CARSPAWNER, DIALOG_STYLE_INPUT, "{" #XCOLOR_BLUE "}Jármû keresése", "Lentre írj be egy névrészletet\n\n{" #XCOLOR_LIGHTRED "}Például: {" #XCOLOR_PROPGREEN "}inf, tur, a", "Keresés", "Mégse");
        SetPVarInt(playerid, "BackForSpawner", 1);
		return 1;
	}

	new
		count;
	dline[0] = EOS;
	for(new i; i != sizeof(g_szVehicleNames); i++)
	{
		if(strfind(g_szVehicleNames[i], params, true) != -1)
		{
            count ++;
			if(!i)
	        {
				strcat(dline, g_szVehicleNames[i]);
			}
			else
			{
                format(dline, sizeof(dline), "%s\n%s", dline, g_szVehicleNames[i]);
			}
		}
	}

	if(count)
	{
		format(i_str, sizeof(i_str), "{" #XCOLOR_LIGHTBLUE "}Találtatok száma: {" #XCOLOR_LIGHTRED "}%d", count);
		ShowPlayerDialogEx(playerid, DIALOG_CARSPAWNER + 1, DIALOG_STYLE_LIST, i_str, dline, "Spawnol", "Mégse");
	}
	else
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_LIGHTBLUE "}Találtatok száma: {" #XCOLOR_LIGHTRED "}0", "{" #XCOLOR_WHITE "}A megadott névrészletre nincs találat!", "Ok");
	}
	return 1;
}

CMD:allowvobjects(playerid, params[], 0, 0)
{
	g_PlayerData[playerid] ^= e_NOVOBJECTS;
	if(g_PlayerData[playerid] & e_NOVOBJECTS)
	{
		for(new i; i != MAX_VEHICLES; i++)
		{
			for(new x; x != MAX_VEH_OBJECT; x++)
			{
				if(gVehicleObject[i][x] != INVALID_OBJECT_ID)
				{
					Streamer_RemoveArrayData(STREAMER_TYPE_OBJECT, gVehicleObject[i][x], E_STREAMER_PLAYER_ID, playerid);
				}
			}
		}
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_MASOK_ALTAL_KOCSIRA_CSATOLT"));
	}
	else
	{
		for(new i; i != MAX_VEHICLES; i++)
		{
			for(new x; x != MAX_VEH_OBJECT; x++)
			{
				if(gVehicleObject[i][x] != INVALID_OBJECT_ID)
				{
					Streamer_AppendArrayData(STREAMER_TYPE_OBJECT, gVehicleObject[i][x], E_STREAMER_PLAYER_ID, playerid);
				}
			}
		}
        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_MASOK_ALTAL_KOCSIRA_CSATOLT_1"));
	}
	return 1;
}

CMD:neon(playerid, params[], 0, D:<BCAR>)
{
	ShowPlayerDialogEx(playerid, DIALOG_NEON, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Válassz neont", "{" #XCOLOR_RED "}Piros\n{" #XCOLOR_BLUE "}Kék\n{" #XCOLOR_GREEN "}Zöld\n{" #XCOLOR_YELLOW "}Sárga\n{" #FFC0CB "}Rózsaszín\n{" #XCOLOR_WHITE "}Fehér\n{" #XCOLOR_DEFAULT "}Törlés", "Felrak", "Bezárás");
	return 1;
}

CMD:neon2(playerid, params[], 0, D:<BCAR>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
    if(sscanf(params, "D(0)", datez)) return SendUsage(playerid, "/neon <ID>");
    if(!(0 <= datez <= 9)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEK_0__9"));

	vID = GetPlayerDynamicVehicleID(playerid);
	if(Bit_Get(gIsHouseCar, vID))
	{
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_HAZAUTORA_NEM_RAKHATSZ"));
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CSAK_A_KESZ_OBJECTOKAT_TUDOD"));
		return 1;
	}

    AddObjectToVehicle(playerid, vID, MAX_VEH_OBJECT - 2, 18647 + datez, 1.02, -0.13, -0.41,   0.00, 0.00, 0.00);
    AddObjectToVehicle(playerid, vID, MAX_VEH_OBJECT - 1, 18647 + datez, -1.02, 0.07, -0.41,   0.00, 0.00, 0.00);

	ShowWelcome(playerid, LANG(playerid, "MSG_GHNEON_FELRAKVAW"));
	return 1;
}

stock AddObjectToVehicle(playerid, vehicleid, slot, modelid, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ, ID = 0, hid = 0)
{
	// Jármû pozíciójának lekérése
	static Float:fVehX, Float:fVehY, Float:fVehZ;
	GetVehiclePos(vehicleid, fVehX, fVehY, fVehZ);

	// Ha már van object ebben a slotban, akkor töröljük
    if(gVehicleObject[vehicleid][slot] != INVALID_OBJECT_ID)
		DestroyDynamicObject(gVehicleObject[vehicleid][slot]);

	new
    	objectid = CreateDynamicObjectEx(modelid, fVehX, fVehY, fVehZ + 10.0, 0.0, 0.0, 0.0, .worlds = { 0, 50000 }),
		OldCarID = GetPVarInt(playerid, "AttachVehicleID"); // Kocsi ID, amire felrakta az objectet

	// Felrakjuk az objectet a kocsira
	AttachDynamicObjectToVehicle(objectid, vehicleid, fX, fY, fZ, fRotX, fRotY, fRotZ);

	// Frissítés, hogy megjelenjen az object
	Streamer_Update(playerid);

	// Ha házautó
	if(hid)
	{
        g_HouseVehicleObjects[hid][slot] = ID;
	}
	else
	{
		//printf("else geci");
	    // Ha a kocsi ID, amire felrakta nem eggyezik a jelengi kocsival és nem nulla, akkor a régirõl töröljük
		if(OldCarID != vehicleid)
		{
			// Jelenlegi kocsi AMIN az objectjei vannak
			SetPVarInt(playerid, "AttachVehicleID", vehicleid);

		    if(OldCarID != 0)
		    {
				printf("remove object faszopó %d - %d", OldCarID, vehicleid);
				for(new i; i != MAX_VEH_OBJECT; i++)
				{
					if(gVehicleObject[OldCarID][i] == INVALID_OBJECT_ID) continue;

					DestroyDynamicObject(gVehicleObject[OldCarID][i]);
		            gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
		            gPlayerVehicleObjectID[playerid][slot] = 0;
		            gVehicleObject[OldCarID][i] = INVALID_OBJECT_ID;
				}
			}
		}

		gPlayerVehicleObject[playerid][slot] = objectid;
		gPlayerVehicleObjectID[playerid][slot] = ID;
	}
	gVehicleObject[vehicleid][slot] = objectid;
	return objectid;
}

stock LoadVehicleObjectMaterial(objectid)
{
	static modelid, txdname[64], texturename[64], materialcolor, text[512], materialsize, fontface[64], fontsize, bold, fontcolor, backcolor, textalignment;

	// Material beállítás
	for(new materialindex = 0; materialindex != 16; materialindex++)
	{
		cache_get_row(0, 12 +  materialindex, dline);
		//printf("%d - %s", materialindex, dline);

		// Ha üres, akkor továbbmegyünk
		if(dline[0] == '*') continue;
		//printf(dline);
		//if(dline[0] == 1)
		if(strval(dline[0]) == 1)
		{
			sscanf(dline, "p<,>{d}ds[64]ddddds[512]", materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment, text);
			SetDynamicObjectMaterialText(objectid, materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);
			//printf("text %s",text);
		}
		else
		{
			sscanf(dline, "p<,>{d}ds[64]s[64]d", modelid, txdname, texturename, materialcolor);
			SetDynamicObjectMaterial(objectid, materialindex, modelid, txdname, texturename, materialcolor);
			//printf("%d - %d, %s, %s, %x", materialindex, modelid, txdname, texturename, materialcolor);
		}
	}
}

stock RemoveObjectFromVehicle(playerid, vehicleid, slot, hid = 0)
{
	if(slot != -1) // Ha nem akarja az összeset törölni
	{
		if(!hid) // Ha nem házautó
		{
			if(gPlayerVehicleObject[playerid][slot] == INVALID_OBJECT_ID) return 0;

			gPlayerVehicleObject[playerid][slot] = INVALID_OBJECT_ID;
		    gPlayerVehicleObjectID[playerid][slot] = 0;

			// Ha nincs egy object sem már a jármûvén, akkor töröljük a játékos által felrakott object jármû ID-jét.
			new
			    bool:bNemUres;
			for(new i; i != MAX_VEH_OBJECT; i++)
			{
				if(gVehicleObject[vehicleid][i] != INVALID_OBJECT_ID)
				{
                    bNemUres = true;
                    break;
				}
			}

			if(!bNemUres) DeletePVar(playerid, "AttachVehicleID");
		}
		else
		{
			if(!g_HouseVehicleObjects[houseid][slot]) return 0;

			g_HouseVehicleObjects[houseid][slot] = 0;
		}
		DestroyDynamicObject(gVehicleObject[vehicleid][slot]);
		gVehicleObject[vehicleid][slot] = INVALID_OBJECT_ID;

		ShowWelcomef(playerid, LANG(playerid, "MSG_GHOBJECT_RHHTOROLVEWN"), slot);
	}
	else // Ha mindet törli
	{
		if(!hid)
		{
			for(new i; i != MAX_VEH_OBJECT; i++)
			{
				if(gVehicleObject[vehicleid][i] == INVALID_OBJECT_ID) continue;

				DestroyDynamicObject(gVehicleObject[vehicleid][i]);
	            gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
	            gVehicleObject[vehicleid][i] = INVALID_OBJECT_ID;
			}
            DeletePVar(playerid, "AttachVehicleID");
		}
		else
		{
			for(new i; i != MAX_VEH_OBJECT; i++)
			{
				if(!g_HouseVehicleObjects[houseid][i]) continue;

				DestroyDynamicObject(gVehicleObject[vehicleid][i]);
                g_HouseVehicleObjects[houseid][i] = 0;
				gVehicleObject[vehicleid][i] = INVALID_OBJECT_ID;
			}
		}
		ShowWelcome(playerid, LANG(playerid, "MSG_RHOSSZES_GHOBJECT_TOROLVEW"));
	}
	return 1;
}

CMD:aotv(playerid, params[], 0, D:<FLAG | BCAR>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));

	new
	    slot;
	if(sscanf(params, "dD(0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)", datez, slot, X, Y, Z, V[0], V[1], V[2]))
		return SendUsage(playerid, "/aotv <Model ID> <Slot> <fOffsetX> <fOffsetY> <fOffsetZ> <fRotX> <fRotY> <fRotZ>");

    if(!(0 <= slot <= MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__"), MAX_VEH_OBJECT - 1);
	if(!IsValidObjectModel(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_MODEL_NEM_MEGFELELO_1"));
	if(datez == 1225) return SendClientMessage(playerid,-1,"HIBA: Robbanó hordót nem rakhatsz a jármûvedre!");
    if(gPlayerVehicleObject[playerid][slot] != INVALID_OBJECT_ID) DestroyDynamicObject(gPlayerVehicleObject[playerid][slot]);
	vID = GetPlayerDynamicVehicleID(playerid);

	if(Bit_Get(gIsHouseCar, vID))
	{
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_HAZAUTORA_NEM_RAKHATSZ"));
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CSAK_A_KESZ_OBJECTOKAT_TUDOD"));
		return 1;
	}

	foreach(Player, i)
	{
		if(GetPVarInt(i, "AttachVehicleID") == vID && i != playerid)
		{
            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_EZEN_A_JARMUVON_MAS_JATEKOS"));
			return 1;
		}
	}

	// Object felrakása a kocsira
    AddObjectToVehicle(playerid, vID, slot, datez, X, Y, Z, V[0], V[1], V[2]);

	ShowWelcome(playerid, LANG(playerid, "MSG_GHOBJECT_FELRAKVAWNRTORLE"));
	return 1;
}

CMD:deleteobject(playerid, params[], 0, 0)
{
	new
	    slot;
	if(sscanf(params, "d", slot)) return SendUsage(playerid, "/deleteobject <Slot> (-1 = Mindet törli)");
    if(!(-1 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_1__"), MAX_VEH_OBJECT - 1);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));

	vID = GetPlayerDynamicVehicleID(playerid);
	if(Bit_Get(gIsHouseCar, vID))
	{
		houseid = GetPVarInt(playerid, "PlayerProp");
		if(GetGVarInt("HouseCar", houseid) != vID)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_NEM_TE_HAZAUTOD_NEM"));
			return 1;
		}
	}
	else
	{
		vID = GetPVarInt(playerid, "AttachVehicleID");
		houseid = 0;
	}

    if(!RemoveObjectFromVehicle(playerid, vID, slot, houseid))
        return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_SLOT_URES"));

	if(slot != -1)
	    ShowWelcomef(playerid, LANG(playerid, "MSG_GHOBJECT_RHHTOROLVEWN"), slot);
	else
		ShowWelcome(playerid, LANG(playerid, "MSG_RHOSSZES_GHOBJECT_TOROLVEW"));
	return 1;
}
CMD:deleteobjects(playerid, params[], 0, 0)
{
	return cmd_deleteobject(playerid, "-1");
}
CMD:removeobject(playerid, params[], 0, 0)
{
	return cmd_deleteobject(playerid, params);
}
CMD:removeobjects(playerid, params[], 0, 0)
{
	return cmd_deleteobject(playerid, "-1");
}

/*
CMD:aotp(playerid, params[], 0, 0)
{
    if(sscanf(params, "dF(0.0)F(0.0)F(0.0)F(0.0)F(0.0)F(0.0)", datez, X, Y, Z, V[0], V[1], V[2])) return SendUsage(playerid, "/aotp <Model ID> <fOffsetX> <fOffsetY> <fOffsetZ> <fRotX> <fRotY> <fRotZ>");
    if(!IsValidObjectModel(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_MODEL_NEM_MEGFELELO_1"));
    if(IsPlayerInDynamicVehicle(playerid, g_BonusCarID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NALAD_VAN_A_BONUSZAUTO_1"));

    if(GetPVarType(playerid, "VehicleObject_1")) DestroyObject(GetPVarInt(playerid, "VehicleObject_1"));
    if(GetPVarType(playerid, "VehicleObject_2")) DestroyObject(GetPVarInt(playerid, "VehicleObject_2"));

	new
		NeonID;
	NeonID = CreateObject(datez, X, Y, Z, V[0], V[1], V[2]);
	vID = GetPlayerDynamicVehicleID(playerid);

	AttachObjectToPlayer(NeonID, playerid, X, Y, Z, V[0], V[1], V[2]);
    SetPVarInt(playerid, "VehicleObject_1", NeonID);
    DeletePVar(playerid, "VehicleObject_2");

	if(!vID && GetPVarType(playerid, "VehicleObject"))
	{
		vID = GetPVarInt(playerid, "VehicleObject");
	    gVehicleObject[vID][0] = INVALID_OBJECT_ID;
	    gVehicleObject[vID][1] = INVALID_OBJECT_ID;
		DeletePVar(playerid, "VehicleObject");
	}
	else if(vID)
	{
	    gVehicleObject[vID][0] = NeonID;
	    gVehicleObject[vID][1] = INVALID_OBJECT_ID;
		SetPVarInt(playerid, "VehicleObject", vID);
	}
	ShowWelcome(playerid, LANG(playerid, "MSG_GHOBJECT_FELRAKVAWNRTORLE"));
	return 1;
}
*/
CMD:svo(playerid, params[], 0, 0)
{
	new
	    slot;
	if(sscanf(params, "ds[" #STR_SIZE "]", slot, i_str)) return SendUsage(playerid, "/savevehicleobject(/svo) <Slot> <FájlNév>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTON_NEM_MENTHETSZ"));
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));
	if(!(0 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__"), MAX_VEH_OBJECT - 1);


	if(GetPVarInt(playerid, "AttachVehicleID") != vID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZEN_A_JARMUVON_NINCS"));


    if(gPlayerVehicleObject[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_URES"));

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_LETREHOZVA_ES_AZ"), i_str);
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__HA_AZ_OBJECTET_BE_AKAROD_TOLTENI_1"), i_str);

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_SaveAttachedObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}
CMD:savevehicleobject(playerid, params[], 0, 0)
{
	return cmd_svo(playerid, params);
}

forward THREAD_SaveAttachedObject(playerid, slot, objectname[], queue);
public THREAD_SaveAttachedObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveAttachedObject);

    vID = GetPlayerDynamicVehicleID(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	if(cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_MAR_LETEZIK"), objectname);
		return 1;
	}

 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_X, X);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_Y, Y);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_Z, Z);

 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_X, V[0]);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_Y, V[1]);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_Z, V[2]);

	getdate(year, month, day);
	gettime(hour, minute, second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `holdingobjects_v`(id, name, reg_id, objectname, object_id, offset_x, offset_y, offset_z, rotation_x, rotation_y, rotation_z, time, material_0, material_1, material_2, material_3, material_4, material_5, material_6, material_7, material_8, material_9, material_10, material_11, material_12, material_13, material_14, material_15) \
		VALUES(0, '%e', %d, '%e', %d, %f, %f, %f, %f, %f, %f, '%02d.%02d.%02d %02d:%02d:%02d', ",
		pName(playerid), PlayerInfo[playerid][pRegID], objectname, Streamer_GetIntData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_MODEL_ID), X, Y, Z, V[0], V[1], V[2], year, month, day, hour, minute, second);

	new
	    modelid,
	    txdname[128],
	    texturename[128],
	    materialcolor,
	    materialsize,
        fontface[64],
        fontsize,
        bold,
        fontcolor,
		backcolor,
		textalignment,
		text[512];

	for(new materialindex; materialindex != 16; materialindex++)
	{
		if(GetDynamicObjectMaterial(gPlayerVehicleObject[playerid][slot], materialindex, modelid, txdname, texturename, materialcolor))
		{
			format(tmp, 256, "'0,%d,%s,%s,%d'", modelid, txdname, texturename, materialcolor);
		}
		else if(GetDynamicObjectMaterialText(gPlayerVehicleObject[playerid][slot], materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment))
		{
			format(tmp, 512, "'1,%d,%s,%d,%d,%d,%d,%d,%s'", materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment, text);
		}
		else
		{
			format(tmp, 32, "'*'");
		}

		if(materialindex != 15)
		{
			strcat(tmp, ", ");
		}
		else
		{
			strcat(tmp, ")");
		}
		strcat(query, tmp);
	}
	//printf("save object: %s", query);
	mysql_function_query(1, query, false, "THREAD_OnAttachedObjectSaved", "ddd", playerid, slot, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_OnAttachedObjectSaved(playerid, slot, queue);
public THREAD_OnAttachedObjectSaved(playerid, slot, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_OnAttachedObjectSaved);

	gPlayerVehicleObjectID[playerid][slot] = cache_insert_id();

	ShowWelcomef(playerid, LANG(playerid, "MSG_ID__SLOT_"), gPlayerVehicleObjectID[playerid][slot], slot);
	return 1;
}

CMD:fsvo(playerid, params[], 0, 0)
{
	new
	    slot;
	if(sscanf(params, "ds[" #STR_SIZE "]", slot, i_str)) return SendUsage(playerid, "/fsvo <Slot> <FájlNév>");
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));
	if(!(0 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__"), MAX_VEH_OBJECT - 1);
    if(gPlayerVehicleObject[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_URES"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_WriteSaveAttachedObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_WriteSaveAttachedObject(playerid, slot, objectname[], queue);
public THREAD_WriteSaveAttachedObject(playerid, slot, objectname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_WriteSaveAttachedObject);

	new
	    iRegID;
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK_IGY"), objectname);
		return 1;
	}

	cache_get_row_int(0, 2, iRegID);
	cache_get_row(0, 11, country);


	if(iRegID != PlayerInfo[playerid][pRegID] && !IsOwner(playerid))
	{
        cache_get_row(0, 1, name);
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__A__NEVU_OBJECTET__KESZITETTE_1"), objectname, name);
		return 1;
	}

	/*
    sscanf(country, "P<. >dddddd", year, month, day, hour, minute, second);
    SendClientMessagef(playerid,-1,"%02d.%02d.%02d/%02d.%02d.%02d",year, month, day, hour, minute, second);

	new
	    iDate = mktime(hour, minute, second, day, month, year);
	if(iDate + 10 * 3600 < gettime() && !IsOwner(playerid))
	{
	    SendClientMessage(playerid,-1,"HIBA: Az object elkészítésétõl már eltelt több mint 10 nap, így már nem tudod szerkeszteni!");
	}*/



 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_X, X);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_Y, Y);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_OFFSET_Z, Z);

 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_X, V[0]);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_Y, V[1]);
 	Streamer_GetFloatData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_ATTACH_R_Z, V[2]);

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_FELULIRVA"), objectname);

	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_v` SET `object_id` = %d, `offset_x` = %f, `offset_y` = %f, `offset_z` = %f, `rotation_x` = %f, `rotation_y` = %f, `rotation_z` = %f, ", Streamer_GetIntData(STREAMER_TYPE_OBJECT, gPlayerVehicleObject[playerid][slot], E_STREAMER_MODEL_ID), X, Y, Z, V[0], V[1], V[2]);

	new
	    modelid,
	    txdname[128],
	    texturename[128],
	    materialcolor,
	    materialsize,
        fontface[64],
        fontsize,
        bold,
        fontcolor,
		backcolor,
		textalignment,
		text[512];

	for(new materialindex; materialindex != 16; materialindex++)
	{
		if(GetDynamicObjectMaterial(gPlayerVehicleObject[playerid][slot], materialindex, modelid, txdname, texturename, materialcolor))
		{
			format(tmp, 256, "`material_%d` = '0,%d,%s,%s,%d'", materialindex, modelid, txdname, texturename, materialcolor);
		}
		else if(GetDynamicObjectMaterialText(gPlayerVehicleObject[playerid][slot], materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment))
		{
			format(tmp, 512, "`material_%d` = '1,%d,%s,%d,%d,%d,%d,%d,%s'", materialindex, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment, text);
		}
		else
		{
			format(tmp, 256, "`material_%d` = '*'", materialindex);
		}

		if(materialindex != 15)
		{
			strcat(tmp, ", ");
		}
		else
		{
			mysql_format(1, dline, 256, " WHERE `objectname` = '%e'", objectname);
			strcat(tmp, dline);
		}
		strcat(query, tmp);
	}
	printf("query: %s", query);

	mysql_function_query(1, query, false, "", "d", playerid);
	return 1;
}

CMD:lvo(playerid, params[], 0, D:<FLAG | BCAR>)
{
	new
	    slot;
	if(sscanf(params, "ds[" #STR_SIZE "]", slot, i_str)) return SendUsage(playerid, "/loadvehicleobject(/lvo) <Slot> <FájlNév>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(GetPlayerDynamicVehicleID(playerid) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTORA_NEM_RAKHATSZ"));
	if(!(0 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_0__"), MAX_VEH_OBJECT - 1);

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", i_str);
	mysql_function_query(1, query, true, "THREAD_LoadAttachedObject", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}
CMD:loadvehicleobject(playerid, params[], 0, 0)
{
    return cmd_lvo(playerid, params);
}

CMD:honame(playerid, params[], 0, 0)
{
	new
		szObjectName[128],
		szNewName[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szObjectName, szNewName)) return SendUsage(playerid, "/honame <FájlNév> <Új Név>");
	if(strlen(szNewName) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects` WHERE `objectname` = '%e'", szObjectName);
	mysql_function_query(1, query, true, "THREAD_UpdateObjectName", "ddssd", playerid, 0, szObjectName, szNewName, g_pQueryQueue[playerid]);
	return 1;
}

CMD:voname(playerid, params[], 0, 0)
{
	new
		szObjectName[128],
		szNewName[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szObjectName, szNewName)) return SendUsage(playerid, "/voname <FájlNév> <Új Név>");
	if(strlen(szNewName) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", szObjectName);
	mysql_function_query(1, query, true, "THREAD_UpdateObjectName", "ddssd", playerid, 1, szObjectName, szNewName, g_pQueryQueue[playerid]);
	return 1;
}

CMD:vosetname(playerid, params[], 0, 0)
{
	new
		szObjectName[128],
		szNewName[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szObjectName, szNewName)) return SendUsage(playerid, "/vosetname <FájlNév> <Új Név>");
	if(strlen(szNewName) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_vset` WHERE `objectname` = '%e'", szObjectName);
	mysql_function_query(1, query, true, "THREAD_UpdateObjectName", "ddssd", playerid, 2, szObjectName, szNewName, g_pQueryQueue[playerid]);
	return 1;
}

CMD:hosetname(playerid, params[], 0, 0)
{
	new
		szObjectName[128],
		szNewName[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szObjectName, szNewName)) return SendUsage(playerid, "/hosetname <FájlNév> <Új Név>");
	if(strlen(szNewName) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_set` WHERE `objectname` = '%e'", szObjectName);
	mysql_function_query(1, query, true, "THREAD_UpdateObjectName", "ddssd", playerid, 3, szObjectName, szNewName, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_UpdateObjectName(playerid, type, oldname[], newname[], queue);
public THREAD_UpdateObjectName(playerid, type, oldname[], newname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_UpdateObjectName);

	new
	    iRegID;
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK_IGY_1"), oldname);
		return 1;
	}

	cache_get_row_int(0, 2, iRegID);
	if(iRegID != PlayerInfo[playerid][pRegID] && !IsOwner(playerid))
	{
        cache_get_row(0, 1, name);
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__A__NEVU_OBJECTET__KESZITETTE_2"), oldname, name);
		return 1;
	}

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_ATNEVEZVE_UJ_NEVE"), oldname, newname);
	switch(type)
	{
		case 0: mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects` SET `objectname` = '%e' WHERE `objectname` = '%e'", newname, oldname);
		case 1: mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_v` SET `objectname` = '%e' WHERE `objectname` = '%e'", newname, oldname);
		case 2: mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_vset` SET `objectname` = '%e' WHERE `objectname` = '%e'", newname, oldname);
		case 3: mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_set` SET `objectname` = '%e' WHERE `objectname` = '%e'", newname, oldname);
	}
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:svoset(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid,SZINT_SAVE_VOSET);
	if(isnull(params)) return SendUsage(playerid, "/svoset <FájlNév>");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if(!GetPVarType(playerid, "AttachVehicleID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_EGY_OBJECT_SEM_A"));

	for(new i; i != MAX_VEH_OBJECT; i++)
	{
        if(gPlayerVehicleObject[playerid][i] != INVALID_OBJECT_ID && !gPlayerVehicleObjectID[playerid][i])
        {
            SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOTBAN_OLYAN_OBJECT_VAN"), i);
            SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_MENTSD_LE_AZ_OTTLEVO_OBJECTET"));
			return 1;
		}
	}

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_vset` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_SaveAttachedObjectSet", "dsd", playerid, params, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SaveAttachedObjectSet(playerid, setname[], queue);
public THREAD_SaveAttachedObjectSet(playerid, setname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SaveAttachedObjectSet);

	if(cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_MAR_LETEZIK"), setname);
		return 1;
	}

	for(new i; i != MAX_VEH_OBJECT; i++)
	{
		if(!i)
		{
			format(dline, 1024, "%d", gPlayerVehicleObjectID[playerid][i]);
		}
		else
		{
            format(dline, 1024, "%s,%d", dline, gPlayerVehicleObjectID[playerid][i]);
		}
	}
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_SET_LETREHOZVA_ES_AZ"), setname);
    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__HA_A_SETET_BE_AKAROD_TOLTENI"), setname);

//	print(dline);

	getdate(year, month, day);
	gettime(hour, minute, second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `holdingobjects_vset`(id, name, reg_id, objectname, time, lastedit, objects) VALUES(0, '%e', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d', '%02d.%02d.%02d/%02d.%02d.%02d', '%s')",
		pName(playerid), PlayerInfo[playerid][pRegID], setname, year, month, day, hour, minute, second, year, month, day, hour, minute, second, dline);

//	print(query);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:fsvoset(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/fsvoset <FájlNév>");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if(!GetPVarType(playerid, "AttachVehicleID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_EGY_OBJECT_SEM_A"));

	for(new i; i != MAX_VEH_OBJECT; i++)
	{
        if(gPlayerVehicleObject[playerid][i] != INVALID_OBJECT_ID && !gPlayerVehicleObjectID[playerid][i])
        {
            SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOTBAN_OLYAN_OBJECT_VAN"), i);
            SendClientMessagef(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_MENTSD_LE_AZ_OTTLEVO_OBJECTET"));
			return 1;
		}
	}

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_vset` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_WriteSaveAObjectSet", "dsd", playerid, params, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_WriteSaveAObjectSet(playerid, setname[], queue);
public THREAD_WriteSaveAObjectSet(playerid, setname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_WriteSaveAObjectSet);

	new
	    iRegID;
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK_IGY"), setname);
		return 1;
	}
    getdate(year, month, day); gettime(hour, minute, second);
	cache_get_row_int(0, 2, iRegID);
	cache_get_row(0, 4, country);
	sscanf(country, "P<./>dddddd", year, month, day, hour, minute, second);

	if(iRegID != PlayerInfo[playerid][pRegID] && !IsOwner(playerid))
	{
        cache_get_row(0, 1, name);
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG__A__NEVU_OBJECTET__KESZITETTE"), setname, name);
		return 1;
	}

/*	new
	    iDate = mktime(hour, minute, second, day, month, year);

	if(iDate + 10 * 3600 < gettime() && !IsOwner(playerid))
	{
	    SendClientMessage(playerid,-1,"HIBA: Az object elkészítésétõl már eltelt több mint 10 nap, így már nem tudod szerkeszteni!");
	    return 1;
	}*/

	for(new i; i != MAX_VEH_OBJECT; i++)
	{
		if(!i)
		{
			format(dline, 1024, "%d", gPlayerVehicleObjectID[playerid][i]);
		}
		else
		{
            format(dline, 1024, "%s,%d", dline, gPlayerVehicleObjectID[playerid][i]);
		}
	}

    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_FELULIRVA"), setname);

	getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "UPDATE `holdingobjects_vset` SET `lastedit` = '%02d.%02d.%02d/%02d.%02d.%02d', `objects` = '%s' WHERE `objectname` = '%e'", year, month, day, hour, minute, second, dline, setname);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:lvoset(playerid, params[], 0, D:<FLAG | BCAR>)
{
	if(isnull(params)) return SendUsage(playerid, "/lvoset <FájlNév>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	datez = 0;
	vID = GetPlayerDynamicVehicleID(playerid);
 	foreach(houseid: houses)
	{
		if(GetGVarInt("HouseCar", houseid) == vID)
		{
            if(GetGVarInt("PropOwnerRegID", houseid) != PlayerInfo[playerid][pRegID])
			{
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_NEM_TE_HAZAUTOD_NEM"));
			}
			else
			{
				datez = houseid;
			}
		}
	}

	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_vset` WHERE `objectname` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_LoadAttachedObjectSet", "ddsdd", playerid, datez, params, 0, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_LoadAttachedObjectSet(playerid, ishousecar, setname[], isstore, queue);
public THREAD_LoadAttachedObjectSet(playerid, ishousecar, setname[], isstore, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadAttachedObjectSet);
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG___NEVU_FAJL_NEM_LETEZIK"), setname);
		return 1;
	}
	
	new
	    iHouseCarID = GetGVarInt("HouseCar", GetPVarInt(playerid, "PlayerProp"));
	if(GetPlayerDynamicVehicleID(playerid) != GetPVarInt(playerid, "pCar")	&& 	GetPlayerDynamicVehicleID(playerid) != iHouseCarID && !IsPlayerNPC(playerid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_A_TE_JARMUVED"));


	new
	    szObjects[1024],
	    aObjects[MAX_VEH_OBJECT];
    cache_get_row(0, 1, name);
    cache_get_row_int(0, 2, vID);
	cache_get_row(0, 6, szObjects);
	
	// print(szObjects);

	sscanf(szObjects, "p<,>a<i>[" #MAX_VEH_OBJECT "]", aObjects);
 	mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE  `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
	 	aObjects[0], aObjects[1], aObjects[2], aObjects[3], aObjects[4], aObjects[5], aObjects[6], aObjects[7], aObjects[8], aObjects[9],
		aObjects[10], aObjects[11], aObjects[12], aObjects[13], aObjects[14], aObjects[15], aObjects[16], aObjects[17], aObjects[18],
		aObjects[19], aObjects[20], aObjects[21], aObjects[22], aObjects[23], aObjects[24], aObjects[25], aObjects[26], aObjects[27],
		aObjects[28], aObjects[29], aObjects[30], aObjects[31], aObjects[32], aObjects[33], aObjects[34], aObjects[35], aObjects[36],
		aObjects[37], aObjects[38], aObjects[39], aObjects[40], aObjects[41], aObjects[42], aObjects[43], aObjects[44], aObjects[45],
		aObjects[46], aObjects[47], aObjects[48], aObjects[49], aObjects[50], aObjects[51], aObjects[52], aObjects[53], aObjects[54],
		aObjects[55], aObjects[56], aObjects[57], aObjects[58], aObjects[59], aObjects[60], aObjects[61], aObjects[62], aObjects[63],
		aObjects[64], aObjects[65], aObjects[66], aObjects[67], aObjects[68], aObjects[69], aObjects[70], aObjects[71], aObjects[72],
	 	aObjects[73], aObjects[74], aObjects[75], aObjects[76], aObjects[77], aObjects[78], aObjects[79], aObjects[80], aObjects[81],
		aObjects[82], aObjects[83], aObjects[84], aObjects[85], aObjects[86], aObjects[87], aObjects[88], aObjects[89], aObjects[90],
		aObjects[91], aObjects[92], aObjects[93], aObjects[94], aObjects[95], aObjects[96], aObjects[97], aObjects[98], aObjects[99],
	 	aObjects[100], aObjects[101], aObjects[102], aObjects[103], aObjects[104], aObjects[105], aObjects[106], aObjects[107], aObjects[108],
		aObjects[109], aObjects[110], aObjects[111], aObjects[112], aObjects[113], aObjects[114], aObjects[115], aObjects[116], aObjects[117],
		aObjects[118], aObjects[119]);
	//SetPVarString(playerid, "AObjects", szObjects);
	mysql_function_query(1, query, true, "THREAD_LoadAttachedObjectSet2", "ddsdsdd", playerid, ishousecar, setname, isstore, name, vID, g_pQueryQueue[playerid]);
	//printf(query);
	return 1;
}

forward THREAD_LoadAttachedObjectSet2(playerid, ishousecar, setname[], isstore, creator[], regid, queue);
public THREAD_LoadAttachedObjectSet2(playerid, ishousecar, setname[], isstore, creator[], regid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadAttachedObjectSet2);

	if(!(vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if(vID == g_BonusCarID || ZaszloOwner == playerid)  return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NALAD_VAN_A_ZASZLO_VAGY_1"));

	RemoveObjectFromVehicle(playerid, vID, -1);
	foreach(Player, i)
	{
		if(GetPVarInt(i, "AttachVehicleID") == vID && i != playerid)
		{
  			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_EZEN_A_JARMUVON__OBJECTJEI"), GetPlayerColor(i) >>> 8, pName(i), i);
			return 1;
		}
	}

	if(!ishousecar)
	{
		new
			OldCarID = GetPVarInt(playerid, "AttachVehicleID"); // Kocsi ID, amire felrakta az objectet
		// Ha a kocsi ID, amire felrakta nem eggyezik a jelengi kocsival, akkor a régirõl töröljük
		if(OldCarID != 0 && !isstore)
		{
			for(new i; i != MAX_VEH_OBJECT; i++)
			{
				if(gVehicleObject[OldCarID][i] == INVALID_OBJECT_ID) continue;

				DestroyDynamicObject(gVehicleObject[OldCarID][i]);

	            gVehicleObject[OldCarID][i] = INVALID_OBJECT_ID;
				gPlayerVehicleObject[playerid][i] = INVALID_OBJECT_ID;
			    gPlayerVehicleObjectID[playerid][i] = 0;
			}
		}
	}
	else
	{
		if(!isstore)
		{
			houseid = ishousecar;
			for(new i; i != MAX_VEH_OBJECT; i++)
			{
				if(gVehicleObject[vID][i] != INVALID_OBJECT_ID) DestroyDynamicObject(gVehicleObject[vID][i]);

	            gVehicleObject[vID][i] = INVALID_OBJECT_ID;
				g_HouseVehicleObjects[houseid][i] = 0;
			}
		}
	}
    SetPVarString(playerid,"Voset_Name", setname);
    SetPVarString(playerid,"Voset_Creator", name);
    SetPVarInt(playerid,"Voset_CreatorID", regid);
	new
		objectname_[48],
	    rows = cache_get_row_count();

	for(new x; x != rows; x++)
	{
 		cache_get_row(x, 3, objectname_);
   		mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `objectname` = '%e'", objectname_);
		mysql_function_query(1, query, true, "THREAD_LoadAttachedObject", "ddsd", playerid, x, objectname_, g_pQueryQueue[playerid]);
	}
	return 1;
}

CMD:vomaterial(playerid, params[], 0, 0)
{
	new
	    materialindex,
	    modelid,
	    slot,
	    txdname[128],
	    texturename[128],
	    materialcolor;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));
	if(sscanf(params, "ddds[" #STR_SIZE "]s[" #STR_SIZE "]N(0x0)", slot, materialindex, modelid, txdname, texturename, materialcolor)) return SendUsage(playerid, "/vomaterial <VO_Slot> <MaterialIndex> <ModelID> <TXDName> <TextureName> <Color = 0>");
	if(!(-1 <= slot < MAX_VEH_OBJECT)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SLOT_1__"), MAX_VEH_OBJECT - 1);

	if(slot == -1)
	{
		for(slot = 0; slot != MAX_VEH_OBJECT; slot++)
		{
            if(gPlayerVehicleObject[playerid][slot] == INVALID_OBJECT_ID) continue;
 			SetDynamicObjectMaterial(gPlayerVehicleObject[playerid][slot], materialindex, modelid, txdname, texturename, ShiftRGBAToARGB(materialcolor));
		}
	}
	else
	{
		if(gPlayerVehicleObject[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_URES"));

    	SetDynamicObjectMaterial(gPlayerVehicleObject[playerid][slot], materialindex, modelid, txdname, texturename, ShiftRGBAToARGB(materialcolor));
	}

	format(i_str, sizeof(i_str), "%d_materialindex",slot);  SetPVarInt(playerid, i_str, materialindex);
	return 1;
}

CMD:ltc(playerid, params[], 0, 0)
{
	SendUsage(playerid, "/ltc {" #XCOLOR_WHITE "}<2-26>");
	return 1;
}
CMD:ltc2(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 560, 1028, 1030, 1031, 1138, 1140, 1170, 1080, 1086, 1010)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, 1);
	PlayerPlaySound(playerid, 1133);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc3(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Sultan
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 560, 1028, 1030, 1031, 1138, 1140, 1170, 1080, 1086, 1010)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, 2);
	PlayerPlaySound(playerid, 1133);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc4(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Jester
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 559, 1116, 1068, 1169, 1010, 1160, 1159)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc5(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Flash
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 565, 1049, 1053, 1010, 4064, 1073, 1153, 1151)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc6(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Uranus
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 558, 1163, 1091, 1093, 1010, 1073, 1088, 1166, 1168)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc7(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Stratum
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 561, 1060, 1061, 1057, 1010, 1064, 1073, 1155, 1156)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc8(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Elegy
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 562, 1146, 1035, 1034, 1036, 1010, 1073, 1171, 1149)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}
 // 1130 Tetõ
CMD:ltc9(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Savanna
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 567, 1133, 1010, 1129, 1183, 1188, 1186)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	if(random(2) == 1) AddDynamicVehicleComponent(vID, 1130);
	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc10(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Reminghton
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 534, 1122, 1010, 1127, 1084, 1100, 1180, 1163, 1091)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    ChangeDynamicVehicleColor(vID, 1, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc11(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt Monster
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 557, 1010, 1081)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc12(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>) // Tuningolt
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 535, 1109, 1115, 1117, 1010, 1114, 1119, 1121)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, 1);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc13(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 562, 1034, 1038, 1147, 1010, 1073)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, 0);
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc14(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 536, 1128, 1108, 1010, 1104, 1098, 1087, 1182, 1184)) return 1;
    vID = GetPVarInt(playerid, "pCar");

	ChangeDynamicVehiclePaintjob(vID, random(3));
    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc15(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 576, 1134, 1010, 1135, 1080, 1086, 1087, 1191, 1192)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	// ChangeDynamicVehiclePaintjob(vID, random(3));
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc16(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 496, 1011, 1006, 1007, 1010, 1019, 1078, 1086, 1143)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc17(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 422, 10007, 1013, 1010, 1019, 1076, 1086)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc18(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 401, 1005, 1006, 1007, 1013, 1010, 1019, 1097, 1086, 1143)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc19(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 518, 1023, 1005, 1006, 1007, 1013, 1010, 1018, 1080, 1086, 1145)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc20(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 527, 1015, 1007, 1010, 1018, 1075, 1086)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc21(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 546, 1001, 1004, 1006, 1007, 1024, 1010, 1018, 1098, 1086, 1143)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc22(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 547, 1003, 1010, 1021, 1079, 1086, 1143)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc23(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 550, 1023, 1004, 1006, 1010, 1018, 1086, 1086, 1145)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc24(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 540, 1001, 1004, 1006, 1007, 1024, 1010, 1018, 1080, 1086, 1145)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc25(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 529, 1001, 1011, 1007, 1010, 1018, 1079, 1086)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:ltc26(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | RACE | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(!CarSpawner(playerid, 603, 1023, 1006, 1007, 1024, 1010, 1018, 1079, 1086, 1145)) return 1;
    vID = GetPVarInt(playerid, "pCar");

    GivePlayerMoneyEx(playerid, -200, "CarSpawn");
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_LTC_SPAWN"), VehName(vID));
	return 1;
}

CMD:carhealth(playerid, params[], 3, 0)
{
	if(sscanf(params, "dF(1000.0)", vID, Health)) return SendUsage(playerid, "/carhealth <Jármû ID> <Érték = 1000.0>");
	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_AUTO_ID"));

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(vID == g_BonusCarID && bIsNotOwner)  return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BONUSZAUTOT_NEM_JAVITHATOD"));
	if(!(0.0 <= Health <= 1000.0) && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__1000"));

	if(bIsNotOwner)
	{
		foreach(Player, i)
		{
	        if(GetPVarInt(i, "ElloptaKocsit") == vID)
	        {
				return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZT_A_KOCSIT_EPPEN__LOPJ"), GetPlayerColor(i) >>> 8, pName(i), i);
			}
		}
	}

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__ALLITOTTAD_AZ__ELETET__"), VehName(vID), vID, Health);
	SetDynamicVehicleHealth(vID, Health);

	format(name, sizeof(name), "%d | %.4f", vID, Health);
    AdminCommandLog("CARHEALTH", playerid, -1, name);
	return 1;
}

CMD:sethealth(playerid, params[], 3, 0)
{
	if(sscanf(params, "uF(100.0)", player1, Health)) return SendUsage(playerid, "/sethealth <Játékos ID/Név> <Érték = 100.0>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsNotConnected(player1) || IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(!(0 <= Health <= 100) && GetPVarInt(playerid, "Level") < 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__100"));

	new
	    Float:old;
	GetPlayerHealth(player1, old);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}életét; {" #XCOLOR_SAMP "}Régi: %.2f | Új: %.2f", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, Health);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította az életed; {" #XCOLOR_SAMP "}Régi: %.2f | Új: %.2f", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, Health);

	SetPlayerHealth(player1, Health);

	format(name, sizeof(name), "%d", floatround(Health));
    AdminCommandLog("SETHEALTH", playerid, player1, name);
	return 1;
}

CMD:setarmour(playerid, params[], 3, 0)
{
	if(sscanf(params, "uF(100.0)", player1, Armour)) return SendUsage(playerid, "/setarmour <Játékos ID/Név> <Érték = 100.0>");
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(IsNotConnected(player1) || IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(!(0 <= Armour <= 100) && GetPVarInt(playerid, "Level") < 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__100"));

	new
	    Float:old;
	GetPlayerArmour(player1, old);
	SendClientMessagef(playerid, COLOR_BLUE, "* Állítottad {%06x}%s(%d) {" #XCOLOR_BLUE "}golyóálló mellényét; {" #XCOLOR_SAMP "}Régi: %.2f | Új: %.2f", GetPlayerColor(player1) >>> 8, pName(player1), player1, old, Armour);
	if(player1 != playerid) SendClientMessagef(player1, COLOR_BLUE, "* Admin: {%06x}%s(%d) {" #XCOLOR_BLUE "}átállította a golyóálló mellényedet; {" #XCOLOR_SAMP "}Régi: %.2f | Új: %.2f", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, old, Armour);

	SetPlayerArmour(player1, Armour);
	format(name, sizeof(name), "%d", floatround(Armour));
    AdminCommandLog("SETARMOUR", playerid, player1, name);
	return 1;
}

CMD:healall(playerid, params[], 3, 0)
{
	foreach(new i: Player)
	{
		if((e_IN_FALLOUT | e_IN_DM | e_IN_DUEL | e_RABOL | e_KOCSIT_LOP | e_IN_GANGWAR | e_IN_CTC | e_FLAG_OWNER | e_BCAR_OWNER) & g_pGamesData[i]) continue;
        //SetPlayerHealth(i, 100.0);
        SetPlayerHealth(i, (IsClient(i)) ? (176.0) : (100.0));
	}

    SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__FELTOLTOTTE_MINDEN", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, Health);
    AdminCommandLog("HEALALL", playerid, -1);
	return 1;
}

CMD:armourall(playerid, params[], 3, 0)
{
	foreach(new i: Player)
	{
		if((e_IN_FALLOUT | e_IN_DM | e_IN_DUEL | e_RABOL | e_KOCSIT_LOP | e_IN_GANGWAR | e_IN_CTC | e_FLAG_OWNER | e_BCAR_OWNER) & g_pGamesData[i]) continue;
        SetPlayerArmour(i, 100.0);
	}

    SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__FELTOLTOTTE_MINDEN_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, Health);
    AdminCommandLog("HEALALL", playerid, -1);
	return 1;
}

CMD:setskill(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "Level") < 2 && !IsPlayerAdmin(playerid))
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ADMIN"));

	new
	    WeaponID,
	    Skill;
	if(sscanf(params, "udd", player1, WeaponID, Skill))
	{
		SendUsage(playerid, "/setskill <Játékos ID/Név> <Fegyver> <Skill>");
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_PISZTOLY_0_TOMPITOTT_1_DESERT"));
		return 1;
	}

    if(IsNotConnected(player1) || IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(!(0 <= Skill <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__1000"));
    if(!(0 <= WeaponID <= 10)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_0__10"));

    SetPlayerSkillLevel(playerid, WeaponID, Skill);

	switch(WeaponID)
	{
	    case 0: i_str = "Pistol";
	    case 1: i_str = "Silenced Pistol";
	    case 2: i_str = "Desert Eagle";
	    case 3: i_str = "Shotgun";
	    case 4: i_str = "Sawnoff";
	    case 5: i_str = "Spas12 Shotgun";
	    case 6: i_str = "UZI";
	    case 7: i_str = "MP5";
	    case 8: i_str = "AK47";
	    case 9: i_str = "M4";
		case 10: i_str = "Sniper";
	}

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_BEALLITOTTAD___TAPASZTALATAT"), GetPlayerColor(playerid) >>> 8, pName(player1), player1, i_str, Skill);

	valstr(name, Skill);
    AdminCommandLog("SETSKILL", playerid, player1, name);
	return 1;
}

CMD:carcolors(playerid, params[], 0, 0)
{
	dline[0] = EOS;
    for (new i; i != sizeof gVehicleColors; i++)
    {
        format(dline, sizeof(dline), "%s{%06x}%03d%s", dline, gVehicleColors[i] >>> 8, i, !((i + 1) % 16) ? ("\n") : (" "));
    }
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Color List", dline, "Close", "");
    return 1;
}
CMD:vehcolors(playerid, params[], 0, 0) return cmd_carcolors(playerid,"");
CMD:vcolors(playerid, params[], 0, 0) return cmd_carcolors(playerid,"");

CMD:carcolor(playerid, params[], 0, D:<TAXI>)
{
	new
		color[2], color1, color2;
	if(sscanf(params, "dD(-1)", color[0], color[1]))
	{
		SendUsage(playerid, "/carcolor <Szín 1> ( <Szín 2> )");
		cmd_vflags(playerid, "");
		return 1;
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
    if(!(-1 <= color[0] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ELSO_SZINNEK_ROSSZ_SZINT"));
    if(!(-1 <= color[1] <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MASODIK_SZINNEK_ROSSZ"));

	if(g_BonusCarID == (vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_NEM_1"));

    GetDynamicVehicleColor(vID, color1, color2);
	if(color[1] == -1)
	{
		ChangeDynamicVehicleColor(vID, color[0], color2);
	}
	else
	{
        ChangeDynamicVehicleColor(vID, color[0], color[1]);
	}
	return 1;
}

CMD:paintjob(playerid, params[], 0, D:<TAXI>)
{
	new
		pj;
	if(sscanf(params, "d", pj)) return SendUsage(playerid, "/paintjob <Festõmunka ID>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
    if(!(0 <= pj <= 4)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_PAITJOB_ID_0__4"));

	if(g_BonusCarID == (vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_NEM_2"));

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JARMUVED_FESTOMUNKAJA_KICSERELVE"), pj);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_JARMUVED_FESTOMUNKAJA_ATVALTOZTATVA"), pj);

	ChangeDynamicVehiclePaintjob(vID, pj);
	return 1;
}

CMD:vmod(playerid, params[], 0, D:<TAXI>)
{
	new
		mod;
	if(sscanf(params, "d", mod)) return SendUsage(playerid, "/vmod <Mod ID>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(!IsUpgrade(mod)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BEIRT_ID_NEM_JARMU_TUNING"));

	if(mod == 1087) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_TUNING_NEM_KOMPATIBILIS"));

	if(!IsUpgradeCompatible(GetDynamicVehicleModel((vID = GetPlayerDynamicVehicleID(playerid))), mod)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_TUNING_NEM_KOMPATIBILIS"));
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG___HOZZAADVA_A_JARMUVEDHEZ"), GetVehicleComponentTypeName(mod));
	AddDynamicVehicleComponent(vID, mod);
	return 1;
}

CMD:rvmod(playerid, params[], 0, D:<TAXI>)
{
	new
		mod;
	if(sscanf(params, "d", mod)) return SendUsage(playerid, "/rvmod <Mod ID>");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG___TOROLVE_A_JARMUVEDROL"), GetVehicleComponentTypeName(mod));
	RemoveDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), mod);
	return 1;
}

CMD:autospawn(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_AUTOSPAWN;
	if(g_PlayerFlags[playerid] & e_AUTOSPAWN)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_AUTOMATIKUS_SPAWNOLAS_BEKAPCSOLVA"));
	}
	else
	{
   	    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AUTOMATIKUS_SPAWNOLAS_KIKAPCSOLVA"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:autologin(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_AUTOLOGIN;
	if(g_PlayerFlags[playerid] & e_AUTOLOGIN)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_AUTOMATIKUS_BEJELETKEZES_SERIAL"));

       	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_VIGYAZZ_EZ_A_MEGOLDAS_NEM_TOKELETE"));
       	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_MIELOTT_EZT_BEKAPCSOLOD_ERDEMES"));
       	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_MAGA_A_FUNKCIO_SAMPBAN_NEM"));
       	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_AZT_HOGY_KIKNEK_VAN_AZ_ALTALAD"));
       	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_SEMMIKEPP_SE_ENGEDELYEZD_HA"));
	}
	else
	{
   	    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AUTOMATIKUS_BEJELETKEZES_SERIAL_1"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:conmsg(playerid, params[], 0, 0)
{
    //if(!g_pVIP[playerid] && GetPVarInt(playerid, "Level") < 4) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NEM_VAGY_VIP_VAGY_TULAJ"));
    //f(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
 	if(!IsFOOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);

    g_PlayerFlags[playerid] ^= e_CON_MSG;
	if(g_PlayerFlags[playerid] & e_CON_MSG)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPCSOLODASI_UZENETED_BEKAPCSOLVA"));
	}
	else
	{
       	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLODASI_UZENETED_KIKAPCSOLVA"));
	}

	SaveFlags(playerid);
	AdminCommandLog("CONMSG", playerid, -1);
	return 1;
}

CMD:setconmsg(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", player1)) return SendUsage(playerid, "/setconmsg <Player ID>");
    g_PlayerFlags[player1] ^= e_CON_MSG;
	if(g_PlayerFlags[player1] & e_CON_MSG)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPCSOLODASI_UZENETED_BEKAPCSOLVA"));
	}
	else
	{
       	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLODASI_UZENETED_KIKAPCSOLVA"));
	}
	SaveFlags(player1);
	return 1;
}

CMD:allowlocate(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_DISABLELOCATE);

	g_PlayerFlags[playerid] ^= e_LOCATE;
	if(g_PlayerFlags[playerid] & e_LOCATE)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_MAS_JATEKOSOK_ALTAL_BEMERHETOSEG"));
	}
	else
	{
       	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAS_JATEKOSOK_ALTAL_BEMERHETOSEG_1"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:showconmsg(playerid, params[], 4, 0)
{
    g_PlayerFlags[playerid] ^= e_SHOW_HIDED_CON_MSG;
	if(g_PlayerFlags[playerid] & e_SHOW_HIDED_CON_MSG)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_REJTETT_KAPCSOLODASI_UZENETEK"));
	}
	else
	{
       	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_REJTETT_KAPCSOLODASI_UZENETEK_1"));
	}
	SaveFlags(playerid);
	AdminCommandLog("SHOWCONMSG", playerid, -1);
	return 1;
}

CMD:hide(playerid, params[], 3, 0)
{
    g_PlayerData[playerid] ^= e_REJTETT;
	if(g_PlayerData[playerid] & e_REJTETT)
	{
       	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_REJTETT_MOD_BE"));
	}
	else
	{
   	    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_REJTETT_MOD_KI"));
	}

	#if defined YSF
	if(isnull(params))
	{
	    if(GetPVarInt(playerid, "Level") > 3 || IsPlayerAdmin(playerid))
	    {
			TogglePlayerInServerQuery(playerid, !(g_PlayerData[playerid] & e_REJTETT));
		}
	}
	#endif

    AdminCommandLog("HIDE", playerid, -1);
	return 1;
}

CMD:nametag(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    g_PlayerFlags[playerid] ^= e_NO_NAMETAG;
	if(g_PlayerFlags[playerid] & e_NO_NAMETAG)
	{
		new
		    pColor = (GetPlayerColor(playerid) & 0xFFFFFF00);
		foreach(new i: Player)
		{
		    //if(PlayerInfo[i][pRegID] == 3) continue; //Nem...
			//if(g_PlayerFlags[i] & e_SEENAMETAG) continue;
			ShowPlayerNameTagForPlayer(i, playerid, false);
	    	SetPlayerMarkerForPlayer(i, playerid, pColor);
		}
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NAMETAG_KIKAPCSOLVA_MOST_NEMLATJAK"));
	}
	else
	{
		foreach(new i: Player)
		{
            //if(g_PlayerFlags[i] & e_SEENAMETAG) continue;
			ShowPlayerNameTagForPlayer(i, playerid, true);
	    	SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
		}
        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NAMETAG_BEKAPCSOLVA_MOST_LATJAK"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:allownametag(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_SEENAMETAG);

	g_PlayerFlags[playerid] ^= e_SEENAMETAG;
	if(!(g_PlayerFlags[playerid] & e_SEENAMETAG))
	{
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_REJTETT_JATEKOS_NEVEK_LATHATOSAGA_1")); //Kikapcsolva

		foreach(new i: Player)
		{
			if(!(g_PlayerFlags[i] & e_NO_NAMETAG)) continue;
			ShowPlayerNameTagForPlayer(playerid, i, false);
	    	SetPlayerMarkerForPlayer(playerid, i, GetPlayerColor(i) & 0xFFFFFF00);
		}
	}
	else
	{
        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_REJTETT_JATEKOS_NEVEK_LATHATOSAGA")); //Bekapcsolva

		foreach(new i: Player)
		{
		    if(PlayerInfo[i][pRegID] == 3) continue; //Nem...
			if(!(g_PlayerFlags[i] & e_NO_NAMETAG)) continue; //Akinek nincs kikapcsolva azon nem fut le.. mert minek
			ShowPlayerNameTagForPlayer(playerid, i, true);
	    	SetPlayerMarkerForPlayer(playerid, i, GetPlayerColor(i));
		}
	}
	SaveFlags(playerid);
	return 1;
}

stock SetGoodAllowed(playerid, allow)
{
	//printf("SetGoodAllowed(playerid = %d, allow = %d)", playerid, allow);
	if(allow)
	{
		if(GetPVarFloat(playerid, "GOD_Health") != 0.0)
		{
			SetPlayerHealth(playerid, GetPVarFloat(playerid, "GOD_Health"));
	        SetPlayerArmour(playerid, GetPVarFloat(playerid, "GOD_Armour"));
		}
		else
		{
		    SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
			//SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
		}

        g_pOtherFlags[playerid] |= e_GOD_ALLOWED;
		g_pOtherFlags[playerid] &= ~e_GOD_SETTED;
	}
	else
	{
        g_pOtherFlags[playerid] &= ~e_GOD_ALLOWED;
		g_pOtherFlags[playerid] |= e_GOD_SETTED;

		if(GetPVarFloat(playerid, "GOD_Health") != 0.0)
		{
			SetPlayerHealth(playerid, GetPVarFloat(playerid, "GOD_Health"));
	        SetPlayerArmour(playerid, GetPVarFloat(playerid, "GOD_Armour"));
		}
		else
		{
		    SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
			//SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
		}
	}
}

CMD:god(playerid, params[], 0, D:<DM | DUEL | LOP | KOCSILOP | GANGWAR | CTC | FLAG | BCAR>)
{
	if(g_pRobCount{playerid}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_RABLAS_KOZBEN_NEM_KAPCSOLHATOD"));
    if(GetPVarType(playerid, "LofaszHouseID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_KAPCSOLHATOD_BE_AZ"));
    if(GetPVarType(playerid, "StartFeltores")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HAZ_FELTORES_KOZBEN_NEM"));
    if(IsPlayerInHouseZone(playerid) != -1 && GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));

   	// Ha nem admin, akkor spam ellenõrzés
	if(!(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)))
	{
		//SPAM_CHECK(God, 8000) //8mp
	}
	else
	{
		SPAM_CHECK(God, 30000) //fél perc
	}
    if(!(g_PlayerFlags[playerid] & e_GOD))
    {
		if(GetPVarType(playerid, "ElloptaKocsit")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_KAPCSOLHATOD_BE_AZ_1"));

		GetPlayerPos(playerid, X, Y, Z);
		if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 30.0 || GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 30.0)
		{
	    	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_KOZEL_VAGY_A_BONUSZAUTOHOZ"));
	    	return 1;
		}
	}

	g_PlayerFlags[playerid] ^= e_GOD;
	if(g_PlayerFlags[playerid] & e_GOD)
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_OROKELET_BE_AMIG_BE_VAN_KAPCSOLVA"));
		SetPVarInt(playerid, "GodWeap", GetPlayerWeapon(playerid));

		// Anti SK alatt nem mentjük a jelenlegi életét, mivel örök élete van
		if(!GetPVarType(playerid, "SpawnKill"))
		{
			GetPlayerHealth(playerid, Health);
			GetPlayerArmour(playerid, Armour);

			SetPVarFloat(playerid, "GOD_Health", Health);
			SetPVarFloat(playerid, "GOD_Armour", Armour);
		}
        SetPlayerHealth(playerid, HEALTH_GOD);
        g_pOtherFlags[playerid] |= e_GOD_ALLOWED;
        g_pOtherFlags[playerid] &= ~e_GOD_SETTED;

        g_pGodEnableTick[playerid] = GetTickCount();
	}
	else
	{
        //CheckGodMoney(playerid);
        g_pGodEnableTick[playerid] = 0;

        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OROKELET_KI_MOSTMAR_HASZNALNI"));

		if(GetPVarFloat(playerid, "GOD_Health") != 0.0)
		{
			SetPlayerHealth(playerid, GetPVarFloat(playerid, "GOD_Health"));
	        SetPlayerArmour(playerid, GetPVarFloat(playerid, "GOD_Armour"));

			DeletePVar(playerid, "GOD_Health");
			DeletePVar(playerid, "GOD_Armour");
		}
		else
		{
			SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
	        SetPlayerArmour(playerid, 0.0);
		}

		g_pOtherFlags[playerid] &= ~e_GOD_ALLOWED;
		g_pOtherFlags[playerid] &= ~e_GOD_SETTED;
		SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "GodWeap"));
		DeletePVar(playerid, "GodWeap");
	}
	SaveFlags(playerid);
	return 1;
}

stock CheckGodMoney(playerid)
{
	if(!g_pGodEnableTick[playerid]) return;

	if((GetTickCount() - g_pGodEnableTick[playerid]) > 30000 && GetPVarInt(playerid, "AFKTime") < 10)
	{
		printf("CheckGodMoney(%s(%d))", pName(playerid), playerid);
		g_pGodEnableTick[playerid] = GetTickCount();
        GivePlayerMoneyEx(playerid, -600);
	}
}

CMD:teleon(playerid, params[], 0, 0)
{
 	g_PlayerFlags[playerid] |= e_CLICKTELE;
    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHKATTINTASSAL_VALO_HTELEPORTA"));
    SaveFlags(playerid);
	return 1;
}

CMD:teleoff(playerid, params[], 0, 0)
{
	g_PlayerFlags[playerid] &= ~e_CLICKTELE;
    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHKATTINTASSAL_VALO_HTELEPORTA_1"));
    SaveFlags(playerid);
	return 1;
}

CMD:getid(playerid, params[], 0, 0)
{
	new
	    type;
	if(sscanf(params, "s[" #STR_SIZE "]D(0)", i_str, type)) return SendUsage(playerid, "/getid <Részlet> <Mit keressen: 0 = Játékos Név | 1 = ID | 2 = RegID | 3 = Ország | 4 = GMT");
	if(!(1 <= strlen(i_str) <= 20)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_HOSSZUSAG"));
	if(!(0 <= type <= 4)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_TIPUS_0__4"));

	new
		found;
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_KERESED__"), i_str);
	foreach(new i: Player)
	{
		switch(type)
		{
			case 0:
			{
				if(strfind(pName(i), i_str, true) != -1)
				{
					SendClientMessagef(playerid, COLOR_RED, "%d{" #XCOLOR_GREEN "}. {%06x}%s(%d)", ++found, GetPlayerColor(i) >>> 8, pName(i), i);
					continue;
				}
			}
			case 1:
			{
				if(i == strval(i_str))
				{
					SendClientMessagef(playerid, COLOR_RED, "%d{" #XCOLOR_GREEN "}. {%06x}%s(%d)", ++found, GetPlayerColor(i) >>> 8, pName(i), i);
					break;
				}
			}
			case 2:
			{
				if(PlayerInfo[i][pRegID] == strval(i_str))
				{
					SendClientMessagef(playerid, COLOR_RED, "%d{" #XCOLOR_GREEN "}. {%06x}%s(%d)", ++found, GetPlayerColor(i) >>> 8, pName(i), i);
					break;
				}
			}
			case 3:
			{
				GetPlayerIp(i, ip, sizeof(ip));
			    if(!GetCountryName(ip, country, sizeof(country))) country = "N/A";

				if(strfind(country, i_str, true) != -1)
				{
					// Botokat nem számoljuk bele
					if(g_pOtherFlags[i] & e_RAKSAMP) continue;

					SendClientMessagef(playerid, COLOR_RED, "%d{" #XCOLOR_GREEN "}. {%06x}%s(%d)", ++found, GetPlayerColor(i) >>> 8, pName(i), i);
					continue;
				}
			}
			case 4:
			{
				GetPlayerIp(i, ip, sizeof(ip));
	            GetCityLongitude(ip, V[0]);
				if(floatround(V[0] / 15) == strval(i_str))
				{
					SendClientMessagef(playerid, COLOR_RED, "%d{" #XCOLOR_GREEN "}. {%06x}%s(%d)", ++found, GetPlayerColor(i) >>> 8, pName(i), i);
				}
			}
		}
	}

	if(!found) SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_EZ_A_RESZLET_EGY_JATEKOS_NEVEBEN"));
	return 1;
}
CMD:find(playerid, params[], 0, 0)
{
	return cmd_getid(playerid, params);
}

CMD:asay(playerid, params[], 0, 0)
{
	new
	    pLevel = GetPVarInt(playerid, "Level"),
		bool:bIsAdmin = !!IsPlayerAdmin(playerid);

	if(pLevel < 1 && !bIsAdmin)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

	if(isnull(params)) return SendUsage(playerid, "/asay <Szöveg>");

	if(GetPVarType(playerid, "FakeAdmin"))
	{
        SendClientMessageToAllf_(COLOR_RED, "» {" #XCOLOR_YELLOW "}Fake Admin{" #XCOLOR_RED "}: %s", ColouredText(params));
	}
	else
	{
		if(pLevel/*!bIsAdmin*/)
		{
			switch(pLevel)
			{
				case 1: name = "Moderátor";
				case 2: name = "Admin";
				case 3: name = "Fõadmin";
				case 4: name = "Tulaj";
			}
		}
		else
		{
	        name = "RCON";
		}
		SendClientMessageToAllf_(COLOR_RED, "» %s {%06x}%s(%d){" #XCOLOR_RED "}: %s", name, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(params));
	}
    AdminCommandLog("ASAY", playerid, -1, params);
	return 1;
}

CMD:say(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/say <Szöveg>");

	SendRconCommandf("say %s", params);

	AdminCommandLog("SAY", playerid, -1, params);
	return 1;
}

CMD:racedebug(playerid, params[], 4, 0)
{
    g_ServerFlags ^= e_RACEDEBUG;
    if(g_ServerFlags & e_RACEDEBUG)
    {
        name = "{" #XCOLOR_WHITE "}Engedélyezve";
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
	}

    SendClientMessagef(playerid, COLOR_GREEN, "*** e_RACEDEBUG %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_RACEDEBUG, g_ServerFlags & e_RACEDEBUG);
    AdminCommandLog("RACEDEBUG", playerid, -1, name);
	return 1;
}

CMD:instagib(playerid, params[], 4, 0)
{
    g_ServerFlags ^= e_INSTAGIB;
    if(g_ServerFlags & e_INSTAGIB)
    {
        name = "{" #XCOLOR_WHITE "}Engedélyezve";
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
	}

    SendClientMessagef(playerid, COLOR_GREEN, "*** e_INSTAGIB %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_INSTAGIB, g_ServerFlags & e_INSTAGIB);
	AdminCommandLog("INSTAGIB", playerid, -1, name);
	return 1;
}

CMD:sqllog(playerid, params[], 4, 0)
{
	new
	    dlevel;
	if(sscanf(params, "d", dlevel)) return SendUsage(playerid, "/sqllog <Value None: 0, Error: 1, Warning: 2, Debug: 4>");

    SendClientMessagef(playerid, COLOR_WHITE, "LOG_NONE: %d, LOG_ERROR: %d, LOG_WARNING: %d, LOG_DEBUG: %d", dlevel & _:LOG_NONE, dlevel & _:LOG_ERROR, dlevel & _:LOG_WARNING, dlevel & _:LOG_DEBUG);
    mysql_log(dlevel);

	valstr(name, dlevel);
    AdminCommandLog("SQLDEBUG", playerid, -1, name);
	return 1;
}

CMD:iplimit(playerid, params[], 4, 0)
{
    g_ServerFlags ^= e_IPLIMIT;
    if(g_ServerFlags & e_IPLIMIT)
    {
        name = "{" #XCOLOR_WHITE "}Engedélyezve";
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
	}

    SendClientMessagef(playerid, COLOR_GREEN, "*** e_IPLIMIT %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_IPLIMIT, g_ServerFlags & e_IPLIMIT);
    AdminCommandLog("IPLIMIT", playerid, -1, name);
	return 1;
}

CMD:antisobeit(playerid, params[], 4, 0)
{
    g_ServerFlags ^= e_ANTI_SOBEIT_KICK;
    if(g_ServerFlags & e_ANTI_SOBEIT_KICK)
    {
        name = "{" #XCOLOR_WHITE "}Engedélyezve";
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
	}

    SendClientMessagef(playerid, COLOR_GREEN, "*** e_ANTI_SOBEIT_KICK %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_ANTI_SOBEIT_KICK, g_ServerFlags & e_ANTI_SOBEIT_KICK);
    AdminCommandLog("ANTISOBEIT", playerid, -1, name);

   	mysql_format(1, query, sizeof(query), "UPDATE `config` SET `sobeitkick` = %d WHERE `id` = 1", g_ServerFlags & e_ANTI_SOBEIT_KICK);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:antimop(playerid, params[], 4, 0)
{
    g_ServerFlags ^= e_ANTIMOP;
    if(g_ServerFlags & e_ANTIMOP)
    {
        name = "{" #XCOLOR_WHITE "}Engedélyezve";
        mysql_function_query(1, "UPDATE `config` SET `antimop` = 1 WHERE `id` = 1", false, "", "");
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
        mysql_function_query(1, "UPDATE `config` SET `antimop` = 0 WHERE `id` = 1", false, "", "");
	}

    SendClientMessagef(playerid, COLOR_GREEN, "*** e_ANTIMOP %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_ANTIMOP, g_ServerFlags & e_ANTIMOP);
    AdminCommandLog("ANTIMOP", playerid, -1, name);
	return 1;
}

CMD:findmode(playerid, params[], 0, 0)
{
    g_pOtherFlags[playerid] ^= e_FINDMODE;
    if(g_pOtherFlags[playerid] & e_FINDMODE)
    {
        name = "{" #XCOLOR_WHITE "}engedélyezve";
	}
	else
	{
        name = "{" #XCOLOR_RED "}Letiltva";
	}

    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_OBJECT_ID_KERESO_MOD__LOJ_RA"), name);
	return 1;
}

#if !defined YSF
CMD:wtimeformat(playerid, params[], 4, 0)
{
	new
	    Type;
	if(sscanf(params, "d", Type)) return SendUsage(playerid, "/wtimeformat <0 = clans.hu | 1 = Rekord | 2 = Uptime>");

    switch(Type)
    {
		case 0:
		{
            SendRconCommand("worldtime " #WEB_ADDRESS "");
            ShowWelcome(playerid, LANG(playerid, "MSG_YHSUNWELLHU"));
		}
		case 1:
		{
            SendRconCommandf("worldtime Rekord: %d", ServerInfo[CurrPlayers]);
            ShowWelcome(playerid, LANG(playerid, "MSG_YHREKORD"));
		}
		case 2:
		{
            date(session[startuptime], day, month, year, hour, minute, second);
            SendRconCommandf("worldtime %02d/%02d/%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
			ShowWelcome(playerid, LANG(playerid, "MSG_YHUPTIME"));
		}
		default: return SendUsage(playerid, "/wtimeformat <0 = clans.hu | 1 = Rekord | 2 = Uptime");
	}
	ServerInfo[WorldTimeFormat] = Type;

	mysql_format(1, query, sizeof(query), "UPDATE `config` SET `wtimeformat` = %d WHERE `id` = 1", Type);
    mysql_function_query(1, query, false, "", "");

	valstr(name, Type);
    AdminCommandLog("WTIMEFORMAT", playerid, -1, name);
	return 1;
}
#endif

CMD:liftspeed(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_LIFTSPEED);

	new
	    Float:fSpeed,
	    i;
	if(sscanf(params, "f", fSpeed)) return SendUsage(playerid, "/liftspeed <fSebesség>");
	if(!(0 <= fSpeed <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SEBESSEG_00__10000_ALAPBO"));

	GetPlayerPos(playerid, X, Y, Z);
	if(GetDistance2D(X, Y, 1378.57, -1152.55) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 1);
		i = 0;
	}
	else if(GetDistance2D(X, Y, 1533.41, -1237.24) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 2);
		i = 1;
	}
	else if(GetDistance2D(X, Y, 1440.90, -1039.52) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 3);
		i = 2;
	}
	else if(GetDistance2D(X, Y, 1533.37, -1064.65) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 4);
		i = 3;
	}
	else if(GetDistance2D(X, Y, 1556.37, -1147.73) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 5);
		i = 4;
	}
	else if(GetDistance2D(X, Y, 355.44, -1467.19) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 6);
		i = 5;
	}
	else if(GetDistance2D(X, Y, 311.65, -1612.49) < 25)
	{
		SetGVarFloat("LiftSpeed", fSpeed, 7);
		i = 6;
	}
	else return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEMVAGY_EGYIK_LIFT_KOZELEBEN"));

    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__LIFTSPEED___3F"), i, fSpeed);
	return 1;
}

CMD:rocketspeed(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_LIFTSPEED);

	new
	    Float:fSpeed;
	if(sscanf(params, "f", fSpeed)) return SendUsage(playerid, "/rocketspeed <fSebesség>");
	if(!(0.5 <= fSpeed <= 10.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_SEBESSEG_05__100_ALAPBOL"));

	SetPVarFloat(playerid, "RocketSpeed", fSpeed);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__ROCKETSPEED__3F"), fSpeed);
	return 1;
}

CMD:ping(playerid, params[], 0, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/ping <Játékos ID/Név>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_PINGJET_NEM_KERHETED"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___ATLAG_PING_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, g_pAVG_Ping[player1]);

	dline[0] = EOS;
	for(new i; i != 15; i++)
	{
		if(!i)
		{
			format(dline, 144, "%d: %d", i, PlayerInfo[playerid][pPing][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, PlayerInfo[playerid][pPing][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);
	return 1;
}
CMD:avgping(playerid, params[], 0, 0)
{
	return cmd_ping(playerid, params);
}

CMD:avgfps(playerid, params[], 0, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/avgfps <Játékos ID/Név>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOK_PINGJET_NEM_KERHETED"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___ATLAG_FPS_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, g_pAVG_FPS[player1]);

	dline[0] = EOS;
	for(new i; i != 15; i++)
	{
		if(!i)
		{
			format(dline, 144, "%d: %d", i, PlayerInfo[playerid][pLekertFPS][i]);
		}
		else
		{
			format(dline, 144, "%s,%d: %d", dline, i, PlayerInfo[playerid][pLekertFPS][i]);
		}
	}
	if(dline[0]) SendClientMessage(playerid, COLOR_WHITE, dline);
	return 1;
}
/*
CMD:setgravity(playerid, params[], 4, 0)
{
    new
		Float:fGravity;
	GetServerVarAsString("gravity", name, sizeof(name)); V[0] = strval(name);

	if(sscanf(params, "f", fGravity)) return SendUsage(playerid, "/setgravity <-50.0 - 50.0> (Alap: 0.008) {" #XCOLOR_GREEN "}Jelenleg: %.3f", V[0]);
    if(!(-50.0 <= fGravity <= 50.0)) return SendUsage(playerid, "/setgravity <-50.0 - 50.0> (Alap: 0.008) {" #XCOLOR_GREEN "}Jelenleg: %.3f", V[0]);

	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__ATALLITOTTA_A_GRAVIT", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, V[0], fGravity);
    SetGravity(fGravity);

	foreach(Player, i)
	{
        if(fGravity == 0.008)
        {
			g_pGamesData[i] &= ~e_GRAV;
		}
		else
		{
			g_pGamesData[i] |= e_GRAV;
		}
	}

	format(name, sizeof(name), "%.3f", fGravity);
	AdminCommandLog("SETGRAVITY", playerid, -1, name);
	return 1;
}
*/
#if defined YSF
CMD:setpgravity(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>)
{
	new
		Float:fGravity;
	if(sscanf(params, "f", fGravity)) return SendUsage(playerid, "/setpgravity <-50.0 - 50.0> (Alap: 0.008) {" #XCOLOR_GREEN "}Jelenleg: %.3f", GetPlayerGravity(playerid));
	if(!(-50.0 <= fGravity <= 50.0)) return SendUsage(playerid, "/setpgravity <-50.0 - 50.0> (Alap: 0.008) {" #XCOLOR_GREEN "}Jelenleg: %.3f", GetPlayerGravity(playerid));

    if(fGravity == 0.008)
    {
		g_pGamesData[playerid] &= ~e_GRAV;
	}
	else
	{
		g_pGamesData[playerid] |= e_GRAV;
	}

	SendClientMessagef(playerid, COLOR_BLUE, "* Gravitációd átállítva! {" #XCOLOR_SAMP "}Régi: %.3f | Új: %.3f", GetPlayerGravity(playerid), fGravity);
	SetPlayerGravity(playerid, fGravity);
	return 1;
}
CMD:mygravity(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>)
{
	return cmd_setpgravity(playerid, params);
}
CMD:mygrav(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>)
{
	return cmd_setpgravity(playerid, params);
}
CMD:setgrav(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>)
{
	return cmd_setpgravity(playerid, params);
}

#endif

/*
CMD:sqlping(playerid, params[], 4, 0)
{
	SendClientMessagef(playerid, COLOR_WHITE, "mysql_ping = %d", mysql_ping());

	AdminCommandLog("SQLPING", playerid, -1);
	return 1;
}
*/
CMD:sql_reconnect(playerid, params[], 4, 0)
{
	SendClientMessagef(playerid, COLOR_WHITE, "mysql_reconnect = %d", mysql_reconnect());

	AdminCommandLog("SQLRECONNECT", playerid, -1);
	return 1;
}

CMD:serverinfo(playerid, params[], 0, 0)
{
    mysql_function_query(1, "SELECT `reg_id` FROM `players` ORDER BY `reg_id` DESC LIMIT 1", true, "THREAD_Serverinfo", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Serverinfo(playerid, queue);
public THREAD_Serverinfo(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Serverinfo);

	new
		RegPlayers;
	cache_get_row_int(0, 0, RegPlayers);

    new
		gz = GangZoneCreate(3, 3, 5, 5),
		TotalVehicles,
		TotalPickups,
		Text:Textdraws = TextDrawCreate(1.0899, 0.000000, !"_");

	GangZoneDestroy(gz);
	TextDrawDestroy(Textdraws);

	for(new i; i != MAX_VEHICLES; i++)
	{
		if(!IsValidVehicle(i)) continue;
		TotalVehicles ++;
	}
	for(new i; i != MAX_PICKUPS; i++)
	{
		if(!IsValidPickup(i)) continue;
		TotalPickups ++;
	}

	switch(debug)
	{
		case 2: name = "-d3";
		default: name = "-d0";
	}

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_JATEKOSOK___BOTOK___MAX_JATE"), Iter_Count(Player), Iter_Count(Bot), (GetMaxPlayers() - Iter_Count(Bot)), RegPlayers, ServerInfo[RecordPlayers]);
	SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_JARMUVEK___JATEKOS_JARMUBEN"), CountDynamicVehicles(), TotalVehicles, InVehCount(), InCarCount(), OnBikeCount(), GetServerTickRate());
	SendClientMessagef(playerid, COLOR_LIGHTBLUE, LANG(playerid, "MSG_OBJECTEK____PICKUPOK___A"), CountDynamicObjects(), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT), CountDynamicPickups(), TotalPickups, CountDynamicAreas(), gz, Iter_Count(houses), Itter_Count(races), goldpot[max_goldpot_id]);
	SendClientMessagef(playerid, COLOR_LIGHTBLUE, LANG(playerid, "MSG_BIZNISZEK___3D_TEXTEK___TEXT"), Iter_Count(biznis), CountDynamic3DTextLabels(), _:Textdraws, Scripting_GetPublicsCount(), Scripting_GetNativesCount(), Streamer_GetTickRate());
	SendClientMessagef(playerid, COLOR_GREEN2, LANG(playerid, "MSG_MOD_SORAINAK_SZAMA_70000__PLUGIN"), name);
	return 1;
}

CMD:sqlstat(playerid, params[], 0, 0)
{
	mysql_stat(tmp);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "MySQL Statisztika", tmp, "Oké");
	return 1;
}

CMD:foruminfo(playerid, params[], 0, 0)
{
    mysql_function_query(2, "SELECT `value` FROM `smf_settings` WHERE `variable` = 'smfVersion' OR `variable` = 'mostOnline' OR `variable` = 'mostOnlineToday' OR `variable` = 'mostDate' OR `variable` = 'latestMember' OR `variable` = 'latestRealName'", true, "THREAD_Foruminfo", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Foruminfo(playerid, queue);
public THREAD_Foruminfo(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Foruminfo);

	new
		iLastMember;
	cache_get_row_int(0, 0, iLastMember);
    cache_get_row(1, 0, country);
    cache_get_row_int(2, 0, datez);
    cache_get_row_int(3, 0, vID);
    cache_get_row_int(4, 0, player1);
    cache_get_row(5, 0, name);

    date(datez, day, month, year, hour, minute, second);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_FORUM_VERZIO___MAI_REKORD_"), name, player1, vID, year, month, day, hour, minute, second);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_REGISZTRALT_TAGOK___LEGUJABB"), iLastMember, country);
	return 1;
}

CMD:ann(playerid, params[], 2, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/ann <Szöveg>");
	if(!IsSafeForTextdraw(params)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZOVEG_NEM_MEFELELO"));

	if(strfind(params, "/q", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot léptessed ki te szûzkurva!
    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

    AdminCommandLog("ANN", playerid, -1, params);
	GameTextForAll(FixGameString(params), 3000, 3);
	return 1;
}

CMD:ann2(playerid, params[], 3, 0)
{
	if(sscanf(params, "dds[" #STR_SIZE "]", datez, vID, i_str)) return SendUsage(playerid, "/ann <Idõ millisecond ( 1000ms = 1 sec )> <Stílus> <Szöveg>");
	if(!IsSafeForTextdraw(i_str)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZOVEG_NEM_MEFELELO"));
	if(!(0 <= vID <= 6) || (vID == 2)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_STILUS_0__6_KIVEVE_A"));
	if(datez > 5000) datez = 3000;
    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

    AdminCommandLog("ANN2", playerid, -1, i_str);
	GameTextForAll(FixGameString(i_str), datez, vID);
	return 1;
}

CMD:poke(playerid, params[], 2, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/poke <Játékos ID/Név> <Szöveg>");

	if(!IsSafeForTextdraw(i_str)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_SZOVEG_NEM_MEFELELO"));

	if(strfind(i_str, "/q", true) != -1)
		return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot léptessed ki te szûzkurva!
    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;
    
    AdminCommandLog("POKE", playerid, player1, i_str);
	GameTextForPlayer(player1, FixGameString(i_str), 3000, 3);

	SendClientMessagef(playerid, COLOR_LIGHTPINK, LANG(playerid, "MSG_____3"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);
	return 1;
}

CMD:scm(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, -1, ColouredText(params));
	return 1;
}

CMD:slowme(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | CTC | POSTAS | PIZZAS>)
{
	CHECK_SZINT(playerid, SZINT_JETPACK);

	if(GetPlayerMoneyEx(playerid) < 2000) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_NINCS_ELEG_PENZED"));
	if(IsPlayerInAnyDynamicVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LEHETSZ_JARMUBEN"));

    if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, -2000, "SlowMe");

	GetPlayerPos(playerid, X, Y, Z);
	SetTimerEx("DestroySlowme", 3000, false, "d", CreateDynamicPickup(1241, 4, X, Y, Z));
	return 1;
}

forward DestroySlowme(id);
public DestroySlowme(id)
{
	DestroyDynamicPickup(id);
}

CMD:jetpack(playerid, params[], 0, D:<DERBY | FALLOUT | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR>)
{
	new dmid = g_pDeathMatchID[playerid];
	if(dmid != -1 && !(g_DMFlags[dmid] & e_JETPACK_MODE))
	{
        SendClientMessage(playerid, COLOR_RED, "HIBA: Ebben a DM-ben nem használhatsz jetpack-et.");
        return 1;
	}
	else
	{
		CHECK_SZINT(playerid, SZINT_JETPACK);
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
        ClearAnimations(playerid);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	else
	{
    	if(GetPlayerMoneyEx(playerid) < 2000) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_NINCS_ELEG_PENZED"));

		if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, -2000, "JetPack");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	return 1;
}

CMD:flip(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));

	vID = GetPlayerDynamicVehicleID(playerid);

	GetPlayerPos(playerid, X, Y, Z);
	GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	GetDynamicVehicleZAngle(vID, Angle);

	SetDynamicVehiclePos(vID, X, Y, Z);
	SetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	SetDynamicVehicleZAngle(vID, Angle);
    RepairDynamicVehicle(vID);

	InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_PHJARMUVED_YH_BHHELY_1"), VehName(vID));
	return 1;
}

CMD:fix(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_IN_CAR_OR_DRIVER"));

	vID = GetPlayerDynamicVehicleID(playerid);
	
	RepairDynamicVehicle(vID);
	SetDynamicVehicleHealth(vID, 1000.0);

    PlayerPlaySound(playerid, 1133);

	InfoTD_MSGf(playerid, 1000, LANG(playerid, "MSG_BHJARMUVED_YH_GHHM"), VehName(vID));
	return 1;
}
CMD:javit(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	return cmd_fix(playerid, params);
}

CMD:destroycar(playerid, params[], 2, 0)
{
    if(sscanf(params, "D(-1)", vID)) return SendUsage(playerid, "/destroycar {" #XCOLOR_YELLOW "}<Jármû ID>");

	if(!IsPlayerInAnyDynamicVehicle(playerid) && vID == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
	else if(IsPlayerInAnyDynamicVehicle(playerid) && vID == -1)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
	}

	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));
	if(vID == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_BONUSZ_AUTO_NEM_TOROLHET"));
	if(Bit_Get(gIsHouseCar, vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_VALAKI_HAZAUTOJA_EZT_NEM"));

	foreach(new i: Player)
	{
		if(GetPVarInt(i, "pCar") == vID)
			SetPVarInt(i, "pCar", INVALID_VEHICLE_ID);

		if(GetPVarInt(i, "pCar2") == vID)
			SetPVarInt(i, "pCar2", INVALID_VEHICLE_ID);
	}
	if(gWJCar[0] <= vID <= gWJCar[1] || gTruck[0] <= vID <= gTruck[sizeof(gTruck)-1] || gTunedCar[0] <= vID <= gTunedCar[1] || gTrailers[0] <= vID <= gTrailers[1] || g_CTC_Auto[0] <= vID <= (g_CTC_Auto[1] + 43)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_JARMUVET_NEM_TOROLHETED"));

	DestroyDynamicVehicle(vID);
    ShowWelcome(playerid, LANG(playerid, "MSG_JARMU_TOROLVE"));

	format(i_str, sizeof(i_str), "Név: %s | ID: %d", VehName(vID), vID);
    AdminCommandLog("DESTROYCAR", playerid, -1, i_str);
	return 1;
}

CMD:respawncar(playerid, params[], 2, 0)
{
    if(sscanf(params, "D(-1)", vID)) return SendUsage(playerid, "/destroycar {" #XCOLOR_YELLOW "}<Jármû ID>");

	if(!IsPlayerInAnyDynamicVehicle(playerid) && vID == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_JARMUBEN"));
	else if(IsPlayerInAnyDynamicVehicle(playerid) && vID == -1)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
	}

    if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));
  	if(vID == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_BONUSZ_AUTO_NEM_RESPAWNO"));

	SetDynamicVehicleToRespawn(vID);
	ShowWelcome(playerid, LANG(playerid, "MSG_JARMU_RESPAWNOLVA"));

	format(i_str, sizeof(i_str), "Név: %s | ID: %d", VehName(vID), vID);
    AdminCommandLog("RESPAWNCAR", playerid, -1, i_str);
	return 1;
}

CMD:goto(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | TAXI>)
{
	new
	    bool:bShowMessage,
	    pLevel = GetPVarInt(playerid, "Level"),
	    bool:bIsAdmin = !!(pLevel >= 1 || IsPlayerAdmin(playerid)),
	    //bool:bIsOwner =!!(pLevel >= 3 || IsPlayerAdmin(playerid)),
	    Float:fTargerPos[3],
	    Float:fFinalPos[2],
		Float:fOffset[3];

    if(!bIsAdmin)
	{
		SPAM_CHECK(Goto, 2000) //2mp
	}
	if(bIsAdmin)
	{
		if(sscanf(params, "uF(2.0)F(0.0)F(0.0)D(1)", player1, fOffset[0], fOffset[1], fOffset[2], bShowMessage)) return SendUsage(playerid, "/goto <Játékos ID/Név> <EltoásX = 2.0> <EltolásY> <EltolásZ> <ShowMsgForPlayer = 1>");
	}
	else
	{
		if(sscanf(params, "u", player1)) return SendUsage(playerid, "/goto <Játékos ID/Név>");
        fOffset[0] = 2.0;
	}

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADHOZ_NEM_TELEPORTALHATSZ"));
	
	//if(g_pOtherFlags[player1] & e_RAKSAMP && !IsOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_LETILTOTTA_3"));
	
    if(GetPlayerState(player1) == PLAYER_STATE_NONE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_LESPAWNOLVA"));
    if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_EPP_FIGYEL"));



	// Tulajok bármikor odatelézhetnek akárhiez
	if(!IsOwner(playerid))
	{
		if(GetPVarType(player1, "Trucking")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_KAMIONOZIK_1"));
		if(ZaszloOwner == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEL_A_JATEKOSNAL_VAN_A_ZASZLO"));
		if(g_BonusCarOwner == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEL_A_JATEKOSNAL_VAN_A_BONUSZAUTO"));
		if(!(g_PlayerFlags[player1] & e_GOTO))
		{
	        if(bIsAdmin)
			{
	            if(GetPVarInt(player1, "Level") > GetPVarInt(playerid, "Level")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_LETILTOTTA_3"));
			}
			else
			{
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_LETILTOTTA_3"));
			}
		}
		if(PlayerInfo[player1][pRegID] == 3)
    	{
        	if(!(g_PlayerFlags[player1] & e_GOTO))
        	{
    			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_LETILTOTTA_3"));
			}
    	}

		if(g_pDeathMatchID[player1] != -1) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_JELENLEG_1"), g_szDMName[g_pDeathMatchID[player1]]);
		if(g_pRobCount{player1}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_EPPEN_RABOL"));
		if(GetPVarType(player1, "FalloutState")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_FALLOUTBAN_VAN"));
		if(GetPVarType(player1, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_VERSENYBEN_VAN"));
		if(g_pGamesData[player1] & e_IN_GANGWAR) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_GANGWARBAN"));
		if(g_pGamesData[player1] & e_IN_DERBY) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_DERBYBEN"));
		if(g_pGamesData[player1] & e_IN_CTC) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_CTCBEN_VAN"));
		if(g_pGamesData[player1] & e_IN_DUEL) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_PARBAJBAN"));
		if((e_POSTAS | e_PIZZAS) & g_pGamesData[player1]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_POSTASKENT"));
		if(IsPlayerInHouseZone(player1) != -1) CarDeleter(playerid);
    }
    
	GetPlayerPos(player1, fTargerPos[0], fTargerPos[1], fTargerPos[2]);
	if(!bIsAdmin && CheckHQZone(playerid, fTargerPos[0], fTargerPos[1])) return 1;

    fFinalPos[0] = (fTargerPos[0] + fOffset[0]);
    fFinalPos[1] = (fTargerPos[1] + fOffset[1]);
	fTargerPos[2] += fOffset[2];

	NormalTele(playerid, fFinalPos[0], fFinalPos[1], fTargerPos[2],
		GetPlayerInterior(player1), GetAngleToPoint(fTargerPos[0], fTargerPos[1], fFinalPos[0], fFinalPos[1]), GetPlayerVirtualWorld(player1));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_ODATELEPORTALTAL__NEVU_JATEKOS"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
    if(bIsAdmin && bShowMessage)
    {
		InfoTD_MSGf(player1, MESSAGE_TIME, LANG(player1, "MSG_RHH_PHODATELEPORTALT"), pName(playerid), playerid);
	}
	else
	{
		InfoTD_MSGf(player1, MESSAGE_TIME, LANG(player1, "MSG_RHH_PHODATELEPORTALT_1"), pName(playerid), playerid);

        MoneyCheck(playerid, PRICE_GOTO);
	}
	return 1;
}
CMD:tp(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | TAXI>)
{
	return cmd_goto(playerid, params);
}

CMD:lgoto(playerid, params[], 1, D:<TAXI>)
{
    if(g_BonusCarOwner == playerid && (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BONUSZAUTOVAL_NEM_TELEZHETSZ"));

	new
		Int,
		World;

	if(!sscanf(params, "fffD(0)D(0)", X, Y, Z, Int, World))
	{
	    format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f, %d, %d", X, Y, Z, Int, World);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z, Int, .worldid = World);
	}
	else if(!sscanf(params, "ff", X, Y))
	{
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
		format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f", X, Y, Z);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z + 2.5, 0, 0, 0);
	}
	else if(!sscanf(params, "ffffD(0)D(0)", X, Y, Z, Angle, Int, World))
	{
	    format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f, %.4f, %d, %d", X, Y, Z, Angle, Int, World);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z, Int, Angle, World);
	}
	else if(!sscanf(params, "p<,>fffD(0)D(0)", X, Y, Z, Int, World))
	{
	    format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f, %d, %d", X, Y, Z, Int, World);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z, Int, .worldid = World);
	}
	else if(!sscanf(params, "p<,>ff", X, Y))
	{
		MapAndreas_FindZ_For2DCoord(X, Y, Z);
		format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f", X, Y, Z);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z + 2.5, 0, 0, 0);
	}
	else if(!sscanf(params, "p<,>ffffD(0)D(0)", X, Y, Z, Angle, Int, World))
	{
	    format(i_str, sizeof(i_str), "%.4f, %.4f, %.4f, %.4f, %d, %d", X, Y, Z, Angle, Int, World);
	    AdminCommandLog("LGOTO", playerid, -1, i_str);

		return NormalTele(playerid, X, Y, Z, Int, Angle, World);
	}
    SendUsage(playerid, "/lgoto <X> <Y> <Z> ( <Interior> <World> )");
	return 1;
}

CMD:get(playerid, params[], 1, 0)
{
	if(sscanf(params, "uF(2.0)F(0.0)F(0.0)", player1, V[0], V[1], V[2])) return SendUsage(playerid, "/get <Játékos ID/Név> <OffsetX = 2.0> <OffsetY> <OffsetZ>)");
    if(IsPlayerNPC(player1) && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_TELEPORTALHATSZ"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADHOZ_NEM_TELEPORTALHATSZ"));
    if(GetPVarType(playerid, "Trucking")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_KAMIONOZOL_NEM_TELEZHETSZ"));
    if(GetPVarType(player1, "Trucking")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_KAMIONOZIK_2"));
    if(GetPVarType(playerid, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VERSENY_KOZBEN_NEM_TELEPORTALHATSZ"));
    if(!IsFOOwner(playerid))
    {
		if(ZaszloOwner == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEL_A_JATEKOSNAL_VAN_A_ZASZLO_1"));
		if(g_BonusCarOwner == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ENNEL_A_JATEKOSNAL_VAN_A_BONUSZAUTO_1"));
	}

    if(GetPVarType(player1, "JailTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZT_A_JATEKOS_BORTONBEN"));
    if(g_pGamesData[player1] & e_IN_GANGWAR) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_GANGWARBAN_1"));
	if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_EPP_FIGYEL_1"));

	GetPlayerPos(playerid, X, Y, Z);

	NormalTele(player1, (X + V[0]), (Y + V[1]), (Z + V[2]), GetPlayerInterior(playerid), GetAngleToPoint(X, Y, (X + V[0]), (Y + V[1])), GetPlayerVirtualWorld(playerid));
	if(!(datez = GetPVarInt(playerid, "DMZone")))
	{
		DeletePVar(player1, "DMZone");
	}
	else
	{
        SetPVarInt(player1, "DMZone", datez);
	}

	SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__MAGAHOZ_TELEPORTALT"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_MAGADHOZ_TELEPORTALTAD__NEVU"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

   	AdminCommandLog("GET", playerid, player1);
	return 1;
}

CMD:vgoto(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    //if(!g_pVIP[playerid]) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_NEM_VAGY_VIP"));
    if(!g_pVIP[playerid] && GetPVarInt(playerid, "Level") < 1) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NEM_VAGY_VIP"));
	printf("vgoto - %s(%d)", pName(playerid), playerid);
	new
		seat,
		maxpassenger = GetMaxPassengers(GetDynamicVehicleModel(vID));
	if(sscanf(params, "dD(0)", vID, seat)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HASZNALAZ_VGOTO_JARMU_ID_ULES"));
	if(!IsValidDynamicVehicle(vID)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_DOESNT_EXIST"));
	if(vID == g_BonusCarID && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTOHOZ_NEM_TELEPORTAL"));
	if(seat > maxpassenger) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ULES_ID__NEVU_JARMUBEN"), VehName(vID), GetMaxPassengers(GetDynamicVehicleModel(vID)) +1);
  	if(g_PlayerData[playerid] & e_CLEARWORLD)
	{
	    if(!(g_PlayerData[playerid] & e_CLEARWORLD_NOOBJECTS)) return SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_CLEARWORLDBEN_NEM_HASZNALHATOD"));
	}
	
    for(new i; i != 12; i++)
    {
    	if(vID == g_NPC_Car[i] && GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTOHOZ_NEM_TELEPORTAL"));
    }

	foreach(new i: Character)
	{
	    if(!IsPlayerInDynamicVehicle(i, vID) || i == playerid) continue;

		Ide:
		if(GetPlayerVehicleSeat(i) == seat)
	    {
			if(seat < maxpassenger)
			{
				seat++;
				goto Ide;
			}
			else
			{
				return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__ULESEN_EPPEN__UL"), seat + 1, GetPlayerColor(i) >>> 8, pName(i), i);
			}
		}
	}

	new
	    bool:bIsError = !!(GetPVarInt(playerid, "Level") < 2 && !IsPlayerAdmin(playerid));
	if(bIsError)
	{
		if(Bit_Get(gIsHouseCar, vID))
		{
			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_VALAKI_HAZAUTOJA_NEM_ULHETSZ"));
		}
	}

	new
		engine,
		bonnet,
		boot,
		alarm,
		objective;
	GetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == VEHICLE_PARAMS_ON && bIsError) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_AZ_AUTO_BE_VAN_ZARVA_NEM"));

	GetDynamicVehiclePos(vID, X, Y, Z);

	SetPlayerInterior(playerid, GetDynamicVehicleInterior(vID));

	/*
	new
	    World = GetDynamicVehicleVirtualWorld(vID);
	SetPlayerVirtualWorld(playerid, World);
	if(!World) RemovePlayerFromClearworld(playerid);
	*/
	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
	{
        if(!CheckHQZone(playerid, X, Y)) PutPlayerInDynamicVehicle(playerid, vID, seat);
	}
	else
	{
		PutPlayerInDynamicVehicle(playerid, vID, seat);
	}

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_BELEULTEL_AZ__ID__NEVU_JARM"), VehName(vID), vID, seat + 1);

	foreach(new i: Player)
	{
	    if(!IsPlayerInDynamicVehicle(i, vID) || i == playerid) continue;
	    SendClientMessagef(i, COLOR_STEELBLUE, LANG(i, "MSG___BEULT_A_JARMUVEDBE_AZ_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, seat + 1);
	}

	format(i_str, sizeof(i_str), "Név: %s | ID: %d | Seat: %d", VehName(vID), vID, seat);
    AdminCommandLog("VGOTO", playerid, -1, i_str);
	return 1;
}

CMD:crash(playerid, params[], 0, 0)
{
	new
	    bool:bKick;
 	if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
 	//if(!IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
	if(sscanf(params, "uD(0)", player1, bKick)) return SendUsage(playerid, "/crash <Játékos ID/Név> <Kickelje-e = 0>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_FAGYASZTHATSZ"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

    for(new i; i < 8+randomex(1,3); i++) SendClientMessage(player1, 0xAAAAAAAA, "Warning(s007): Exception 0xC0000005 at 0x523E6B");


	GetPlayerPos(player1, X, Y, Z);
	//SetPlayerPos(player1, X, Y, Z + 2.0);
	g_PlayerData[player1] &= ~(e_FALLED | e_NOCARMSG);



	CreatePlayerObject(player1, 385, X, Y, Z, 0.0, 0.0, 0.0);
	if(bKick) KickEx(player1, "crash");

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__KIFAGYASZTOTTAD__NEVU_JATEKO"), GetPlayerColor(player1) >>> 8, pName(player1), player1, bKick);
	AdminCommandLog("CRASH", playerid, player1);
    return 1;
}

CMD:warn(playerid, params[], 1, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/warn <Játékos ID/Név> <Indok>");
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_FIGYELMEZTETHETSZ"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_FIGYELMEZTEDHETED"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));

	if(GetPVarType(player1, "WarnTick"))
	{
		new
		    iTick = GetTickCount() - GetPVarInt(player1, "WarnTick");
		if(iTick < 10000) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_NEMREG_KAPOTT"), (float(10000 - iTick) / 1000));
	}

	if(!IsOwner(playerid))
	{
		for(new i ; i != sizeof(g_szTiltottBanIndok); i++)
		{
			if(strfind(tmp, g_szTiltottBanIndok[i], true) != -1)
			{
				SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO_7"), g_szTiltottBanIndok[i]);
	            return 1;
			}
		}
	}

	new
	    PWarns = GetPVarInt(player1, "Warnings") + 1;
	SetPVarInt(player1, "Warnings", PWarns);
	if(PWarns == MAX_WARNINGS)
	{
		SendClientMessageToAllf(COLOR_KICK, "MSG__ADMIN__FIGYELMEZTETTE_", pName(playerid), playerid, pName(player1), player1, tmp);
		SendClientMessageToAllf(COLOR_KICK, "MSG_WARNBAN___NEVU_JATEKOSNAK_ME", pName(player1), player1);

        for(new i; i != 10; i++) SendClientMessagef(player1, COLOR_YELLOW, " ");
		SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__WARN__BAN__BANNOLVA_LETTEL"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__WARN__BAN__INDOK_"), tmp);
		SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__WARN__BAN__BAN_FELOLDASA_36"));
		SendClientMessage(player1, COLOR_WHITE, LANG(player1, "MSG__WARN__BAN__UNBAN_KERELEM_"));

		AdminCommandLog("WARNBAN", playerid, player1, tmp);

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `warns` = '0' WHERE `reg_id` = %d", PlayerInfo[player1][pRegID]);
	    mysql_function_query(1, query, false, "", "");

		GetPlayerIp(player1, ip, sizeof(ip));
		gpci(player1, i_str, sizeof(i_str));
		getdate(year, month, day);
		gettime(hour, minute, second);


		if(PlayerInfo[player1][pRegID] != -1)
		{
			mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time, unban_time) VALUES(0, '%e', %d, '%e', %d, '%e', '%e', 'Meglett az 5 warnja! Indok: %s', '%02d.%02d.%02d/%02d.%02d.%02d', %d)", pName(player1), PlayerInfo[player1][pRegID], pName(playerid), PlayerInfo[playerid][pRegID], ip, i_str, tmp, year, month, day, hour, minute, second, (CurrentTimestamp() + (36 * 3600)));
			mysql_function_query(1, query, false, "", "");
		}
		KickEx(player1, "warnban");
	}
	else
	{
		AdminCommandLog("WARN", playerid, player1, tmp);
		SendClientMessageToAllf(COLOR_KICK, "MSG__ADMIN__FIGYELMEZTETTE__1", pName(playerid), playerid, pName(player1), player1, tmp, PWarns);

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `warns` = '%d' WHERE `reg_id` = %d", PWarns, PlayerInfo[player1][pRegID]);
	    mysql_function_query(1, query, false, "", "");

		if(GetPVarInt(player1, "Warnings") > 2)
		{
        	SendClientMessagef(player1, COLOR_RED, LANG(player1, "MSG_VIGYAZZ__WANOD_VAN__MAX_WARNIN"), PWarns);
		}
        SetPVarInt(player1, "WarnTick", GetTickCount());
	}
	return 1;
}

CMD:warns(playerid, params[], 0, 0)
{
	new
	    iLimit = 1,
	    bool:bIsRegID;

	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "dD(1)D(0)", player1, iLimit, bIsRegID)) return SendUsage(playerid, "/warns {" #XCOLOR_YELLOW "}<Játékos ID/Név> <Oldal> <RegIDSzerint-e?>");

    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_BANNOLHATSZ"));
	if(!bIsRegID && !IsPlayerConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	if(!bIsRegID)
	{
	    mysql_format(1, query, sizeof(query), "SELECT * FROM `adminlog` WHERE `playerid` = %d AND `command` = 'WARN' ORDER BY time LIMIT %d, 100", PlayerInfo[player1][pRegID], --iLimit * 30);
	}
	else
	{
	    mysql_format(1, query, sizeof(query), "SELECT * FROM `adminlog` WHERE `playerid` = %d AND `command` = 'WARN' ORDER BY time LIMIT %d, 100", player1, --iLimit * 30);
	}
	mysql_function_query(1, query, true, "THREAD_Warnlist", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Warnlist(playerid, queue);
public THREAD_Warnlist(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Warnlist);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__ENNEK_A_JATEKOSNAK_NINCS_EGY"));
        return 1;
	}

	new
	    szName[MAX_PLAYER_NAME],
	    iRegID,
	    szAdmin[MAX_PLAYER_NAME],
	    iARegID,
		szReason[45],
		szTime[24];
	for(new i; i != rows; i++)
	{
		cache_get_row(i, 4, szName);
		cache_get_row_int(i, 5, iRegID);
		cache_get_row(i, 2, szAdmin);
		cache_get_row_int(i, 3, iARegID);
		cache_get_row(i, 6, szReason);
		cache_get_row(i, 7, szTime);

		if(!i)
		{
			format(dline, sizeof(dline), "Player: %s(%d) | Admin: %s(%d) | Reason: %s | Time: %s", szName, iRegID, szAdmin, iARegID, szReason, szTime);
		}
		else
		{
			format(dline, sizeof(dline), "%s\nPlayer: %s(%d) | Admin: %s(%d) | Reason: %s | Time: %s", dline, szName, iRegID, szAdmin, iARegID, szReason, szTime);
		}
	}

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Figyelmeztetések", dline, "Bezárás");
	return 1;
}

CMD:unwarn(playerid, params[], 3, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/unwarn <Játékos ID/Név>");
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADROL_NEM_VEHETED_LE"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(!GetPVarInt(player1, "Warnings")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ENNEK_A_JATEKOSNAK_NINCS"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKROL_NEM_VEHETED_LE"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    PWarns = GetPVarInt(player1, "Warnings") - 1;
	SetPVarInt(player1, "Warnings", PWarns);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `warns` = '%d' WHERE `reg_id` = %d", PWarns, PlayerInfo[player1][pRegID]);
	mysql_function_query(1, query, false, "", "");

	GetPlayerIp(player1, ip, sizeof(ip));
	gpci(player1, i_str, sizeof(i_str));
	getdate(year, month, day);
	gettime(hour, minute, second);

	
    AdminCommandLog("UNWARN", playerid, player1);
    
	SendClientMessageToAllf(COLOR_KICK, "MSG__ADMIN__LEVETTE_A_WARNT_", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, PWarns);
	SendClientMessagef(player1, COLOR_RED, LANG(player1, "MSG__EGY_WARNAL_KEVESEBB_MOST_"), PWarns);
	return 1;
}

CMD:kick(playerid, params[], 1, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/kick <Játékos ID/Név> <Indok>");

	if(IsPlayerNPC(player1) && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_KICKELHETSZ"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(tmp[0] != '*' && strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));
	//if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_KICKELHETED"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	GetPlayerIp(player1, ip, sizeof(ip));

	getdate(year, month, day);
	gettime(hour, minute, second);
    if(PlayerInfo[player1][pRegID] == 3) player1 = playerid;
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "Level") > 0)
		{
			SendClientMessagef(i, COLOR_KICK, LANG(i, "MSG___KI_LETT_RUGVA__ALTAL"), pName(player1), player1, pName(playerid), playerid, tmp);
		}
		else
		{
			SendClientMessagef(i, COLOR_KICK, LANG(i, "MSG___KI_LETT_RUGVA_AZ_ADMIN_ALTA"), pName(player1), player1, tmp);
		}
	}

	//mysql_format(1, query, sizeof(query), "INSERT INTO `kicks`(id, player, player_regid, player_ip, admin, admin_regid, reason, time) VALUES(0, '%s', %d, '%s', '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(player1), PlayerInfo[player1][pRegID], ip, pName(playerid), PlayerInfo[playerid][pRegID], tmp, year, month, day, hour, minute, second);
	//mysql_function_query(1, query, false, "", "");

    AdminCommandLog("KICK", playerid, player1, tmp);
	KickEx(player1, "kick");
	return 1;
}

CMD:tempban(playerid, params[], 2, 0)
{
	new
		banhours;
	if(sscanf(params, "uds[" #STR_SIZE "]", player1, banhours, i_str))
	{
	    if(GetPVarInt(playerid, "Level") < 3)
	    {
	        SendUsage(playerid, "/tempban <Játékos ID/Név> <Órák (1 - 168)> <Indok>");
	    }
	    else
	    {
	        SendUsage(playerid, "/tempban <Játékos ID/Név> <Órák (1 - 720)> <Indok>");
	    }
	    return 1;
	}

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(IsPlayerNPC(player1) && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_BANNOLHATSZ"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(player1 == playerid && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_BANNOLHATOD"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(strlen(i_str) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));

	if(PlayerInfo[player1][pRegID] == 1)
	{
		format(name, sizeof(name), "%d asd", player1);
		cmd_ban(playerid, name);
		return 1;
	}

	if(!IsOwner(playerid))
	{
		for(new i ; i != sizeof(g_szTiltottBanIndok); i++)
		{
			if(strfind(tmp, g_szTiltottBanIndok[i], true) != -1)
			{
				SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO_6"), g_szTiltottBanIndok[i]);
	            return 1;
			}
		}
	}
    if(PlayerInfo[player1][pRegID] == 3) player1 = playerid;
	switch(GetPVarInt(playerid, "Level"))
	{
	    case 1..2:
	    {
	        if(!(1 <= banhours <= 168))
	        {
     			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDO_0__168"));
			}
		}
		case 3:
		{
			if(!(1 <= banhours <= 720))
			{
                return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDO_0__720"));
			}
		}
	}

	if('0' <= i_str[0] <= '6')
	{
		switch(strval(i_str))
		{
			case 0: i_str = "Cheat";
			case 1: i_str = "Hirdetés";
			case 2: i_str = "Szerverszidás";
			case 3: i_str = "Adminszidás";
			case 4: i_str = "Szidás";
			case 5: i_str = "Túlzott káromkodás";
			case 6: i_str = "Zaklatás";
		}
	}

	format(tmp, 128, "Time: %d, Reason: %s", banhours, i_str);
	AdminCommandLog("TEMPBAN", playerid, player1, tmp);

	gettime(hour, minute, second);
	getdate(year, month, day);

	datez = CurrentTimestamp();
	vID = datez + (banhours * 3600);

	new
	    szSerial[50];
	GetPlayerIp(player1, ip, sizeof(ip));
	gpci(player1, szSerial, sizeof(szSerial));

	date(vID, day, month, year, hour, minute, second);

	SendClientMessageToAllf(COLOR_KICK, "MSG___BANNOLVA_LETT__ALTA", pName(player1), player1, pName(playerid), playerid, banhours, i_str);

	for(new i; i != 10; i++) SendClientMessage(player1, COLOR_YELLOW, " ");
	SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__IDEINGLENESEN_BANNOLVA"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__INDOK__1"), i_str);
	SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__BAN_FELOLDASA_2D2D_1"), year, month, day, hour, minute, second);
	SendClientMessage(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__UNBAN_KERELEM__WEB_ADDR"));

	gettime(hour, minute, second);
	getdate(year, month, day);
	if(PlayerInfo[player1][pRegID] != -1)
	{
		mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time, unban_time) VALUES(0, '%s', %d, '%s', %d, '%s', '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d', %d)", pName(player1), PlayerInfo[player1][pRegID], pName(playerid), PlayerInfo[playerid][pRegID], ip, szSerial, i_str, year, month, day, hour, minute, second, vID);
		mysql_function_query(1, query, false, "", "");
	}
	else
	{
		mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time, unban_time) VALUES(0, '%s', -2, '%s', %d, '%s', '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d', %d)", pName(player1), pName(playerid), PlayerInfo[playerid][pRegID], ip, szSerial, i_str, year, month, day, hour, minute, second, vID);
		mysql_function_query(1, query, false, "", "");
	}
	KickEx(player1, "tempban");
	return 1;
}
CMD:tban(playerid, params[], 2, 0)
{
	return cmd_tempban(playerid, params);
}

CMD:ban(playerid, params[], 3, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/ban <Játékos ID/Név> <Indok>");

	new
		bool:bIsNotOwner = (GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	if(IsPlayerNPC(player1) && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_BANNOLHATSZ"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(player1 == playerid && bIsNotOwner) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_BANNOLHATOD"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));

	if('0' <= tmp[0] <= '6')
	{
		switch(strval(tmp))
		{
			case 0: tmp = "Cheat";
			case 1: tmp = "Hirdetés";
			case 2: tmp = "Szerverszidás";
			case 3: tmp = "Adminszidás";
			case 4: tmp = "Szidás";
			case 5: tmp = "Túlzott káromkodás";
			case 6: tmp = "Zaklatás";
		}
	}
	if(PlayerInfo[player1][pRegID] == 3) player1 = playerid;
	if(!IsOwner(playerid))
	{
		for(new i ; i != sizeof(g_szTiltottBanIndok); i++)
		{
			if(strfind(tmp, g_szTiltottBanIndok[i], true) != -1)
			{
				SendClientMessagef(playerid, -1, LANG(playerid, "MSG_NEM_ENGEDELYEZETT_RESZ_TALALHATO_6"), g_szTiltottBanIndok[i]);
	            return 1;
			}
		}
	}

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendClientMessageToAllf(COLOR_KICK, "MSG___BANNOLVA_LETT__ALTA_1", pName(player1), player1, pName(playerid), playerid, tmp);
    for(new i; i != 10; i++) SendClientMessage(player1, COLOR_YELLOW, " ");

	SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__BANNOLVA_LETTEL__ALT"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	SendClientMessagef(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__INDOK__1"), tmp);
	SendClientMessage(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__BAN_FELOLDASA_SOHA__KIVE"));
	SendClientMessage(player1, COLOR_WHITE, LANG(player1, "MSG__BAN__UNBAN_KERELEM__WEB_ADDR"));

	AdminCommandLog("BAN", playerid, player1, tmp);

	GetPlayerIp(player1, ip, sizeof(ip));
	gpci(player1, i_str, sizeof(i_str));

	if(PlayerInfo[player1][pRegID] != -1)
	{
		mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time) VALUES(0, '%s', %d, '%s', %d, '%s', '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(player1), PlayerInfo[player1][pRegID], pName(playerid), PlayerInfo[playerid][pRegID], ip, i_str, tmp, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");
	}
	else
	{
		mysql_format(1, query, sizeof(query), "INSERT INTO `bans`(id, player, reg_id, admin, admin_id, ip, serial, reason, time) VALUES(0, '%s', -1, '%s', %d, '%s', '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(player1), pName(playerid), PlayerInfo[playerid][pRegID], ip, i_str, tmp, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");
	}

	KickEx(player1, "ban");
	return 1;
}

CMD:showbanadmin(playerid, params[], 4, 0)
{
	new
	    iBanID,
		bShowAdmin;
	if(sscanf(params, "dd", iBanID, bShowAdmin)) return SendUsage(playerid, "/showbanadmin <Ban ID> <0/1>");

	switch(bShowAdmin)
	{
		case 0, 1:
		{
			mysql_format(1, query, sizeof(query), "SELECT `player`, `admin` FROM `bans` WHERE `id` = %d", iBanID);
		    mysql_function_query(1, query, true, "THREAD_SetBanShowAdmin", "dddd", playerid, iBanID, bShowAdmin, g_pQueryQueue[playerid]);
		}
		default: SendUsage(playerid, "/showbanadmin <Ban ID> <0/1>");
	}

	format(i_str, sizeof(i_str), "BanID: %d, Show: %d", iBanID, bShowAdmin);
	AdminCommandLog("SHOWBANADMIN", playerid, -1, i_str);
	return 1;
}

forward THREAD_SetBanShowAdmin(playerid, banid, showadmin, queue);
public THREAD_SetBanShowAdmin(playerid, banid, showadmin, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SetBanShowAdmin);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_BAN_ID_AZ__NEM_LETEZIK"), banid);
		return 1;
	}

	cache_get_row(0, 0, name);
	cache_get_row(0, 1, country);

    SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_BANID___PLAYER___ADMIN__"), banid, name, country, showadmin);

	mysql_format(1, query, sizeof(query), "UPDATE `bans` SET `show_admin` = %d WHERE `id` = %d", showadmin, banid);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:findban(playerid, params[], 1, 0)
{
	new
	    iLimit,
	    szPlayer[128],
	    iType,
	    bool:bID;
	if(sscanf(params, "s[128]D(1)D(1)", szPlayer, iLimit, iType))
 	{
	 	SendUsage(playerid, "/findban <Részlet> <Lista = 1> <Mit = 1>");
	 	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_MIT_JATEKOS__1__BANREGID__2"));
		return 1;
	}
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	switch(iType)
	{
		case 1: name = "player";
		case 2: name = "reg_id", bID = true;
		case 3: name = "admin";
		case 4: name = "admin_id", bID = true;
		case 5: name = "ip";
		case 6: name = "serial";
		case 7: name = "reason";
		case 8: name = "time";
		case 9: name = "id";
		case 10:
		{
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

			name = "show_admin";
		}
		default: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_TIPUS_TIPUSOKERT_1"));
	}

    if(bID)
    {
        mysql_format(1, query, sizeof(query), "SELECT `id`, `show_admin`, `player` FROM `bans` WHERE `%s` = %d ORDER BY `id` LIMIT %d, 150", name, strval(szPlayer), --iLimit * 150);
	}
	else
	{
        mysql_format(1, query, sizeof(query), "SELECT `id`, `show_admin`, `player` FROM `bans` WHERE `%s` LIKE '%s%e%s' ORDER BY `id` LIMIT %d, 150", name, "%%", szPlayer, "%%", --iLimit * 150);
	}
	mysql_function_query(1, query, true, "THREAD_BansList", "dd", playerid, g_pQueryQueue[playerid]);
    SetPVarString(playerid, "BanString", query);

	format(i_str,128,"Type: %s | Str: %s",name,szPlayer);
	AdminCommandLog("FINDBAN", playerid, -1, i_str);
	return 1;
}

CMD:bans(playerid, params[], 1, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/bans <Lista | Alapból: 1, Minden oldalon 150db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `id`, `show_admin`, `player` FROM `bans` ORDER BY `id` LIMIT %d, 150", --iLimit * 150);
    mysql_function_query(1, query, true, "THREAD_BansList", "dd", playerid, g_pQueryQueue[playerid]);

	SetPVarString(playerid, "BanString", query);
	return 1;
}

forward THREAD_BansList(playerid, queue);
public THREAD_BansList(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_BansList);

	new
	    rows = cache_get_row_count(),
	    i;
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Banlista", "Jelenleg nincs senki sem bannolva!", "Ok");
		return 1;
	}
	else
	{
		if(rows > 150) rows = 150;
	}

	if(GetPVarInt(playerid, "Level") > 3 || IsPlayerAdmin(playerid))
	{
		new
		    bool:showadmin;
		for( ; i != rows; )
		{
			cache_get_row_int(i, 0, vID);
			showadmin = !!cache_get_row_int_ex(i, 1);
			cache_get_row(i, 2, name);

			if(!i++)
			{
			    format(dline, sizeof(dline), "%d. %s ( %d ) %s", i, name, vID, (showadmin) ? ("") : ("{" #XCOLOR_RED "} (Rejtett)"));
			}
			else
			{
				format(dline, sizeof(dline), "%s\n%d. %s ( %d ) %s", dline, i, name, vID, (showadmin) ? ("") : ("{" #XCOLOR_RED "} (Rejtett)"));
			}
		}
	}
	else
	{
		for( ; i != rows; )
		{
			cache_get_row_int(i, 0, vID);
			cache_get_row(i, 2, name);

			if(!i++)
			{
			    format(dline, sizeof(dline), "%d. %s ( %d )", i, name, vID);
			}
			else
			{
				format(dline, sizeof(dline), "%s\n%d. %s ( %d )", dline, i, name, vID);
			}
		}
	}

	format(country, sizeof(country), "{" #XCOLOR_BLUE3 "}Banlista {" #XCOLOR_WHITE "}<%d>", rows);
    ShowPlayerDialogEx(playerid, DIALOG_BANLIST, DIALOG_STYLE_LIST, country, dline, "Ok", "Mégse");
	return 1;
}

CMD:sban(playerid, params[], 0, 0)
{
    if(!IsOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
	new
	    szSerial[128],
	    szComment[128];

	if(!sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szSerial, szComment))
	{
		// Ha ID-t írt be, akkor valószinûleg a szerverne lévõ játéosok közül akar bannolni ID-re
		if(IsNumeric(szSerial))
		{
			player1 = strval(szSerial);
			if(!IsPlayerConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

			gpci(player1, szSerial, sizeof(szSerial));
			AdminCommandLog("SBAN", playerid, player1, szSerial);
		}
	}
	else
	{
		SendUsage(playerid, "/sban <Serial VAGY Játékos ID> <Komment>");
		return 1;
	}
	if(strlen(szComment) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_KOMMENT_MAXIMUM"));

	SetGVarString("SerialBan", szSerial, g_iMaxSerialBan);
    SetGVarString("SerialComment", szComment, g_iMaxSerialBan);

    g_iMaxSerialBan++;
	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_SERIAL_BAN_HOZZAADVA_ID___"), g_iMaxSerialBan, szSerial, szComment);

	mysql_format(1, query, sizeof(query), "INSERT INTO `bans_serial`(id, serial, reason, reg_id, name, time) VALUES(0, '%s', '%e', %d, '%e', %d)", szSerial, szComment, PlayerInfo[playerid][pRegID], pName(playerid), CurrentTimestamp());
	mysql_function_query(1, query, false, "", "");

	AdminCommandLog("SBAN", playerid, -1, szSerial);
	return 1;
}

CMD:sbans(playerid, params[], 4, 0)
{
	mysql_format(1, query, sizeof(query), "SELECT * FROM `bans_serial` ORDER BY `id`");
    mysql_function_query(1, query, true, "THREAD_Serialbans", "dd", playerid, g_pQueryQueue[playerid]);

	AdminCommandLog("SBANS", playerid, -1);
	return 1;
}

forward THREAD_Serialbans(playerid, queue);
public THREAD_Serialbans(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Serialbans);

	new
	    rows = cache_get_row_count();
	dline[0] = EOS;
	if(!rows)
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Serial ({" #XCOLOR_YELLOW "}gpci{" #XCOLOR_WHITE "}) banlista", "Nincs egy serial ban sem", "Ok");
		return 1;
	}

	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, vID);
		cache_get_row(i, 2, i_str);
		cache_get_row(i, 4, name);
		cache_get_row_int(i, 5, datez);

		date(datez, day, month, year, hour, minute, second);
		format(tmp, sizeof(tmp), "%d. {" #XCOLOR_BLUE "}%s {" #XCOLOR_DEFAULT "}banned by {" #XCOLOR_NORTI "}%s {" #XCOLOR_DEFAULT "}at {" #XCOLOR_WHITE "}%02d.%02d.%02d %02d:%02d:%02d{" #XCOLOR_DEFAULT "}\n", vID, i_str, name, year, month, day, hour, minute, second);
		strcat(dline, tmp);
	}

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Serial ({" #XCOLOR_YELLOW "}gpci{" #XCOLOR_WHITE "}) banlista", dline, "Bezárás");
	return 1;
}
/*
CMD:sunban(playerid, params[], 4, 0)
{
	new
		id, szSerial[128], szComment[128];
    if(sscanf(params, "d", id)) return SendUsage(playerid, "/sunban <ID>");

	new
		banid = GetGVarInt("SerialID", id);
	printf("sbanid: %d, - %d", banid, id);

	GetGVarString("SerialBan", szSerial, sizeof(szSerial), banid);
	GetGVarString("SerialComment", szComment, sizeof(szComment), banid);

	DeleteGVar("SerialBan", banid);
	DeleteGVar("SerialComment", banid);

	SendClientMessagef(playerid, -1, LANG(playerid, "MSG_SERAILBAN_ID__FELOLDVA__"), banid, szSerial, szComment);

	mysql_format(1, query, sizeof(query), "DELETE FROM `bans_serial` WHERE `id` = %d", banid);
    mysql_function_query(1, query, true, "", "");

	format(i_str, sizeof(i_str), "%s - %s", szSerial, szComment);
	AdminCommandLog("SUNBAN", playerid, -1, i_str);
	return 1;
}*/

CMD:slap(playerid, params[], 1, 0)
{
	if(sscanf(params, "uS(*)[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/slap <Játékos ID/Név> <Indok>");

	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_DOBHATSZ_FEL"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
    if(tmp[0] != '*' && strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));

//	GetPlayerHealth(player1, Health);
//	SetPlayerHealth(player1, Health - 25.0);

	GetPlayerPos(player1, X, Y, Z);
	GetPlayerFacingAngle(player1, Angle);
	SimpleTele(player1, X, Y, Z + 15.0, Angle);

	if(tmp[0] == '*')
	{
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FELDOBOTT_TEGED"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__FELDOBTAD__NEVU_JATEKOST"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	}
	else
	{
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FELDOBOTT_TEGED_IND"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, tmp);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__FELDOBTAD__NEVU_JATEKOST_IN"), GetPlayerColor(player1) >>> 8, pName(player1), player1, tmp);
	}

    AdminCommandLog("SLAP", playerid, player1, tmp);
	return 1;
}

CMD:explode(playerid, params[], 2, 0)
{
	if(sscanf(params, "uS(*)[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/explode <Játékos ID/Név> <Indok>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_ROBBANTHATSZ"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	if(tmp[0] == '*')
	{
		// SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FELROBBANTOTT_TEGED"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__FELROBBANTOTTAD__NEVU_JATEKO"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	}
	else
	{
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FELROBBANTOTT_TEGED_1"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, tmp);
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__FELROBBANTOTTAD__NEVU_JATEKO_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1, tmp);
	}

	GetPlayerPos(player1, X, Y, Z);
	CreateExplosion(X, Y, Z, 7, 10.0, GetPlayerVirtualWorld(player1));
//	SetPlayerHealth(player1, 0.0);
//	SetPlayerArmour(player1, 0.0);

    AdminCommandLog("EXPLODE", playerid, player1);
	return 1;
}

CMD:jail(playerid, params[], 1, 0)
{
	new szReason[129];
	if(sscanf(params, "uD(180)S(*)[" #STR_SIZE "]", player1, second, szReason)) return SendUsage(playerid, "/jail <Játékos ID/Név> <Másodperc> <Indok>");
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_ZARHATSZ_BORTONBE"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	if(GetPVarType(player1, "JailTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_MAR_BORTONBE"));

	if(!IsFOOwner(playerid)	&& !(10 <= second <= 6000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_IDONEK_10_ES_6000_MASODPERC"));
	
	if(strlen(szReason) > 110) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_110"));
	// if(playerid == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_ZARHATOD_BORONBE"));

	SetPVarInt(player1, "JailTime", second);
	cmd_exitdm(player1, "295375");

	if(MINIGAMES_LEAVE & g_pGamesData[player1])
	{
		cmd_leave(player1, "");
	}
	else if(g_pGamesData[player1] & e_FLAG_OWNER)
	{
		cmd_dropflag(player1, "");
	}
	else if(g_pGamesData[player1] & e_BCAR_OWNER)
	{
		g_BonusCarOwner = INVALID_PLAYER_ID;
		g_pGamesData[player1] &= ~e_BCAR_OWNER;
		//g_BonusCarCount = 0;
	//	g_BonusCarRespawn = 0;
		RemovePlayerFromVehicleEx(player1);
	}

	RemovePlayerFromClearworld(player1);
	UpdatePlayerSpawnInfo(player1);
	TogglePlayerControllable(player1, true);
	SpawnPlayer(player1);

	if(szReason[0] == '*')
	{
		SendClientMessageToAllf(0xFF5200AA, "MSG__ADMIN__BORTONBE_ZARTA_", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, second);
	}
	else
	{
		SendClientMessageToAllf(0xFF5200AA, "MSG__ADMIN__BORTONBE_ZARTA__1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, second);
		SendClientMessageToAllf(0xFF5200AA, "MSG__INDOK_", szReason);
    }
	SendClientMessagef(player1, COLOR_YELLOW, LANG(player1, "MSG_HA_LETELIK_AZ_IDO__MASODPERC"), second);
	AdminCommandLog("JAIL", playerid, player1, szReason);
	return 1;
}

CMD:unjail(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/unjail <Játékos ID/Név>");

 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!IsFOOwner(playerid) && !GetPVarType(player1, "JailTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_BORTONBEN"));

	SendClientMessagef(playerid, 0xFF5200AA, LANG(playerid, "MSG__KIENGEDTED_A_BORTONBOL__NEVU"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	SendClientMessagef(player1, 0xFF5200AA, LANG(player1, "MSG__ADMIN__KIENGEDETT_TEGED_A"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
    GameTextForPlayer(player1, LANG(player1, "MSG_GAMETEXT_FREE"), 3000, 3);

	DeletePVar(player1, "JailTime");
	UpdatePlayerSpawnInfo(player1);
	StopAudioStreamForPlayer(player1);
	SpawnPlayer(player1);

    AdminCommandLog("UNJAIL", playerid, player1);
    return 1;
}

CMD:jailed(playerid, params[], 0, 0)
{
//	if(GetPlayerScore(playerid) < 15000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AMIG_NINCS_15000_PONTOD_ADDIG"));

	datez = 0;
	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "JailTime")) continue;

		datez ++;
	}

	if(datez)
	{
		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_BORTONBEN_LEVO_JATEKOSOK_SZAMA"), datez);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NINCS_SEMILYEN_JATEKOS_BORTONBEN"));
		return 1;
	}

	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "JailTime")) continue;

		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___IDO__GETPLAYERCOLOR"), GetPlayerColor(i) >>> 8, pName(i), i, GetPVarInt(i, "JailTime"));
	}
	return 1;
}

CMD:freeze(playerid, params[], 1, 0)
{
	if(sscanf(params, "uD(180)S(*)[" #STR_SIZE "]", player1, second, tmp)) return SendUsage(playerid, "/freeze <Játékos ID/Név> <Másodperc> ( <Indok> )");

   	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_FAGYASZTHATSZ_1"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(GetPVarType(player1, "FreezeTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_MAR_LE_VAN"));
	if(tmp[0] != '*' && strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));
	// if(playerid == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_FAGYASZTHATOD"));
	if(!(10 <= second <= 600)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_IDONEK_10_ES_600_MASODPERC"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	PlayerPlaySound(player1, 1057);
	SetPVarInt(player1, "FreezeTime", second);
    TogglePlayerControllable(player1, false);

	if(tmp[0] == '*')
	{
		SendClientMessageToAllf(0xFF5200AA, "MSG__ADMIN__LEFAGYASZTOTTA_", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, second);
	}
	else
	{
		SendClientMessageToAllf(0xFF5200AA, "MSG__ADMIN__LEFAGYASZTOTTA__1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, second);
		SendClientMessageToAllf(0xFF5200AA, "MSG__INDOK_", tmp);
    }
	SendClientMessage(player1, COLOR_LIGHTGREEN, LANG(player1, "MSG_NA_EZT_MEGSZIVTAD__A_FAGYASZTAS"));

	AdminCommandLog("FREEZE", playerid, player1, tmp);
	return 1;
}

CMD:unfreeze(playerid, params[], 1, 0)
{
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/unfreeze <Játékos ID/Név>");

 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
 	if(!GetPVarType(player1, "FreezeTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_LEFAGYASZTVA"));

	DeletePVar(player1, "FreezeTime");
    TogglePlayerControllable(player1, true);
    ShowWelcome(player1, LANG(player1, "MSG_FAGYASZTAS_FELOLDVA_MOST_MAR"));

	SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__LEVETTE_ROLAD_A_FAGY"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_LEVETTED_A_FAGYASZTAST__NEVU"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

	AdminCommandLog("UNFREEZE", playerid, player1);
	return 1;
}

CMD:freezed(playerid, params[], 0, 0)
{
//	if(GetPlayerScore(playerid) < 15000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AMIG_NINCS_15000_PONTOD_ADDIG"));

	datez = 0;
	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "FreezeTime")) continue;

		datez ++;
	}

	if(datez)
	{
		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_LEFAGYASZTOTT_JATEKOSOK_SZAMA"), datez);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NINCS_SEMILYEN_JATEKOS_LEFAGYASZTVA"));
		return 1;
	}

	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "FreezeTime")) continue;

		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___IDO__GETPLAYERCOLOR"), GetPlayerColor(i) >>> 8, pName(i), i, GetPVarInt(i, "FreezeTime"));
	}
	return 1;
}

CMD:mute(playerid, params[], 1, 0)
{
	if(sscanf(params, "uD(180)S(*)[" #STR_SIZE "]", player1, second, tmp)) return SendUsage(playerid, "/mute <Játékos ID/Név> <Másodperc> ( <Indok> )");

    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_NEMITHATSZ"));
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(GetPVarType(player1, "Muted")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_MAR_LE_VAN_NEMITVA"));
	if(AdminNotAdmin(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));
	// if(playerid == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGADAT_NEM_NEMITHATOD"));

	if(tmp[0] != '*' && strlen(tmp) > 45) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_INDOK_TUL_HOSSZU_45"));

	if(!IsFOOwner(playerid)	&& !(10 <= second <= 600)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_IDONEK_10_ES_600_MASODPERC"));

	PlayerPlaySound(player1, 1057);
	SetPVarInt(player1, "Muted", second);

	if(tmp[0] == '*')
	{
		SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__LENEMITOTTA__N", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(second));
	}
	else
	{
		SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__LENEMITOTTA__N", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1, FormatNumber(second));
		SendClientMessageToAllf(COLOR_BLUE, "MSG__INDOK__1", tmp);
	}

    PlayAudioStreamForPlayer(player1, !"http://mfrserver.net/SAMP/A_Pofadat_Befogod.mp3");
	AdminCommandLog("MUTE", playerid, player1, tmp);
	return 1;
}

CMD:unmute(playerid, params[], 1, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/unmute <Játékos ID/Név>");

 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
 	if(!GetPVarType(player1, "Muted")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JATEKOS_NINCS_NEMITVA"));

	PlayerPlaySound(player1, 1057);
	StopAudioStreamForPlayer(player1);
	DeletePVar(player1, "Muted");
	SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__LEVETTE_ROLAD_A_NEMI"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__LEVETTE_A_NEMITAST", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetPlayerColor(player1) >>> 8, pName(player1), player1);

	AdminCommandLog("UNMUTE", playerid, player1);
	return 1;
}

CMD:muted(playerid, params[], 0, 0)
{
//	if(GetPlayerScore(playerid) < 15000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AMIG_NINCS_15000_PONTOD_ADDIG"));

	datez = 0;
	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "Muted")) continue;

		datez ++;
	}

	if(datez)
	{
		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_NEMITOTT_JATEKOSOK_SZAMA_"), datez);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NINCS_SEMILYEN_JATEKOS_LENEMITVA"));
		return 1;
	}

	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "Muted")) continue;

		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___IDO__GETPLAYERCOLOR"), GetPlayerColor(i) >>> 8, pName(i), i, GetPVarInt(i, "Muted"));
	}
	return 1;
}

stock ShowDuelWeaponSelect(playerid)
{
    dline[0] = EOS;
	for(new i; i != sizeof(g_szWeaponDialog) - 4; i++)
	{
		if(IsEven(i)) strcat(dline, "{" #XCOLOR_BLUE2 "}");
		else strcat(dline, "{" #XCOLOR_BLUE "}");
		strcat(dline, g_szWeaponDialog[i]);
	    strcat(dline, "\n");
	}
    strcat(dline, "{" #XCOLOR_YELLOW "}Tovább >>");
    ShowPlayerDialogEx(playerid, WEAPONMENU, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Válassz fegyvereket", dline, "Ok", "Kilépés");
	return 1;
}

stock ShowDuelLocationSelect(playerid)
{
    dline[0] = EOS;
	for(new i; i != sizeof(g_fDuel); i++)
	{
		strunpack(name, g_fDuel[i][e_szName], sizeof(name));
		strcat(dline, name);
	    strcat(dline, "\n");
	}
    ShowPlayerDialogEx(playerid, DIALOG_DUEL_LOCATION, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Válassz helyszínt", dline, "Kihívás!", "Vissza");
	return 1;
}

CMD:watchduel(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, DIALOG_DUEL_LOCATION + 3, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Párbaj figyelés - {" #XCOLOR_BLUE3 "}Válassz helyszínt", "Fönt\nLent", "Oké", "Mégse");
	return 1;
}

CMD:duel(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | NOTELE | GRAV | WORLDEDIT>)
{
	new
	    rounds,
		health,
		armour;
	if(sscanf(params, "uD(1)D(100)D(0)", player1, rounds, health, armour)) return SendUsage(playerid, "/duel <Játékos ID/Név> <Menetek száma = 1> <Élet = 100> <Armour = 0>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, "ASD");
	if(playerid == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAGAD_ELLEN_NEM_MEHETSZ"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_HIVHATSZ_KI"));

	if(!(0 <= rounds <= 255)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_ADTAL_MEG"));
	if(!(0 <= health <= 100)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE"));
	if(!(0 <= armour <= 100)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ERTEKET_IRTAL_BE_1"));

    if(GetPVarInt(playerid, "InDuel") == 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_DUELBEN_VAGY"));
    if(GetPVarInt(player1, "InDuel") == 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_MAR_DUELBEN"));

	if(g_pDuelCaller[player1] != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZT_A_JATEKOST_VALAKI"));

	SetPVarInt(playerid, "InDuel", 1);
	SetPVarInt(playerid, "DuelRounds", rounds);
	SetPVarInt(playerid, "DuelHealth", health);
	SetPVarInt(playerid, "DuelArmour", armour);

	g_pDuelPlayer[playerid] = player1;
	g_pDuelCaller[player1] = playerid;

	ShowDuelWeaponSelect(playerid);
	return 1;
}

CMD:duelinfo(playerid, params[], 0, 0)
{
    player1 = g_pDuelCaller[playerid];
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_SENKI_SEM_HIVOTT_KI_PARBAJRA"));
    if(g_pDuelLocation{player1} == 0xFF) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KIHIVOD__MEG_NEM_VALAS"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

	strunpack(name, g_fDuel[g_pDuelLocation{player1}][e_szName], sizeof(name));
	format(dline, sizeof(dline), "Kihívó: \t\t{%06x}%s(%d)\n{" #XCOLOR_DEFAULT "}Helyszín: \t%s\n{00FF00}Menetek száma: \t%d\nÉlet: %d\nPáncél: %d\n\n{" #XCOLOR_ORANGE "}Fegyverek:", GetPlayerColor(player1) >>> 8, pName(player1), player1, name, GetPVarInt(player1, "DuelRounds"), GetPVarInt(player1, "DuelHealth"), GetPVarInt(player1, "DuelArmour"));

	for(new i; i != 13; i++)
	{
		if(g_pDuelWeapon[player1]{i} == 0xFF) continue;
		GetWeaponName(g_pDuelWeapon[player1]{i}, country, sizeof(country));
		format(dline, sizeof(dline), "%s\n\t {" #XCOLOR_SAMP "}%s (%d)", dline, country, g_pDuelWeapon[player1]{i});
	}
	ShowPlayerDialogEx(playerid, DIALOG_DUEL_LOCATION + 1, DIALOG_STYLE_MSGBOX, "Párbaj információ", dline, "Elfogad", "Elutasít");
	return 1;
}

CMD:akill(playerid, params[], 2, 0)
{
	if(sscanf(params, "uS(*)[" #STR_SIZE "]", player1, tmp)) return SendUsage(playerid, "/akill <Játékos ID/Név> <Indok>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_OLHETSZ_MEG"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	if(tmp[0] == '*')
	{
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__MEGOLTED__NEVU_JATEKOST"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	}
	else
	{
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__MEGOLTED__NEVU_JATEKOST_IND"), GetPlayerColor(player1) >>> 8, pName(player1), player1, tmp);
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__MEGOLT_TEGED_INDOK"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, tmp);

	}
	SetPlayerHealth(player1, -1);
    AdminCommandLog("AKILL", playerid, player1);
	return 1;
}

CMD:hideplayer(playerid, params[], 4, 0)
{
	new bool:hide;
	if(sscanf(params, "dd", player1, hide)) return SendUsage(playerid, "/akill <Játékos ID/Név> <bool:hide>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    TogglePlayerInServerQuery(player1, !hide);
    SendClientMessagef(playerid, COLOR_GREY, LANG(playerid, "MSG_HIDE_PLAYER___"), GetPlayerColor(player1) >>> 8, pName(player1), player1, hide);
    AdminCommandLog("HIDEPLAYER", playerid, player1);
	return 1;
}

CMD:playsound(playerid, params[], 0, 0)
{
	new
	    SoundID;
	if(sscanf(params, "dF(0.0)F(0.0)F(0.0)", SoundID, X, Y, Z)) return SendUsage(playerid, "/playsound <Hang ID> <X> <Y> <Z>");

	if(!X) GetPlayerPos(playerid, X, Y, Z);
	PlayerPlaySound(playerid, SoundID, X, Y, Z);

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_ZENE_LEJATSZVA_ID_"), SoundID);
	return 1;
}

CMD:weaps(playerid, params[], 0, 0)
{
	new
		slot,
		weap,
		ammo,
		Count,
		x;
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/weaps <Játékos ID/Név>");
 	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___FEGYVEREI_"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

	for(slot = 0; slot < 14; slot++)
	{
		GetPlayerWeaponData(player1, slot, weap, ammo);
		{
			if(!ammo && !weap) continue;
			Count++;
		}
    }

	if(Count < 1) return SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_ENNEK_A_JATEKOSNAK_NINCSENEK"));

	i_str[0] = EOS;
	if(Count >= 1)
	{
		for(slot = 0; slot < 14; slot++)
		{
			GetPlayerWeaponData(player1, slot, weap, ammo);

			if(!ammo && !weap) continue;

			GetWeaponName(weap, name, sizeof(name));
			if(ammo == 65535 || ammo == 1)
			{
				format(i_str, sizeof(i_str), "%s%s (1)", i_str, name);
			}
			else
			{
				format(i_str, sizeof(i_str), "%s%s (%d)",i_str, name, ammo);
			}

			if(++x >= 5)
			{
			    SendClientMessage(playerid, COLOR_BLUE, i_str);
			    x = 0;
				format(i_str, sizeof(i_str), "");
			}
			else format(i_str, sizeof(i_str), "%s,  ", i_str);
		}

		if(x <= 4 && x > 0)
		{
			i_str[strlen(i_str) -3] = '.';
		    SendClientMessage(playerid, COLOR_BLUE, i_str);
		}
    }
    return 1;
}

CMD:aka(playerid, params[], 0, 0)
{
	if(isnull(params))
	{
        player1 = playerid;
	}
	else
	{
		if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

        if(sscanf(params, "u", player1)) return SendUsage(playerid, "/aka <Játékos ID/Név>");
	}
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_BOT_EZT_CSAK"));
    AdminCommandLog("AKA", playerid, player1, ip);

    if(g_pOtherFlags[player1] & e_RAKSAMP)
    {
        new
            szIP[16];

        GetPVarString(player1, "FakeIP", szIP, sizeof(szIP));
        format(tmp, 128, "{%06x}A.K.A: %s(%d) -> IP: %s", GetPlayerColor(player1) >>> 8, pName(player1), player1, szIP);
		ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_LIST, tmp, pName(player1), "Ok");
		return 1;
    }
    else
    {
	    new
		    bool:bRet;
		GetPlayerIp(player1, ip, sizeof(ip));
		if(GetPVarInt(playerid, "Level") < 4)
		{
			if(PlayerInfo[player1][pRegID] == 3)
			{
	            bRet = true;
				//strcpy(ip, "192.168.1.1");
			}

			if(GetPVarType(player1, "FakeAdmin") || g_pOtherFlags[player1] & e_RAKSAMP)
			    bRet = true;
		}
		if(bRet)
		{
			format(tmp, 128, "{%06x}A.K.A: %s(%d) -> IP: %s", GetPlayerColor(player1) >>> 8, pName(player1), player1, ip);
			ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_LIST, tmp, pName(player1), "Ok");
			return 1;
		}
	}
	format(query, sizeof query, "SELECT `name`, `reg_id`, `time` FROM `connections` WHERE `ip` = '%s' GROUP BY `name` ORDER BY max(`id`)", ip);
	mysql_function_query(1, query, true, "THREAD_AkaDialog", "ddd", playerid, player1, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_AkaDialog(playerid, forplayer, queue);
public THREAD_AkaDialog(playerid, forplayer, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_AkaDialog);

	new
	    rows = cache_get_row_count();
	GetPlayerIp(forplayer, ip, sizeof(ip));
	if(!rows)
	{
		format(tmp, 128, "{%06x}A.K.A: %s(%d) -> IP: %s", GetPlayerColor(forplayer) >>> 8, pName(forplayer), forplayer, ip);
		ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_MSGBOX, tmp, "{" #XCOLOR_RED "}Üres", "Ok");
		return 1;
	}
	dline[0] = EOS;
	country[0] = EOS;
	
    format(dline, sizeof(dline), "RegID\tNév\tIdõpont\n");
	for(new i; i != rows; i++)
	{
	    cache_get_row(i, 0, name); //Név
	    cache_get_row_int(i, 1, datez); //RegID
	    cache_get_row(i, 2, country); //Név
	    
		format(i_str, 128, "{AAAAAA}%d.\t{AAAAAA}%s\t{AAAAAA}%s\n", datez, name, country);
		strcat(dline, i_str);
	}
	format(tmp, 128, "{%06x}A.K.A: %s(%d) -> IP: %s <%d>", GetPlayerColor(forplayer) >>> 8, pName(forplayer), forplayer, ip, rows);
	ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_TABLIST_HEADERS, tmp, dline, "Ok");
	return 1;
}

CMD:ipaka(playerid, params[], 1, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/ipaka <IP Cím>");

	format(query, sizeof query, "SELECT `name` FROM `connections` WHERE `ip` = '%s' GROUP BY `name` ORDER BY max(`id`)", params);
	mysql_function_query(1, query, true, "THREAD_IPAkaDialog", "ddsd", playerid, 0, params, g_pQueryQueue[playerid]);

    AdminCommandLog("IPAKA", playerid, -1, params);
	return 1;
}

CMD:saka(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/saka <Serial Number>");

	format(query, sizeof query, "SELECT `name`, `reg_id`  FROM `connections` WHERE `serial` = '%s' GROUP BY `name` ORDER BY max(`id`)", params);
	mysql_function_query(1, query, true, "THREAD_IPAkaDialog", "ddsd", playerid, 1, params, g_pQueryQueue[playerid]);

    AdminCommandLog("SAKA", playerid, -1, params);
	return 1;
}

CMD:psaka(playerid, params[], 0, 0)
{
	if(isnull(params))
	{
        player1 = playerid;
	}
	else
	{
		if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MODERATOR"));

        if(sscanf(params, "u", player1)) return SendUsage(playerid, "/psaka <Játékos ID/Név>");
	}
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_BOT_EZT_CSAK"));

	gpci(player1, i_str, sizeof(i_str));
	format(query, sizeof query, "SELECT `name`, `reg_id`, `time` FROM `connections` WHERE `serial` = '%s' GROUP BY `name` ORDER BY max(`id`)", i_str);
	mysql_function_query(1, query, true, "THREAD_IPAkaDialog", "ddsd", playerid, 1, params, g_pQueryQueue[playerid]);

    AdminCommandLog("PSAKA", playerid, player1, i_str);
	return 1;
}

forward THREAD_IPAkaDialog(playerid, type, ipadress[], queue);
public THREAD_IPAkaDialog(playerid, type, ipadress[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_AkaDialog);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		if(!type)
		{
			format(tmp, 128, "A.K.A: -> IP: {" #XCOLOR_YELLOW "}%s", ipadress);
            ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, tmp, "{" #XCOLOR_RED "}Üres", "Ok");
		}
		else
		{
            ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "A.K.A: -> Serial", "{" #XCOLOR_RED "}Üres", "Ok");
		}
		return 1;
	}
	dline[0] = EOS;
	country[0] = EOS;

    format(dline, sizeof(dline), "RegID\tNév\tIdõpont\n");
	for(new i; i != rows; i++)
	{
 		cache_get_row(i, 0, name); //Név
	    cache_get_row_int(i, 1, datez); //RegID
		cache_get_row(i, 2, country); //Név
		
   		format(i_str, 128, "%d.\t%s\t%s\n", datez, name, country);
		strcat(dline, i_str);
	}

    if(!type)
    {
		format(tmp, 128, "A.K.A: -> IP: {" #XCOLOR_YELLOW "}%s <%d>", ipadress, rows);
	}
	else
	{
		format(tmp, 128, "A.K.A: -> Serial: {" #XCOLOR_YELLOW "}<%d>", rows);
	}
	ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER + 50, DIALOG_STYLE_TABLIST_HEADERS, tmp, dline, "Ok");
	return 1;
}

CMD:vips(playerid, params[], 0, 0)
{
	new
		count,
		diff,
		asd,
		asd2,
		currtime = CurrentTimestamp();

	dline[0] = EOS;
	foreach(Player, i)
	{
		if(g_pVIP[i])
		{
			date(g_pVIP[i], day, month, year, hour, minute, second);

			diff = g_pVIP[i] - currtime;
			asd = floatround(diff / 24 / 3600); //Napok száma
			asd2 = floatround(diff / 3600); //Órák száma
			if(asd == 0) //Ha nincs egy teljes nap akkor órában kell kiírni
			{
			    format(i_str, sizeof(i_str), "{" #XCOLOR_DEFAULT "}%d. {%06x}%s(%d){" #XCOLOR_DEFAULT "} - {" #XCOLOR_GREEN "}még {" #XCOLOR_KACSAFOS "}%d {" #XCOLOR_GREEN "}óra {" #XCOLOR_DEFAULT "}- {" #XCOLOR_BLUE "}%02d.%02d.%02d %02d:%02d:%02d\n", ++count, GetPlayerColor(i) >>> 8, pName(i), i, asd2, year, month, day, hour, minute, second);
			}
			else
			{
			    format(i_str, sizeof(i_str), "{" #XCOLOR_DEFAULT "}%d. {%06x}%s(%d){" #XCOLOR_DEFAULT "} - {" #XCOLOR_GREEN "}még {" #XCOLOR_KACSAFOS "}%d {" #XCOLOR_GREEN "}nap {" #XCOLOR_DEFAULT "}- {" #XCOLOR_BLUE "}%02d.%02d.%02d %02d:%02d:%02d\n", ++count, GetPlayerColor(i) >>> 8, pName(i), i, asd, year, month, day, hour, minute, second);
			}
			
			strcat(dline, i_str);
		}
	}

	if(!count)
	   strcat(dline, "A szerveren nincs egy VIP játékos sem.");

	format(i_str, 64, "{" #XCOLOR_NORTI "}V.I.P. játékosok száma %d", count);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Bezárás");
	return 1;
}

CMD:admins(playerid, params[], 0, 0)
{
	new
	    pLevel = GetPVarInt(playerid, "Level"),
	    bool:NotRCON = !(IsPlayerAdmin(playerid));

    /*if(pLevel < 1 && NotRCON && !g_pVIP[playerid])
	{
		SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_VANE_ADMIN_VAGY_NINCSE_KITUDJA"));
		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_HA_LATNI_AKAROD_OKET_AKKOR"));
		return 0;
	}*/

  	SendClientMessage(playerid, COLOR_GREEN, " ");
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG______________ONLINE_ADMINOK"), AdminCount(pLevel > 3));

	new
	    CurrLevel,
	    bool:NoAdmins;

	foreach(new i: Player)
	{
        CurrLevel = GetPVarInt(i, "Level");

 		if(IsPlayerAdmin(i))
		{
		    format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_RCON"));
			datez = COLOR_RED;
		}
		else
		{
	        switch(CurrLevel)
			{
			    case 1: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_1")), datez = COLOR_BLUE;
			    case 2: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_2")), datez = COLOR_GREEN;
			    case 3: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_3")), datez = COLOR_YELLOW;
			    case 4: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_4")), datez = COLOR_LIGHTRED;
				default: continue;
			}
		}

        if(GetPVarType(i, "AFKTime"))
		{
		    format(tmp, 64, LANG(playerid, "MSG_NINCS_GEPNEL_1"),GetPVarInt(i, "AFKTime"));
		}
		else
		{
	 		format(tmp, 64, LANG(playerid, "MSG_NINCS_GEPNEL_9"));
		}

		if((g_PlayerData[i] & e_REJTETT) && pLevel != 4 && NotRCON) continue;

		SendClientMessagef(playerid, datez, LANG(playerid, "MSG_SZINT______"), CurrLevel, pName(i), i, i_str, tmp);
		NoAdmins = true;
	}
	if(!NoAdmins)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELERHETO_ADMIN"));
		SendClientMessage(playerid, COLOR_BLUE, " _______________________________________");
    }
	return 1;
}

CMD:duels(playerid, params[], 0, 0)
{
	for(new i; i != (MAX_PLAYERS / 2); i++)
	{
		if(Bit_Get(g_bDuelActive, i))
		{
			SendClientMessagef(playerid, -1, "%d - %d, %d", i, g_DuelPlayer[i][0], g_DuelPlayer[i][1]);
		}
	}
	return 1;
}

CMD:npcs(playerid, params[], 0, 0)
{
    if(!IsFOOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
	dline[0] = EOS;
	datez = 0;
	foreach(Bot, i)
	{
	    if(IsPlayerNPC(i))
		{
			format(i_str, sizeof(i_str), "{" #XCOLOR_WHITE "}%d. {%06x}%s(%d)\n", ++datez, GetPlayerColor(i) >>> 8, pName(i), i);
			strcat(dline, i_str);
		}
	}

	if(isnull(dline))
	    strcat(dline, "A szerveren nincs egy NPC sem.");

	format(i_str, 64, "NPC-k száma: %d", datez);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Bezárás");
	return 1;
}

CMD:bots(playerid, params[], 0, 0)
{
    if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
    dline[0] = EOS;
	if(IsFOOwner(playerid))
	{
		datez = 0;
		foreach(Player, i)
		{
			if(g_pOtherFlags[i] & e_RAKSAMP)
			{
				GetPlayerIp(i, ip, sizeof(ip));
				format(i_str, sizeof(i_str), "{" #XCOLOR_WHITE "}%d. {%06x}%s(%d) - %s\n", ++datez, GetPlayerColor(i) >>> 8, pName(i), i, ip);
				strcat(dline, i_str);
			}
		}
		if(isnull(dline))
		    strcat(dline, "A szerveren nincs egy bot sem.");
	}
	else
	{
	    datez = 0;
	    strcat(dline, "A szerveren nincs egy bot sem.");
	}
	format(i_str, 64, "Botok száma: %d", datez);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Bezárás");
	return 1;
}

CMD:setvip(playerid, params[], 0, 0)
{
    if(!IsFOOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
	if(sscanf(params, "us[128]", player1, i_str)) return SendUsage(playerid, "/setvip <Játékos ID/Név> <Dátum/Napok száma>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKNAK_NEM_ADHATSZ_VIPT"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		curr = CurrentTimestamp(),
		napok;
		

		
	if(IsNumeric(i_str)) //Ha napot ír be
	{
		napok = strval(i_str);
		if(napok < 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_VAGY_NEGATIV_SZAMOT_ANYADBA"));
		if(!IsFOOwner(playerid)	&& napok > 100) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_VAGY_NEGATIV_SZAMOT_ANYADBA"));
		if(napok != 0)
		{
			datez = curr + (3600 * 24 * napok);
		}
		else
		{
			datez = 0;
		}
		if(napok) SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__VIP_RANGOT_ADOTT_NEK"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, napok);
	}
	else //Ha dátum
	{
		if(sscanf(i_str, "p<.>dddddd", year, month, day, hour, minute, second)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HULYE_DATUM_FORMAT_ADTAL_MEG"));

		datez = mktime(hour, minute, second, day, month, year);
		napok = (datez - curr) / 3600 / 24;

		if(datez <= curr) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_HULYE_FASZ_KISEBB_IDOT_NEM"));
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__VIP_RANGOT_ADOTT_NEK_1"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, year, month, day, hour, minute, second, napok);
	}
	if(!napok) //VIP törlése
	{
	    if(!g_pVIP[player1]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_NEM_VIP"));
	    SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__ELVETTE_A_VIP_RANGOD"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	    return 1;
	}
	
    SetPlayerVIP(player1, datez);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__VIP_RANGJAT_ALLITOTTAD__NEV"), GetPlayerColor(player1) >>> 8, pName(player1), player1, year, month, day, hour, minute, second, napok);

	valstr(name, napok);
	AdminCommandLog("SETVIP", playerid, player1, name);
	return 1;
}

forward SetPlayerVIP(playerid, time);
public SetPlayerVIP(playerid, time)
{
	g_pVIP[playerid] = time;
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vip` = %d WHERE `reg_id` = %d", g_pVIP[playerid], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

forward GivePlayerVIP(playerid, time);
public GivePlayerVIP(playerid, time)
{
	if(!g_pVIP[playerid]) //Ez akkor fut le ha elött nem volt vip
	{
		g_pVIP[playerid] = CurrentTimestamp() + time;
	}
	else
	{
		if(time < 0)
		{
			if((g_pVIP[playerid] - time) <= CurrentTimestamp())
			{
	            g_pVIP[playerid] = 0;
			}
			else
			{
                g_pVIP[playerid] = g_pVIP[playerid] + time;
			}
		}
		else
		{
			g_pVIP[playerid] = g_pVIP[playerid] + time;
		}
	}
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vip` = %d WHERE `reg_id` = %d", g_pVIP[playerid], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:setlevel(playerid, params[], 4, 0)
{
	new
		alevel,
		bool:allando;
    if(sscanf(params, "udD(1)", player1, alevel, bool:allando)) return SendUsage(playerid, "/setlevel <Játékos ID/Név> <Szint> <bool:Állandó>");
    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKAT_NEM_FOKOZHATSZ"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(g_PlayerData[player1] & e_LOGGED_IN)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_BEJELENTKEZVE"));

	if(!(0 <= alevel <= 4)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SZINT_0__4"));
	if(alevel == GetPVarInt(player1, "Level")) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOSNAK_JELENLEG"), alevel);

   	getdate(year, month, day);
	gettime(hour, minute, second);

	switch(alevel)
	{
	    case 0: tmp = "{" #XCOLOR_YELLOW "}Játékos {" #XCOLOR_WHITE "}(level 0)";
	   	case 1: tmp = "{" #XCOLOR_BLUE "}Moderátor {" #XCOLOR_WHITE "}(level 1)";
		case 2: tmp = "{" #XCOLOR_GREEN "}Admin {" #XCOLOR_WHITE "}(level 2)";
		case 3: tmp = "{" #XCOLOR_YELLOW "}Fõadmin {" #XCOLOR_WHITE "}(level 3)";
		case 4: tmp = "{" #XCOLOR_RED "}Tulajdonos {" #XCOLOR_WHITE "}(level 4)";
	}

	if(alevel > GetPVarInt(player1, "Level"))
	{
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__FOKOZOTT_TEGED_SZIN"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, tmp);
        GameTextForPlayer(player1, LANG(player1, "MSG_GAMETEXT_LEVEL_UP"), 2000, 3);
	}
	else
	{
		SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__LEFOKOZOTT_TEGED_SZ"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, tmp);
        GameTextForPlayer(player1, LANG(player1, "MSG_GAMETEXT_LEVEL_DOWN"), 2000, 3);
	}

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__ADMIN_SZINTJET_ALLITOTTAD"), GetPlayerColor(player1) >>> 8, pName(player1), player1, allando, tmp);

	if(allando)
	{
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `level` = '%d' WHERE `reg_id` = %d", alevel, PlayerInfo[player1][pRegID]);
		mysql_function_query(1, query, false, "", "");

		AdminCommandLog("SETLEVEL", playerid, player1, tmp);
	}
	else
	{
		AdminCommandLog("SETTEMPLEVEL", playerid, player1, tmp);
	}

	switch(alevel)
	{
	    case 0: tmp = "Játékos";
	   	case 1: tmp = "Moderátor";
		case 2: tmp = "Admin";
		case 3: tmp = "Fõadmin";
		case 4: tmp = "Tulajdonos";
	}
	if(alevel == 0)
	{
		g_PlayerFlags[player1] ^= e_READCMDS;
		g_PlayerFlags[player1] ^= e_SEEPMS;
		g_PlayerFlags[player1] ^= e_CON_MSG;
		g_PlayerFlags[player1] ^= e_SHOW_HIDED_CON_MSG;
	}
	SetPVarInt(player1, "Level", alevel);
	PlayerPlaySound(player1, 1057);
	return 1;
}

CMD:uconfig(playerid, params[], 4, 0)
{
	SendRconCommand(!"reloadbans");
	mysql_function_query(1, "SELECT * FROM `config` WHERE `id` = 1", true, "THREAD_Settings", "");
    mysql_function_query(1, "SELECT * FROM `szintek`", true, "THREAD_LoadSzint", "d", 0);
	mysql_function_query(1, "SELECT * FROM `bans_serial`", true, "THREAD_SerialbansLoad", "");
    mysql_function_query(1, "SELECT * FROM `teleports`", true, "THREAD_LoadTeleports", "");
    mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
    
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG__SZERVER_BEALLITASOK_UJRATOLTVE"));
	AdminCommandLog("UCONFIG", playerid, -1);
	return 1;
}

CMD:reloadbans(playerid, params[], 4, 0)
{
	SendRconCommand(!"reloadbans");
	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_BANLISTA_FRISSSITVE"));

	AdminCommandLog("RELOADBANS", playerid, -1);
	return 1;
}

CMD:reloadlang(playerid, params[], 4, 0)
{
	LoadLanguages();
	return 1;
}
//==========================[ Spectate Commands ]===============================

CMD:spec(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | TAXI>)
//CMD:spec(playerid, params[], 0, 0)
{
    if(sscanf(params, "u", player1)) return SendUsage(playerid, "/spec <Játékos ID/Név>");
    if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_SAJAT_MAGAD_NEM_FIGYELHETED"));
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	// Ha nem admin
	new bool:allow = false;
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		if(g_pVIP[playerid])
		{
            if(GetPVarInt(player1, "Level") < 1 && !IsPlayerAdmin(player1))
            {
				allow = true;
			}
			else
			{
				allow = !!(g_PlayerFlags[player1] & e_ALLOW_SPEC);
			}
		}
		else
		{
            allow = !!(g_PlayerFlags[player1] & e_ALLOW_SPEC);
		}
	}
	else
	{
		allow = true;
	}
	if(!allow) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_NEM_FIGYE"), GetPlayerColor(player1), pName(player1), player1);
    if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_JATEKOS_MAR_FIGYEL"));
	foreach(Player, i)
	{
		if(spectatorid[i] == playerid)
		{
            SendClientMessagef(i, -1, LANG(i, "MSG_SPEC__EPPEN_ELKEZDETT_FIGYELN"), GetPlayerColor(i), pName(i), i);
			return 1;
		}
	}

	if(MINIGAMES_LEAVE & g_pGamesData[playerid])
	{
		cmd_leave(playerid, "");
	}
	else if(g_pGamesData[playerid] & e_FLAG_OWNER)
	{
		cmd_dropflag(playerid, "");
	}
	else if(g_pGamesData[playerid] & e_BCAR_OWNER)
	{
		g_BonusCarOwner = INVALID_PLAYER_ID;
		g_pGamesData[playerid] &= ~e_BCAR_OWNER;
		//g_BonusCarCount = 0;
		//g_BonusCarRespawn = 0;
		RemovePlayerFromVehicleEx(playerid);
	}

	if(IsSpecing[playerid] == 1)
	{
    	TogglePlayerSpectating(playerid, 0);
    	spectatorid[playerid] = player1;
		SetTimerEx("SpecPlayer", 500, false, "dd", playerid, player1);
		return 1;
	}

    SpecPlayer(playerid, player1);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GH_WNUM_4_B_WNUM_6_G"));
    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__ELKEZDTED_FIGYELNI__NEVU_JA"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

    IsSpecing[playerid] = 1;
    spectatorid[playerid] = player1;
	g_pGamesData[playerid] |= e_SPEC;

	// Ezekre úgysincs szükség
	PlayerTextDrawHide(playerid, TD_pHealth[playerid]);
	PlayerTextDrawHide(playerid, TD_pArmour[playerid]);
    return 1;
}

CMD:specoff(playerid, params[], 0, 0)
{
    if(IsSpecing[playerid] == 0) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_FIGYELSZ_SENKIT"));

    StopSpec(playerid);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_MEGFIGYELES_KIKAPCSOLVA"));
    return 1;
}

forward SpecPlayer(playerid, id);
public SpecPlayer(playerid, id)
{
	new
		state_ = GetPlayerState(id),
		interior = GetPlayerInterior(id),
		world = GetPlayerVirtualWorld(id);

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		TogglePlayerSpectating(playerid, true);// Now before we use any of the 3 functions listed above, we need to use this one. It turns the spectating mode on.

	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, world);

    if(state_ != PLAYER_STATE_ONFOOT)
    {
        PlayerSpectateDynamicVehicle(playerid, GetPlayerDynamicVehicleID(id));
    }
    else
    {
        PlayerSpectatePlayer(playerid, id);
    }

    if(!(g_pTDFlags[playerid] & e_NOTD_SPEC))
	{
		TextDrawShowForPlayer(playerid, TD_SpecBox);
		PlayerTextDrawShow(playerid, TD_Spec[playerid]);
		UpdateSpecTD(playerid, id);
	}
    return 1;
}

stock StopSpec(playerid)
{
    IsSpecing[playerid] = 0;
    g_pGamesData[playerid] &= ~e_SPEC;
    spectatorid[playerid] = INVALID_PLAYER_ID;
	TogglePlayerSpectating(playerid, 0);

	TextDrawHideForPlayer(playerid, TD_SpecBox);
	PlayerTextDrawHide(playerid, TD_Spec[playerid]);

	ShowDefaultTextdraws(playerid);
}

#pragma warning disable 		213
stock UpdateSpecTD(playerid, id)
{
	new vehicleid;
	new Float:fHealth, Float:fArmour;
	new Float:qw, Float:qx, Ffoat:qy, Float:qz;

	GetPlayerHealth(id, fHealth);
	GetPlayerArmour(id, fArmour);

	vehicleid = GetPlayerDynamicVehicleID(id);
	if(vehicleid)
	{
	    GetDynamicVehiclePos(vehicleid, X, Y, Z);
  		GetDynamicVehicleVelocity(vehicleid, V[0], V[1], V[2]);
	    GetDynamicVehicleRotationQuat(vehicleid, qw, qx, qy, qz);
	}
	else
	{
	    GetPlayerPos(id, X, Y, Z);
		GetPlayerVelocity(id, V[0], V[1], V[2]);
#if defined YSF
	    GetPlayerRotationQuat(id, qw, qx, qy, qz);
#endif
	}
#if defined YSF
	format(tmp, sizeof(tmp), "Nev: %s(%d)~n~Ping: %d, FPS: %d~n~Health: %.0f - %.0f~n~Pos: %.2f, %.2f, %.2f~n~Quat: %.2f, %.2f, %.2f, %.2f~n~Velocity: %.0f~n~VehicleID: %d - Trailer: %d~n~Siren: %d, Gear: %d~n~AnimationID: %d~n~Cameramode: %d~n~Weaponstate: %d", pName(id), id, GetPlayerPing(id), g_pFPS[id], fHealth, fArmour, X, Y, Z, qw, qx, qy, qz, CalculateVelocity(V[0], V[1], V[2]), vehicleid, GetDynamicVehicleTrailer(vehicleid), GetPlayerSirenState(id), GetPlayerLandingGearState(id), GetPlayerAnimationIndex(id), GetPlayerCameraMode(id), GetPlayerWeaponState(id));
	PlayerTextDrawSetString(playerid, TD_Spec[playerid], tmp);
#endif
}
#pragma warning enable 		213

//==========================[ CHAT COMMANDS ]===================================
CMD:cc(playerid, params[], 1, 0)
{
	new
	    Lines;
	if(sscanf(params, "D(100)", Lines)) return SendUsage(playerid, "/cc {" #XCOLOR_YELLOW "}<Sorok száma>");
	if(!(10 <= Lines <= 100)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ__ROSSZ_SZAM_10__100"), Lines);

	while(Lines--)
 	{
		SendClientMessageToAll_(COLOR_GREEN, "\n");
 	}

	valstr(name, Lines);
	AdminCommandLog("CC", playerid, -1, name);
	return 1;
}

//==================[ Invisible Commands ]======================================
CMD:invis(playerid, params[], 2, 0)
{
    g_PlayerData[playerid] ^= e_INVIS;
	if(g_PlayerData[playerid] & e_INVIS)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_LATHATATLAN_MOD_BEKAPCSOLVA"));
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_LATHATATLAN_MOD_KIKAPCSOLVA"));
	}

	AdminCommandLog("INVIS", playerid, -1);
	return 1;
}

//===================[ Fake ]===================================================
CMD:fakedeath(playerid, params[], 2, 0)
{
    new
		killer,
		deather,
		weapon;
    if(sscanf(params, "uud", killer, deather, weapon)) return SendUsage(playerid, "/fakedeath <Gyilkos> <Áldozat> <Fegyver>");
	if(!IsValidWeapon(weapon)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_FEGYVER_ID_1"));

	if(killer == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_GYILKOS_NINCS_CSATLAKOZVA"));
	if(deather == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ALDOZAT_NINCS_CSATLAKOZVA"));

	SendDeathMessage(killer, deather, weapon);
	ShowWelcome(playerid, LANG(playerid, "MSG_HALALUZENET_ELKULDVE"));

	GetWeaponName(weapon, country, sizeof(country));
	format(i_str, sizeof(i_str), "%s -> %s ( %s [%d] )", pName(killer), pName(deather), country, weapon);
    AdminCommandLog("FAKEDEATH", playerid, -1, i_str);
	return 1;
}

CMD:fakechat(playerid, params[], 4, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/fakechat <Játékos ID/Név> <Hamis Szöveg>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	new
	    len = strlen(i_str);
	if(len > 87)
	{
		new
			szString[128 + 1],
			szString2[128 + 1],
			pChatColor = GetPVarInt(player1, "ChatColor");

		strcat(szString, i_str, sizeof(szString));
	    strmid(szString2, szString, 87, len); // Belerakjuk a string2-be a végit
		strdel(szString, 87, len);

		if(GetPVarType(player1, "IDColor"))
		{
			SendClientMessageToAllf_(GetPlayerColor(player1), "%s{%06x}(%d): {%06x}%s", pName(player1), GetPVarInt(player1, "IDColor") >>> 8, player1, pChatColor >>> 8, ColouredText(szString));
		}
		else
		{
			SendClientMessageToAllf_(GetPlayerColor(player1), "%s(%d): {%06x}%s", pName(player1), player1, pChatColor >>> 8, ColouredText(szString));
		}
		SendClientMessageToAll_(pChatColor, szString2);
	}
	else
	{
		if(GetPVarType(player1, "IDColor"))
		{
			SendClientMessageToAllf_(GetPlayerColor(player1), "%s{%06x}(%d): {%06x}%s", pName(player1), GetPVarInt(player1, "IDColor") >>> 8, player1, GetPVarInt(player1, "ChatColor") >>> 8, ColouredText(i_str));
		}
		else
		{
			SendClientMessageToAllf_(GetPlayerColor(player1), "%s(%d): {%06x}%s", pName(player1), player1, GetPVarInt(player1, "ChatColor") >>> 8, ColouredText(i_str));
		}
	}
	AdminCommandLog("FAKECHAT", playerid, player1, i_str);
	return 1;
}

CMD:fakecmd(playerid, params[], 4, 0)
{
    if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/fakecmd <Játékos ID/Név> <Hamis Parancs>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(AdmintNotAdminAndYou(playerid, player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AWARN"));

	ShowWelcome(playerid, LANG(playerid, "MSG_PARANCS_ELKULDVE"));
	AdminCommandLog("FAKECMD", playerid, player1, i_str);

	CallLocalFunction("OnPlayerCommandText", "is", player1, i_str);
    return 1;
}
//----------------------------------------------------------------------------//
// 		             	/all Commands                                         //
//----------------------------------------------------------------------------//
/* BUZI DAVE!!!
CMD:getall(playerid, params[], 4, 0)
{
	new
	    pInt = GetPlayerInterior(playerid),
	    pWorld = GetPlayerVirtualWorld(playerid);

	GetPlayerPos(playerid, X, Y, Z);
   	foreach(new i: Player)
	{
		if(i == playerid) continue;

		V[0] = float(i / 4) + 1.0;
		PlayerTele(i, X + V[0], Y + V[0], Z, pInt, GetAngleToPoint(X, Y, (X + V[0]), (Y + V[0])), pWorld);
	}
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__MAGAHOZ_TELEPORTALT_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

    AdminCommandLog("GETALL", playerid, -1);
	return 1;
}

CMD:kickall(playerid, params[], 4, 0)
{
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__KIRUGOTT_MINDEN_JATE", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
   	for(new i; i != MAX_PLAYERS; i++) // itt a foreach nem mûködik!
	{
		if(IsPlayerConnected(i))
		{
			if(GetPVarInt(i, "Level") == 4) continue;
			PlayerPlaySound(i, 1057);
			Kick(i);
		}
	}

	AdminCommandLog("KICKALL", playerid, -1);
	return 1;
}
*/

CMD:saveplayers(playerid, params[], 4, 0)
{
	if(gSavePlayerRuns) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_EPPEN__MENTI"), GetPlayerColor(gSavePlayerPlayerID) >>> 8, pName(gSavePlayerPlayerID), gSavePlayerPlayerID, gSavePlayerRuns, gSavePlayerCount);

    gSavePlayerCount = 0;
    gSavePlayerRuns = 0;
    gSavePlayerTick = GetTickCount();
    gSavePlayerPlayerID = playerid;

	// Fegyver statisztika frissítése
    UpdateWeaponShots();
	foreach(new i: Player)
	{
		if(!SavePlayer(i, false, true)) continue;
        gSavePlayerCount ++;
	}

    AdminCommandLog("SAVEPLAYERS", playerid, -1);
	return 1;
}

forward THREAD_SavePlayers();
public THREAD_SavePlayers()
{
 	gSavePlayerRuns++;
 	if(gSavePlayerRuns >= gSavePlayerCount)
 	{
		new
		    iTick = GetTickCount() - gSavePlayerTick;
		SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__ELMENTETTE_MINDEN_JA", GetPlayerColor(gSavePlayerPlayerID) >>> 8, pName(gSavePlayerPlayerID), gSavePlayerPlayerID, (float(iTick) / 1000));
        gSavePlayerRuns = 0;
	}
	return 1;
}

//-------------==== Set All Commands ====-------------//
CMD:weather(playerid, params[], 3, 0)
{
    new
		weather;
	if(sscanf(params, "i", weather)) return SendUsage(playerid, "/weather <Idõjárás ID>");
	if(!(0 <= weather <= 50)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDOJARAS_ID"));
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_RULE);
    #endif
   */

    foreach(new i: Player)
	{
	    if(g_pDeathMatchID[i] != -1 && g_DM_Weather[g_pDeathMatchID[playerid]] != -1) continue;
		PlayerPlaySound(i, 1057);
		SetPlayerWeather(i, weather);
	}
	//SetWeather(weather);
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__ATALLITOTTA_AZ_IDOJA", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, weather);
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_READONLY);
	#endif
*/
	valstr(name, weather);
    AdminCommandLog("SETALLWEATHER", playerid, -1, name);
	return 1;
}
CMD:setweather(playerid, params[], 3, 0)
{
	return cmd_weather(playerid, params);
}

CMD:time(playerid, params[], 3, 0)
{
	if(sscanf(params, "dD(0)", hour, minute)) return SendUsage(playerid, "/time <Óra> {" #XCOLOR_YELLOW"}<Perc>");
	if(!(0 <= hour <= 24)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDOT_ADTAL_MEG"));
	if(!(0 <= minute <= 60)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_IDOT_ADTAL_MEG"));

	foreach(new i: Player)
	{
	    if(g_pDeathMatchID[i] != -1 && g_DM_Time[g_pDeathMatchID[playerid]] != -1) continue;

		PlayerPlaySound(i, 1057);
		SetPlayerTime(i, hour, minute);
	}
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__ATALLITOTTA_AZ_IDOT", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, hour, minute);

	format(name, sizeof(name), "%02d:%02d", hour, minute);
    AdminCommandLog("SETALLTIME", playerid, -1, name);
	return 1;
}
CMD:settime(playerid, params[], 3, 0)
{
	return cmd_time(playerid, params);
}

CMD:giveallweapon(playerid, params[], 3, 0)
{
    new
		ammo,
		weaponid;

    if(sscanf(params, "s[" #STR_SIZE "]D(500)", i_str, ammo)) return SendUsage(playerid, "/giveallweapon <Fegyver ID/Név> ( <Lõszer> )");
	if(!IsNumeric(i_str))
	{
		weaponid = GetWeaponIDFromName(i_str);
	}
	else
	{
	    weaponid = strval(i_str);
	}
    if(weaponid == 38 || weaponid == 35 || weaponid == 36)
	{
	    if(!IsOwner(playerid) && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
	}
	if(weaponid == 6)  return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_")); // Anyádot
  	if(!IsValidWeapon(weaponid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSZ_FEGYVER_ID"));

	foreach(new i: Player)
	{
        if((e_IN_FALLOUT | e_IN_DM | e_IN_DUEL | e_RABOL | e_KOCSIT_LOP | e_IN_GANGWAR | e_IN_CTC | e_FLAG_OWNER | e_BCAR_OWNER) & g_pGamesData[i]) continue;
		PlayerPlaySound(i, 1057);
		GivePlayerWeapon(i, weaponid, ammo);
	}
	GetWeaponName(weaponid, i_str, 32);
	SendClientMessageToAllf(COLOR_BLUE, "MSG__ADMIN__ADOTT_MINDEN_JATEKOS", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str, weaponid, ammo);

    AdminCommandLog("GIVEALLWEAPON", playerid, -1, i_str);
	return 1;
}

//----------------------===== Place & Skin Saving =====-------------------------
stock SavePlayerPosition(playerid, slot)
{
	new
	    pHQ = GetPVarInt(playerid, "HQ");
	/*if(IsPlayerInDynamicArea(playerid, gGroveZone) && pHQ != 1)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD"));

	else*/ if(IsPlayerInDynamicArea(playerid, gSevileZone) && pHQ != 2)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_1"));

	else if(IsPlayerInDynamicArea(playerid, gLMZone) && pHQ != 3)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_2"));

	if(IsPlayerInDynamicArea(playerid, gCsikZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_RHITT_NEM_MENTHETED_EL_A_POZICIO"));
	if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));

	GetPlayerPos(playerid, X, Y, Z);
	if(GetPlayerVirtualWorld(playerid) == 0 && (GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 70.0 || GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 70.0))
	{
		InfoTD_MSG(playerid, 1000, LANG(playerid, "MSG_RHTUL_KOZEL_VAGY_A_YHBONUSZA"));
		return 1;
	}

    if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		GetDynamicVehiclePos(vID, X, Y, Z);
		GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	    GetDynamicVehicleZAngle(vID, Angle);
	}
    else
    {
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerVelocity(vID, V[0], V[1], V[2]);
		GetPlayerFacingAngle(playerid, Angle);
   	}

	new
	    pInterior = GetPlayerInterior(playerid),
	    pWorld = GetPlayerVirtualWorld(playerid);

	g_pSavedPosition[playerid][slot][0] = X;
	g_pSavedPosition[playerid][slot][1] = Y;
	g_pSavedPosition[playerid][slot][2] = Z;
	g_pSavedPosition[playerid][slot][3] = Angle;

	g_pSavedPositionInt[playerid][slot] = pInterior;
	g_pSavedPositionWorld[playerid][slot] = pWorld;

	g_pSavedPositionVel[playerid][slot][0] = V[0];
	g_pSavedPositionVel[playerid][slot][1] = V[1];
	g_pSavedPositionVel[playerid][slot][2] = V[2];

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHPOZICIO_LEMENTVE_AZ_BH"), slot, slot);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `pos_%d` = '%.4f,%.4f,%.4f,%.4f,%d,%d,%.4f,%.4f,%.4f' WHERE `reg_id` = %d", slot, X, Y, Z, Angle, pInterior, pWorld, V[0], V[1], V[2], PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
    return 1;
}

stock LoadPlayerPosition(playerid, slot, isvel, resetcamera)
{
	X = g_pSavedPosition[playerid][slot][0];
	Y = g_pSavedPosition[playerid][slot][1];
	Z = g_pSavedPosition[playerid][slot][2];

    if(X == 0.0 && Y == 0.0 && Z == 0.0)
	{
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_MENTETTEL_EL_KOORDINATAT"), slot);
		return 1;
	}
	if(GetPVarType(playerid, "PlayerWeather"))
	{
		SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
	}

	if(isvel == -1) isvel = !!(g_PlayerFlags[playerid] & e_SPVEL);

	if(GetPlayerVirtualWorld(playerid) == 0 && (GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 70.0 || GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 70.0))
	{
		InfoTD_MSG(playerid, 1000, LANG(playerid, "MSG_RHMENTETT_POZICIOT_TUL_KOZEL"));
		return 1;
	}

	if((goldpot[gPickup]) && GetDistance3D(X, Y, Z, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < IN_RANGE_DISTANCE)
	{
		InfoTD_MSG(playerid, 1000, LANG(playerid, "MSG_RHMENTETT_POZICIOT_TUL_KOZEL_1"));
		return 1;
	}
    if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
    NormalTele(playerid, X, Y, Z, g_pSavedPositionInt[playerid][slot], g_pSavedPosition[playerid][slot][3], g_pSavedPositionWorld[playerid][slot], resetcamera);

	if(isvel == 1)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), g_pSavedPositionVel[playerid][slot][0], g_pSavedPositionVel[playerid][slot][1], g_pSavedPositionVel[playerid][slot][2]);
		}
		else
		{
			SetPlayerVelocity(playerid, g_pSavedPositionVel[playerid][slot][0], g_pSavedPositionVel[playerid][slot][1], g_pSavedPositionVel[playerid][slot][2]);
		}
	}

	MoneyCheck(playerid, PRICE_GOTO);
	if(IsPlayerInHouseZone(playerid) != -1) CarDeleter(playerid);
	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GODATELEPORTALTAL_HAZ__SLOT"), slot);
	return 1;
}

CMD:l(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
	    slot,
	    IsVel,
	    bResetCamera;
	if(sscanf(params, "D(0)D(-1)D(1)", slot, IsVel, bResetCamera)) return SendUsage(playerid, "/l {" #XCOLOR_YELLOW "}<Slot = 0> <Sebességet is állítsa-e = 1> <CameraBehindPlayer = 1>");
	if(!(0 <= slot < MAX_PLAYER_POS)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SLOT_0__"), MAX_PLAYER_POS - 1);

    LoadPlayerPosition(playerid, slot, IsVel, bResetCamera);
	return 1;
}

CMD:s(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
	    slot;
	if(sscanf(params, "D(0)", slot)) return SendUsage(playerid, "/s {" #XCOLOR_YELLOW "}<Slot = 0>");
	if(!(0 <= slot < MAX_PLAYER_POS)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SLOT_0__"), MAX_PLAYER_POS - 1);


	SavePlayerPosition(playerid, slot);
	return 1;
}

CMD:sp(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{

	if(GetPVarInt(playerid,"Level") == 0)
	{
	    if(!g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));
		if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0)) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));
	}
	
	if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RHAZBAN_NEM_MENTHETED_LE_A"));
    if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));

	new
	    slot,
		Vel;
	if(!sscanf(params, "dD(1)D(0)", slot, datez, Vel))
	{
		i_str = "N/A";
	}
	else if(!sscanf(params, "ds[128]", slot, i_str))
	{
        datez = 1;
        Vel = 0;

        if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_HOSSZU_A_NEV_MAXIMUM"));
	}
	else
	{
		return SendUsage(playerid, "/sp <Slot> {" #XCOLOR_YELLOW "}<Jármûvet> <Sebesség>");
	}

	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition", "ddddsd", playerid, slot, datez, Vel, i_str, g_pQueryQueue[playerid]);

    format(country, sizeof(country),"%d | %s",slot,i_str);
	AdminCommandLog("SP", playerid, -1, country);
	return 1;
}

forward THREAD_SavePosition(playerid, slot, iscar, isvel, slotname[], queue);
public THREAD_SavePosition(playerid, slot, iscar, isvel, slotname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition);

	cache_get_row_int(0, 0, vID);
	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_MAR_HASZNALATBAN"));
		return 1;
	}

	if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		GetDynamicVehiclePos(vID, X, Y, Z);
		GetDynamicVehicleZAngle(vID, Angle);
		GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
	}
	else
	{
		GetPlayerPos(playerid, X, Y, Z);
        GetPlayerFacingAngle(playerid, Angle);
		GetPlayerVelocity(playerid, V[0], V[1], V[2]);
	}

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__HELYED_ELMENTVE_AZ__SLOTBA"), slot, slotname);

	mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `name` = '%e', `slotname` = '%e', `reg_id` = %d, `x` = %f, `y` = %f, `z` = %f, `angle` = %f, `interior` = %d, `world` = %d, `vel_x` = %f, `vel_y` = %f, `vel_z` = %f, `isvehicle` = '%d', `isvel` = '%d', time = '%02d.%02d.%02d/%02d.%02d.%02d' WHERE `id` = %d",
	pName(playerid), slotname, PlayerInfo[playerid][pRegID], X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), V[0], V[1], V[2], iscar, isvel, year, month, day, hour, minute, second, slot);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:lp(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
	    slot;
	if(sscanf(params, "d", slot)) return SendUsage(playerid, "/lp <Slot");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));
    if(IsPlayerInDynamicArea(playerid, gPCZone)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));

	mysql_format(1, query, sizeof(query), "SELECT * FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_LoadPosition", "ddd", playerid, slot, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_LoadPosition(playerid, slot, queue);
public THREAD_LoadPosition(playerid, slot, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadPosition);

	new
		Int,
		World,
		szName[MAX_PLAYER_NAME],
		bool:Is[2];
	cache_get_row(0, 1, szName);
	cache_get_row_float(0, 3, X);
	cache_get_row_float(0, 4, Y);
	cache_get_row_float(0, 5, Z);
	cache_get_row_float(0, 6, Angle);
	cache_get_row_int(0, 7, Int);
	cache_get_row_int(0, 8, World);
	cache_get_row_float(0, 9, V[0]);
	cache_get_row_float(0, 10, V[1]);
	cache_get_row_float(0, 11, V[2]);
	Is[0] = !!cache_get_row_int_ex(0, 12);
	Is[1] = !!cache_get_row_int_ex(0, 13);
	cache_get_row(0, 15, country);

	if(X == -1 && Y == -1) return SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOT_URES"), slot);
	if(goldpot[gPickup] && GetDistance3D(X, Y, Z, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < IN_RANGE_DISTANCE) return SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_HELY_TUL"), slot);

	if(!Is[0])
	{
        PlayerTele(playerid, X, Y, Z, Int, Angle, World);

        if(Is[1])
        {
            SetPlayerVelocity(playerid, V[0], V[1], V[2]);
		}
	}
	else
	{
        NormalTele(playerid, X, Y, Z, Int, Angle, World);

        if(Is[1] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            SetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), V[0], V[1], V[2]);
		}
	}

	if(country[1] != '/') // Ha a név nem N/A
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__ODATELEPORTALTAL_AZ___NE"), country, slot, szName);
	}
	else
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__ODATELEPORTALTAL_AZ__ADMIN"), slot, szName);
	}
	return 1;
}

CMD:dsp(playerid, params[], 4, 0)
{
	//if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot;
	if(sscanf(params, "d", slot)) return SendUsage(playerid, "/dsp <Slot>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `slotname` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_DeletePosition", "ddd", playerid, slot, g_pQueryQueue[playerid]);

	valstr(name, slot);
	AdminCommandLog("DSP", playerid, -1, name);
	return 1;
}

forward THREAD_DeletePosition(playerid, slot, queue);
public THREAD_DeletePosition(playerid, slot, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_DeletePosition);

    cache_get_row_int(0, 0, vID);
    cache_get_row(0, 1, country);

	if(vID == -1) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__SLOT_NINCS_HASZNALATBAN"), slot);
	if(PlayerInfo[playerid][pRegID] != vID && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOT_MAR_HASZNALATBAN_1"));
		return 1;
	}
/*
	new
		iSpawn;
	foreach(new i: Player)
	{
        iSpawn = GetPVarInt(i, "SpawnLocation");
		if(iSpawn < 11) continue;

		if((iSpawn - 11) == slot)
		{
			SetPVarInt(i, "SpawnLocation", 0);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '0' WHERE `reg_id` = %d", PlayerInfo[i][pRegID]);
			mysql_function_query(1, query, false, "", "");
		}
	}
*/
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_ELMENTETT__NE"), slot, country);

	mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `name` = 'Senki', `reg_id` = -1, `x` = -1, `y` = -1, `z` = -1, `angle` = -1, `interior` = 0, `world` = 0, `vel_x` = -1, `vel_y` = -1, `vel_z` = -1, `isvehicle` = '1', `isvel` = '0', time = '0.0.0/0.0.0', `slotname` = 'N/A' WHERE `id` = %d", slot);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:splist(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/splist <Lista | Alapból: 1, Minden oldalon 100db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `id`, `name`, `slotname` FROM `savepositions` ORDER BY `id` LIMIT %d, 100", --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_SavePositionList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SavePositionList(playerid, queue);
public THREAD_SavePositionList(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePositionList);

	new
        rows = cache_get_row_count();
	if(!rows)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_LISTA_URES"));
	    return 1;
	}

	dline[0] = EOS;
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, vID);
		cache_get_row(i, 1, name);
		cache_get_row(i, 2, country);

		if(!i)
		{
			format(dline, sizeof(dline), "%d. %s - %s", vID, country, name);
		}
		else
		{
            format(dline, sizeof(dline), "%s\n%d. %s - %s", dline, vID, country, name);
		}
	}

	ShowPlayerDialogEx(playerid, DIALOG_SPLIST, DIALOG_STYLE_LIST, "{" #XCOLOR_PINK "}Admin által mentett pozíciók", dline, "Teleport", "Kilépés");
	return 1;
}

CMD:spvel(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot,
		Vel;
	if(sscanf(params, "dD(-1)", slot,  Vel)) return SendUsage(playerid, "/spvel <Slot> <Állítsa-e a sebességet>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_Velocity", "dddd", playerid, slot, Vel, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "ID: %d, IsVeh: %d", slot, Vel);
	AdminCommandLog("SPVEL", playerid, -1, i_str);
	return 1;
}

forward THREAD_SavePosition_Velocity(playerid, slot, isvel, queue);
public THREAD_SavePosition_Velocity(playerid, slot, isvel, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition_Velocity);

	cache_get_row_int(0, 0, vID);
	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOTOT_NEM_TE_MENTETTED"));
		return 1;
	}

	switch(isvel)
	{
		case -1:
		{
			if((vID = GetPlayerDynamicVehicleID(playerid)))
			{
				GetDynamicVehicleZAngle(vID, Angle);
				GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
			}
			else
			{
		        GetPlayerFacingAngle(playerid, Angle);
				GetPlayerVelocity(playerid, V[0], V[1], V[2]);
			}

			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_SEBESSEG"), slot);

			mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `angle` = %f, `vel_x` = %f, `vel_y` = %f, `vel_z` = %f, `isvel` = '1' WHERE `id` = %d", Angle, V[0], V[1], V[2], slot);
		    mysql_function_query(1, query, false, "", "");
		}
		case 0:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_SEBESSEG_1"), slot);

			mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `isvel` = '0' WHERE `id` = %d", slot);
		    mysql_function_query(1, query, false, "", "");
		}
		case 1:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_SEBESSEG_2"), slot);

			mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `isvel` = '1' WHERE `id` = %d", slot);
		    mysql_function_query(1, query, false, "", "");
		}
		default: SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_PARAMETERT_ADTAL_MEG"));
	}
	return 1;
}

CMD:spvehicle(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot,
		Vel;
	if(sscanf(params, "dd", slot,  Vel)) return SendUsage(playerid, "/spvehicle <Slot> <Teleportálja-e a kocsit>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_Vehicle", "dddd", playerid, slot, Vel, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "ID: %d, IsVeh: %d", slot, Vel);
	AdminCommandLog("SPVEHICLE", playerid, -1, i_str);
	return 1;
}

forward THREAD_SavePosition_Vehicle(playerid, slot, isveh, queue);
public THREAD_SavePosition_Vehicle(playerid, slot, isveh, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition_Vehicle);

	cache_get_row_int(0, 0, vID);
	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOTOT_NEM_TE_MENTETTED"));
		return 1;
	}

	switch(isveh)
	{
		case 0:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_SEBESSEG_3"), slot);

			mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `isvehicle` = '0' WHERE `id` = %d", slot);
		    mysql_function_query(1, query, false, "", "");
		}
		case 1:
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_JARMU_TELEPO"), slot);

			mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `isvehicle` = '1' WHERE `id` = %d", slot);
		    mysql_function_query(1, query, false, "", "");
		}
		default: SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_PARAMETERT_ADTAL_MEG_1"));
	}
	return 1;
}

CMD:spangle(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot;
	if(sscanf(params, "d", slot)) return SendUsage(playerid, "/spangle <Slot>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_Angle", "ddd", playerid, slot, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SavePosition_Angle(playerid, slot, queue);
public THREAD_SavePosition_Angle(playerid, slot, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition_Angle);

	cache_get_row_int(0, 0, vID);
	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOTOT_NEM_TE_MENTETTED"));
		return 1;
	}

	if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		GetDynamicVehicleZAngle(vID, Angle);
	}
	else
	{
		GetPlayerFacingAngle(playerid, Angle);
	}

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_FORGAS_ATALL"), slot, Angle);

	mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `angle` = %f WHERE `id` = %d", Angle, slot);
    mysql_function_query(1, query, false, "", "");

	format(i_str, sizeof(i_str), "ID: %d, Angle: %f", slot, Angle);
	AdminCommandLog("SPANGLE", playerid, -1, i_str);
	return 1;
}

CMD:spworld(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot,
	    world;
	if(sscanf(params, "dd", slot, world)) return SendUsage(playerid, "/spangle <Slot> <VirtualWorld>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_World", "ddddd", playerid, slot, world, 0, g_pQueryQueue[playerid]);
	return 1;
}

CMD:spint(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot,
	    world;
	if(sscanf(params, "dd", slot, world)) return SendUsage(playerid, "/spint <Slot> <InteriorID>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_World", "ddddd", playerid, slot, world, 1, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SavePosition_World(playerid, slot, world, isint, queue);
public THREAD_SavePosition_World(playerid, slot, world, isint, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition_World);

	cache_get_row_int(0, 0, vID);
	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOTOT_NEM_TE_MENTETTED"));
		return 1;
	}

	if(!isint)
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_VIRTUALIS"), slot, world);

		mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `world` = %d WHERE `id` = %d", world, slot);
	    mysql_function_query(1, query, false, "", "");

		format(i_str, sizeof(i_str), "ID: %d, World: %f", slot, world);
		AdminCommandLog("SPWORLD", playerid, -1, i_str);
	}
	else
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOTBAN_LEVO_INTERIOR"), slot, world);

		mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `interior` = %d WHERE `id` = %d", world, slot);
	    mysql_function_query(1, query, false, "", "");

		format(i_str, sizeof(i_str), "ID: %d, Int: %f", slot, world);
		AdminCommandLog("SPINT", playerid, -1, i_str);
	}
	return 1;
}

CMD:spname(playerid, params[], 0, 0)
{
	if(g_pSzint{playerid} < GetGVarInt("SZINT_SP", 0) && !g_pVIP[playerid]) return SendClientMessagef(playerid,COLOR_RED, "HIBA: Ezt a parancsot csak a(z) {" #XCOLOR_WHITE "}%d{" #XCOLOR_RED "}. szint feletti {" #XCOLOR_GOLD "}VIP {" #XCOLOR_RED "}játékosok használhatják.", GetGVarInt("SZINT_SP", 0));

	new
	    slot;
	if(sscanf(params, "ds[128]", slot, i_str)) return SendUsage(playerid, "/spname <Slot> <Név>");
	if(!(1 <= slot <= 1000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ID_1__1000_KOZOTT_VALASSZ"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `slotname` FROM `savepositions` WHERE `id` = %d", slot);
	mysql_function_query(1, query, true, "THREAD_SavePosition_Name", "ddsd", playerid, slot, i_str, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SavePosition_Name(playerid, slot, slotname[], queue);
public THREAD_SavePosition_Name(playerid, slot, slotname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SavePosition_World);

	cache_get_row_int(0, 0, vID);
	cache_get_row(0, 1, country);

	if(vID != -1 && PlayerInfo[playerid][pRegID] != vID)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_SLOTOT_NEM_TE_MENTETTED"));
		return 1;
	}

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SLOT_ATNEVEZVE___"), slot, country, slotname);

	mysql_format(1, query, sizeof(query), "UPDATE `savepositions` SET `slotname` = '%e' WHERE `id` = %d", slotname, slot);
    mysql_function_query(1, query, false, "", "");

	format(i_str, sizeof(i_str), "ID: %d, Oldname: %s, Newname: %s", slot, country, slotname);
	AdminCommandLog("SPNAME", playerid, -1, i_str);
	return 1;
}

CMD:reloadskin(playerid, params[], 0, D:<GANGWAR>)
{
	if(GetPVarType(playerid, "FavSkinID"))
	{
	    SetPlayerSkin(playerid, GetPVarInt(playerid, "FavSkinID"));
    }
	else
	{
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_LEMENTVE_KEDVENC_SKINED"));
	}
	return 1;
}

CMD:skin(playerid, params[], 0, D:<GANGWAR>)
{
	new
		SkinID;
	if(sscanf(params, "d", SkinID)) return SendUsage(playerid, "/skin <Skin ID>");
    if(!IsValidSkin(SkinID)) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_ROSSZ_SKIN_ID"));
    if(SkinID == ADMIN_SKIN_ID && GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_EZ_ADMIN_SKIN_NEM_MENTHETED"));

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHSKINED_KICSERELVE_ERRE_PP"), SkinID);

	SetPlayerSkin(playerid, SkinID);
    //UpdatePlayerSpawnInfo(playerid);
	return 1;
}

CMD:saveskin(playerid, params[], 0, D:<GANGWAR>)
{
	new
		SkinID;
	if(sscanf(params, "D(-1)", SkinID)) return SendUsage(playerid, "/saveskin {" #XCOLOR_YELLOW "}<Skin ID>");

	if(SkinID == -1)
	{
		SkinID = GetPlayerSkin(playerid);
	}
	else
	{
        if(!IsValidSkin(SkinID)) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HIBA_ROSSZ_SKIN_ID"));
	}
    if(SkinID == ADMIN_SKIN_ID && GetPVarInt(playerid, "Level") < 1) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_EZ_ADMIN_SKIN_NEM_MENTHETED"));

	if(GetPVarType(playerid, "FavSkinID"))
	{
		new
		    CurrSkinID = GetPVarInt(playerid, "FavSkinID");
		if(CurrSkinID == SkinID)
		{
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_IS_EZ_A_SKINED_VAN"), SkinID);
			return 1;
		}

		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ELMENTETT_SKINED_ATCSERELVE"), CurrSkinID, SkinID);
	}
	else
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SKINED_ELMENTVE_ID_"), SkinID);
	}
    SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SKINED_TORLESEHEZ_IRD_BE_REMOVESKI"));

    SetPVarInt(playerid, "FavSkinID", SkinID);
	SetPlayerSkin(playerid, SkinID);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHELMENTETT_SKINED_KICSERELVE"), SkinID);

    UpdatePlayerSpawnInfo(playerid);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `favskin` = %d WHERE `reg_id` = %d", SkinID, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:removeskin(playerid, params[], 0, D:<GANGWAR>)
{
    if(!GetPVarType(playerid, "FavSkinID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_LEMENTVE_KEDVENC_SKINED"));

    DeletePVar(playerid, "FavSkinID");
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_KEDVENC_SKINED_TOROLVE"));

    UpdatePlayerSpawnInfo(playerid);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `favskin` = -1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}



CMD:savecolor(playerid, params[], 0, D:<GANGWAR | CTC>)
{
	new
		iColor;
	if(sscanf(params, "N(0)", iColor)) return SendUsage(playerid, "/savecolor {" #XCOLOR_YELLOW "}<Színkód>");
	if(!iColor)
	{
		iColor = GetPlayerColor(playerid);
	}

//	if(IsBlack(iColor)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_MENTHETSZ"));

    new r, g, b, a;
    rgba2hex(iColor,r,g,b,a);
    if(r < 40 && g < 40 && b < 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_FEKETE_SZINT_NEM_MENTHETSZ"));

    


	SetPlayerColor(playerid, iColor);





   	SetPVarInt(playerid, "Color", iColor);
    SetPlayerColor(playerid, iColor);
	SendClientMessage(playerid, iColor, LANG(playerid, "MSG_SIKERESEN_ELMETETTED_A_SZINED"));

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `color` = %d WHERE `reg_id` = %d", iColor, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:rcolor(playerid, params[], 0, D:<GANGWAR | CTC>)
{
	new
		CurrColor = (random(0xFFFFFF) << 8) | 0xFF;
	SetPlayerColor(playerid, CurrColor);
	SendClientMessage(playerid, CurrColor, LANG(playerid, "MSG_SZINED_MEGVALTOZTATVA_HA_EL"));
	return 1;
}

CMD:rvcolor(playerid, params[], 0, 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(g_BonusCarID == (vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NALAD_VAN_A_BONUSZAUTO_NEM_1"));

	new
	    col1 = RandomColor,
		col2 = RandomColor;
	ChangeDynamicVehicleColor(vID, col1, col2);
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JARMUVED_SZINE_MEGVALTOZTATVA"), col1, col2);
	return 1;
}

CMD:removecolor(playerid, params[], 0, 0)
{
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `color` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");

	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ELMENTETT_SZINED_TOROLVE"));
	return 1;
}

CMD:login(playerid, params[], 0, 0)
{
    if(g_PlayerData[playerid] & e_LOGGED_IN) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_BE_VAGY_JELENTKEZVE"));

	LoginDialog(playerid);
	return 1;
}
/*
CMD:register(playerid, params[], 0, 0)
{
    if(g_PlayerData[playerid] & e_LOGGED_IN) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_BE_VAGY_JELENTKEZVE"));

	RegisterDialog(playerid);
	return 1;
}
*/
CMD:forumregister(playerid, params[], 0, 0)
{
	// Ha nincs SQL kapcsolat a fórummal
	if(!gForumSQL) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ATMENETILEG_NEM_ELERHETO_REGISZTRAL"));

	if(PlayerInfo[playerid][fRegID] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_VAN_FELHASZNALOD_A_FORUMON"));

	ForumRegisterDialog(playerid);
	return 1;
}

CMD:myforumacc(playerid, params[], 0, 0)
{
	if(!gForumSQL) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ATMENETILEG_NEM_ELERHETO"));

    if(PlayerInfo[playerid][fRegID] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_VAN_FELHASZNALOD_A_FORUMON"));

	ForumChangeDialog(playerid);
	return 1;
}
/*
CMD:logout(playerid, params[], 0, 0)
{
    if(!(g_PlayerData[playerid] & e_LOGGED_IN)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_KI_VAGY_JELENTKEZVE"));

	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_SIKERESEN_KIJELENTKEZTEL"));
	PlayerInfo[playerid][pRegID] = -1;
	g_PlayerData[playerid] &= ~e_LOGGED_IN;
	return 1;
}
*/
CMD:rlogout(playerid, params[], 0, 0)
{
	if(!IsPlayerAdmin(playerid)) return 0;
	#if defined YSF
	SetPlayerAdmin(playerid, false);
	#endif
	return 1;
}

CMD:changepass(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, CHANGEPASS, DIALOG_STYLE_INPUT, "Jelszóváltás", "Lentre írd be az új jelszavad! \n\n", "Változtatás", "Mégse");
	return 1;
}

CMD:findplayer(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findplayer <Játékos Névrészlet>");
	if(!IsValidNickName(params)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VALID_NAME_CHARS"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `name` FROM `players` WHERE `name` LIKE '%s%s%s'", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_FindPlayer", "dsd", playerid, params, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findregid(playerid, params[], 0, 0)
{
	new
	    iRegID;
	if(sscanf(params, "d", iRegID)) return SendUsage(playerid, "/findregid <iRegID>");

	valstr(name, iRegID);
	mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `name` FROM `players` WHERE `reg_id` = %d", iRegID);
	mysql_function_query(1, query, true, "THREAD_FindItem", "ddsd", playerid, 0, name, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findobject(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findobject <Object Névrészlet>");

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects` WHERE `objectname` LIKE '%s%e%s'", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_FindItem", "ddsd", playerid, 1, params, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findvobject(playerid, params[], 0, 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(isnull(params)) return SendUsage(playerid, "/findvobject <Object Névrészlet>");

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects_v` WHERE `objectname` LIKE '%s%e%s'", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_FindItem", "ddsd", playerid, 2, params, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findvoset(playerid, params[], 0, 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(isnull(params)) return SendUsage(playerid, "/findvoset <Jármû Objectset Névrészlet>");

	mysql_format(1, query, sizeof(query), "SELECT `objectname` FROM `holdingobjects_vset` WHERE `objectname` LIKE '%s%e%s'", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_HoldingObjectList", "ddd", playerid, 2, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_FindPlayer(playerid, reszlet[], queue);
public THREAD_FindPlayer(playerid, reszlet[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_FindPlayer);

	new
	    rows = cache_get_row_count();
	dline[0] = EOS;
	if(!rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_TALALAT_A__RESZLETRE"), reszlet);
		return 1;
	}
	else if(rows > 180)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_A__RESZLETRE_TOBB_MINT_180"), reszlet, rows);
		return 1;
	}

	for(new x; x != rows; x++)
	{
 		cache_get_row_int(x, 0, datez);
        cache_get_row(x, 1, country);

		format(i_str, 64, "%d. %s\n", datez, country);
		strcat(dline, i_str);
	}

	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", reszlet, rows);
	ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER, DIALOG_STYLE_LIST, tmp, dline, "Megtekint", "Kilépés");
	return 1;
}

forward THREAD_FindItem(playerid, type, reszlet[], queue);
public THREAD_FindItem(playerid, type, reszlet[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_FindItem);

	new
	    rows = cache_get_row_count();
	dline[0] = EOS;
	if(!rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_TALALAT_A__RESZLETRE"), reszlet);
		return 1;
	}
	else if(rows > 180)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_A__RESZLETRE_TOBB_MINT_180"), reszlet, rows);
		return 1;
	}

	for(new x; x != rows; x++)
	{
		if(type == 0)
		{
		    cache_get_row_int(x, 0, datez);
		    cache_get_row(x, 1, name);

		    format(i_str, 64, "%d. %s\n", datez, name);
			strcat(dline, i_str);
		}
		else
		{
	        cache_get_row(x, 0, country);
	        strcat(dline, country);
			strcat(dline, "\n");
		}
	}

	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", reszlet, rows);
	switch(type)
	{
		case 0: ShowPlayerDialogEx(playerid, DIALOG_FINDPLAYER, DIALOG_STYLE_LIST, tmp, dline, "Megtekint", "Kilépés");
		case 1: ShowPlayerDialogEx(playerid, DIALOG_FINDOBJECT, DIALOG_STYLE_LIST, tmp, dline, "Felcsatol", "Kilépés");
		case 2: ShowPlayerDialogEx(playerid, DIALOG_FINDOBJECT + 2, DIALOG_STYLE_LIST, tmp, dline, "Felrak", "Kilépés");
	}
	return 1;
}

CMD:adminlogin(playerid, params[], 0, 0)
{
	new
		aName[128],
		aPassword[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", aName, aPassword)) return SendUsage(playerid, "/adminlogin <Fehlasználónév> <Jelszó>");

	mysql_format(1, query, sizeof(query), "SELECT `reg_id`, `level`, `pass` FROM `players` WHERE `name` = '%e'", aName);
	mysql_function_query(1, query, true, "THREAD_Adminlogin", "dssd", playerid, aName, aPassword, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Adminlogin(playerid, adminname[], password[], queue);
public THREAD_Adminlogin(playerid, adminname[], password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Adminlogin);

	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_AZ__NEVU_FELHASZNALO_NEM_LETEZIK"), adminname);
		return 1;
	}

	new
	    aRegID,
	    szPassword[32];
	cache_get_row_int(0, 0, aRegID);
	cache_get_row_int(0, 1, datez);
	cache_get_row(0, 2, szPassword);

	if(!strcmp(password, szPassword))
	{
		if(datez < 3) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_CSAK_TULAJDONOS__FOADMIN_NEVEBE"));

		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_SIKERESEN_BELEPTEL__ACCOUNTJABA"), adminname, datez);
		SetPVarInt(playerid, "Level", datez);
		SetPVarInt(playerid, "FakeAdmin", datez);
        g_PlayerData[playerid] |= e_REJTETT;

	    getdate(year, month, day);
		gettime(hour, minute, second);
		mysql_format(1, query, sizeof(query), "INSERT INTO `adminlogin`(id, name, reg_id, a_name, a_reg_id, pass, time) VALUES(0, '%s', %d, '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], adminname, aRegID, password, year, month, day, hour, minute, second);
        mysql_function_query(1, query, false, "", "");

        switch(datez)
		{
			case 1: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_1"));
   			case 2: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_2"));
		    case 3: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_3"));
		    case 4: format(i_str, 32, "%s",LANG(playerid, "MSG_ADMIN_LEVEL_4"));
		}

		foreach(new i: Player)
		{
			if(IsFOOwner(i))
			{
				SendClientMessagef(i, COLOR_KICK, LANG(i, "MSG_ADMINLOGIN"),pName(playerid),playerid,adminname,aRegID,i_str,datez);
			}
		}
	}
	else
	{
	    getdate(year, month, day);
		gettime(hour, minute, second);
		mysql_format(1, query, sizeof(query), "INSERT INTO `adminlogin_f`(id, name, reg_id, a_name, pass, time) VALUES(0, '%s', %d, '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], adminname, password, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");

		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHHIBAS_BEJELENTKEZESNWROSS"));
		KickEx(playerid, "fail adminlogin");
	}
	return 1;
}

CMD:adminlogout(playerid, params[], 0, 0)
{
	if(!GetPVarType(playerid, "FakeAdmin")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_HAMIS_ADMIN_MODBAN"));

	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KIJELENTKEZTEL_A_HAMIS_ADMIN"));
	SetPVarInt(playerid, "Level", GetPVarInt(playerid, "FakeAdmin"));
	DeletePVar(playerid, "FakeAdmin");
	g_PlayerData[playerid] &= ~e_REJTETT;
	return 1;
}

CMD:getszintbyxp(playerid, params[], 0, 0)
{
	new
	    xp;
	if(sscanf(params, "d", xp)) return SendUsage(playerid, "/getszintbyxp <XP>");
	if(!(1 <= xp <= g_aiXPsEgyben[sizeof(g_aiXPsEgyben)-1])) SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_XP_1___KOZOTT_LEGYEN"), g_aiXPsEgyben[sizeof(g_aiXPsEgyben)-1]);

	new
	    count;
	while(g_aiXPsEgyben[count++] < xp) { }

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__XPVEL_AZ__SZINTEN_L"), xp, count-1);
	return 1;
}

CMD:getxpbyszint(playerid, params[], 0, 0)
{
	new
	    szint;
	if(sscanf(params, "d", szint)) return SendUsage(playerid, "/getxpbyszint <Szint>");
	if(!(1 <= szint <= sizeof(g_aiXPsEgyben))) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_SZINT_1___KOZOTT"), sizeof(g_aiXPsEgyben));

	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG__AZ__SZINTHEZ_LEGALABB__XP"), szint, g_aiXPsEgyben[szint - 1]);
	return 1;
}

CMD:xp(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/xp {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
	    xp = GetPlayerScore(player1);
	if(g_pSzint{player1} == 50)
	{
		format(i_str, sizeof(i_str), "~w~Level: ~b~~h~%d~w~, ~y~XP: ~g~~h~%d", g_pSzint{player1}, xp);
	}
	else
	{
		format(i_str, sizeof(i_str), "~w~Level: ~b~~h~%d~w~, ~y~XP: ~g~~h~%d~r~/~p~%d   ~w~(Még: %d) ~n~~b~~h~~h~(Elõzõtõl %d-vel több)", g_pSzint{player1}, xp, g_aiXPsEgyben[g_pSzint{player1}], g_aiXPsEgyben[g_pSzint{player1}] - xp, g_aiXPs[g_pSzint{player1}]);
	}
	InfoTD_MSG(playerid, 10000, i_str);
	return 1;
}

CMD:stats(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/stats {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(g_PlayerData[player1] & e_LOGGED_IN) && !(g_pOtherFlags[player1] & e_RAKSAMP)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_BEJELENTKEZVE"));

    new
		totaltime = PlayerInfo[player1][pTotalSeconds] + (GetPVarInt(player1, "TotalMinutes") * 60) + (GetPVarInt(player1, "TotalHours") * 3600);

	new
		weapons[13];
	for(new i; i != 13; i++)
	{
    	GetPlayerWeaponData(player1, i, weapons[i], vID);
	}

	//printf("clanid beforegeci: %d", g_pClan{player1});
	if(!(g_pOtherFlags[player1] & e_RAKSAMP)) //Ha rendes játékos, azaz nem bot
	{
		GetPlayerName(player1, name, sizeof(name));
		ShowStats(playerid, player1, name, GetPlayerSkin(player1), GetPlayerColor(player1), PlayerInfo[player1][pRegID], GetPVarInt(player1, "Level"), g_pClan{player1}, totaltime, PlayerInfo[player1][pAFKTime], GetPVarInt(player1, "LongestAFK"), GetPlayerMoneyEx(player1), GetPVarInt(player1, "Bank"), g_pBounty[player1], GetPlayerScore(player1), g_pSzint{player1}, g_pVIP[player1],
			GetPVarInt(player1, "Kills"), GetPVarInt(player1, "Deaths"), GetPVarInt(player1, "Headshot_Kill"), GetPVarInt(player1, "Headshot_Death"), GetPVarInt(player1, "MaxKillStreak"), GetPVarInt(player1, "KillStreak"), GetPVarInt(player1, "FlagTime"), GetPVarInt(player1, "bCarTime"), Bit_GetCount(g_pHorseshoes[player1]), Bit_GetCount(g_pOysters[player1]), Bit_GetCount(g_pPhotos[player1]), Bit_GetCount(g_pJumps[player1]), Bit_GetCount(g_pTags[player1]), GetPVarInt(player1, "Posts"),
			GetPVarInt(player1, "ReactionWins"), GetPVarInt(player1, "Maths"), GetPVarInt(player1, "Teles"), GetPVarInt(player1, "RacesWon"), g_pRaceRecords[player1], GetPVarInt(player1, "Goldpots"), GetPVarInt(player1, "RablasokSzama"), GetPVarInt(player1, "G_Range"), GetPVarInt(player1, "Fuvarok"), GetPVarInt(player1, "FalloutWon"), GetPVarInt(player1, "Derby"), GetPVarInt(player1, "Stuntbonus"), GetPVarInt(player1, "Warnings"),
			GetPVarInt(player1, "Postas"), GetPVarInt(player1, "Pizzas"), GetPVarInt(player1, "CTC_Auto"), GetPVarInt(player1, "CTC_Hajo"), GetPVarInt(player1, "JailTime"), GetPVarInt(player1, "Muted"), GetPVarInt(player1, "FreezeTime"), GetPVarInt(player1, "ChatColor"), GetPVarType(player1, "IDColor"), GetPVarInt(player1, "IDColor"), -1, -1, weapons);
			//printf("stats 1");
	}
	else //Ha bot akkor findplayerral kikeressük adatbázisból
	{
		mysql_format(1, query, sizeof(query), "SELECT * FROM `players` WHERE `name` = '%s'", pName(player1));
		mysql_function_query(1, query, true, "THREAD_Findplayer_2", "dd", playerid, g_pQueryQueue[playerid]);
		//printf(query);
		SetPVarInt(playerid,"fSkin_ID",GetPlayerSkin(player1));
	}
	return 1;
}

stock ConvertIdo(totalSeconds, &hours, &minutes, &seconds)
{
	new temp = totalSeconds % 3600;

	hours = (totalSeconds - temp) / 3600;
	minutes = (temp - (temp % 60)) / 60;
	seconds = temp % 60;
}

forward ShowStats(forplayerid, playerid, pname[], skin, color, regid, level, clanid, szerveren_ido, afk, afkrekord, money, bank, verdij, xp, szint, vip,
	olesek, halalok, hskill, hsdeath, killstreak, currks, flagtime, bcartime, patko, osztriga, fenykep, jump, tag, uzenet,
	tesztek, matek, tele, verseny, versenyrekord, tojas, rablas, range, fuvarok, fallout, derby, stuntbonus, warn,
	levelek, pizza, ctc_auto, ctc_hajo, jail, mute, freeze, chatcolor, use2, idcolor, regdate, laston, weapons[]);

public ShowStats(forplayerid, playerid, pname[], skin, color, regid, level, clanid, szerveren_ido, afk, afkrekord, money, bank, verdij, xp, szint, vip,
	olesek, halalok, hskill, hsdeath, killstreak, currks, flagtime, bcartime, patko, osztriga, fenykep, jump, tag, uzenet,
	tesztek, matek, tele, verseny, versenyrekord, tojas, rablas, range, fuvarok, fallout, derby, stuntbonus, warn,
	levelek, pizza, ctc_auto, ctc_hajo, jail, mute, freeze, chatcolor, use2, idcolor, regdate, laston, weapons[])
{
	// Ha a TD látható, akkor elrejtjük
	if(Bit_GetCount(gPlayerStatsTDs[forplayerid]))
		Stats_Hide(forplayerid);

	// Arány kiszámítása
	if(olesek && halalok)
		V[0] = floatdiv(olesek, halalok);
	else
		V[0] = 0.0;

	// Rangnév
	if(level < 4)
	{
		if(playerid != -1)
		{
		    if(g_PlayerData[playerid] & e_REJTETT)
		    {
				strcpy(tmp, LANG(forplayerid, "MSG_INFOTD_RANK_0"));
			}
			else
			{
                strcpy(tmp, GetRankName_TD(forplayerid, level), 32);
			}
		}
		else
		{
            strcpy(tmp, GetRankName_TD(forplayerid, level), 32);
		}
	}
	else
	{
		if(playerid != -1)
		{
	        if(!(g_PlayerData[playerid] & e_REJTETT))
	        {
				/*if(IsPlayerAdmin(playerid))
				{
					format(tmp, 32, "Tulajdonos (RCON)");
				}
				else
				{*/
					strcpy(tmp, GetRankName_TD(forplayerid, level), 32);
				//}
			}
			else
			{
	            strcpy(tmp, LANG(forplayerid, "MSG_INFOTD_RANK_0"));
			}
		}
		else
		{
			strcpy(tmp, LANG(forplayerid, "MSG_INFOTD_RANK_0"));
		}
	}

	//printf("szerverido: %d", szerveren_ido);
	new t_ido[3], t_afk[3], t_afkrecord[3], t_zaszlo[3], t_bonuscar[3], t_jail[3], t_mute[3], t_freeze[3], reg[6], last[6];
    ConvertIdo(szerveren_ido, t_ido[0], t_ido[1], t_ido[2]);
    //ConvertIdo(online, t_ido[0], t_ido[1], t_ido[2]);
    ConvertIdo(afk, t_afk[0], t_afk[1], t_afk[2]);
    ConvertIdo(afkrekord, t_afkrecord[0], t_afkrecord[1], t_afkrecord[2]);
    ConvertIdo(flagtime, t_zaszlo[0], t_zaszlo[1], t_zaszlo[2]);
    ConvertIdo(bcartime, t_bonuscar[0], t_bonuscar[1], t_bonuscar[2]);
    ConvertIdo(mute, t_mute[0], t_mute[1], t_mute[2]);
    ConvertIdo(freeze, t_freeze[0], t_freeze[1], t_freeze[2]);

	// Regisztráció idejének kiszámítása
	if(regdate == -1 && playerid != -1)
	{
		reg[0] = PlayerInfo[playerid][pRegYear];
		reg[1] = PlayerInfo[playerid][pRegMonth];
	 	reg[2] = PlayerInfo[playerid][pRegDay];
	  	reg[3] = PlayerInfo[playerid][pRegHour];
	   	reg[4] = PlayerInfo[playerid][pRegMinute];
	   	reg[5] = PlayerInfo[playerid][pRegSecond];
	}
	else
	{
        date(regdate, reg[2], reg[1], reg[0], reg[3], reg[4], reg[5]);
	}

	// Utoljára aktív
	if(laston == -1 && playerid != -1)
	{
		last[0] = PlayerInfo[playerid][pLastYear];
		last[1] = PlayerInfo[playerid][pLastMonth];
		last[2] = PlayerInfo[playerid][pLastDay];
		last[3] = PlayerInfo[playerid][pLastHour];
		last[4] = PlayerInfo[playerid][pLastMinute];
		last[5] = PlayerInfo[playerid][pLastSecond];
	}
	else
	{
		date(laston, last[2], last[1], last[0], last[3], last[4], last[5]);
	}

    RemoveHexColorFromString(pname);
    Stats_Init(forplayerid, skin);
	if(playerid != -1)
	{
		Stats_AddRow(forplayerid, 0, (IsClient(playerid)) ? (0xFFFF00FF) : (-1), LANG(forplayerid, "MSG_STATS_NAME"), FixGameString(pname), playerid);
	}
	else
	{
		Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_NAME"), pname); // "Nv: %s"
	}

	Stats_AddRow(forplayerid, 0, -1, "RegID: %d", regid);
    Stats_AddRow(forplayerid, 0, COLOR_WHITE, LANG(forplayerid, "MSG_STATS_RANK"), FixGameString(tmp));
    if(clanid != 0xFF)
    {
		//printf("clanid2: %d", clanid);
		Stats_AddRow(forplayerid, 0, gClanColor[clanid], LANG(forplayerid, "MSG_STATS_CLAN"), gClanName[clanid]);
    	//Stats_AddRow(forplayerid, 0, -1, "Klnrang: %s", gClanRankName[clanid][g_pClanRank{playerid}]);
	}
	else
	{
    	Stats_AddRow(forplayerid, 0, -1, "Kln: ~r~Nincs");
	}

    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_SERVER_ONLINE"), t_ido[0], t_ido[1], t_ido[2]);
	if(playerid != -1) Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_ONLINE"), GetPVarInt(playerid, "CurrHours"), GetPVarInt(playerid, "CurrMinutes"), GetPVarInt(playerid, "CurrSeconds"));
    Stats_AddRow(forplayerid, 0, -1, "AFK: %02d:%02d:%02d", t_afk[0], t_afk[1], t_afk[2]);
    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_AFK_RECORD"), t_afkrecord[0], t_afkrecord[1], t_afkrecord[2]);
    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_MONEY"), FormatNumber(money));
    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_BANK"), FormatNumber(bank));
    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_BOUNTY"), FormatNumber(verdij));
    Stats_AddRow(forplayerid, 0, -1, "XP: %s", FormatNumber(xp));
    Stats_AddRow(forplayerid, 0, -1, LANG(forplayerid, "MSG_STATS_SZINT"), szint);

	if(!vip)
	{
    	//Stats_AddRow(forplayerid, 0, -1, "VIP: -----");
	}
	else
	{
        date(vip, day, month, year, hour, minute, second);
        Stats_AddRow(forplayerid, 0, 0x33FF33FF, "VIP: %02d.%02d.%02d %02d:%02d", year, month, day, hour, minute, second);
	}

    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_KILLS"), olesek);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_DEATHS"), halalok);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_HEADSHOT_KILLS"), hskill);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_HEADSHOT_DEATHS"), hsdeath);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_RATIO"), V[0]);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_KILLSTREAK"), killstreak, currks);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_BONUSCAR"), t_bonuscar[0], t_bonuscar[1], t_bonuscar[2]);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_FLAG"), t_zaszlo[0], t_zaszlo[1], t_zaszlo[2]);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_HORSESHOES"), patko);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_OYSTERS"), osztriga);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_PHOTOS"), fenykep);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_JUMPS"), jump);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_TAGS"), tag);
    Stats_AddRow(forplayerid, 1, -1, LANG(forplayerid, "MSG_STATS_MESSAGES"), uzenet);

    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_TESTS"), tesztek);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_MATHS"), matek);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_TELES"), tele);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_RACES"), verseny);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_RACERECORDS"), versenyrekord);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_GOLDPOTS"), tojas);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_RABLASOK"), rablas);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_RANGE"), range);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_FUVAROK"), fuvarok);
    Stats_AddRow(forplayerid, 2, -1, "Fallout: %d", fallout);
    Stats_AddRow(forplayerid, 2, -1, "Derby: %d", derby);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_STUNTBONUS"), stuntbonus);
    Stats_AddRow(forplayerid, 2, -1, LANG(forplayerid, "MSG_STATS_WARNS"), warn);

    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_DELIVERED_MAILS"), levelek);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_DELIVERED_PIZZAS"), pizza);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_CTC_CAR"), ctc_auto);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_CTC_BOAT"), ctc_hajo);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_JAIL"), t_jail[0], t_jail[1], t_jail[2]);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_MUTE"), t_mute[0], t_mute[1], t_mute[2]);
    Stats_AddRow(forplayerid, 3, -1, LANG(forplayerid, "MSG_STATS_FREEZE"), t_freeze[0], t_freeze[1], t_freeze[2]);

	//Stats_AddRow(forplayerid, 3, color, "Color: 0x%x", color);
	//Stats_AddRow(forplayerid, 3, chatcolor, "Chatcolor: 0x%x", chatcolor);
 	//if(use2) Stats_AddRow(forplayerid, 3, idcolor, "ID Color: 0x%x", idcolor);

	Stats_AddRow(forplayerid, 3, -1, "Reg: %02d.%02d.%02d %02d:%02d:%02d", reg[0], reg[1], reg[2], reg[3], reg[4], reg[5]);
	Stats_AddRow(forplayerid, 3, -1, "Last: %02d.%02d.%02d %02d:%02d:%02d", last[0], last[1], last[2], last[3], last[4], last[5]);

	// Ha van kliense, akkor már a RAM változó bevan állítva
	if(playerid != -1 && GetPVarType(playerid, "RAM"))
	{
		new card[18], cpu[48], os[32];

		GetPVarString(playerid, "VGA", card, sizeof(card));
		GetPVarString(playerid, "CPU", cpu, sizeof(cpu));
		GetPVarString(playerid, "OS", os, sizeof(os));
		Stats_AddRow(forplayerid, 3, -1, "VGA: %s", card);
		
  		Stats_AddRow(forplayerid, 3, -1, "RAM: %d MB", GetPVarInt(playerid, "RAM"));
		Stats_AddRow(forplayerid, 2, -1, "CPU: %s", cpu);
		Stats_AddRow(forplayerid, 3, -1, "OS: %s", os);
	}
 	Stats_AddWeapons(forplayerid, weapons);
    SetPVarInt(forplayerid, "StatsTick", GetTickCount());
	return 1;
}

CMD:forumstats(playerid, params[], 0, 0)
{
	if(!gForumSQL) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ATMENETILEG_NEM_ELERHETO"));

	if(isnull(params))
	{
    	if(PlayerInfo[playerid][fRegID] == -1)
		{
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_REGISZTRALVA_A_FORUMON"), PlayerInfo[playerid][fRegID]);
            SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_DE_HA_MAR_VAN_REGISZTRALT_FELHASZNAL"));
			return 1;
		}

		player1 = playerid;
	}
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/forumstats {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(PlayerInfo[player1][fRegID] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_JATEKOS_NINCS_REGISZTRALVA"));

	mysql_format(ForumSQLConnect, query, sizeof(query), "SELECT * FROM `smf_members` WHERE `id_member` = '%d'",PlayerInfo[player1][fRegID]);
	mysql_function_query(ForumSQLConnect, query, true, "THREAD_Forumstats", "ddd", playerid, player1, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Forumstats(playerid, forplayer, queue);
public THREAD_Forumstats(playerid, forplayer, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Forumstats);

	new
	    Group,
	    LastLogin[2],
	    szName[24],
	    Karma[3],
		Time[6],
		bool:HideEMail,
		Location[64],
		szRank[32],
		O_Time;

	cache_get_row(0, 7, i_str); //Fórum név
	cache_get_row_int(0, 6, LastLogin[1]); //Utolsó bejelentkezés
	//cache_get_row_int(0, 21, vID); //Születésnap
	cache_get_row_int(0, 4, Group); //Rang
	cache_get_row_int(0, 2, LastLogin[0]); //Regisztráció dátuma
	cache_get_row(0, 18, tmp); //EMail
	cache_get_row(0, 24, Location); //Lakóhely
	cache_get_row_int(0, 54, O_Time); //Fórumon töltött teljes idõ
	cache_get_row(0, 19, country);// Titulus
	cache_get_row_int(0, 3, datez); //Hozzászólások
	cache_get_row_int(0, 8, Karma[0]); //Privát üzenetek

	cache_get_row_int(0, 36, Karma[1]); //Tisztelet -
	cache_get_row_int(0, 37, Karma[2]); //Tisztelet +
	HideEMail = !!cache_get_row_int_ex(0, 29); //Email rejtés

	cache_get_row(0, 21, szName); //Születésnap
	date(LastLogin[0], day, month, year, hour, minute, second);
	date(LastLogin[1], Time[0], Time[1], Time[2], Time[3], Time[4], Time[5]);

	switch(Group)
	{
	    case 1: szRank = "Tulajdonos";
	    case 2: szRank = "Globális Moderátor";
	    case 3: szRank = "Lokális Moderátor";
	    case 4: szRank = "Újonc";
	    case 5: szRank = "Fórum figyelõ";
	    case 6: szRank = "Vérbeli tag";
	    case 7: szRank = "Megszállot tag";
	    case 8: szRank = "Fórum függõ";
	    case 9: szRank = "Szerver admin";
	    case 11: szRank = "Veterán fórumozó";
	    case 13: szRank = "Õskövület";
	    case 15: szRank = "Legenda";
	    case 21: szRank = "Lelkes újonc";
	    case 23: szRank = "Tulajdonos & Glob. mod.";
	    case 24: szRank = "Szerver admin & Glob. mod.";
	    case 26: szRank = "Rézkatlan kovácsoló";
	}
	SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_FORUM_STATISZTIKA"));

	if(HideEMail)
	{
	    if(GetPVarInt(playerid, "Level") < 4)
	    {
			SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG_FORUM_NEV__REGID__RANG__"), i_str, PlayerInfo[forplayer][fRegID], szRank);
		}
		else
		{
            SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG_FORUM_NEV__REGID__RANG___1"), i_str, PlayerInfo[forplayer][fRegID], szRank, tmp);
		}
	}
	else
	{
        SendClientMessagef(playerid, COLOR_GOLD, LANG(playerid, "MSG_FORUM_NEV__REGID__RANG___1"), i_str, PlayerInfo[forplayer][fRegID], szRank, tmp);
	}

	if(Time[2] == 1970)
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_REGISZTRACIO_IDEJE_2D2D2D_"), year, month, day, hour, minute, second);
	}
	else
	{
		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_REGISZTRACIO_IDEJE_2D2D2D__1"), year, month, day, hour, minute, second, Time[2], Time[1], Time[0], Time[3], Time[4], Time[5]);
	}
	SendClientMessagef(playerid, COLOR_WHITE, "Lakóhely: %s, Fórumon töltött órák: %.3f, Tituls: %s", (isnull(Location)) ? ("N/A") : (Location), (float(O_Time) / 3600), (isnull(country)) ? ("N/A") : (country));

	if(!strcmp(name, "0001-01-01"))
	{
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_SZULETESNAP_NA_HOZZASZOLASOK"), datez, Karma[0], Karma[2],Karma[1]);
		return 1;
	}
	else
	{
		for(new i, j = strlen(szName); i != j; i++)
		{
			if(szName[i] != '-') continue;
			szName[i] = '.';
		}
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_SZULETESNAP__HOZZASZOLASOK"), szName, datez, Karma[0], Karma[2],Karma[1]);
	}
	return 1;
}

CMD:ignore(playerid, params[], 0, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/ignore <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADAT_NEM_TILTHATOD_LE"));

	if(Bit_Get(g_pIgnoreList[playerid], player1)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_MAR_LETIL"), GetPlayerColor(player1) >>> 8, pName(player1), player1, player1);

	Bit_Set(g_pIgnoreList[playerid], player1, true);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_LETILTOTTAD__NEVU_JATEKOST"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	return 1;
}

CMD:unignore(playerid, params[], 0, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/unignore <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADAT_NEM_TILTHATOD_LE"));

	if(!Bit_Get(g_pIgnoreList[playerid], player1)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_NEM_TILTO"), GetPlayerColor(player1) >>> 8, pName(player1), player1, player1);

    Bit_Set(g_pIgnoreList[playerid], player1, false);
    SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_FELOLDOTTAD__NEVU_JATEKOST"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	return 1;
}

CMD:chatignore(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid, SZINT_CHATIGNORE);
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/chatignore <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADAT_NEM_TILTHATOD_LE"));
	if(GetPVarInt(player1, "Level") > 0 || IsPlayerAdmin(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ADMINT_NEM_TILTHATSZ_LE"));

	if(Bit_Get(g_pChatIgnoreList[playerid], player1)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_MAR_LETIL_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1, player1);

	Bit_Set(g_pChatIgnoreList[playerid], player1, true);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_LETILTOTTAD__NEVU_JATEKOST_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	return 1;
}

CMD:chatunignore(playerid, params[], 0, 0)
{
	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/chatunignore <Játékos ID/Név>");
	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(player1 == playerid) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADAT_NEM_TILTHATOD_LE"));

	if(!Bit_Get(g_pChatIgnoreList[playerid], player1)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NEVU_JATEKOST_NEM_TILTO"), GetPlayerColor(player1) >>> 8, pName(player1), player1, player1);

    Bit_Set(g_pChatIgnoreList[playerid], player1, false);
    SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_FELOLDOTTAD__NEVU_JATEKOST_1"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
	return 1;
}

CMD:chatignoreall(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid, SZINT_CHATIGNOREt);
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_BEERKEZO_UZENETEK_LETILVA_MINDENKITO"));
	Bit_SetAll(g_pChatIgnoreList[playerid], true);
	return 1;
}

CMD:chatunignoreall(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BEERKEZO_UZENETEK_ENGEDELYEZVE"));
	Bit_SetAll(g_pChatIgnoreList[playerid], false);
	return 1;
}

CMD:ignoreall(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_BEERKEZO_PRIVAT_UZENETEK_LETILVA"));
	Bit_SetAll(g_pIgnoreList[playerid], true);
	return 1;
}

CMD:unignoreall(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BEERKEZO_PRIVAT_UZENETEK_ENGEDELYEZV"));
	Bit_SetAll(g_pIgnoreList[playerid], false);
	return 1;
}

CMD:fakepm(playerid, params[], 4, 0)
{
    new
	    player2,
 		//pLevel = GetPVarInt(playerid, "Level"),
//   		iLevel,
   		szString2[128 + 1],
		iSpace = -1;

    if(sscanf(params, "uus[" #STR_SIZE "]", player1, player2, i_str)) return SendUsage(playerid, "/pm <küldõ ID/Név> <fogadó ID/Név> <Üzenet>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
    if(IsNotConnected(player2)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

   	new
	    len = strlen(i_str);
	if(len > 87) //87
	{
		for(new i = 70; i != 90; i++)
		{
			if(i_str[i] == ' ')
			{
		    	iSpace = i;
            	break;
			}
		}
		if(iSpace == -1) iSpace = 87;

	    strmid(szString2, i_str, iSpace, len); // Belerakjuk a string2-be a végit
		strdel(i_str, iSpace, len);

		SendClientMessagef(player2, COLOR_YELLOW, LANG(player2, "MSG_PM___NEKED_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);
		SendClientMessagef(player2, COLOR_YELLOW, LANG(player2, "MSG_PM___NEKED_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, szString2);
	}
	else
	{
		SendClientMessagef(player2, COLOR_YELLOW, LANG(player2, "MSG_PM___NEKED_"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);
	}
    PlayerPlaySound(player2, 1058);
	GameTextForPlayer(player2, LANG(player2, "MSG_GAMETEXT_PM_RECIEVED"), 2000, 3);
   		
	foreach(new i: Player)
	{
		if((g_PlayerFlags[i] & e_SEEPMS))
		{
		    if(i == player1 || i == player2) continue;
		    
		    if(GetPVarInt(i, "Level") == 0) continue;
		    
		    //if(i == playerid) continue;
			format(tmp, 144, "*** PM: %s(%d){6298FF} -> %s(%d): {6298FF}%s", pName(player1), player1, pName(player2), player2, i_str);
  			SendClientMessage(i, 0x6298FFAA, tmp);
		}
	}
	return 1;
}

CMD:pm(playerid, params[], 0, 0)
{
	if(sscanf(params, "us[" #STR_SIZE "]", player1, i_str)) return SendUsage(playerid, "/pm <Játékos ID/Név> <Üzenet>");

	if(IsNotConnected(player1)/* || IsPlayerNPC(player1)*/) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(playerid == player1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAGADNAK_NEM_KULDHETSZ_PRIVAT"));

    if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
    {
		if(Bit_Get(g_pIgnoreList[player1], playerid))
		{
            // Hm.. érdekesebb xD
			if(PlayerInfo[player1][pRegID] == 1)
				return 0;

			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__LETILTOTTA_A_TOLED_ERKE"), GetPlayerColor(player1) >>> 8, pName(player1), player1);
			return 1;
		}
	}
	if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(i_str, g_szTiltottSzavak2[i], true) != -1) return 0;
	new
		iPMFlood = GetPVarInt(playerid, "PMFlood") + 1;
	if(iPMFlood > 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NE_FLOODOLD_A_PMET_VARJ_HAROM"));


    if(IPCheck(playerid, i_str, "PM"))
		return 1;


	// Ha kevesebb, mint 10órát van a szerveren és IP-t próbál másnak küldeni akkor nem engedjük neki
	//if(/*GetPVarInt(playerid, "TotalHours") < 10 && */IPCheck(playerid, params, "/pm")) //Meg a lófaszt! Egyátalán nem írhat PM-be IP-t
		//return 0;

	new
	    len = strlen(i_str);
	if(len > 87) //87
	{
		new
			szString2[128 + 1],
			iSpace = -1;

		for(new i = 70; i != 90; i++)
		{
			if(i_str[i] == ' ')
			{
		    	iSpace = i;
            	break;
			}
		}
		if(iSpace == -1) iSpace = 87;

	    strmid(szString2, i_str, iSpace, len); // Belerakjuk a string2-be a végit
		strdel(i_str, iSpace, len);

		SendClientMessagef(player1, COLOR_YELLOW, LANG(player1, "MSG_PM___NEKED_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str);
		SendClientMessagef(player1, COLOR_YELLOW, LANG(player1, "MSG_PM___NEKED_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, szString2);

		SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_PM_TOLED___"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);
		SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_PM_TOLED___"), GetPlayerColor(player1) >>> 8, pName(player1), player1, szString2);
	}
	else
	{
		SendClientMessagef(player1, COLOR_YELLOW, LANG(player1, "MSG_PM___NEKED_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str);
		SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_PM_TOLED___"), GetPlayerColor(player1) >>> 8, pName(player1), player1, i_str);
	}

	PlayerPlaySound(player1, 1058);
	PlayerPlaySound(playerid, 1058);

	GameTextForPlayer(player1, LANG(player1, "MSG_GAMETEXT_PM_RECIEVED"), 2000, 3);
	GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_PM_SENT")), 2000, 3);

	SetPVarInt(player1, "lastPMer", playerid);
	SetPVarInt(playerid, "PMFlood", iPMFlood);

	getdate(year, month, day);
	gettime(hour, minute, second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `pm`(ID, player, reg_id, reciever, reciever_id, msg, time) VALUES(0, '%s', %d, '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], pName(player1), PlayerInfo[player1][pRegID], i_str, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");

	format(tmp, 144, "*** PM: %s(%d){6298FF} -> %s(%d):{6298FF} %s", pName(playerid), playerid, pName(player1), player1, i_str);

	// Ha a küldõ "speciális" játékos, akkor csak azoknak mutassuk ki a PM-et, a többinek nem.
	new
		bool:bReturn = false;
	switch(PlayerInfo[playerid][pRegID])
	{
		case 1, 2, 3, 16054:
		{
			bReturn = true;
			foreach(new i: Player)
			{
                if(i == player1 || i == playerid) continue;
				switch(PlayerInfo[i][pRegID])
				{
					case 1, 2, 3, 16054: if(g_PlayerFlags[i] & e_SEEPMS) SendClientMessage(i, COLOR_WHITE, tmp);
				}
			}
		}
	}
	if(!bReturn)
	{
	    // Ha a fogadó "speciális" játékos, akkor csak azoknak mutassuk ki a PM-et, a többinek nem. (Ez a része szar) 123456789
		switch(PlayerInfo[player1][pRegID])
		{
			case 1, 2, 3, 16054:
			{
	            bReturn = true;
				foreach(new i: Player)
				{
	                if(i == player1 || i == playerid) continue;
					switch(PlayerInfo[i][pRegID])
					{
						case 1, 2, 3, 16054: if(g_PlayerFlags[i] & e_SEEPMS) SendClientMessage(i, COLOR_WHITE, tmp);
					}
				}
			}
		}
	}

	if(!bReturn)
	{
		new
		    pLevel = GetPVarInt(playerid, "Level"),
		    iLevel;
		foreach(new i: Player)
		{
	        if(i == player1 || i == playerid) continue;
			if((iLevel = GetPVarInt(i, "Level")) > 1 && pLevel <= iLevel && GetPVarInt(player1, "Level") <= iLevel && (g_PlayerFlags[i] & e_SEEPMS))
			{

	            if(len > 87)
				{
					new
						szString2[128 + 1],
						iSpace = -1;

					for( i = 70; i != 90; i++)
					{
						if(i_str[i] == ' ')
						{
					    	iSpace = i;
			            	break;
						}
					}
					if(iSpace == -1) iSpace = 87;

				    strmid(szString2, i_str, iSpace, len); // Belerakjuk a string2-be a végit
					strdel(i_str, iSpace, len);


                    SendClientMessagef(i, 0x6298FFAA, "*** PM: %s(%d){6298FF} -> %s(%d):{6298FF} %s", pName(playerid), playerid, pName(player1), player1, i_str);
                    SendClientMessagef(i, 0x6298FFAA, "*** PM: %s(%d){6298FF} -> %s(%d):{6298FF} %s", pName(playerid), playerid, pName(player1), player1, szString2);
				}
				else SendClientMessagef(i, 0x6298FFAA, "*** PM: %s(%d){6298FF} -> %s(%d):{6298FF} %s", pName(playerid), playerid, pName(player1), player1, i_str);
			}
		}
	}
	return 1;
}

CMD:bug(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/bug <Szöveg>");
	SPAM_CHECK(Bug, 20000)

	if(IPCheck(playerid, params, "/bug"))
		return 1;

	SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_HIBAJELENTESED_ELKULDVE_AZ"));
	format(tmp, sizeof(tmp), "* Bugreport >> {%06x}%s(%d): {" #XCOLOR_ORANGE "}%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, params);
    foreach(new i: Player)
	{
		if(!GetPVarInt(i, "Level")) continue;
		SendClientMessage(i, COLOR_WHITE, tmp);
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `reports_bug`(`id`, `player`, `reg_id`, `text`, `time`) VALUES (0, '%s', %d, '%e', '%02d.%02d.%02d %02d:%02d:%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:bugs(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/bugs <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `player`, `text`, `time` FROM `reports_bug` ORDER BY `time` DESC LIMIT %d, 30", --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_BugsDialog", "ddd", playerid, 1, g_pQueryQueue[playerid]);
	return 1;
}

CMD:idea(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/idea <Szöveg>");

	SPAM_CHECK(Idea, 20000)

    if(IPCheck(playerid, params, "/idea"))
		return 1;

	SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_OTLETETED_ELKULDVE_AZ_ADMINOK"));
	format(tmp, sizeof(tmp), "* Ötlet >> {%06x}%s(%d): {" #XCOLOR_ORANGE "}%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, params);
    foreach(new i: Player)
	{
		if(!GetPVarInt(i, "Level")) continue;
		SendClientMessage(i, COLOR_WHITE, tmp);
	}

    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `reports_ideas`(`id`, `player`, `reg_id`, `text`, `time`) VALUES (0, '%s', %d, '%e', '%02d.%02d.%02d %02d:%02d:%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}
CMD:otlet(playerid, params[], 0, 0)
{
	return cmd_idea(playerid, params);
}

CMD:ideas(playerid, params[], 0, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/ideas <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `player`, `text`, `time` FROM `reports_ideas` ORDER BY `time` DESC LIMIT %d, 30", --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_BugsDialog", "ddd", playerid, 2, g_pQueryQueue[playerid]);
	return 1;
}
CMD:otletek(playerid, params[], 0, 0)
{
	return cmd_ideas(playerid, params);
}

CMD:report(playerid, params[], 0, 0)
{
    if(isnull(params)) return SendUsage(playerid, "/report <Szöveg>");
	SPAM_CHECK(Report, 20000)

	if(IPCheck(playerid, params, "/report"))
		return 1;

    SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_PANASZOD_ELKULDVE_AZ_ADMINOKNAK"));
 	format(tmp, sizeof(tmp), "* Report >> {%06x}%s(%d): {" #XCOLOR_ORANGE "}%s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, params);
    foreach(new i: Player)
	{
		if(!GetPVarInt(i, "Level")) continue;
		SendClientMessage(i, COLOR_WHITE, tmp);
	}
    getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `reports_panasz`(`id`, `player`, `reg_id`, `text`, `time`) VALUES (0, '%s', %d, '%e', '%02d.%02d.%02d %02d:%02d:%02d')", pName(playerid), PlayerInfo[playerid][pRegID], params, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:reports(playerid, params[], 1, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/reports <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `player`, `text`, `time` FROM `reports_panasz` ORDER BY `time` DESC LIMIT %d, 30", --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_BugsDialog", "ddd", playerid, 3, g_pQueryQueue[playerid]);
	return 1;
}

CMD:lastpms(playerid, params[], 0, 0)
{
    new
	    iLimit;

	 //player1 = playerid;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/lastpms <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

    mysql_format(1, query, sizeof(query), "SELECT * FROM `pm` WHERE `reg_id` = '%d' OR `reciever_id` = '%d' ORDER BY `pm`.`ID` DESC LIMIT %d, 30",PlayerInfo[playerid][pRegID],PlayerInfo[playerid][pRegID], --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_LastPMS", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_LastPMS(playerid, queue);
public THREAD_LastPMS(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LastPMS);

	new
	    rows = cache_get_row_count(),
	    playername[24],
	    regid,
	    reciever_name[24],
	    reciever_regid,
	    msg[128],
	    msgtime[128];

    if(!rows)
	{
        ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "PM", "Nincs egy megjeleníthetõ üzenet sem.", "Ok");
		return 1;
	}

	i_str[0] = EOS;
	dline[0] = EOS;

    for(new x; x != rows; x++)
	{
		cache_get_row(x, 1, playername);
		cache_get_row_int(x, 2, regid);
		cache_get_row(x, 3, reciever_name);
		cache_get_row_int(x, 4, reciever_regid);
		cache_get_row(x, 5, msg);
		cache_get_row(x, 6, msgtime);
		if(!x)
		{
			format(dline, sizeof(dline), "{FFFFFF}%s(%d) -> {FFFFFF}%s(%d): {FFFFFF}%s {" #XCOLOR_GREEN2 "}[%s]", playername,regid,reciever_name,reciever_regid,msg,msgtime);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n{FFFFFF}%s(%d) -> {FFFFFF}%s(%d): {FFFFFF}%s {" #XCOLOR_GREEN2 "}[%s]", dline, playername,regid,reciever_name,reciever_regid,msg,msgtime);
		}
	}
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "PM", dline, "Ok");
	return 1;
}

CMD:lastips(playerid, params[], 1, 0)
{
	new
	    iLimit;
	if(sscanf(params, "D(1)", iLimit)) return SendUsage(playerid, "/lastips <Lista | Alapból: 1, Minden oldalon 30db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `player`, `msg`, `time` FROM `sentips` ORDER BY `time` DESC LIMIT %d, 30", --iLimit * 30);
	mysql_function_query(1, query, true, "THREAD_BugsDialog", "ddd", playerid, 4, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_BugsDialog(playerid, type, queue);
public THREAD_BugsDialog(playerid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_BugsDialog);

	new
	    i,
    	iRows = cache_get_row_count();
	if(!iRows)
	{
		switch(type)
		{
			case 1: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Hibajelentések", "Ezen az oldalon nincs egy hibajelentés sem!", "Ok");
			case 2: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Ötletek", "Ezen az oldalon nincs egy ötlet sem!", "Ok");
			case 3: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Panaszok", "Ezen az oldalon nincs senkire sem panasz!", "Ok");
		}
		return 1;
	}

	for(new x; x != iRows; x++)
	{
		cache_get_row(x, 0, name);
		cache_get_row(x, 1, i_str);

		if(type != 4)
		{
			cache_get_row(x, 2, country);
		}
		else
		{
			cache_get_row_int(x, 2, datez);
			date(datez, day, month, year, hour, minute, second);
			format(country, sizeof(country), "%02d.%02d.%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
		}

		if(!i++)
		{
			format(dline, sizeof(dline), "{" #XCOLOR_DEFAULT "}%s: %s {" #XCOLOR_GREEN2 "}[%s]", name, i_str, country);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n{" #XCOLOR_DEFAULT "}%s: %s {" #XCOLOR_GREEN2 "}[%s]", dline, name, i_str, country);
		}
	}

	switch(type)
	{
		case 1: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_ORANGE "}Hibajelentések", dline, "Ok");
		case 2: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_ORANGE "}Ötletek", dline, "Ok");
		case 3: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_ORANGE "}Panaszok", dline, "Ok");
		case 4: ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_ORANGE "}Utoljára próbált IP küldések", dline, "Ok");
	}
	return 1;
}

CMD:spam(playerid, params[], 4, 0)
{
	new
		Color;
	if(sscanf(params, "xs[" #STR_SIZE "]", Color, i_str)) return SendUsage(playerid, "/spam <Szín 0x> <Szöveg>");
    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;
	for(new i; i != 100; i++)
	{
		SendClientMessageToAll_(Color, ColouredText(i_str));
	}

	FilterColorTags(i_str);
	AdminCommandLog("SPAM", playerid, -1, i_str);
	return 1;
}

CMD:write(playerid, params[], 1, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/write <Szöveg>");
    if(!IsOwner(playerid)) for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(params, g_szTiltottSzavak2[i], true) != -1) return 0;

	SendClientMessageToAll_(COLOR_WHITE, ColouredText(params));
    AdminCommandLog("WRITE", playerid, -1, params);
	return 1;
}

CMD:vrecord(playerid, params[], 3, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/vrecord <Név>");
	if(GetPVarInt(playerid, "Recording")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_KESZITESZ_EGY_NPCT"));
	if(!IsPlayerInAnyDynamicVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JARMUVES_NPC_KESZITESEHEZ"));
	if(strlen(params) > 24) SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_NEV_MAXIMUM_24_KARAKTER"));

    StartRecordingPlayerData(playerid, PLAYER_RECORDING_TYPE_DRIVER, params);
	SetPVarInt(playerid, "Recording", 1);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_ELKEZDTED_KESZITENI_A__NEVU"), params);

    AdminCommandLog("VRECORD", playerid, -1, params);
	return 1;
}

CMD:ofrecord(playerid, params[], 3, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/ofrecord <Név>");
    if(GetPVarInt(playerid, "Recording")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_KESZITESZ_EGY_NPCT"));
    if(IsPlayerInAnyDynamicVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_GYALOGOS_NPC_KESZITESEHEZ"));
	if(strlen(params) > 24) SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_NEV_MAXIMUM_24_KARAKTER"));

    StartRecordingPlayerData(playerid, PLAYER_RECORDING_TYPE_ONFOOT, params);

	SetPVarInt(playerid, "Recording", 1);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_ELKEZDTED_KESZITENI_A__NEVU_1"), params);

    AdminCommandLog("OFRECORD", playerid, -1, params);
	return 1;
}

CMD:stoprecord(playerid, params[], 3, 0)
{
    if(!GetPVarInt(playerid, "Recording")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_KESZITESZ_NPCT"));

    StopRecordingPlayerData(playerid);
	DeletePVar(playerid, "Recording");
	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_BEFEJEZTED_AZ_NPC_KESZITESET"));

    AdminCommandLog("STOPRECORD", playerid, -1);
    return 1;
}

/* House Commands */
CMD:propdata(playerid, params[], 0, 0)
{
	if((houseid = IsPlayerNearProperty(playerid)) != -1)
	{
		new
			CarModel,
			Color[2],
			Paintjob,
			szCarName[32];
		GetGVarString("PropOwner", name, sizeof(name), houseid);
        GetGVarString("PropName", i_str, sizeof(i_str), houseid);

        datez = GetGVarInt("PropOwnerRegID", houseid);
        vID = GetGVarInt("PropValue", houseid);
        player1 = GetGVarInt("PropEarning", houseid);
		GetGVarString("PropLocked", tmp, 32, houseid);

        CarModel = GetGVarInt("CarModel", houseid);
        Color[0] = GetGVarInt("CarColor1", houseid);
        Color[1] = GetGVarInt("CarColor2", houseid);
        Paintjob = GetGVarInt("Paintjob", houseid);

		dline[0] = EOS;
		if(datez == PlayerInfo[playerid][pRegID])
		{
			format(dline, sizeof(dline), "Név: {" #XCOLOR_RED "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "} - %s | {" #XCOLOR_DEFAULT "}Tulajdonos: {" #XCOLOR_BLUE3 "}Én {" #XCOLOR_GREEN "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Bezárva: %s {" #XCOLOR_WHITE "}| {" #XCOLOR_PINK "}Kirabolva: %d alkalommal", i_str, houseid, GetHouseTypeName(houseid), name, datez, (tmp[0] == '*') ? ("{" #XCOLOR_WHITE "}Nem") : ("{" #XCOLOR_RED "}Igen"), GetGVarInt("HouseKirabolva", houseid));
		}
		else
		{
			format(dline, sizeof(dline), "Név: {" #XCOLOR_RED "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "} - %s | {" #XCOLOR_DEFAULT "}Tulajdonos: {" #XCOLOR_GREEN "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Bezárva: %s {" #XCOLOR_WHITE "}| {" #XCOLOR_PINK "}Kirabolva: %d alkalommal", i_str, houseid, GetHouseTypeName(houseid), (datez == -1) ? ("Senki") : (name), datez, (tmp[0] == '*') ? ("Nem") : ("{" #XCOLOR_RED "}Igen"), GetGVarInt("HouseKirabolva", houseid));
		}

        if(IsValidModel(CarModel)) strcat(szCarName, g_szVehicleNames[CarModel - 400]);
		format(dline, sizeof(dline), "%s\n{" #XCOLOR_DEFAULT "}Ár: {" #XCOLOR_ORANGE "}%s$  {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Jövedelem: {" #XCOLOR_ORANGE "}%s$ {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Autó: {" #XCOLOR_YELLOW "}%s", dline, FormatNumber(vID), FormatNumber(player1), (CarModel == -1) ? ("Nincs") : (szCarName));
		if(CarModel != -1)
		{
			format(dline, sizeof(dline), "%s\n{" #XCOLOR_DEFAULT "}Szín: {" #XCOLOR_PINK "}%d {" #XCOLOR_WHITE "}& {" #XCOLOR_LIGHTGREEN "}%d {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Paintjob: {" #XCOLOR_GREEN2 "}%d {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Autó Bezárva: %s", dline, Color[0], Color[1], Paintjob, (g_HouseFlags[houseid] & e_CAR_DOORS) ? ("{" #XCOLOR_RED "}Igen") : ("{" #XCOLOR_WHITE "}Nem"));
			format(dline, sizeof(dline), "%s\n{" #XCOLOR_WHITE "}Random Kerék: %s | Tele tiltva: %s | Lámpák: %s | Motorháztetõ: %s | Csomagtartó: %s", dline, (g_HouseFlags[houseid] & e_RANDOM_WHEEL) ? ("Igen") : ("Nem"), (GetVehicleFlags(GetGVarInt("HouseCar", houseid)) & e_NO_TELE) ? ("{" #XCOLOR_WHITE "}Igen") : ("{" #XCOLOR_RED "}Nem"),
			(g_HouseFlags[houseid] & e_CAR_LIGHTS) ? ("Be") : ("Ki"), (g_HouseFlags[houseid] & e_CAR_BONNET) ? ("Nyitva") : ("Csukva"), (g_HouseFlags[houseid] & e_CAR_BOOT) ? ("Nyitva") : ("Csukva"));
		}
		return ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_GREEN "}Ház adatok", dline, "Ok");
	}

	if((houseid = IsPlayerNearBiznis(playerid)) != -1)
	{
		new
			szName[24];
		GetGVarString("BizOwner", name, sizeof(name), houseid);
        GetGVarString("BizName", i_str, sizeof(i_str), houseid);

        datez = GetGVarInt("BizOwnerRegID", houseid);
        vID = GetGVarInt("BizValue", houseid);
        player1 = GetGVarInt("BizEarning", houseid);
		GetGVarString("BizLocked", tmp, 32, houseid);

		dline[0] = EOS;
		if(datez == PlayerInfo[playerid][pRegID])
		{
			format(dline, sizeof(dline), "Név: {" #XCOLOR_RED "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "}  - %s | {" #XCOLOR_DEFAULT "}Tulajdonos: {" #XCOLOR_BLUE3 "}Én {" #XCOLOR_GREEN "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Bezárva: %s {" #XCOLOR_WHITE "}| {" #XCOLOR_PINK "}Kirabolva: %d alkalommal", i_str, houseid, GetBiznisTypeName(houseid), name, datez, (tmp[0] == '*') ? ("{" #XCOLOR_WHITE "}Nem") : ("{" #XCOLOR_RED "}Igen"), GetGVarInt("BiznisKirabolva", houseid));
		}
		else
		{
			format(dline, sizeof(dline), "Név: {" #XCOLOR_RED "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "} - %s | {" #XCOLOR_DEFAULT "}Tulajdonos: {" #XCOLOR_GREEN "}%s {" #XCOLOR_BLUE "}( %d ) {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Bezárva: %s {" #XCOLOR_WHITE "}| {" #XCOLOR_PINK "}Kirabolva: %d alkalommal", i_str, houseid, GetBiznisTypeName(houseid), (datez == -1) ? ("Senki") : (name), datez, (tmp[0] == '*') ? ("{" #XCOLOR_WHITE "}Nem") : ("{" #XCOLOR_RED "}Igen"), GetGVarInt("BiznisKirabolva", houseid));
		}
		format(dline, sizeof(dline), "%s\n{" #XCOLOR_DEFAULT "}Ár: {" #XCOLOR_ORANGE "}%s$  {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Jövedelem: {" #XCOLOR_ORANGE "}%s$ {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Belépés ára: {" #XCOLOR_GREEN2 "}${" #XCOLOR_GREEN "}%s", dline, FormatNumber(vID), FormatNumber(player1), FormatNumber(GetGVarInt("BizEnterValue", houseid)));

		switch(GetGVarInt("BizInteriorType", houseid))
		{
		    case 0: szName = "Pizza Stack";
		    case 1: szName = "Burger Shot";
		    case 2: szName = "Chicken";
		    case 3..6: szName = "Fegyverbolt";
			default: szName = "Alap";
		}
		format(dline, sizeof(dline), "%s\n{" #XCOLOR_DEFAULT "}Ikon változtatható: %s {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}IkonID: {" #XCOLOR_BLUE3 "}%d {" #XCOLOR_WHITE "}| {" #XCOLOR_DEFAULT "}Típus: %s (%d)", dline, (!GetGVarType("BizNotAllowIcon", houseid)) ? ("{" #XCOLOR_WHITE "}Igen") : ("{" #XCOLOR_RED "}Nem"), GetGVarInt("BizMapIconType", houseid), szName, GetGVarInt("BizInteriorType", houseid));
		return ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE "}Biznis adatok", dline, "Ok");
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_OLYAN_HELY"));
	return 1;
}

CMD:ownertime(playerid, params[], 0, 0)
{
	if(sscanf(params, "D(-1)", houseid)) return SendUsage(playerid, "/ownertime <Ház ID>");

	new
		iRegID;
	if(houseid == -1)
	{
		if((houseid = IsPlayerNearProperty(playerid)) == -1) goto Ide;

		iRegID = GetGVarInt("PropOwnerRegID", houseid);
		mysql_format(1, query, sizeof(query), "SELECT `laston` FROM `players` WHERE `reg_id` = %d", iRegID);
		mysql_function_query(1, query, true, "THREAD_Ownertime_1", "dddd", playerid, houseid, iRegID, g_pQueryQueue[playerid]);

		valstr(name, houseid);
		AdminCommandLog("OWNERTIME_H", playerid, -1, name);
	}

	Ide:
	if(houseid == -1)
	{
        if((houseid = IsPlayerNearBiznis(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_BHHAZ_RV"));

		iRegID = GetGVarInt("BizOwnerRegID", houseid);
		mysql_format(1, query, sizeof(query), "SELECT `laston` FROM `players` WHERE `reg_id` = %d", iRegID);
		mysql_function_query(1, query, true, "THREAD_Ownertime_2", "dddd", playerid, houseid, iRegID, g_pQueryQueue[playerid]);

		valstr(name, houseid);
		AdminCommandLog("OWNERTIME_B", playerid, -1, name);
		return 1;

	}
	return 1;
}
CMD:laston(playerid, params[], 0, 0)
{
	return cmd_ownertime(playerid, params);
}

forward THREAD_Ownertime_1(playerid, hazid, iRegID, queue);
public THREAD_Ownertime_1(playerid, hazid, iRegID, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Ownertime_1);

	houseid = hazid;
//	GetGVarString("PropName", i_str, sizeof(i_str), houseid);
	GetGVarString("PropOwner", name, sizeof(name), houseid);

	cache_get_row_int(0, 0, datez);

	new year1, month1, day1, hour1, minute1, second1;
	date(datez, day1, month1, year1, hour1, minute1, second1);

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendClientMessagef(playerid, COLOR_BASIC, LANG(playerid, "MSG_LASTON_2D2D2D_2D2D2"), year1, month1, day1, hour1, minute1, second1, name, iRegID, year, month, day, hour, minute, second, houseid);
	return 1;
}

forward THREAD_Ownertime_2(playerid, hazid, iRegID, queue);
public THREAD_Ownertime_2(playerid, hazid, iRegID, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Ownertime_2);

	houseid = hazid;
//	GetGVarString("BizName", i_str, 32, houseid);
	GetGVarString("BizOwner", name, sizeof(name), houseid);

	cache_get_row_int(0, 0, datez);

	new year1, month1, day1, hour1, minute1, second1;
	date(datez, day1, month1, year1, hour1, minute1, second1);

	getdate(year, month, day);
	gettime(hour, minute, second);

	SendClientMessagef(playerid, COLOR_BASIC, LANG(playerid, "MSG_LASTON_2D2D2D_2D2D2"), year1, month1, day1, hour1, minute1, second1, name, iRegID, year, month, day, hour, minute, second, houseid);
	return 1;
}

CMD:findprop(playerid, params[], 0, 0)
{
	new
	    start,
	    end,
		bool:bCsakUrest;
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]ddD(0)", i_str, tmp, start, end, bool:bCsakUrest)) return SendUsage(playerid, "/findprop <House/Biznis> <Price/Earning/EnterValue> <Ettõl> <Eddig> <Csak üres házakat? 0 vagy 1>");
	if(start >= end) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_FORDITVA_LOL_A_KEZOERTEKED"));

	if(strfind(i_str, "house", true) != -1)
	{
		if(!strcmp(tmp, "price", true))
		{
			if(!bCsakUrest)
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `prop_value`, `name` FROM `houses` WHERE `prop_value` > %d AND `prop_value` < %d ORDER BY `prop_value` DESC LIMIT 30", start, end);
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `prop_value`, `name` FROM `houses` WHERE `prop_value` > %d AND `prop_value` < %d AND prop_owner_id = -1 ORDER BY `prop_value` DESC LIMIT 30", start, end);
			}
		}
		else if(!strcmp(tmp, "earning", true))
		{
			if(!bCsakUrest)
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `prop_earning`, `name` FROM `houses` WHERE `prop_earning` > %d AND `prop_earning` < %d ORDER BY `prop_earning` DESC LIMIT 30", start, end);
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `prop_earning`, `name` FROM `houses` WHERE `prop_earning` > %d AND `prop_earning` < %d AND prop_owner_id = -1 ORDER BY `prop_earning` DESC LIMIT 30", start, end);
			}
		}
		else if(!strcmp(tmp, "entervalue", true))
		{
			return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CSAK_BIZNISZNEK_VAN_BELEPO"));
		}
		else return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NEM_MEGFELELO_ERTEK_PRICEEARNING"));
	}
	else if(strfind(i_str, "biznis", true) != -1)
	{
		if(!strcmp(tmp, "price", true))
		{
			if(!bCsakUrest)
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `value`, `name` FROM `biznis` WHERE `value` > %d AND `value` < %d ORDER BY `value` DESC LIMIT 30", start, end);
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `value`, `name` FROM `biznis` WHERE `value` > %d AND `value` < %d AND owner_id = -1 ORDER BY `value` DESC LIMIT 30", start, end);
			}
		}
		else if(!strcmp(tmp, "earning", true))
		{
            if(!bCsakUrest)
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `earning`, `name` FROM `biznis` WHERE `earning` > %d AND `earning` < %d ORDER BY `earning` DESC LIMIT 30", start, end);
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `earning`, `name` FROM `biznis` WHERE `earning` > %d AND `earning` < %d AND owner_id = -1 ORDER BY `earning` DESC LIMIT 30", start, end);
			}
		}
		else if(!strcmp(tmp, "entervalue", true))
		{
			if(!bCsakUrest)
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `enter_value`, `name` FROM `biznis` WHERE `enter_value` > %d AND `enter_value` < %d AND owner_id = -1 ORDER BY `enter_value` DESC LIMIT 30", start, end);
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `id`, `value`, `name` FROM `biznis` WHERE `value` > %d AND `value` < %d ORDER BY `value` DESC LIMIT 30", start, end);
			}
		}
		else return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NEM_MEGFELELO_ERTEK_PRICEEARNING_1"));
	}
	else return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NEM_MEGFELELO_TIPUS_HOUSEBIZNIS"));

	mysql_function_query(1, query, true, "THREAD_Findprop", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Findprop(playerid, queue);
public THREAD_Findprop(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Findprop);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, !"Eredmények:", !"{" #XCOLOR_RED "}Nincs találat!", !"Ok");
		return 1;
	}
	dline[0] = EOS;
    //format(dline, sizeof(dline), "ID\tÁr\tJövedelem\n");
	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, datez);
		cache_get_row_int(i, 1, vID);
		cache_get_row(i, 2, country); //Ház neve

        //format(i_str, 128, "ID: %d\t\tÁr: %s$\t\tNév: %s$\n", datez, FormatNumber(vID), country);
        //strcat(dline, i_str);
		if(!i)
		{
			format(dline, 3072, "{" #XCOLOR_WHITE "}ID: {" #XCOLOR_BLUE "}%d\t\t\t{" #XCOLOR_WHITE "}Érték: {" #XCOLOR_BLUE "}%d\t\t\t{" #XCOLOR_WHITE "}Név: {" #XCOLOR_BLUE "}%s", datez, vID, country);
		}
		else
		{
			format(dline, 3072, "%s\n{" #XCOLOR_WHITE "}ID: {" #XCOLOR_BLUE "}%d\t\t\t{" #XCOLOR_WHITE "}Érték: {" #XCOLOR_BLUE "}%d\t\t\t{" #XCOLOR_WHITE "}Név: {" #XCOLOR_BLUE "}%s", dline, datez, vID, country);
		}

	}

	format(country, sizeof(country), "Találatok: {" #XCOLOR_RED "}<%d>", rows);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, country, dline, !"Ok");
	return 1;
}
/*
format(dline, sizeof(dline), "Kategória\tTeleportok száma\n");
	for(new x; x != rows; x++)
	{
	    asd_ = !asd_;
	    cache_get_row(x, 0, country); //kategoria
        if(!IsClient(playerid) && !strcmp(country, "Vice City", true)) continue;
	    cache_get_row_int(x, 1, vID);
		format(i_str, sizeof(i_str), "{%s}%s{000000}|\t%d teleport\n", (asd_ == true) ? ("00FFFF") : ("33AA33"), country, vID);
		strcat(dline, i_str);
	}
	if(g_pLang{playerid} == LANGUAGE_HU) strcat(dline, "Házbelsõk\n{CDF917}Véletlenszerû");
	else strcat(dline, "Interiors\n{CDF917}Random teleport");

    format(i_str, sizeof(i_str),"MFR Összes Teleport (%d)", Itter_Count(Teleports));
    ShowPlayerDialogEx(playerid, DIALOG_TELEPORTS, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Tovább", "Bezár");
	return 1;
}
*/



CMD:nitrostate(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, DIALOG_NITROSTATE, DIALOG_STYLE_LIST, "Nitró Típus beállítása", "Alap NOS\n2x NOS (Gombnyomásos)\n5x NOS (Gombnyomásos)\n10x NOS (Gombnyomásos)\n2x NOS (Alap)\n5x NOS (Alap)\n10x NOS (Alap)\nDrift", "Oké", "Mégse");
	return 1;
}
CMD:nos(playerid, params[], 0, 0)
{
	return cmd_nitrostate(playerid, params);
}
CMD:n2o(playerid, params[], 0, 0)
{
	return cmd_nitrostate(playerid, params);
}
CMD:n20(playerid, params[], 0, 0)
{
	return cmd_nitrostate(playerid, params);
}
CMD:nitro(playerid, params[], 0, 0)
{
	return cmd_nitrostate(playerid, params);
}

CMD:rdmstats(playerid, params[], 0,0 )
{
	if(g_pDeathMatchID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VAGY_DM_ZONABAN"));

	new
	    Kills = GetPVarInt(playerid, "InDMKills"),
	    Deaths = GetPVarInt(playerid, "InDMDeaths"),
	    dmzone = g_pDeathMatchID[playerid];
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_DM_STATISZTIKAD_LENNULLAZVA"), GetPVarInt(playerid, "InDMXP"), Kills, Deaths, (Kills && Deaths) ? floatdiv(Kills, Deaths) : 0.0);

	DeletePVar(playerid, "InDMXP");
	DeletePVar(playerid, "InDMKills");
	DeletePVar(playerid, "InDMDeaths");

	format(i_str, sizeof(i_str), LANG(playerid, "MSG_TD_KILLDEATH_STAT"), 0, 0, 0.0, 0);
	PlayerTextDrawSetString(playerid, InDMKills[playerid], i_str);

	format(i_str, sizeof(i_str), ":: {" #XCOLOR_RED "}DM {" #XCOLOR_ORANGE "}:: {%06x}%s(%d) {" #XCOLOR_ORANGE "}lenullázta a DM statisztikáját.", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	foreach(Player, i)
	{
		if(g_pDeathMatchID[i] == dmzone)
		{
			SendClientMessage(i, COLOR_ORANGE, i_str);
		}
	}
	return 1;
}

CMD:chatmsg(playerid, params[], 0, 0)
{
    dline[0] = EOS;
    i_str[0] = EOS;

    format(dline, sizeof(dline), "{000000}.\t{000000}.\n");
    format(i_str, 128, "Teleport teszt\t%s\n", !(g_pChatMSGFlags[playerid] & e_TeleTest_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Matek teszt\t%s\n", !(g_pChatMSGFlags[playerid] & e_MathsTest_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Reakció teszt\t%s\n", !(g_pChatMSGFlags[playerid] & e_ReactionTest_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Verseny üzenetek\t%s\n", !(g_pChatMSGFlags[playerid] & e_Race_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Info üzenetek\t%s\n", !(g_pChatMSGFlags[playerid] & e_Info_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Klán chat\t%s\n", !(g_pChatMSGFlags[playerid] & e_ClanChat_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Aranytojás\t%s\n", !(g_pChatMSGFlags[playerid] & e_Goldpot_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Minigame csatlakozások\t%s\n", !(g_pChatMSGFlags[playerid] & e_MinigameJoins_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Zászló\t%s\n", !(g_pChatMSGFlags[playerid] & e_Flag_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Bonuscar\t%s\n", !(g_pChatMSGFlags[playerid] & e_BonusCar_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "DM csatlakozások\t%s", (g_pChatMSGFlags[playerid] & e_DMJoin_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	ShowPlayerDialogEx(playerid, DIALOG_CHATMSG, DIALOG_STYLE_TABLIST_HEADERS, "Üzenetek testreszabása", dline, "Ok", "Kilépés");
	return 1;
}

CMD:textdraws(playerid, params[], 0, 0)
{
    dline[0] = EOS;
    i_str[0] = EOS;
	format(dline, sizeof(dline), "{000000}.\t{000000}.\n");
	format(i_str, 128, "MaXXiMuM FreeRoam\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_FELIRAT) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Honlap\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_HONLAP) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Óra\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_ORA) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "XP\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_XP) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "XP Csík\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_XPCSIK) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "XP Szint\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_XPSZINT) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "DM Infó\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_DMINFO) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "DM Kill\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_DMKILLS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Teleportálás\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_TELE) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Fallout TD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_FALLOUT) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "CTC player jelzõ\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_CTC) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "WelcomeTD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_WELCOME) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "InfoTD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_INFOTD) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Élet szám TD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_HEALTH) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Páncél szám TD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_ARMOUR) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "GPS\t%s\n", !(g_pTDFlags[playerid] & e_TD_GPS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Leadott sérülés jelzése\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_GIVEDAMAGE) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Sérülés jelzése\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_TAKEDAMAGE) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "FPS\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_FPS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "DM infó help\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_DM_INFO_HELP) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
    format(i_str, 128, "Spec TD\t%s\n", !(g_pTDFlags[playerid] & e_NOTD_SPEC) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva")), strcat(dline, i_str);
	format(i_str, 128, "Minden\t%skapcsolása {" #XCOLOR_WHITE "}( Mentés nélkül )", (g_pOtherFlags[playerid] & e_NO_TEXTDRAWS) ? ("{00FF00}Be") : ("{FF0000}Ki")), strcat(dline, i_str);
	ShowPlayerDialogEx(playerid, DIALOG_TEXTDRAWS, DIALOG_STYLE_TABLIST_HEADERS, "Textdrawok kezelése", dline, "Ok", "Kilépés");
	return 1;
}

CMD:tds(playerid, params[], 0, 0)
{
	return cmd_textdraws(playerid, params);
}

CMD:cpanel(playerid, params[], 0, 0)
{
	new
		Style[16],
		LaserString[16],
		RepairString[16],
		RainbowString[32],
		szPassword[32],
		Laser = GetPVarInt(playerid, "LaserPointer");

	static const
		s_szWalkStyleNames[][14 char] =
		{
			!"Alap Séta",
			!"Normál",
			!"Határozott",
			!"Gangsta",
			!"Gangsta 2",
			!"Öreges",
			!"Sánta Öreges",
			!"Sánta",
			!"Nõi 1",
			!"Nõi 2",
			!"Kurva",
			!"Kurva 2",
			!"Részeg",
			!"Kézfeltartó"
		};

	GetPVarString(playerid, "Pass", szPassword, 30);
	switch(GetPlayerFightingStyle(playerid))
	{
	    case FIGHT_STYLE_NORMAL: Style = "Normál";
	   	case FIGHT_STYLE_BOXING: Style = "Boxoló";
	   	case FIGHT_STYLE_KUNGFU: Style = "Kungfu";
		case FIGHT_STYLE_KNEEHEAD: Style = "Kneehead";
		case FIGHT_STYLE_GRABKICK: Style = "Grabkick";
		case FIGHT_STYLE_ELBOW: Style = "Elbow";
	}

	switch(GetPVarInt(playerid, "AutoRepair"))
	{
		case 0: RepairString = "Kikapcsolva";
		case 1: RepairString = "Motor javítás";
		case 2: RepairString = "Külsõ javítás";
		case 3: RepairString = "Teljes javítás";
	}
	switch(GetPVarInt(playerid, "ColorChanger"))
	{
		case 0: RainbowString = "{FF0000}Ki";
		case 1: RainbowString = "{FF9900}Lassú";
		case 2: RainbowString = "{00AAFF}Gyors";
	}

	if(Laser == Lasers[0]) LaserString = "Piros";
	else if(Laser == Lasers[1]) LaserString = "Kék";
	else if(Laser == Lasers[2]) LaserString = "Rózsaszín";
	else if(Laser == Lasers[3]) LaserString = "Narancsságra";
	else if(Laser == Lasers[4]) LaserString = "Zöld";
	else if(Laser == Lasers[5]) LaserString = "Sárga";

	dline[0] = EOS;
	format(dline, sizeof(dline), "Ütésstílus: \t\t\t\t{" #XCOLOR_LIGHTRED "}%s", Style);

//	format(dline, sizeof(dline), "%s\nKedvenc Autórádió: \t\t\t{" #XCOLOR_LIGHTRED "}%s", dline, (GetPVarType(playerid, "FavRadioStation")) ? (strunpack(country, szRadioNames[GetPVarInt(playerid, "FavRadioStation")], 24), country) : ("Nincs"));
	format(dline, sizeof(dline), "%s\nTÖRÖLVE", dline);

	if(!GetPVarType(playerid, "LaserPointer"))
	{
		format(dline, sizeof(dline), "%s\nLézer: \t\t\t\t\t{" #XCOLOR_LIGHTRED "}Nincs", dline);
	}
	else if(Laser == -1)
	{
		format(dline, sizeof(dline), "%s\nLézer: \t\t\t\t\t{" #XCOLOR_LIGHTRED "}Random {" #XCOLOR_DEFAULT "}( {" #XCOLOR_PROPGREEN "}%s {" #XCOLOR_DEFAULT "})", dline, LaserString);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nLézer: \t\t\t\t\t{" #XCOLOR_PROPGREEN "}%s", dline, LaserString);
	}

	format(dline, sizeof(dline), "%s\nParancsok Olvasása: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_READCMDS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nAntifall: \t\t\t\t%s", dline, (g_PlayerFlags[playerid] & e_ANTIFALL) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nAutorepair: \t\t\t\t%s", dline, RepairString);
	format(dline, sizeof(dline), "%s\nSebességmérõ: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_SPEEDO) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nRepülés C-vel: \t\t\t\t%s", dline, (g_PlayerFlags[playerid] & e_FLY) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nSzivárvány: \t\t\t\t%s", dline, RainbowString);

	if(!GetPVarType(playerid, "VehicleboostValue"))
	{
		format(dline, sizeof(dline), "%s\nSpeedboost: \t\t\t\t{" #XCOLOR_RED "}Ki", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nSpeedboost: \t\t\t\t{" #XCOLOR_YELLOW "}Be {" #XCOLOR_DEFAULT "}( {" #XCOLOR_LIGHTGREEN2 "}%.2f {" #XCOLOR_DEFAULT "})", dline, GetPVarFloat(playerid, "VehicleboostValue"));
	}
	if(!GetPVarType(playerid, "VehicleHopping"))
	{
		format(dline, sizeof(dline), "%s\nJármû Ugrás: \t\t\t\t{" #XCOLOR_RED "}Ki", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nJármû Ugrás: \t\t\t\t{" #XCOLOR_YELLOW "}Be {" #XCOLOR_DEFAULT "}( {" #XCOLOR_LIGHTGREEN2 "}%.2f {" #XCOLOR_DEFAULT "})", dline, GetPVarFloat(playerid, "VehicleHopping"));
	}

	format(dline, sizeof(dline), "%s\nJátékosok hozzádteleportálása: \t{" #XCOLOR_LIGHTRED "}%s", dline, (g_PlayerFlags[playerid] & e_GOTO) ? ("{00FF00}Engedélyezve") : ("{FF0000}Letiltva"));
	format(dline, sizeof(dline), "%s\nMegfigyelhetõség (/spec): \t\t{" #XCOLOR_LIGHTRED "}%s", dline, (g_PlayerFlags[playerid] & e_ALLOW_SPEC) ? ("{00FF00}Engedélyezve") : ("{FF0000}Letiltva"));
	format(dline, sizeof(dline), "%s\nIdõ Mód: \t\t\t\t{" #XCOLOR_BLUE2 "}%s", dline, (g_PlayerFlags[playerid] & e_GAME_HOUR) ? ("Játékbeli") : ("Reális"));

	if(GetPVarType(playerid, "PlayerTime_Hour"))
	{
		format(dline, sizeof(dline), "%s\nKedvenc Idõ: \t\t\t\t{" #XCOLOR_BLUE2 "}%dh %dmin", dline, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
	}
	else
	{
		format(dline, sizeof(dline), "%s\nKedvenc Idõ: \t\t\t\t{" #XCOLOR_RED "}N/A (Automatikus)", dline);
	}
	if(!GetPVarType(playerid, "PlayerWeather"))
	{
		format(dline, sizeof(dline), "%s\nKedvenc Idõjárás ID: \t\t\t{" #XCOLOR_LIGHTRED "}Véletlenszerû", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nKedvenc Idõjárás ID: \t\t\t{" #XCOLOR_BLUE2 "}%d", dline, GetPVarInt(playerid, "PlayerWeather"));
	}

	if(GetPVarInt(playerid, "FavCarColor_1") == -1)
	{
		format(dline, sizeof(dline), "%s\nKedvenc Autószín 1: \t\t\t{" #XCOLOR_RED "}Nincs", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nKedvenc Autószín 1: \t\t\t{" #XCOLOR_BLUE2 "}%d", dline, GetPVarInt(playerid, "FavCarColor_1"));
	}
	format(dline, sizeof(dline), "%s\nSpawnhely: \t\t\t\t{" #XCOLOR_LIGHTRED "}%s", dline, GetSpawnName(playerid));

	new
	    iPlayerColor = GetPVarInt(playerid, "Color");
	if(!iPlayerColor)
	{
		format(dline, sizeof(dline), "%s\nKedvenc Szín: \t\t\t\t{" #XCOLOR_RED "}Nincs", dline);
	}
	else
	{
	    format(dline, sizeof(dline), "%s\nKedvenc Szín: \t\t\t\t{%06x}0x%x", dline, iPlayerColor >>> 8, iPlayerColor);
	}

	strunpack(name, s_szWalkStyleNames[GetPlayerWalkingStyle(playerid)], 14);
	format(dline, sizeof(dline), "%s\nSéta Stílus: \t\t\t\t{" #XCOLOR_PINK "}%s", dline, name);
	format(dline, sizeof(dline), "%s\nFelhasználó Neve: \t\t\t{" #XCOLOR_GREEN2 "}%s", dline, pName(playerid));

	format(dline, sizeof(dline), "%s\nJelszó: \t\t\t\t%s", dline, szPassword);
	format(dline, sizeof(dline), "%s\nSpin ( Forgás ): \t\t\t%s", dline, (!GetPVarInt(playerid, "AutoRepair")) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));

	format(dline, sizeof(dline), "%s\nNametag elrejtése: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_NO_NAMETAG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nRejtett Nametag mutatása: \t\t%s", dline, (g_PlayerFlags[playerid] & e_SEENAMETAG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));

	format(dline, sizeof(dline), "%s\nAlap stuntbónusz: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_STUNTBONUS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nTérképen clicktele: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_CLICKTELE) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\n/s sebesség mentése: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_SPVEL) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nHalál utáni rögtönspawn: \t\t%s", dline, (g_PlayerFlags[playerid] & e_FASTRESPAWN) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nÖrökélet: \t\t\t\t%s", dline, (g_PlayerFlags[playerid] & e_GOD) ? ("{00FF00}Bekapcsolva") : ("Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nTextdrawok kezelése", dline);
	format(dline, sizeof(dline), "%s\nTÖRÖLVE \t\t\t\t%s", dline);
	format(dline, sizeof(dline), "%s\nTeleportálási helyed láthatósága \t%s", dline, (g_PlayerFlags[playerid] & e_TELE_MSG) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));

	static const
		s_szHydType[][] =
		{
			"Alap",
			"Be",
			"Törlése"
		};

	new const
		s_szNosType[][] =
		{
			"Alap NOS",
			"2x NOS (Gombnyomásos)",
			"5x NOS (Gombnyomásos)",
			"10x NOS (Gombnyomásos)",
			"2x NOS (Alap)",
			"5x NOS (Alap)",
			"10x NOS (Alap)",
			"Drift"
		};

	static const
		s_szWheelType[][] =
		{
			"Alap",
			"Véletlenszerû",
			"Offroad",
			"Shadow",
			"Mega",
			"Rimshine",
			"Wires",
			"Classic",
			"Twist",
			"Cutter",
			"Switch",
			"Grove",
			"Import",
			"Dollar",
			"Trance",
			"Atomic",
			"Ahab",
			"Virtual",
			"Access"
		};

	new
		pWheel = GetPVarInt(playerid, "FavWheel");
	switch(pWheel)
	{
		case 1025: pWheel = 2;
		case 1073: pWheel = 3;
		case 1074: pWheel = 4;
		case 1075: pWheel = 5;
		case 1076: pWheel = 6;
		case 1077: pWheel = 7;
		case 1078: pWheel = 8;
		case 1079: pWheel = 9;
		case 1080: pWheel = 10;
		case 1081: pWheel = 11;
		case 1082: pWheel = 12;
		case 1083: pWheel = 13;
		case 1084: pWheel = 14;
		case 1085: pWheel = 15;
		case 1096: pWheel = 16;
		case 1097: pWheel = 17;
		case 1098: pWheel = 18;
		case -1: pWheel = 1;
	}
	format(dline, sizeof(dline), "%s\nHydraulika típus: \t\t\t%s", dline, s_szHydType[GetPVarInt(playerid, "HydType")]);
	format(dline, sizeof(dline), "%s\nNitró típus: \t\t\t\t%s", dline, s_szNosType[GetPVarInt(playerid, "NOS")]);
	format(dline, sizeof(dline), "%s\nKerék típus: \t\t\t\t%s", dline, s_szWheelType[pWheel]);

	if(GetPVarInt(playerid, "FavCarColor_2") == -1)
	{
		format(dline, sizeof(dline), "%s\nKedvenc Autószín 2: \t\t\t{" #XCOLOR_RED "}Nincs", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nKedvenc Autószín 2: \t\t\t{" #XCOLOR_BLUE2 "}%d", dline, GetPVarInt(playerid, "FavCarColor_2"));
	}

	if(!GetPVarType(playerid, "AutoPaintjob"))
	{
		format(dline, sizeof(dline), "%s\nKedvenc Paintjob: \t\t\t{" #XCOLOR_RED "}Nincs", dline);
	}
	else
	{
		format(dline, sizeof(dline), "%s\nKedvenc Paintjob: \t\t\t{" #XCOLOR_BLUE2 "}%d", dline, GetPVarInt(playerid, "AutoPaintjob"));
	}

	new
	    iChatColor = GetPVarInt(playerid, "ChatColor");
 	format(dline, sizeof(dline), "%s\nChat Üzenet Szín: \t\t\t{%06x}0x%x", dline, iChatColor >>> 8, iChatColor);

	new
	    iIDolor = GetPVarInt(playerid, "IDColor");
	if(!iIDolor)
	{
		format(dline, sizeof(dline), "%s\nChat ID Szín: \t\t\t\t{" #XCOLOR_RED "}Nincs", dline);
	}
	else
	{
	    format(dline, sizeof(dline), "%s\nChat ID Szín: \t\t\t\t{%06x}0x%x", dline, iIDolor >>> 8, iIDolor);
	}
	format(dline, sizeof(dline), "%s\nAutomatikus zene: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_MUSIC) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nAlap GTA Jumpok: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_STUNTS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nSerial Autologin: \t\t\t%s", dline, (g_PlayerFlags[playerid] & e_AUTOLOGIN) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	format(dline, sizeof(dline), "%s\nAutospawn: \t\t\t\t%s", dline, (g_PlayerFlags[playerid] & e_AUTOSPAWN) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));

	if(GetPVarInt(playerid, "Level") > 1)
	{
		format(dline, sizeof(dline), "%s\nLátszó PM-ek: \t\t\t\t%s", dline, (g_PlayerFlags[playerid] & e_SEEPMS) ? ("{00FF00}Bekapcsolva") : ("{FF0000}Kikapcsolva"));
	}
//	print(dline);
	ShowPlayerDialogEx(playerid, DIALOG_CPANEL, DIALOG_STYLE_LIST, !"{" #XCOLOR_YELLOW "}Karakter Vezérlõpult", dline, !"Ok", !"Mégse");
	return 1;
}

CMD:ucp(playerid, params[], 0, 0)
{
	return cmd_cpanel(playerid, params);
}

CMD:buyprop(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid, SZINT_BUYPROP);
	if(GetPVarType(playerid, "PlayerProp")) return ShowWelcome(playerid, LANG(playerid, "MSG_RMAR_VAN_HAZAD"));
	if((houseid = IsPlayerNearProperty(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_INGATLAN_KOZELEBEN"));

	if(GetPlayerMoneyEx(playerid) < GetGVarInt("PropValue", houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NO_ENOUGH_MONEY"),	FormatNumber(GetGVarInt("PropValue", houseid)));

	if(GetGVarInt("PropOwnerRegID", houseid) != -1)
	{
		if(GetGVarInt("PropOwnerRegID", houseid) == PlayerInfo[playerid][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_MAR_A_TE_HAZAD"));
		if(GetGVarInt("PropOwnerRegID", houseid) != PlayerInfo[playerid][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAS_HAZAT_NEM_VEHETED_MEG"));
	}

    if(!CheckHQZone(playerid, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid)))
    {
		SetGVarString("PropOwner", pName(playerid), houseid);
		SetGVarInt("PropOwnerRegID", PlayerInfo[playerid][pRegID], houseid);
	    SetPVarInt(playerid, "PlayerProp", houseid);
        GetGVarString("PropName", i_str, sizeof(i_str), houseid);

		GivePlayerMoneyEx(playerid, (0 - GetGVarInt("PropValue", houseid)), "BuyProp");
		RemoveHexColorFromString(i_str);
		SendClientMessagef(playerid, 0xFFFF00AA, "Megvetted a \"%s\" nevû ingatlant $%d-ért", i_str, GetGVarInt("PropValue", houseid));

		// Ház 3D Text, Map Icon és pickup adatjainak felújítása
        UpdateHouse(houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_owner_id` = %d WHERE `id` = %d", PlayerInfo[playerid][pRegID], houseid);
		mysql_function_query(1, query, false, "", "");
	    SavePlayer(playerid);
	}
	return 1;
}

CMD:leaveprop(playerid, params[], 0, 0)
{
	if((houseid = IsPlayerNearProperty(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_INGATLAN_KOZELEBEN"));
	if(GetGVarInt("PropOwnerRegID", houseid) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_INGATLAN_MEG_SENKIE"));

	if(GetGVarInt("PropOwnerRegID", houseid) != -1)
	{
		if(GetGVarInt("PropOwnerRegID", houseid) != PlayerInfo[playerid][pRegID])
		{
			if(GetPVarInt(playerid, "Level") < 4)
			{
			   return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_NEM_A_TE_INGATLANOD_NEM"));
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `spawnlocation` FROM `players` WHERE `reg_id` = %d", GetGVarInt("PropOwnerRegID", houseid));
				mysql_function_query(1, query, true, "THREAD_SellHouse", "dddd", playerid, houseid, 0, g_pQueryQueue[playerid]);
			}
		}
		else
		{
			mysql_format(1, query, sizeof(query), "SELECT `spawnlocation` FROM `players` WHERE `reg_id` = %d", GetGVarInt("PropOwnerRegID", houseid));
			mysql_function_query(1, query, true, "THREAD_SellHouse", "dddd", playerid, houseid, 1, g_pQueryQueue[playerid]);
		}
	}
	else
	{
		return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_INGATLAN_SENKIE"));
	}
	return 1;
}
CMD:sellprop(playerid, params[], 0, 0)
{
	return cmd_leaveprop(playerid, params);
}

forward THREAD_SellHouse(playerid, hazid, type, queue);
public THREAD_SellHouse(playerid, hazid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SellHouse);

	new
		szOldName[129];
	houseid = hazid;
	cache_get_row_int(0, 0, datez);
	if(!type)
	{
		if(datez == 6 || datez == 7)
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '1' WHERE `reg_id` = %d", GetGVarInt("PropOwnerRegID", houseid));
			mysql_function_query(1, query, false, "", "");
		}

		SetGVarString("PropOwner", "Senki", houseid);
		SetGVarInt("PropOwnerRegID", -1, houseid);
		DeleteGVar("PropLocked", houseid);

	   	GetGVarString("PropDefName", i_str, sizeof(i_str), houseid);
	   	GetGVarString("PropName", szOldName, sizeof(szOldName), houseid);
	   	SetGVarString("PropName", i_str, houseid);

		// Ház 3D Text, Map Icon és pickup adatjainak felújítása
        UpdateHouse(houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `name` = '%s', `prop_owner_id` = -1, `prop_locked` = '*', `car_model` = -1 WHERE `id` = %d", i_str, houseid);
		mysql_function_query(1, query, false, "", "");

		RemoveHexColorFromString(szOldName);
		SendClientMessageToAllf(0xFFFF00AA, "MSG__ADMIN__ELADTA_A__NEVU", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, szOldName, houseid);

		valstr(name, houseid);
	    AdminCommandLog("SELLPROP", playerid, -1, name);
	}
	else
	{
		if(datez == 6 || datez == 7)
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '1' WHERE `reg_id` = %d", GetGVarInt("PropOwnerRegID", houseid));
			mysql_function_query(1, query, false, "", "");
		}

		SetGVarString("PropOwner", "Senki", houseid);
		SetGVarInt("PropOwnerRegID", -1, houseid);
		DeleteGVar("PropLocked", houseid);
		GivePlayerMoneyEx(playerid, (GetGVarInt("PropValue", houseid) / 2), "SellProp");

	   	GetGVarString("PropDefName", i_str, sizeof(i_str), houseid);
	   	GetGVarString("PropName", szOldName, sizeof(szOldName), houseid);
	   	SetGVarString("PropName", i_str, houseid);

		RemoveHexColorFromString(szOldName);
       	SendClientMessagef(playerid, 0xFFFF00AA, "Otthagytad a \"%s\" nevû ingatlanod, az ára 50%s-át visszakaptad: $%d,-", szOldName, "%%", GetGVarInt("PropValue", houseid)/2);
       	SendClientMessageToAllf(0xFFFF00AA, "MSG___OTTHAGYTA_A__NEVU_INGATLA", GetPlayerColor(playerid) >>> 8, pName(playerid), szOldName, houseid);
        DeletePVar(playerid, "PlayerProp");

		// Ház 3D Text, Map Icon és pickup adatjainak felújítása
        UpdateHouse(houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `name` = '%s', `prop_owner_id` = -1, `prop_locked` = '*', `car_model` = -1 WHERE `id` = %d", i_str, houseid);
		mysql_function_query(1, query, false, "", "");
    	SavePlayer(playerid);
	}

	DestroyDynamicVehicle(GetGVarInt("HouseCar", houseid));
	SetGVarInt("CarModel", -1, houseid);
 	SetGVarInt("HouseCar", -1, houseid);
	return 1;
}

CMD:housemenu(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	new
	    price = GetHousePriceByType(houseid),
		earning,
		targyok,
		szPass[32],
		szRiaszto[16],
		carmodel = GetGVarInt("CarModel", houseid);
	GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);

	if(GetGVarType("PropLocked", houseid))
	{
        GetGVarString("PropLocked", szPass, sizeof(szPass), houseid);
	}
	else
	{
		strcat(szPass, "Nincs");
	}

	if(g_HouseElements[houseid])
	{
		for(new x; x != 30; x++)
		{
			if(!(g_HouseElements[houseid] & (1 << x))) continue;
			earning += (g_HouseElementStruct[x][e_Price] / HOUSE_ELEMENT_OSZTO);
			targyok++;
		}
	}

	strcat(szRiaszto, g_HouseRiaszto[GetGVarInt("HouseRiaszto", houseid)][e_szName_HU]);

	format(dline, sizeof(dline), "{" #XCOLOR_DEFAULT "}Házzal kapcsolatos segítség megtekintése");
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Ház: {" #XCOLOR_PROPGREEN "}%s {" #XCOLOR_WHITE "}(id: %d)", dline, tmp, houseid);
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Típus: {" #XCOLOR_GOLD "}%s", dline, GetHouseTypeName(houseid));
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Ár: {" #XCOLOR_GREEN "}$%s", dline, FormatNumber(price));
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Jelszó: {" #XCOLOR_WHITE "}%s", dline, szPass);
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Riasztó: %s", dline, szRiaszto);
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Hackdetector: %s", dline, (GetGVarInt("Hackdetector", houseid)) ? ("Van") : ("Nincs"));
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Tárgyak: %d (+{" #XCOLOR_GREEN "}$%s {" #XCOLOR_BLUE "}a fizetéshez)", dline, targyok, FormatNumber(earning));
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE2 "}Raktáram megtekintése", dline);
	format(dline, sizeof(dline), "%s\n{" #XCOLOR_GOLD "}Házautó: {" #XCOLOR_PINK "}%s", dline, (carmodel != -1) ? (g_szVehicleNames[carmodel - 400]) : ("{" #XCOLOR_RED "}Nincs"));
    format(dline, sizeof(dline), "%s\n{" #XCOLOR_BLUE "}Bútorok kezelése", dline, szRiaszto);


    g_pOtherFlags[playerid] |= e_HOUSEMENU;
	ShowPlayerDialogEx(playerid, DIALOG_HOUSEMENU, DIALOG_STYLE_LIST, "Ház beállítások", dline, "Oké", "Kilépés");
	return 1;
}

CMD:myprops(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/myprops (<Játékos ID/Név>)");

    if(IsPlayerNPC(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_BOTOKNAK_NINCS_HAZUK_SE"));
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	new
		bizid = GetPVarInt(player1, "PlayerBiz"),
		bool:bNotShowPass;
	houseid = GetPVarInt(player1, "PlayerProp");
	if(houseid == 0 && bizid == 0) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD_SE_BIZNISZED__"), houseid, bizid);

	// Ha nem saját magának nézi meg, és nem tulaj, akkor nem mutassuk neki a ház jelszavát
 	bNotShowPass = (player1 != playerid && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));


   	new count;
	for(new i; i != sizeof(g_HouseElementStruct); i++)
	{
		if(!(g_HouseElements[houseid] & (1 << i))) continue;
        strunpack(country, g_HouseElementStruct[i][e_ElementName]);
		count++;
	}



	dline[0] = EOS;
	if(houseid)
	{
		GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
		format(dline, sizeof(dline), "{" #XCOLOR_ORANGE "}Ház:\n\t{" #XCOLOR_PROPGREEN "}%s {" #XCOLOR_WHITE "}(id: %d)", tmp, houseid);

		if(GetGVarType("PropLocked", houseid))
		{
			if(!bNotShowPass)
			{
				GetGVarString("PropLocked", country, sizeof(country), houseid);
				format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_BLUE "}%s", dline, country);
			}
			else
			{
				strcat(dline, "\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_RED "}N/A", sizeof(dline));
			}
		}
		else
		{
			strcat(dline, "\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_RED "}N/A", sizeof(dline));
		}

		switch(GetGVarInt("HouseRiaszto", houseid))
		{
			case 0: strcat(dline, "\n\t{" #XCOLOR_ORANGE "}Riasztó: {" #XCOLOR_WHITE "}Nincs");
			case 1: strcat(dline, "\n\t{" #XCOLOR_ORANGE "}Riasztó: {" #XCOLOR_DEFAULT "}Gyenge");
			case 2: strcat(dline, "\n\t{" #XCOLOR_ORANGE "}Riasztó: {" #XCOLOR_GREEN "}Erõs");
		}

		if(g_HouseElements[houseid])
		{
			new
				earning;
			for(new x; x != sizeof(g_HouseElementStruct); x++)
			{
				if(!(g_HouseElements[houseid] & (1 << x))) continue;
				earning += (g_HouseElementStruct[x][e_Price] / HOUSE_ELEMENT_OSZTO);
			}
        	format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_DEFAULT "}Ár: {" #XCOLOR_GREEN "}$%s\n\t{" #XCOLOR_DEFAULT "}Jövedelem: {" #XCOLOR_GREEN "}$%s {" #XCOLOR_RED "}+ $%s\n\t{" #XCOLOR_DEFAULT "}Megvásárolt tárgyak: {" #XCOLOR_GREEN "}%d/%d", dline, FormatNumber(GetGVarInt("PropValue", houseid)), FormatNumber(GetGVarInt("PropEarning", houseid)), FormatNumber(earning), count, sizeof(g_HouseElementStruct));
		}
		else
		{
        	format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_DEFAULT "}Ár: {" #XCOLOR_GREEN "}$%s\n\t{" #XCOLOR_DEFAULT "}Jövedelem: {" #XCOLOR_GREEN "}$%s\n\t{" #XCOLOR_DEFAULT "}Megvásárolt tárgyak: {" #XCOLOR_GREEN "}%d/%d", dline, FormatNumber(GetGVarInt("PropValue", houseid)), FormatNumber(GetGVarInt("PropEarning", houseid)), count, sizeof(g_HouseElementStruct));
		}
  	}

	if(bizid)
	{
		GetGVarString("BizName", tmp, 129, bizid);
		format(dline, sizeof(dline), "%s%s{" #XCOLOR_ORANGE "}Biznisz:\n\t{" #XCOLOR_PROPGREEN "}%s {" #XCOLOR_WHITE "}(id: %d)", dline, (dline[0]) ? ("\n\n") : (""), tmp, bizid);

		if(GetGVarType("BizLocked", bizid))
		{
			if(!bNotShowPass)
			{
				GetGVarString("BizLocked", country, sizeof(country), bizid);
				format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_BLUE "}%s", dline, country);
			}
			else
			{
				strcat(dline, "\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_RED "}N/A", sizeof(dline));
			}
		}
		else
		{
			strcat(dline, "\n\t{" #XCOLOR_DEFAULT "}Jelszó: {" #XCOLOR_RED "}N/A", sizeof(dline));
		}
        format(dline, sizeof(dline), "%s\n\t{" #XCOLOR_DEFAULT "}Ár: {" #XCOLOR_GREEN "}$%s\n\t{" #XCOLOR_DEFAULT "}Jövedelem: {" #XCOLOR_GREEN "}$%s\n\t{" #XCOLOR_DEFAULT "}Belépõ: {" #XCOLOR_GREEN "}$%s", dline, FormatNumber(GetGVarInt("BizValue", bizid)), FormatNumber(GetGVarInt("BizEarning", bizid)), FormatNumber(GetGVarInt("BizEnterValue", bizid)));
	}
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Saját ingatlan információ", dline, "Bezárás");
	return 1;
}

CMD:lockhouse(playerid, params[], 4, 0)
{
	if(sscanf(params, "ds[" #STR_SIZE "]", houseid, i_str)) return SendUsage(playerid, "/lockhouse <Ház ID> <Jelszó> (Jelszó < 3 -> Kinyitás)");
	if(GetGVarType("PropLocked", houseid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_REZ_AZ_INGATLAN_MAR_BE_VAN"));

	if(strlen(i_str) < 3)
	{
        DeleteGVar("PropLocked", houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_locked` = '*' WHERE `id` = %d", houseid);
		mysql_function_query(1, query, false, "", "");

    	GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
    	RemoveHexColorFromString(tmp);
		SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_KINYITOTTAD_A__NEVU_INGATLANT"), tmp);
	}
	else
	{
		SetGVarString("PropLocked", i_str, houseid);

	    GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
	    RemoveHexColorFromString(tmp);
		SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_BEZARTAD_A__NEVU_INGATLANT"), tmp);

		mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_locked` = '%e' WHERE `id` = %d", i_str, houseid);
		mysql_function_query(1, query, false, "", "");
	}

	valstr(name, houseid);
    AdminCommandLog("LOCKHOUSE", playerid, -1, name);
	return 1;
}

CMD:unlockhouse(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/unlockhouse <Ház ID>");
	if(!GetGVarType("PropLocked", houseid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_REZ_AZ_INGATLAN_MEG_NINCS_BEZARVA"));

	DeleteGVar("PropLocked", houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_locked` = '*' WHERE `id` = %d", houseid);
	mysql_function_query(1, query, false, "", "");

    GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
    RemoveHexColorFromString(tmp);
	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_KINYITOTTAD_A__NEVU_INGATLANT"), tmp);

	valstr(name, houseid);
    AdminCommandLog("UNLOCKHOUSE", playerid, -1, name);
	return 1;
}

CMD:lockprop(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

    ShowPlayerDialogEx(playerid, DIALOG_LOCKPROP, DIALOG_STYLE_INPUT, "{" #XCOLOR_GREEN "}Ház lezárása", "Lentre írd be a házad jelszavát\nBárki betud menni, aki tudja a jelszót!", "Ok", "Mégse");
	return 1;
}

CMD:unlockprop(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	// Feloldás is pénz..
	MoneyCheck(playerid, PRICE_UNLOCKPROP);

	DeleteGVar("PropLocked", houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_locked` = '*' WHERE `id` = %d", houseid);
	mysql_function_query(1, query, false, "", "");

    GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
    RemoveHexColorFromString(tmp);
	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_KINYITOTTAD_A__NEVU_INGATLANT"), tmp);
	return 1;
}

CMD:holoader(playerid, params[], 0, 0)
{
	if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/holoader <Ház ID> <0/1>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_HAZ_ID_A_MEGADOTT_HAZ"), houseid);

	if(datez)
	{
		g_HouseFlags[houseid] |= e_OBJECT_LOADER;
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHHAZ_BHOBJECT_YHBETOLTO"));
	}
	else
	{
		g_HouseFlags[houseid] &= ~e_OBJECT_LOADER;
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHHAZ_BHOBJECT_YHBETOLTO_1"));
	}

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `bits` = %d WHERE `id` = %d", g_HouseFlags[houseid], houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("HOLOADER", playerid, -1, name);
	return 1;
}

CMD:hackdetector(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	if(!GetGVarInt("Hackdetector", houseid))
	{
		i_str = "Vásárlás: $500.000";
	}
	else
	{
		i_str = "Eladás: $250.000";
	}

	ShowPlayerDialogEx(playerid, DIALOG_HOUSEHACKDETECTOR, DIALOG_STYLE_LIST, !"{" #XCOLOR_SAMP "}Hackdetector vásárlás/eladás", i_str, !"Ok", !"Mégse");
	return 1;
}

CMD:riaszto(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	ShowPlayerDialogEx(playerid, DIALOG_HOUSERIASZTO, DIALOG_STYLE_LIST, !"{" #XCOLOR_SAMP "}Riasztó vásárlás", "Törlés\n{" #XCOLOR_DEFAULT "}Gyenge riasztó {" #XCOLOR_GREEN "}$250.000\n{" #XCOLOR_YELLOW "}Minõségi riasztó {" #XCOLOR_GREEN "}$450.000", !"Ok", !"Mégse");
	return 1;
}

CMD:buypc(playerid, params[], 0, 0)
{
    if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));
    return 1;
}

CMD:buyelements(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	new count;
    dline[0] = EOS;
    format(dline, sizeof(dline), "Tárgy neve\tÁr\t{000000}.\n");
	for(new i; i != sizeof(g_HouseElementStruct); i++)
	{
        strunpack(country, g_HouseElementStruct[i][e_ElementName]);
		if(!dline[0])
		{
	        if(g_HouseElements[houseid] & (1 << i))
	        {
                format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s\t{" #XCOLOR_RED "}(Megvan){" #XCOLOR_WHITE "}\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]));
                strcat(dline, i_str);
                count++;
			}
			else
			{
                format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s{" #XCOLOR_WHITE "}\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]));
                strcat(dline, i_str);
			}
		}
		else
		{
	        if(g_HouseElements[houseid] & (1 << i))
	        {
                format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s\t{" #XCOLOR_RED "}(Megvan){" #XCOLOR_WHITE "}\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]));
                strcat(dline, i_str);
                count++;
			}
			else
			{
                format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s{" #XCOLOR_WHITE "}\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]));
                strcat(dline, i_str);
			}
		}
	}
	format(i_str, 64, "{" #XCOLOR_BLUE "}Házadba megvehetõ dolgok - {" #XCOLOR_GREEN "}%d/%d", count, sizeof(g_HouseElementStruct));
	ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Ok", "Mégse");
	return 1;
}

CMD:houseelements(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a házában bent van-e
	if(GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));

	if(!g_HouseElements[houseid])
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_SEMMI_SEM_A_HAZADBAN"));
        return 1;
	}

	new count;
	dline[0] = EOS;
	format(dline, sizeof(dline), "Tárgy neve\tÁr\t{000000}.\n");
	for(new i; i != sizeof(g_HouseElementStruct); i++)
	{
		if(!(g_HouseElements[houseid] & (1 << i))) continue;

        strunpack(country, g_HouseElementStruct[i][e_ElementName]);
		
 		format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s {" #XCOLOR_BLACK "}(%d )\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]), i);
        strcat(dline, i_str);
		count++;
	}

	format(i_str, 64, "{" #XCOLOR_BLUE "}Házadban lévõ dolgok - {" #XCOLOR_GREEN "}%d/30", count);
	ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 1, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Ok", "Mégse");
	return 1;
}
CMD:helements(playerid, params[], 0, 0)
{
	return cmd_houseelements(playerid, params);
}

CMD:myelements(playerid, params[], 0, 0)
{
    new count;
	dline[0] = EOS;
	format(dline, sizeof(dline), "Tárgy neve\tÁr\t{000000}.\tDarabszám\n");
	for(new i; i != sizeof(g_HouseElementStruct); i++)
	{
		if(!g_pRaktar[playerid][i]) continue;

		strunpack(country, g_HouseElementStruct[i][e_ElementName]);
		
 		format(i_str, sizeof(i_str), "%s\t{" #XCOLOR_GREEN "}$%s\t{" #XCOLOR_BLACK "}(%d )\t{" #XCOLOR_RED "}%d\n", country, FormatNumber(g_HouseElementStruct[i][e_Price]), i, g_pRaktar[playerid][i]);
	    strcat(dline, i_str);
	    count++;
	}

    if(!count)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_URES_A_RAKTARAD_MENJ_ES_RABOLJ"));
		return 1;
	}
	else
	{
		ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 20, DIALOG_STYLE_TABLIST_HEADERS, "{" #XCOLOR_YELLOW "}Raktárban lévõ dolgok", dline, "Ok", !"Mégse");
	}
	return 1;
}
CMD:raktar(playerid, params[], 0, 0)
{
	return cmd_myelements(playerid, params);
}

CMD:rabol(playerid, params[], 0, D:<GRAV>)
{
    if(GetPVarType(playerid, "LastRabolt")) return ShowWelcomef(playerid, LANG(playerid, "MSG_RNEMREG_LOPTAL_VARJ_AMIG_LETELIK"), GetPVarInt(playerid, "LastRabolt"));
    if(g_pRobCount{playerid}) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_EPP_EGY_HAZAT_RABOLSZ"));

    if(GetPlayerHouseID_ByZone(playerid) == -1) //Ha nem házba van
    {
        datez = 0;
		vID = -1;
		foreach(houseid: biznis)
		{
	        if(GetPlayerVirtualWorld(playerid) != GetGVarInt("BizVirtualWorld", houseid)) continue;
			if(IsPlayerInRangeOfPoint(playerid, 25.0, GetGVarFloat("BizInX", houseid), GetGVarFloat("BizInY", houseid), GetGVarFloat("BizInZ", houseid)))
			{
	            if(GetGVarInt("BizOwnerRegID", houseid) == -1)
	            {
					datez = 1;
				}
				else
				{
					datez = 3; // Ok, megvan
				}
				vID = 0;
				break;
			}
		}
		switch(datez)
		{
		    case 0:
		    {
				if(GetPlayerInterior(playerid) != 0)
				{
					return ShowWelcome(playerid, LANG(playerid, "MSG_RTUL_MESSZE_VAGY_A_BEJARATTOL"));
				}
				else
				{
					return ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_OLYAN_BIZNISZ"));
				}
			}
		    case 1:
		    {
				if(!vID) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_A_BIZNISZ_MEG_SENKIE_NINCS"));
			}
		}
		if(!vID) // Biznisz
		{
		    i_str[0] = EOS;
	        SetGoodAllowed(playerid, false);

	        datez = 5000 + random(5000);

		    GivePlayerMoneyEx(playerid, datez, "BizRablas");
			SetPlayerWantedLevel(playerid, 6);
	        PVarIntFel(playerid,"RablasokSzama");

			GetGVarString("BizName", i_str, sizeof(i_str), houseid);
			RemoveHexColorFromString(i_str);
			SetGVarInt("BiznisKirabolva", GetGVarInt("BiznisKirabolva", houseid) + 1, houseid);

			mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `rabolva` = %d WHERE `id` = %d", GetGVarInt("BiznisKirabolva", houseid), houseid);
			mysql_function_query(1, query, false, "", "");

		    InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHKIRABOLTAD_A_Y_RHBIZNI"), i_str, datez);

			SendClientMessageToAllf(COLOR_PROPGREEN, "MSG___KIRABOLTA_A__BIZNISZT_", pName(playerid), playerid, i_str);
		}
    }
	else //Ha házat akar rabolni
	{
	    if(GetPVarInt(playerid, "PlayerProp") == houseid) return ShowWelcome(playerid, LANG(playerid, "MSG_RSAJAT_MAGAD_NEM_RABOLHATOD"));
	    if(!g_HouseElements[houseid]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_A_HAZ_URES_NINCS_MIT_ELLOPNOD"));

        new
		    ownerid = GetGVarInt("PropOwnerRegID", houseid),
		    bool:bFentvan;

		foreach(Player, i)
		{
			//printf("playerid: id: %d - regid: %d - ownerid: %d", i, PlayerInfo[i][pRegID], ownerid);
			if(PlayerInfo[i][pRegID] == ownerid && PlayerInfo[i][pRegID] != -1)
			{
				//printf("MEGVAN!!! playerid: id: %d - regid: %d - ownerid: %d", i, PlayerInfo[i][pRegID], ownerid);
			    bFentvan = true;
			    break;
			}
		}
		if(!bFentvan && !(g_ServerFlags & e_RACEDEBUG)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_CSAK_OLYAN_HAZAT_RABOLHATSZ"));
        dline[0] = EOS;
		for(new i; i != sizeof(g_HouseElementStruct); i++)
		{
			if(!(g_HouseElements[houseid] & (1 << i))) continue;

            strunpack(country, g_HouseElementStruct[i][e_ElementName]);
			if(!dline[0])
			{
		    	format(dline, 1024, "%s {" #XCOLOR_BLACK "}(%d )", country, i);
			}
			else
			{
		    	format(dline, 1024, "%s\n%s {" #XCOLOR_BLACK "}(%d )", dline, country, i);
			}
		}
		ShowPlayerDialogEx(playerid, DIALOG_HOUSEELEMENTS + 5, DIALOG_STYLE_LIST, !"{" #XCOLOR_BLUE "}Ellopható dolgok", dline, !"Ellop", !"Mégse");
	}
	SetPVarInt(playerid, "LastRabolt", 10);
	return 1;
}

CMD:buga(playerid, params[], 0, 0)
{
	return cmd_rabol(playerid, params);
}

CMD:ellop(playerid, params[], 0, D:<GRAV>)
{
//	CHECK_SZINT(playerid, SZINT_RABOL);

	//if(g_PlayerFlags[playerid] & e_GOD) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_GOD_MODBAN_NEM_RABOLHATSZ"));
 	/*if(GetPVarType(playerid, "LastRabolt"))
	{
		ShowWelcomef(playerid, LANG(playerid, "MSG_RNEMREG_RABOLTAL_VARJ_AMIG "), GetPVarInt(playerid, "LastRabolt"));
		return 1;
	}*/
	if(GetPVarType(playerid, "LastRabolt"))
	{
		ShowWelcomef(playerid, LANG(playerid, "MSG_RNEMREG_LOPTAL_VARJ_AMIG_LETELIK"), GetPVarInt(playerid, "LastRabolt"));
		return 1;
	}


	if(!(vID = GetPlayerDynamicVehicleID(playerid))) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_HAZAUTOBAN"));
	if(IsPlayerInDynamicVehicle(playerid, GetGVarInt("HouseCar", GetPVarInt(playerid, "PlayerProp")))) return ShowWelcome(playerid, LANG(playerid, "MSG_RHUZATOS_VAGYW_NREZ_A_TE_KO"));

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
        ShowWelcome(playerid, LANG(playerid, "MSG_RHUZATOS_VAGYW_NRNEM_A_WS"));
		return 1;
	}

    new
        bool:IsHouseCar;
	foreach(houseid: houses)
	{
		if(GetGVarInt("HouseCar", houseid) != vID) continue;
/*
		printf("vID: %d | Housecar: %d | i: %d", GetGVarInt("HouseCar", houseid), vID, houseid);
		printf("Houseid: %d", houseid);
*/

		Kocsileadofos(playerid);

        SetPVarInt(playerid, "ElloptaKocsit", vID);
        SetPVarInt(playerid, "EllopottID", houseid);
        ShowWelcome(playerid, LANG(playerid, "MSG_VIDD_A_KOCSIT_A_KIJELOLT_HELYHEZ"));
        g_pGamesData[playerid] |= e_KOCSIT_LOP;
		IsHouseCar = true;

		if(GetDynamicVehDistanceFromPoint(vID, GetGVarFloat("CarX", houseid), GetGVarFloat("CarY", houseid), GetGVarFloat("CarZ", houseid)) > 50.0)
		{
			g_PlayerData[playerid] |= e_KOCSI_RESPAWN;
			SetDynamicVehicleToRespawn(vID);
			PutPlayerInDynamicVehicle(playerid, vID, 0);
			SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG__KOCSI_RESPAWNOLVA_MIVEL_TUL"));
		}
		break;
	}
	if(!IsHouseCar) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_NEM_HAZAUTO"));

    SetGoodAllowed(playerid, false);

	SetPlayerWantedLevel(playerid, 3);
	SetPVarInt(playerid, "LastRabolt", 10);

	GetGVarString("PropName", i_str, sizeof(i_str), houseid);
 	RemoveHexColorFromString(i_str);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHELLOPTAD_Y_RHHAZTOL_A_"), i_str);
	SendClientMessageToAllf(COLOR_PROPGREEN, "MSG___ELLOPTA_AZ__HAZTO", pName(playerid), playerid, i_str);

    getdate(year, month, day);
	gettime(hour, minute, second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `rablasok`(id, reg_id, name, prop_id, type, iscar, earning, time) VALUES(0, %d, '%s', %d, 0, 2, 0, '%02d.%02d.%02d %02d:%02d:%02d')", PlayerInfo[playerid][pRegID], pName(playerid), houseid, datez, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:inrange(playerid, params[], 0, 0)
{
	new
	    bool:wCheck,
	    bool:iCheck;
	if(sscanf(params, "F(15.0)D(1)D(1)", V[0], bool:wCheck, bool:iCheck)) return SendUsage(playerid, "/inrange {" #XCOLOR_YELLOW "}<fTávolság = 15.0> <bool:wCheck = 1> <bool:iCheck = 1>");

	new
		Float:pPos[3],
		pWorld = GetPlayerVirtualWorld(playerid),
		pInt = GetPlayerInterior(playerid),
	    bool:bIsOwner = !(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid));
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

	foreach(new i: Character)
	{
		if(i != playerid)
		{
			if(!IsPlayerInRangeOfPoint(i, V[0], pPos[0], pPos[1], pPos[2])) continue;
			if(wCheck && GetPlayerVirtualWorld(i) != pWorld) continue;
			if(iCheck && GetPlayerInterior(i) != pInt) continue;
			if((!bIsOwner && GetPVarInt(i, "Level") == 4) || GetPlayerState(i) == PLAYER_STATE_SPECTATING) continue;
			if(g_pOtherFlags[i] & e_RAKSAMP) continue;

			GetPlayerPos(i, X, Y, Z);
			SendClientMessagef(playerid, COLOR_GREEN, "-> {%06x}%s(%d) {" #XCOLOR_LIGHTRED "}- {00FF00}%.3fm {FF0000}| %.4f, %.4f, %.4f", GetPlayerColor(i) >>> 8, pName(i), i, GetDistance3D(pPos[0], pPos[1], pPos[2], X, Y, Z), X, Y, Z);
		}
	}
	return 1;
}

CMD:closestv(playerid, params[], 0, 0)
{
	return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MINEK_EZ_NEKED_FASZ_DL"));
}

CMD:closesth(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(5)", V[0])) return SendUsage(playerid, "/closesth {" #XCOLOR_YELLOW "}<fTávolság = 5>)");

	foreach(houseid: houses)
	{
		if(!IsPlayerInRangeOfPoint(playerid, V[0], GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid))) continue;
		SendClientMessagef(playerid, COLOR_GREEN, "-> %d {" #XCOLOR_LIGHTRED "}| %.4f, %.4f, %.4f", houseid, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid));
	}
	return 1;
}

stock FindFreeHouseWorld(playerid, &maxid, &freeid, Float:range)
{
	new
		iMax,
		iFree,
		iCurr,
		BitArray:worlds<256>;

	foreach(new i: houses)
	{
 		if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("InX", i), GetGVarFloat("InY", i), GetGVarFloat("InZ", i)))
		{
            iCurr = GetGVarInt("VirtualWorld", i);
            if(iCurr > iMax) iMax = iCurr;

			Bit_Set(worlds, iCurr, true);
		}
	}

	// Bizniszeket is átnézzük a biztonság kedvéért
	foreach(new i: biznis)
	{
		if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("BizInX", i), GetGVarFloat("BizInY", i), GetGVarFloat("BizInZ", i)))
		{
            iCurr = GetGVarInt("BizVirtualWorld", i);

			Bit_Set(worlds, iCurr, true);
		}
	}

	for(new i = 1; i != 256; i++)
	{
		if(!Bit_Get(worlds, i))
		{
            iFree = i;
            break;
		}
	}

	maxid = iMax;
	freeid = iFree;
}

CMD:hupper(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(10)", V[0])) return SendUsage(playerid, "/hupper {" #XCOLOR_YELLOW "}<fTávolság = 10.0>)");

	new maxid, freeid;
	FindFreeHouseWorld(playerid, maxid, freeid, V[0]);

	new id = IsPlayerInHouseZone(playerid);

	if(id == -1)
	    strcpy(country, "NULL");
	else
	    strcpy(country, g_Interiors[id][e_szIntName]);

	SendClientMessagef(playerid, COLOR_WHITE, "Max World ID: {" #XCOLOR_GREEN "}%d, {" #XCOLOR_BLUE "}FreeID: %d, {" #XCOLOR_ORANGE "}name: %s", maxid, freeid, country);
	SendClientMessagef(playerid, COLOR_WHITE, "InteriorListID: %d, InHouseID: %d", IsPlayerInHouseZone(playerid), GetPlayerHouseID_ByZone(playerid));
	return 1;
}

CMD:closestb(playerid, params[], 0, 0)
{
	if(sscanf(params, "F(5)", V[0])) return SendUsage(playerid, "/closestb {" #XCOLOR_YELLOW "}<fTávolság = 5.0>)");

	foreach(houseid: biznis)
	{
		if(!IsPlayerInRangeOfPoint(playerid, V[0], GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid))) continue;
		SendClientMessagef(playerid, COLOR_GREEN, "-> %d {" #XCOLOR_LIGHTRED "}| %.4f, %.4f, %.4f", houseid, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid));
	}
	return 1;
}

CMD:enter(playerid, params[], 0, D:<FLAG | BCAR>)
{
    if((e_IN_GANGWAR | e_POSTAS) & g_pGamesData[playerid]) return 1;

    if(GetPVarType(playerid, "OnHouse"))
    {
		houseid = GetPVarInt(playerid, "OnHouse");
	}
	else
	{
		houseid = IsPlayerNearProperty_Out(playerid);
	}

	new ownerid;
	if(houseid != -1 && !(g_pGamesData[playerid] & e_PIZZAS))
	{
        ownerid = GetGVarInt("PropOwnerRegID", houseid);
		if(GetGVarType("PropLocked", houseid) && ownerid != PlayerInfo[playerid][pRegID] && strval(params) != 258852)
		{
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
			{
				ShowPlayerDialogEx(playerid, DIALOG_LOCKPROP + 1, DIALOG_STYLE_INPUT, "Írd be a jelszót", "{" #XCOLOR_LIGHTRED "}Lentre írd be a ház jelszavát, hogy bemehess{" #XCOLOR_WHITE "}!", "Ok");
			}
			else
			{
				GetGVarString("PropLocked", name, sizeof(name), houseid);
				format(i_str, sizeof(i_str), "{" #XCOLOR_LIGHTRED "}Lentre írd be a ház jelszavát, hogy bemehess{" #XCOLOR_WHITE "}!\n{" #XCOLOR_BLUE "}Jelszó: {" #XCOLOR_DEFAULT "}%s", name);
				ShowPlayerDialogEx(playerid, DIALOG_LOCKPROP + 1, DIALOG_STYLE_INPUT, "Írd be a jelszót", i_str, "Ok");
			}
			SetPVarInt(playerid, "CurrHouseid", houseid);
			return 1;
		}

		X = GetGVarFloat("InX", houseid);
		Y = GetGVarFloat("InY", houseid);
		Z = GetGVarFloat("InZ", houseid);

		if(X == 0.0 && Y == 0.0 && Z == 0.0) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_INGATLAN_MEG_NINCS_BEFEJEZV"));

		PlayerTele(playerid, X, Y, Z, GetGVarInt("Interior", houseid), GetGVarFloat("InA", houseid), GetGVarInt("VirtualWorld", houseid), true);

		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GHBEMENTEL_EGY_HAZBA_Y_HH"), houseid);

		mysql_format(1, query, sizeof(query), "INSERT INTO `enter`(id, type, buildingid, reg_id, name, price, time) VALUES(0, 0, %d, %d, '%e', 0, %d)", houseid, PlayerInfo[playerid][pRegID], pName(playerid), CurrentTimestamp());
		mysql_function_query(1, query, false, "", "");

		if(ownerid == -1 && GetPVarInt(playerid, "PlayerProp") == -1)
		{
			ShowWelcome(playerid, LANG(playerid, "MSG_MEGVASARLAS_RBUYPROPW"));
		}
		else if(ownerid == PlayerInfo[playerid][pRegID])
		{
            ShowWelcome(playerid, LANG(playerid, "MSG_BHHAZBEALLITASOK_HHOUSEMENU"));
		}
		return 1;
	}

	if((houseid = IsPlayerNearBiznis(playerid)) != -1)
	{
        EnterBiznis(playerid, houseid, strval(params) == 258852);
		return 1;
	}

    ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_OLYAN_HELY_1"));
	return 1;
}


stock EnterBiznis(playerid, bizid, bool:bSkipPass = false)
{
	houseid = bizid;
	new
	    iOwnerID = GetGVarInt("BizOwnerRegID", houseid),
	    entervalue = GetGVarInt("BizEnterValue", houseid);
	if(GetGVarType("BizLocked", houseid) && iOwnerID != PlayerInfo[playerid][pRegID] && !bSkipPass)
	{
		if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
		{
			ShowPlayerDialogEx(playerid, DIALOG_LOCKBIZ + 1, DIALOG_STYLE_INPUT, "Írd be a jelszót", "{" #XCOLOR_LIGHTRED "}Lentre írd be a biznisz jelszavát, hogy bemehess{" #XCOLOR_WHITE "}!", "Ok");
		}
		else
		{
			GetGVarString("BizLocked", name, sizeof(name), houseid);
			format(i_str, sizeof(i_str), "{" #XCOLOR_LIGHTRED "}Lentre írd be a biznis jelszavát, hogy bemehess{" #XCOLOR_WHITE "}!\n{" #XCOLOR_BLUE "}Jelszó: {" #XCOLOR_DEFAULT "}%s", name);
			ShowPlayerDialogEx(playerid, DIALOG_LOCKBIZ + 1, DIALOG_STYLE_INPUT, "Írd be a jelszót", i_str, "Ok");
		}
		SetPVarInt(playerid, "CurrBizid", houseid);
		return 1;
	}

	X = GetGVarFloat("BizInX", houseid);
	Y = GetGVarFloat("BizInY", houseid);
	Z = GetGVarFloat("BizInZ", houseid);

	if(X == 0.0 && Y == 0.0 && Z == 0.0) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_A_BIZNIS_MEG_NINCS_BEFEJEZVE"));

	if(iOwnerID != PlayerInfo[playerid][pRegID] &&  entervalue)
	{
		if(!(g_pOtherFlags[playerid] & e_BEMENT_BIZNISZBE))
		{
			if(!g_pVIP[playerid])
			{
				if(GetPlayerMoneyEx(playerid) < entervalue) return SendClientMessagef(playerid, COLOR_RED, "Nincs elég pénzed! {" #XCOLOR_GREEN "}$%d {" #XCOLOR_RED "}kéne!", GetGVarInt("BizEnterValue", houseid));
				GivePlayerMoneyEx(playerid, -entervalue, "BizEnter");
			}

			SetGVarInt("BizBalance", GetGVarInt("BizBalance", houseid) + entervalue, houseid);

			mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `balance` = %d WHERE `id` = %d", GetGVarInt("BizBalance", houseid), houseid);
			mysql_function_query(1, query, false, "", "");
		}

		g_pOtherFlags[playerid] |= e_BEMENT_BIZNISZBE;
	}

	PlayerTele(playerid, X, Y, Z, GetGVarInt("BizInterior", houseid), GetGVarFloat("BizInA", houseid), GetGVarInt("BizVirtualWorld", houseid), true);

	new
		bIntType = GetGVarInt("BizInteriorType", houseid);
	if(bIntType != -1)
	{
		SetPlayerShopNameEx(playerid, bIntType);
	}

	InfoTD_MSGf(playerid, MESSAGE_TIME,  LANG(playerid, "MSG_GHBEMENTEL_EGY_BIZNISZBE_Y"), houseid);

	mysql_format(1, query, sizeof(query), "INSERT INTO `enter`(id, type, buildingid, reg_id, name, price, time) VALUES(0, 1, %d, %d, '%e', %d, %d)", houseid, PlayerInfo[playerid][pRegID], pName(playerid), entervalue, CurrentTimestamp());
	mysql_function_query(1, query, false, "", "");

	if(iOwnerID == -1 && GetPVarInt(playerid, "PlayerBiz") == -1)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_MEGVASARLAS_RBUYBIZW"));
	}
	return 1;
}

CMD:exit(playerid, params[], 0, 0)
{
	if((e_IN_GANGWAR | e_POSTAS) & g_pGamesData[playerid]) return 1;
	if(GetPVarType(playerid, "OnHouseE"))
	{
		houseid = GetPVarInt(playerid, "OnHouseE");
	}
	else
	{
		houseid = IsPlayerNearProperty_In(playerid);
	}

	if(houseid != -1)
	{
		new
			Float:fX = GetGVarFloat("PropX", houseid),
			Float:fY = GetGVarFloat("PropY", houseid),
			Float:fZ = GetGVarFloat("PropZ", houseid) + 0.35,
			Float:fAngle = GetGVarFloat("PropA", houseid);
		if(g_HouseFlags[houseid] & e_OBJECT_LOADER)
		{
			fX += (2.3 * floatsin(-fAngle, degrees));
			fY += (2.3 * floatcos(-fAngle, degrees));
			PlayerTele(playerid, fX, fY, fZ, GetGVarInt("OutInt", houseid), fAngle, 0);

			LoadObjectForPlayer(playerid);
			GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_OBJECTS_LOADING")), 3000, 3);
		}
		else
		{
			PlayerTele(playerid, fX, fY, fZ, 0, fAngle, 0);
		}

		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHKIJOTTEL_EGY_HAZBOLW"));
		return 1;
	}

	if((houseid = IsPlayerNearBiznis_In(playerid)) != -1)
	{
        if((goldpot[gPickup]) && GetDistance3D(GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid), goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < IN_RANGE_DISTANCE) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HIBA_AZ_ARANYTOJAS_TUL_KOZEL_1"));

		PlayerTele(playerid, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid), 0, GetGVarFloat("BizA", houseid), (g_pGamesData[playerid] & e_PIZZAS) ? (13) : (0));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHKIJOTTEL_EGY_BIZNISZBOLW"));
		return 1;
	}

	ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_A_KOZELEDBEN_OLYAN_HELY_2"));
	return 1;
}

CMD:propname(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/propname <Név>");

    tmp[0] = EOS;
    strcat(tmp, ColouredText(params));

	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX"));
 	if((houseid = IsPlayerNearProperty(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZADNAL"));
	if(PlayerInfo[playerid][pRegID] != GetGVarInt("PropOwnerRegID", houseid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_NEM_A_TE_HAZAD"));

    i_str[0] = EOS;
	strcat(i_str, tmp);
	RemoveHexColorFromString(i_str);
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32_1"));

	SetGVarString("PropName", tmp, houseid);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHHAZAD_NEVE_MEGVALTOZTATVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `name` = '%e' WHERE `id` = %d", tmp, houseid);
	mysql_function_query(1, query, false, "", "");

	format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", tmp, houseid, pName(playerid));
	UpdateDynamic3DTextLabelText(Text3D:GetGVarInt("Label", houseid), COLOR_RED, tmp);
	return 1;
}

/* Ház szerkesztések */
CMD:housename(playerid, params[], 4, 0)
{
	if(sscanf(params, "ds[" #STR_SIZE "]", houseid, i_str)) return SendUsage(playerid, "/housename <Ház ID> <Név>");
    tmp[0] = EOS;
    strcat(tmp, ColouredText(i_str));

	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX"));

    i_str[0] = EOS;
	strcat(i_str, tmp);
	RemoveHexColorFromString(i_str);
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32_1"));

	SetGVarString("PropName", tmp, houseid);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHHAZ_NEVE_MEGVALTOZTATVA"));

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `name` = '%e' WHERE `id` = %d", tmp, houseid);
	mysql_function_query(1, query, false, "", "");

	if(GetGVarInt("PropOwnerRegID", houseid) == -1)
	{
		format(dline, 256, "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", tmp, houseid, FormatNumber(GetGVarInt("PropValue", houseid)));
	}
	else
	{
        GetGVarString("PropOwner", name, sizeof(name), houseid);
		format(dline, 256, "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", tmp, houseid, name);
	}
	UpdateDynamic3DTextLabelText(Text3D:GetGVarInt("Label", houseid), COLOR_DARKBLUE, dline);

	valstr(name, houseid);
    AdminCommandLog("HOUSENAME", playerid, -1, name);
	return 1;
}

CMD:buildhouse(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(-1)", houseid)) return SendUsage(playerid, "/buildhouse <Ház ID> :: Jelenleg: %d", GetPVarInt(playerid, "BuildHouseID"));
	if(GetPVarType(playerid, "BuildHouseID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_SZERKESZTESZ_EGY_HAZAT"));

	if(houseid == -1) houseid = IsPlayerNearProperty(playerid);
	if(houseid == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_SEMILYEN_HAZ_SEM"));

	GetGVarString("PropName", tmp, MAX_PROP_NAME, houseid);
    RemoveHexColorFromString(tmp);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_KIVALASZTVA_SZERKESZTESRE"), houseid, tmp);
    SetPVarInt(playerid, "BuildHouseID", houseid);

	valstr(name, houseid);
    AdminCommandLog("BUILDHOUSE", playerid, -1, name);
	return 1;
}

CMD:dbuildhouse(playerid, params[], 4, 0)
{
	if(!GetPVarType(playerid, "BuildHouseID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_SZERKESZTESZ_HAZAT"));

	SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_SZERKESZTESE_BEFEJEZVE"));
    DeletePVar(playerid, "BuildHouseID");

    AdminCommandLog("DBUILDHOUSE", playerid, -1);
	return 1;
}

/* Biznisz Commands */
CMD:buybiz(playerid, params[], 0, 0)
{
    CHECK_SZINT(playerid, SZINT_BUYBIZ);

	if(GetPVarType(playerid, "PlayerBiz")) return ShowWelcome(playerid, LANG(playerid, "MSG_RMAR_VAN_BIZNISZED"));

	if((houseid = IsPlayerNearBiznis(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_BIZNISZ_KOZELEBEN"));
	if(GetPlayerMoneyEx(playerid) < GetGVarInt("BizValue", houseid)) return SendClientMessagef(playerid, COLOR_RED, "Nincs elég pénzed. Ennyi kéne $%d!", GetGVarInt("BizValue", houseid));


	if(GetGVarInt("BizOwnerRegID", houseid) != -1)
	{
		if(GetGVarInt("BizOwnerRegID", houseid) == PlayerInfo[playerid][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_MAR_A_TE_BIZNISZED"));
		if(GetGVarInt("BizOwnerRegID", houseid) != PlayerInfo[playerid][pRegID]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAS_BIZNISZET_NEM_VEHETED_MEG"));
	}

    if(!CheckHQZone(playerid, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid)))
    {
		SetGVarString("BizOwner", pName(playerid), houseid);
		SetGVarInt("BizOwnerRegID", PlayerInfo[playerid][pRegID], houseid);
	    SetPVarInt(playerid, "PlayerBiz", houseid);

		GivePlayerMoneyEx(playerid, (0 - GetGVarInt("BizValue", houseid)), "BuyBiz");
		RemoveHexColorFromString(i_str);
		SendClientMessagef(playerid, 0xFFFF00AA, "Megvetted a \"%s\" nevû bizniszt $%d-ért", i_str, GetGVarInt("BizValue", houseid));

        UpdateBiznis(houseid);

		mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `owner_id` = %d WHERE `id` = %d", PlayerInfo[playerid][pRegID], houseid);
		mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

CMD:sellbiz(playerid, params[], 0, 0)
{
	if((houseid = IsPlayerNearBiznis(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_BIZNISZ_KOZELEBEN"));
	if(GetGVarInt("BizOwnerRegID", houseid) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_A_BIZNISZ_MEG_SENKIE_NEM"));

	if(GetGVarInt("BizOwnerRegID", houseid) != -1)
	{
		if(GetGVarInt("BizOwnerRegID", houseid) != PlayerInfo[playerid][pRegID])
		{
			if(GetPVarInt(playerid, "Level") < 4)
			{
			   return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_NEM_A_TE_BIZNISZED_NEM"));
			}
			else
			{
				mysql_format(1, query, sizeof(query), "SELECT `spawnlocation` FROM `players` WHERE `reg_id` = %d", GetGVarInt("BizOwnerRegID", houseid));
				mysql_function_query(1, query, true, "THREAD_SellBiznis", "dddd", playerid, houseid, 0, g_pQueryQueue[playerid]);
			}
		}
		else
		{
			mysql_format(1, query, sizeof(query), "SELECT `spawnlocation` FROM `players` WHERE `reg_id` = %d", GetGVarInt("BizOwnerRegID", houseid));
			mysql_function_query(1, query, true, "THREAD_SellBiznis", "dddd", playerid, houseid, 1, g_pQueryQueue[playerid]);
		}
	}
	else
	{
		return ShowWelcome(playerid, LANG(playerid, "MSG_REZ_AZ_BIZNISZ_SENKIE"));
	}
	return 1;
}

forward THREAD_SellBiznis(playerid, bizid, type, queue);
public THREAD_SellBiznis(playerid, bizid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SellBiznis);

	houseid = bizid;
	cache_get_row_int(0, 0, datez);
	GetGVarString("BizName", i_str, sizeof(i_str), houseid);
	if(!type)
	{
		if(datez == 8 || datez == 9)
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '1' WHERE `reg_id` = %d", GetGVarInt("BizOwnerRegID", houseid));
			mysql_function_query(1, query, false, "", "");
		}

		SetGVarString("BizOwner", "Senki", houseid);
		SetGVarInt("BizOwnerRegID", -1, houseid);
		DeleteGVar("BizLocked", houseid);
		SetGVarInt("BizEnterValue", 0, houseid);

		RemoveHexColorFromString(i_str);
		SendClientMessageToAllf(0xFFFF00AA, "MSG__ADMIN__ELADTA_A__NEVU_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str, houseid);

        UpdateBiznis(houseid);
		mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `owner_id` = -1, `locked` = '*', `enter_value` = 0 WHERE `id` = %d", 0, houseid);
		mysql_function_query(1, query, false, "", "");
		valstr(name, houseid);
        AdminCommandLog("SELLBIZ", playerid, -1, name);
	}
	else
	{
		if(datez == 8 || datez == 9)
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `spawnlocation` = '1' WHERE `reg_id` = %d", GetGVarInt("BizOwnerRegID", houseid));
			mysql_function_query(1, query, false, "", "");
		}

		SetGVarString("BizOwner", "Senki", houseid);
		SetGVarInt("BizOwnerRegID", -1, houseid);
		GivePlayerMoneyEx(playerid, (GetGVarInt("BizValue", houseid) / 2), "SellBiz");

		RemoveHexColorFromString(i_str);
       	SendClientMessagef(playerid, 0xFFFF00AA, "Otthagytad a \"%s\" nevû bizniszt, az ára 50%s-át visszakaptad: $%d,-", i_str, "%%", GetGVarInt("BizValue", houseid) / 2);
       	SendClientMessageToAllf(0xFFFF00AA, "MSG__OTTHAGYTA_A__NEVU_BIZNI", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, i_str, houseid);
		DeleteGVar("BizLocked", houseid);
		SetGVarInt("BizEnterValue", 0, houseid);

        DeletePVar(playerid, "PlayerBiz");
        UpdateBiznis(houseid);
		mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `owner_id` = -1, `locked` = '*', `enter_value` = 0 WHERE `id` = %d", houseid);
		mysql_function_query(1, query, false, "", "");
	}
	return 1;
}

CMD:lockbiz(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a bizniszében bent van-e
	if(!(houseid = IsPlayerInOwnBiznis(playerid))) return 1;

    if(GetGVarType("BizNotAllowIcon", houseid) && GetPVarInt(playerid, "Level") < 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_ALAP_BIZNISZ_EZT_NEM_ZARHATOD"));

	ShowPlayerDialogEx(playerid, DIALOG_LOCKBIZ, DIALOG_STYLE_INPUT, "{" #XCOLOR_GREEN "}Biznisz lezárása", "Lentre írd be a házad jelszavát\nBárki betud menni, aki tudja a jelszót!", "Ok", "Mégse");
	return 1;
}

CMD:unlockbiz(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a bizniszében bent van-e
	if(!(houseid = IsPlayerInOwnBiznis(playerid))) return 1;

	if(!GetGVarType("BizLocked", houseid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_REZ_A_BIZNISZ_MEG_NINCS_LEZARVA"));
    if(GetGVarType("BizNotAllowIcon", houseid) && GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_ALAP_BIZNISZ_EZT_NEM_NYITHATOD"));

	// Biznisz feloldása pénzbe kerül
	MoneyCheck(playerid, PRICE_UNLOCKBIZ);

	DeleteGVar("BizLocked", houseid);

    GetGVarString("BizName", i_str, sizeof(i_str), houseid);
	RemoveHexColorFromString(i_str);
	SendClientMessagef(playerid, COLOR_PROPGREEN, LANG(playerid, "MSG_KINYITOTTAD_A__NEVU_BIZNISZT"), i_str);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `locked` = '*' WHERE `id` = %d", houseid);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:bizenter(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a bizniszében bent van-e
	if(!(houseid = IsPlayerInOwnBiznis(playerid))) return 1;

    if(sscanf(params, "d", datez)) return SendUsage(playerid, "/bizevalue <Összeg>");
    if(IsNegative(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));

    new
        maxenter = 1000;
	if(datez > maxenter) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_MAXIMUM_BELEPOAR_1000"));

    SetGVarInt("BizEnterValue", datez, houseid);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_BELEPOJENEK_ARA_MEGVALTOZTAT"), datez);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `enter_value` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:createbiz(playerid, params[], 4, 0)
{
	new
		type,
		price;
	if(sscanf(params, "dds[" #STR_SIZE "]", type, datez, tmp)) return SendUsage(playerid, "/createbiz <Típus> <Icon ID> <Név>");
	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX_1"));
	if(!IsValidIcon(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_IKON_NEM_MEGFELELO"));
	if(Iter_Count(biznis) == MAX_BIZNIS - 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TOBB_BIZNISZT_NEM_LEHET"));
    if(!(0 <= type <= 29)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_TIPUS_0__29_KOZOTT_LEHET"));

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);

	price = g_szBiznisTypes[type][e_iPrice];

	mysql_format(1, query, sizeof(query), "INSERT INTO `biznis`(id, mapicon, out_x, out_y, out_z, name, value, earning, biz_angle, type) VALUES(0, %d, %f, %f, %f, '%e', %d, %d, %f, '%e')", datez, X, Y, Z, tmp, price, price / 10000, Angle, g_szBiznisTypes[type][e_szHouseName_HU]);
	mysql_function_query(1, query, true, "THREAD_CreateBiznis_1", "dddfffd", playerid, type, datez, X, Y, Z, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_CreateBiznis_1(playerid, type, mapicon, Float:fX, Float:fY, Float:fZ, queue);
public THREAD_CreateBiznis_1(playerid, type, mapicon, Float:fX, Float:fY, Float:fZ, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CreateBiznis_1);

	houseid = cache_insert_id();
	new price = g_szBiznisTypes[type][e_iPrice];

    SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_SIKERESEN_LETREHOZVA"), houseid, g_szBiznisTypes[type][e_szHouseName_HU], fX, fY, fZ);

	format(i_str, sizeof(i_str), "Ár: %s, Jövedelem: %s, IconID: %d, %.4f, %.4f, %.4f Name: %s", FormatNumber(price), FormatNumber(price / 1000), mapicon, fX, fY, fZ, Angle, tmp);
    AdminCommandLog("CREATEBIZ", playerid, -1, i_str);

	mysql_function_query(1, "SELECT players.name, biznis. * FROM biznis LEFT JOIN players ON ( biznis.owner_id = players.reg_id ) ORDER BY `id` DESC LIMIT 1", true, "THREAD_Biznis", "d", 0);
	return 1;
}

CMD:bizpos(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/bizpos <Biznisz ID>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, Angle);

	SetGVarFloat("BizX", X, houseid);
	SetGVarFloat("BizY", Y, houseid);
	SetGVarFloat("BizZ", Z, houseid);
	SetGVarFloat("BizA", Angle, houseid);

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_POZICIOJA_MEGVALTOZTATVA"), X, Y, Z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	valstr(name, houseid);
    AdminCommandLog("BIZPOS", playerid, -1, name);

    UpdateBiznis(houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `out_x` = %f, `out_y` = %f, `out_z` = %f, `biz_angle` = %f WHERE `id` = %d", X, Y, Z, Angle, houseid);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:bizintpos(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/bizintpos <Biznisz ID>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, Angle);

	SetGVarFloat("BizInX", X, houseid);
	SetGVarFloat("BizInY", Y, houseid);
	SetGVarFloat("BizInZ", Z, houseid);
	SetGVarFloat("BizInA", Angle, houseid);

	new
		iInterior = GetPlayerInterior(playerid),
		iWorld =  GetPlayerVirtualWorld(playerid);
	SetGVarInt("BizInterior", iInterior, houseid);
    SetGVarInt("BizVirtualWorld", iWorld, houseid);

    UpdateBiznis(houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `in_x` = %f, `in_y` = %f, `in_z` = %f, `in_angle` = %f, `virtualworld` = %d, `interior` = %d WHERE `id` = %d", X, Y, Z, Angle, iWorld, iInterior, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_BELSO_POZICIOJA_MEGVALTOZTAT"), X, Y, Z, iInterior, iWorld);

	valstr(name, houseid);
    AdminCommandLog("BIZINTPOS", playerid, -1, name);
	return 1;
}

CMD:bizevalue(playerid, params[], 4, 0)
{
    if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bizenter <Biznisz ID> <Összeg>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
    if(IsNegative(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TE_SE_VAGY_HULYE_O"));

	if(datez > 1000) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_MAXIMUM_BELEPOAR_1000"));

	SetGVarInt("BizEnterValue", datez, houseid);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_BELEPOJENEK_ARA_MEGVALTOZTAT"), datez);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `enter_value` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BIZENTER", playerid, -1, name);
	return 1;
}

CMD:bizearning(playerid, params[], 4, 0)
{
    if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bizearning <Biznisz ID> <Összeg>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
    if(!(1000 <= datez <= 50000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_10000_ES_100000"));

    SetGVarInt("BizEarning", datez, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `earning` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_JOVEDELME_MEGVALTOZTATVA"), datez);

	valstr(name, houseid);
    AdminCommandLog("BIZEARNING", playerid, -1, name);
	return 1;
}

CMD:bizvalue(playerid, params[], 4, 0)
{
    if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bizvalue <Biznisz ID> <Összeg>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

	SetGVarInt("BizValue", datez, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `value` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_ARA_MEGVALTOZTATVA"), datez);

	GetGVarString("BizName", i_str, sizeof(i_str), houseid);
    GetGVarString("BizOwner", name, sizeof(name), houseid);

    UpdateBiznis(houseid);

	valstr(name, houseid);
    AdminCommandLog("BIZVALUE", playerid, -1, name);
	return 1;
}

CMD:bizlock(playerid, params[], 4, 0)
{
    if(sscanf(params, "ds[" #STR_SIZE "]", houseid, i_str)) return SendUsage(playerid, "/bizlock <Biznisz ID> <Jelszó>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

	if(i_str[0] == '*')
	{
		DeleteGVar("BizLocked", houseid);
		SendClientMessage(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_KINYITVA"));
	}
	else
	{
		SetGVarString("BizLocked", i_str, houseid);
		SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_BIZNISZ_BEZARVA_JELSZO_"), i_str);
	}

    mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `locked` = '%e' WHERE `id` = %d", i_str, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BIZLOCK", playerid, -1, name);
	return 1;
}

CMD:bizint(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", houseid, datez))
	{
		SendUsage(playerid, "/bizint <Biznisz ID> <Interior Type>");
		SendClientMessage(playerid, COLOR_RED, "0: FDPIZA | 1: FDBURG | 2: FDCHICK | 3: AMMUN1 | 4: AMMUN2 | 5: AMMUN3 | 6: AMMUN5 | -1: Alap (Semmi)");
		return 1;
	}
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHINTERIOR_BTIPU"));

    SetGVarInt("BizInteriorType", datez, houseid);
	SetPlayerShopNameEx(playerid, datez);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `interiortype` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BIZINT", playerid, -1, name);
	return 1;
}

CMD:bizinterior(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bizinterior <Biznisz ID> <Interior ID>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
	if(!(0 <= datez <= 20)) return SendUsage(playerid, "/bizinterior <Biznisz ID> <Interior ID>");

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHINTERIORJA_YH"));
    SetGVarInt("BizInterior", datez, houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `interior` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BIZINTERIOR", playerid, -1, name);
	return 1;
}

CMD:bizworld(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bizworld <Biznisz ID> <World ID>");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
	if(!(0 <= datez <= 20)) return SendUsage(playerid, "/bizworld <Biznisz ID> <World ID>");

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHWORLDJE_YHME"));
    SetGVarInt("BizVirtualWorld", datez, houseid);

    UpdateBiznis(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `virtualworld` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BIZWORLD", playerid, -1, name);
	return 1;
}

CMD:setbizicon(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/setbizicon <Biznisz ID> <Icon ID> {" #XCOLOR_BLUE "}ID-ket a fórumon a kiemelt témában találsz!");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
	if(!IsValidIcon(datez) || !datez) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_IKON_ID_NEM_MEGFELELO"));

	SetGVarInt("BizMapIconType", datez, houseid);
	GetPlayerFacingAngle(playerid, Angle);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHIKONJA_YHMEG"));

    UpdateBiznis(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `mapicon` = %d, `biz_angle` = %f WHERE `id` = %d", datez, Angle, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("SETBIZICON", playerid, -1, name);
	return 1;
}

CMD:bizicon(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a bizniszében bent van-e
	if(!(houseid = IsPlayerInOwnBiznis(playerid))) return 1;

	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/bizicon <Icon ID> (Jelenleg: %d) {" #XCOLOR_BLUE "}ID-ket a fórumon a kiemelt témában találsz!", GetGVarInt("BizMapIconType", houseid));
	if(!IsValidIcon(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_IKON_ID_NEM_MEGFELELO"));
    if(GetGVarType("BizNotAllowIcon", houseid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_ALAP_BIZNISZ_ENNEK_AZ_IKONJAT"));
	if(!datez) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_AZ_IKON_NEM_MEGENGEDETT"));

	SetGVarInt("BizMapIconType", datez, houseid);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZED_BHIKONJA_YHM"));

	UpdateBiznis(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `mapicon` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:bsetbizicon(playerid, params[], 4, 0)
{
	if(sscanf(params, "dd", houseid, datez)) return SendUsage(playerid, "/bsetbizicon <Biznisz ID> <0/1> (0 = állítható, 1 = nem)");
	if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);
	if(!IsValidIcon(datez)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_BEIRT_IKON_ID_NEM_MEGFELELO"));

	if(datez)
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHIKONJA_YHMAR"));
		SetGVarInt("BizNotAllowIcon", true, houseid);
	}
	else
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_BHIKONJA_YHMAR_1"));
        DeleteGVar("BizNotAllowIcon", houseid);
	}

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `b_mapicon` = %d WHERE `id` = %d", datez, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("BSETBIZICON", playerid, -1, name);
	return 1;
}

CMD:bizname(playerid, params[], 0, 0)
{
	// Megnézzük, hogy a bizniszében bent van-e
	if(!(houseid = IsPlayerInOwnBiznis(playerid))) return 1;

	if(isnull(params)) return SendUsage(playerid, "/bizname <Név>");

	tmp[0] = EOS;
	strcat(tmp, ColouredText(params));

	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX"));

    if(GetGVarType("BizNotAllowIcon", houseid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZ_ALAP_BIZNISZ_ENNEK_A_NEVET"));

    i_str[0] = EOS;
	strcat(i_str, tmp);
	RemoveHexColorFromString(i_str);
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32_1"));

	tmp[0] = EOS;
	strcat(tmp, ColouredText(params));
	SetGVarString("BizName", tmp, houseid);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZED_YHNEVE_MEGVALTOZ"));

	UpdateBiznis(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `name` = '%e' WHERE `id` = %d", tmp, houseid);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:setbizname(playerid, params[], 4, 0)
{
	if(sscanf(params, "ds[" #STR_SIZE "]", houseid, i_str)) return SendUsage(playerid, "/setbizname <Biznisz ID> <Név>");
	tmp[0] = EOS;
	strcat(tmp, ColouredText(i_str));

	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX"));

    i_str[0] = EOS;
	strcat(i_str, tmp);
	RemoveHexColorFromString(i_str);
	if(strlen(i_str) > 32) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_32_1"));

	SetGVarString("BizName", tmp, houseid);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHBIZNISZ_NEVE_MEGVALTOZTATVA"));

    GetGVarString("BizOwner", name, sizeof(name), houseid);

	UpdateBiznis(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `name` = '%e' WHERE `id` = %d", tmp, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("SETBIZNAME", playerid, -1, name);
	return 1;
}

CMD:bizowner(playerid, params[], 4, 0)
{
	new
		regid;
	if(sscanf(params, "dd", houseid, regid)) return SendUsage(playerid, "/bizowner <Biznisz ID> <pRegID>");
    if(!IsValidBiznis(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_BIZNIS_ID"), houseid);

	mysql_format(1, query, sizeof(query), "SELECT `name` FROM `players` WHERE `reg_id` = %d", regid);
	mysql_function_query(1, query, true, "THREAD_SetBizowner", "dddd", playerid, houseid, regid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_SetBizowner(playerid, bizid, regid, queue);
public THREAD_SetBizowner(playerid, bizid, regid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SetBizowner);

	if(!cache_get_row_count())
	{
	    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_LETEZO_AZONOSITO_"), regid);
	    return 1;
	}

	cache_get_row(0, 0, name);
	houseid = bizid;

	// Öreg biznisz eltávolítása
	foreach(new OldBizID: biznis)
	{
		if(GetGVarInt("BizOwnerRegID", OldBizID) == regid)
		{
//			printf("Old: %d", OldBizID);
			SetGVarString("BizOwner", "Senki", OldBizID);
			SetGVarInt("BizOwnerRegID", -1, OldBizID);

           	GetGVarString("BizName", i_str, sizeof(i_str), OldBizID);
			DeleteGVar("BizLocked", OldBizID);

			UpdateBiznis(OldBizID);

			mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `owner_id` = -1, `locked` = '*' WHERE `id` = %d", OldBizID);
			mysql_function_query(1, query, false, "", "");
		}
	}

	if(GetGVarInt("BizOwnerRegID", houseid) != -1)
	{
		foreach(new i: Player)
		{
		    if(GetPVarInt(i, "PlayerBiz") != houseid) continue;

		    DeletePVar(i, "PlayerBiz");
            break;
		}
    }

    SetGVarString("BizOwner", name, houseid);
	SetGVarInt("BizOwnerRegID", regid, houseid);

    foreach(new i: Player)
	{
		if(PlayerInfo[i][pRegID] != GetGVarInt("BizOwnerRegID", houseid)) continue;

	    SetPVarInt(i, "PlayerBiz", houseid);
		break;
	}

	mysql_format(1, query, sizeof(query), "UPDATE `biznis` SET `owner_id` = %d, `locked` = '*' WHERE `id` = %d", regid, houseid);
	mysql_function_query(1, query, false, "", "");
    DeleteGVar("BizLocked", houseid);

	UpdateBiznis(houseid);

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG___REGID__BIZNISZE_ATTALITVA"), name, regid, houseid);

	valstr(name, houseid);
    AdminCommandLog("BIZOWNER", playerid, -1, name);
	return 1;
}

///////////////
CMD:createhouse(playerid, params[], 4, 0)
{
	new
		type,
		price,
		bool:IsObjectLoader;
	tmp[0] = EOS;
	if(sscanf(params, "dds[" #STR_SIZE "]", type, bool:IsObjectLoader, tmp)) return SendUsage(playerid, "/createhouse <Típus> <bool:IsObjectLoader> <Név>");
	if(strlen(tmp) > MAX_PROP_NAME) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM__MAX_1"));
	if(Iter_Count(houses) == MAX_HOUSES - 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TOBB_HAZAT_NEM_LEHET_LETREHOZN"));
 	if(!(0 <= type <= 9)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_TIPUS"));

	//printf("createhouse tmp: %s", tmp);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);

	price = g_szHouseTypes[type][e_iPrice];

	mysql_format(1, query, sizeof(query), "INSERT INTO `houses`(id, out_x, out_y, out_z, name, default_name, prop_value, prop_earning, bits, outint, prop_angle, `type`) VALUES(0, %f, %f, %f, '%e', '%e', %d, %d, %d, %d, %f, %d)", X, Y, Z, tmp, tmp, price, price / 1000, (IsObjectLoader) ? (1) :(0), GetPlayerInterior(playerid), Angle, type);
	mysql_function_query(1, query, false, "THREAD_CreateHouse_1", "dddfffd", playerid, type, IsObjectLoader, X, Y, Z, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_CreateHouse_1(playerid, type, objloader, Float:fX, Float:fY, Float:fZ, queue);
public THREAD_CreateHouse_1(playerid, type, objloader, Float:fX, Float:fY, Float:fZ, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CreateHouse_1);

	houseid = cache_insert_id();
	SetPVarInt(playerid, "BuildHouseID", houseid);

	PlayerPlaySound(playerid, 1056);
	GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_HOUSE_CREATED")), 5000, 5);

	new price = g_szHouseTypes[type][e_iPrice]/*, lang = g_pLang{playerid}*/;

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_INGATLAN_SIKERESEN_LETREHOZVA"), houseid, g_szHouseTypes[type][e_szHouseName_HU], FormatNumber(price), FormatNumber(price / 1000), objloader, fX, fY, fZ);

	format(i_str, sizeof(i_str), "ID: %d, Típus: %s, Ár: %s, Jövedelem: %s | ObjectLoader: %d (%.4f, %.4f, %.4f)", houseid, g_szHouseTypes[type][e_szHouseName_HU], FormatNumber(price), FormatNumber(price / 1000), objloader, fX, fY, fZ);
    AdminCommandLog("CREATEHOUSE", playerid, -1, i_str);

	mysql_function_query(1, "SELECT players.name, houses . * FROM houses LEFT JOIN players ON ( houses.prop_owner_id = players.reg_id ) ORDER BY `id` DESC LIMIT 1", true, "THREAD_Houses", "d", 0);
	return 1;
}

/*
CMD:deletehouse(playerid, params[], 4, 0)
{
	if((houseid = IsPlayerNearProperty(playerid)) == -1) return ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_EGYIK_INGATLAN_KOZELEBEN"));

	mysql_format(1, query, sizeof(query), "DELETE FROM `houses` WHERE `id` = %d", houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_TOROLVE_ID_"), houseid);
	return 1;
}
*/

CMD:delhousecar(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(-1)", houseid)) return SendUsage(playerid, "/delhousecar <Ház ID>");

    new
        iHouseCarID;
	if(houseid == -1)
	{
		if(!(vID = GetPlayerDynamicVehicleID(playerid))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_KOCSIBAN"));

		foreach(new hazid: houses)
		{
			if((iHouseCarID = GetGVarInt("HouseCar", hazid)) == vID)
			{
				houseid = hazid;
				break;
			}
		}

		if(houseid == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AZ_AUTO_AMIBEN_ULSZ_NEM_HAZAUTO"));
	}
	else
	{
		if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);
		if(GetGVarInt("CarModel", houseid) == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_AUTO_ENNEL_A_HAZNAL"));
	}

	iHouseCarID = GetGVarInt("HouseCar", houseid);

	new flags = GetVehicleFlags(iHouseCarID);
	flags &= ~e_NO_TELE;
	SetVehicleFlags(iHouseCarID, flags);

	DestroyDynamicVehicle(iHouseCarID);
	SetGVarInt("CarModel", -1, houseid);
    SetGVarInt("HouseCar", -1, houseid);

	new
	    i;
	for( ; i != 14; i++)
	{
		format(name, sizeof(name), "CarComponent_%d", i);
		DeleteGVar(name, houseid);
	}
	for(i = 0; i != MAX_VEH_OBJECT; i++)
	{
		if(!g_HouseVehicleObjects[houseid][i]) continue;

		DestroyDynamicObject(gVehicleObject[iHouseCarID][i]);

		g_HouseVehicleObjects[houseid][i] = 0;
		gVehicleObject[iHouseCarID][i] = INVALID_OBJECT_ID;
	}

    GetGVarString("PropName", i_str, sizeof(i_str), houseid);
 	RemoveHexColorFromString(i_str);
	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZAUTO_TOROLVE_VID___ID_"), iHouseCarID, i_str, houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `car_model` = -1, `car_x` = 0, `car_y` = 0, `car_z` = 0, `car_a` = 0, `car_color_1` = -1, `car_color_2` = -1, `comp_0` = 0, `comp_1` = 0, `comp_2` = 0, `comp_3` = 0, `comp_4` = 0, `comp_5` = 0, `comp_6` = 0, `comp_7` = 0, `comp_8` = 0, `comp_9` = 0, `comp_10` = 0, `comp_11` = 0, `comp_12` = 0, `comp_13` = 0, `vehicleobjects` = '"VEH_OBJECT_NULL"' WHERE `id` = %d", houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("DELHOUSECAR", playerid, -1, name);
	return 1;
}

CMD:housecar(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | TAXI>)
{
    new
		opt_1,
		opt_2;

	houseid = GetPVarInt(playerid, "PlayerProp");

	if(houseid == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD"));
	if(GetGVarInt("CarModel", houseid) != -1)
	{
		foreach(new i: Player)
		{
			if(GetPVarInt(i, "EllopottID") == houseid)
	    	{
                return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EPP_LOPJAK_A_HAZAUTODAT_NEMTUDSZ"));
			}
		}
	}

	if(sscanf(params, "s[" #STR_SIZE "]D(-1)D(-1)", tmp, opt_1, opt_2))
	{
        SendUsage(playerid, "/housecar <Add/Pos/Remove/Color/Paintjob/Get/Doors/Lights/Bonnet/Boot/NoTele/Respawn/(save/delete)objects>");
		return 1;
	}
 	if(!strcmp(tmp, "add", true)) return HouseCarEdit(playerid, "BuyHouseCar");
 	else if(!strcmp(tmp, "remove", true)) return HouseCarEdit(playerid, "RemoveHouseCar");
	else if(!strcmp(tmp, "respawn", true)) return HouseCarEdit(playerid, "HouseCarRespawn");
	else if(!strcmp(tmp, "pos", true)) return HouseCarEdit(playerid, "HouseCarUpdatePos");
	else if(!strcmp(tmp, "get", true)) return HouseCarEdit(playerid, "HouseCarGet");
	else if(!strcmp(tmp, "goto", true)) return HouseCarEdit(playerid, "HouseCarGoto");
	else if(!strcmp(tmp, "notele", true)) return HouseCarEdit(playerid, "HouseCarAllowTeleport");
	else if(!strcmp(tmp, "boot", true)) return HouseCarEdit(playerid, "HouseCarBoot");
	else if(!strcmp(tmp, "siren", true)) return HouseCarEdit(playerid, "HouseCarSiren");
	else if(!strcmp(tmp, "bonnet", true)) return HouseCarEdit(playerid, "HouseCarBonnet");
	else if(!strcmp(tmp, "lights", true)) return HouseCarEdit(playerid, "HouseCarLights");
	else if(!strcmp(tmp, "doors", true)) return HouseCarEdit(playerid, "HouseCarDoors");
	else if(!strcmp(tmp, "randwheel", true)) return HouseCarEdit(playerid, "HouseCarRandWheel");
	else if(!strcmp(tmp, "saveobjects", true)) return HouseCarEdit(playerid, "HouseCarSaveObjects");
    else if(!strcmp(tmp, "deleteobjects", true)) return HouseCarEdit(playerid, "HouseCarDeleteObjects");
    else if(!strcmp(tmp, "color", true))
	{
	    SetPVarInt(playerid,"hCarColor1",opt_1);
        SetPVarInt(playerid,"hCarColor2",opt_2);
	    HouseCarEdit(playerid, "HouseCarColor");
	    return 1;
    }
    else if(!strcmp(tmp, "paintjob", true))
	{
	    if(!(0 <= opt_1 <= 4)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_PAITJOB_ID_0__4"));
	    SetPVarInt(playerid,"hCarpaintJob",opt_1);
	    HouseCarEdit(playerid, "HouseCarPaintJob");
	    return 1;
    }
	else
	{
	    SendUsage(playerid, "/housecar <Add/Pos/Remove/Color/Paintjob/Get/Doors/Lights/Bonnet/Boot/Respawn/(save/delete)objects>");
	//SendClientMessagef(playerid, COLOR_RED, "<Doorsstate/Windowsstate/Siren>");
	}
	return 1;
}

CMD:housepos(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/housepos <Ház ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, Angle);
	new
	    iInterior = GetPlayerInterior(playerid);

    if(iInterior) SetGVarInt("OutInt", datez, houseid);
	SetGVarFloat("PropX", X, houseid);
	SetGVarFloat("PropY", Y, houseid);
	SetGVarFloat("PropZ", Z, houseid);
	SetGVarFloat("PropA", Angle, houseid);

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_KULSO_POZICIOJA_MEGVALTOZTATVA"), X, Y, Z, iInterior);

	// Ház 3D Text, Map Icon és pickup adatjainak felújítása
    UpdateHouse(houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `out_x` = %f, `out_y` = %f, `out_z` = %f, `prop_angle` = %f, `outint` = %d WHERE `id` = %d", X, Y, Z, Angle, iInterior, houseid);
	mysql_function_query(1, query, false, "", "");

	valstr(name, houseid);
    AdminCommandLog("HOUSEPOS", playerid, -1, name);
	return 1;
}

CMD:houseintpos(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/houseintpos <Ház ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

    GetPlayerPos(playerid, X, Y, Z);
    GetPlayerFacingAngle(playerid, Angle);

	new
	    iInterior = GetPlayerInterior(playerid),
		iWorld = GetPlayerVirtualWorld(playerid);

	SetGVarFloat("InX", X, houseid);
	SetGVarFloat("InY", Y, houseid);
	SetGVarFloat("InZ", Z, houseid);
	SetGVarFloat("InA", Angle, houseid);

	SetGVarInt("Interior", iInterior, houseid);
    SetGVarInt("VirtualWorld", iWorld, houseid);

	// Ház 3D Text, Map Icon és pickup adatjainak felújítása
    UpdateHouse(houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `in_x` = %f, `in_y` = %f, `in_z` = %f, `in_angle` = %f, `virtualworld` = %d, `interior` = %d WHERE `id` = %d", X, Y, Z, Angle, iWorld, iInterior, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_BELSO_POZICIOJA_MEGVALTOZTATVA"), X, Y, Z, iInterior, iWorld);

	valstr(name, houseid);
    AdminCommandLog("HOUSEINTPOS", playerid, -1, name);
	return 1;
}

CMD:houseint(playerid, params[], 4, 0)
{
    new
		intid;
    if(sscanf(params, "dd", houseid, intid)) return SendUsage(playerid, "/houseint <Ház ID> <Interior ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	SetGVarInt("Interior", intid, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `interior` = %d WHERE `id` = %d", intid, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_INTERIORJA_ATALLITVA_RARE"), intid);

	valstr(name, houseid);
    AdminCommandLog("HOUSEINT", playerid, -1, name);
	return 1;
}

CMD:houseworld(playerid, params[], 4, 0)
{
    new
		vwid;
    if(sscanf(params, "dd", houseid, vwid)) return SendUsage(playerid, "/houseint <Ház ID> <VW ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	SetGVarInt("VirtualWorld", vwid, houseid);

	// Ház 3D Text, Map Icon és pickup adatjainak felújítása
	UpdateHouse(houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `virtualworld` = %d WHERE `id` = %d", vwid, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_VIRTUALIS_VILAGA_ATALLITVA"), vwid);

	valstr(name, houseid);
    AdminCommandLog("HOUSEWORLD", playerid, -1, name);
	return 1;
}

CMD:housea(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/housea <Ház ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	GetPlayerFacingAngle(playerid, Angle);
	SetGVarFloat("PropA", Angle, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_angle` = %f WHERE `id` = %d", Angle, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_KULSO_SPAWNJANAK_FORGASA"), Angle);

	valstr(name, houseid);
    AdminCommandLog("HOUSEA", playerid, -1, name);
	return 1;
}

CMD:houseinta(playerid, params[], 4, 0)
{
    if(sscanf(params, "d", houseid)) return SendUsage(playerid, "/houseina <Ház ID>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	GetPlayerFacingAngle(playerid, Angle);
	SetGVarFloat("InA", Angle, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `in_angle` = %f WHERE `id` = %d", Angle, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_BELSO_SPAWNJANAK_FORGASA"), Angle);

	valstr(name, houseid);
    AdminCommandLog("HOUSEINTA", playerid, -1, name);
	return 1;
}

CMD:houseprice(playerid, params[], 4, 0)
{
    new
		price;
    if(sscanf(params, "dd", houseid, price)) return SendUsage(playerid, "/houseprice <Ház ID> <Ár>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	SetGVarInt("PropValue", price, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_value` = %d WHERE `id` = %d", price, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_ARA_MEGVALTOZTATVA_RA"), price);

    GetGVarString("PropName", i_str, sizeof(i_str), houseid);
	if(GetGVarInt("PropOwnerRegID", houseid) == -1)
	{
		format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", i_str, houseid, FormatNumber(price));
	}
	else
	{
        GetGVarString("PropOwner", name, sizeof(name), houseid);
		format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", i_str, houseid, name);
	}
	UpdateDynamic3DTextLabelText(Text3D:GetGVarInt("Label", houseid), COLOR_DARKBLUE, tmp);

	valstr(name, houseid);
    AdminCommandLog("HOUSEPRICE", playerid, -1, name);
	return 1;
}

CMD:houseearning(playerid, params[], 4, 0)
{
    new
		earning;
    if(sscanf(params, "dd", houseid, earning)) return SendUsage(playerid, "/houseearning <Ház ID> <Jövedelem>");
	if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);
    if(!(100 <= earning <= 10000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROSSZ_ERTEK_100_ES_10000_KOZOTT"));

	SetGVarInt("PropEarning", earning, houseid);

    mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_earning` = %d WHERE `id` = %d", earning, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG_HAZ_JOVEDELME_MEGVALTOZTATVA"), earning);

	valstr(name, houseid);
    AdminCommandLog("HOUSEEARNING", playerid, -1, name);
	return 1;
}

CMD:houseowner(playerid, params[], 4, 0)
{
	new
		regid;
	if(sscanf(params, "dd", houseid, regid)) return SendUsage(playerid, "/houseowner <Ház ID> <pRegID>");
    if(!IsValidHouse(houseid)) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_HOUSE_ID"), houseid);

	mysql_format(1, query, sizeof(query), "SELECT `name` FROM `players` WHERE `reg_id` = %d", regid);
	mysql_function_query(1, query, true, "THREAD_Houseowner_1", "dddd", playerid, houseid, regid, g_pQueryQueue[playerid]);

	valstr(name, houseid);
    AdminCommandLog("HOUSEOWNER", playerid, -1, name);
	return 1;
}

forward THREAD_Houseowner_1(playerid, hazid, regid, queue);
public THREAD_Houseowner_1(playerid, hazid, regid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Houseowner_1);

	if(!cache_get_row_count())
	{
	    SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_LETEZO_AZONOSITO_"), regid);
	    return 1;
	}

	cache_get_row(0, 0, name);

	// Öreg ház eltávolítása
	mysql_format(1, query, sizeof(query), "SELECT `id` FROM `houses` WHERE `prop_owner_id` = %d", regid);
	mysql_function_query(1, query, true, "THREAD_Houseowner_2", "dddsd", playerid, houseid, regid, name, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Houseowner_2(playerid, hazid, regid, playername[], queue);
public THREAD_Houseowner_2(playerid, hazid, regid, playername[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Houseowner_2);

	if(cache_get_row_count())
	{
	    cache_get_row(0, 0, name);
		new
		    OldHouseID = strval(name);
		if(OldHouseID)
		{
			// printf("Old: %d", OldHouseID);
			SetGVarString("PropOwner", "Senki", OldHouseID);
			SetGVarInt("PropOwnerRegID", -1, OldHouseID);

			DeleteGVar("PropLocked", OldHouseID);

			// Ház 3D Text, Map Icon és pickup adatjainak felújítása
		    UpdateHouse(OldHouseID);

			mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `name` = '%s', `prop_owner_id` = -1, `prop_locked` = '*' WHERE `id` = %d", i_str, OldHouseID);
			mysql_function_query(1, query, false, "", "");
		}
	}

	if(GetGVarInt("PropOwnerRegID", houseid) != -1)
	{
		foreach(new i: Player)
		{
		    if(GetPVarInt(i, "PlayerProp") == houseid)
		    {
	            DeletePVar(i, "PlayerProp");
                break;
            }
		}
    }

    SetGVarString("PropOwner", playername, houseid);
	SetGVarInt("PropOwnerRegID", regid, houseid);

    foreach(new i: Player)
	{
		if(PlayerInfo[i][pRegID] != GetGVarInt("PropOwnerRegID", houseid)) continue;

		SetPVarInt(i, "PlayerProp", houseid);
		break;
	}

	// Ház 3D Text, Map Icon és pickup adatjainak felújítása
	UpdateHouse(houseid);

	mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `prop_owner_id` = %d WHERE `id` = %d", regid, houseid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_PINK, LANG(playerid, "MSG___REGID__HAZA_ATTALITVA_HA"), playername, regid, houseid);

	valstr(name, houseid);
    AdminCommandLog("HOUSEOWNER", playerid, -1, name);
	return 1;
}

/* Animations */

CMD:animations(playerid, params[], 0, 0)
{
    SendClientMessage(playerid, COLOR_YELLOW, "________________________________________________________________________________________________________________________");
	SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ANIMACIOK"));
    SendClientMessage(playerid, COLOR_WHITE, "/fall - /fallback - /injured - /akick - /push - /lowbodypush - /handsup - /bomba - /drunk - /getarrested - /laugh - /sup");
    SendClientMessage(playerid, COLOR_WHITE, " /basket - /headbutt - /medic - /spray - /robman - /taichi - /lookout - /kiss - /cellin - /cellout - /crossarms - /lay");
    SendClientMessage(playerid, COLOR_WHITE, "/deal - /crack - /smoke - /groundsit - /chat - /dance - /fucku - /strip - /rejt - /vomit - /eat - /sit - /reload");
    SendClientMessage(playerid, COLOR_WHITE, "/koface - /kostomach - /rollfall - /carjacked1 - /carjacked2 - /rcarjack1 - /rcarjack2 - /lcarjack1 - /lcarjack2 - /bat");
    SendClientMessage(playerid, COLOR_WHITE, "/lifejump - /exhaust - /leftslap - /carlock - /hoodfrisked - /lightcig - /tapcig - /box - /lay2 - /chant - finger");
    SendClientMessage(playerid, COLOR_WHITE, "/shouting - /knife - /cop - /elbow - /kneekick - /airkick - /gkick - /gpunch - /fstance - /lowthrow - /highthrow - /aim");
    SendClientMessage(playerid, COLOR_WHITE, "/piss - /lean - /run - /wankout - /wankout2 - /sex<1-12> - /bilincs - /carry");
    SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__2"));
    return 1;
}
CMD:anims(playerid, params[], 0, 0)
{
	return cmd_animations(playerid, params);
}
CMD:animok(playerid, params[], 0, 0)
{
	return cmd_animations(playerid, params);
}
CMD:animlist(playerid, params[], 0, 0)
{
	return cmd_animations(playerid, params);
}

CMD:dance1(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DAN_LOOP_A",4.0,1,0,0,0,-1);
CMD:dance2(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DNCE_M_A",4.0,1,0,0,0,-1);
CMD:dance3(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DNCE_M_B",4.0,1,0,0,0,-1);
CMD:dance4(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DNCE_M_C",4.0,1,0,0,0,-1);
CMD:dance5(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DNCE_M_D",4.0,1,0,0,0,-1);
CMD:dance6(playerid, params[], 0, 0) return ApplyAnimation(playerid,"DANCING","DNCE_M_E",4.0,1,0,0,0,-1);
CMD:ul(playerid, params[], 0, 0) return ApplyAnimation(playerid,"PED","SEAT_DOWN",4.0,0,0,0,1,-1);
CMD:autoeat(playerid, params[], 0, 0) return ApplyAnimation(playerid, "VENDING", "vend_eat1_P",4.0,0,0,0,0,-1);

CMD:carjacked1(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","CAR_jackedLHS",4.0,0,1,1,1,0);
CMD:carjacked2(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","CAR_jackedRHS",4.0,0,1,1,1,0);
CMD:duck(playerid, params[], 0, 0) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DUCK);
CMD:handsup(playerid, params[], 0, 0) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
CMD:cellin(playerid, params[], 0, 0) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
CMD:cellout(playerid, params[], 0, 0) return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
CMD:wankout(playerid, params[], 0, 0) return LoopingAnim(playerid, "PAULNMAC", "wank_out",4.0,0,0,0,0,-1);
CMD:wankout2(playerid, params[], 0, 0) return LoopingAnim(playerid, "PAULNMAC", "wank_loop",4.0,1,0,0,0,-1);
CMD:drunk(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
CMD:plant(playerid, params[], 0, 0) return LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
CMD:getarrested(playerid, params[], 0, 0) return LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
CMD:laugh(playerid, params[], 0, 0) return OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
CMD:lookout(playerid, params[], 0, 0) return OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
CMD:robman(playerid, params[], 0, 0) return LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
CMD:crossarms(playerid, params[], 0, 0) return LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
CMD:lay(playerid, params[], 0, 0) return LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
CMD:rejt(playerid, params[], 0, 0) return LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
CMD:vomit(playerid, params[], 0, 0) return OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
CMD:eat(playerid, params[], 0, 0) return OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
CMD:vawe(playerid, params[], 0, 0) return LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
CMD:slapass(playerid, params[], 0, 0) return OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
CMD:deal(playerid, params[], 0, 0) return OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
CMD:crack(playerid, params[], 0, 0) return LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
CMD:push(playerid, params[], 0, 0) return OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
CMD:akick(playerid, params[], 0, 0) return OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
CMD:lowbodypush(playerid, params[], 0, 0) return OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
CMD:spray(playerid, params[], 0, 0) return OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
CMD:headbutt(playerid, params[], 0, 0) return OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
CMD:medic(playerid, params[], 0, 0) return OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
CMD:koface(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
CMD:kostmoach(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
CMD:lifejump(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
CMD:groundsit(playerid, params[], 0, 0) return LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
CMD:chat(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
CMD:fucku(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
CMD:taichi(playerid, params[], 0, 0) return LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
CMD:sit(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
CMD:fall(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
CMD:fallback(playerid, params[], 0, 0) return LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
CMD:kiss(playerid, params[], 0, 0) return LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 1, 1, 1, 1, 0);
CMD:injured(playerid, params[], 0, 0) return LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
CMD:exhaust(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
CMD:leftslap(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
CMD:rollfall(playerid, params[], 0, 0) return LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
CMD:carlock(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0);
CMD:rcarjack1(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
CMD:lcarjack1(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
CMD:rcarjack2(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
CMD:lcarjack2(playerid, params[], 0, 0) return OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
CMD:hoodfrisked(playerid, params[], 0, 0) return LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
CMD:lightcig(playerid, params[], 0, 0) return OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
CMD:tapcig(playerid, params[], 0, 0) return OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
CMD:bat(playerid, params[], 0, 0) return LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
CMD:box(playerid, params[], 0, 0) return LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
CMD:lay2(playerid, params[], 0, 0) return LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
CMD:chant(playerid, params[], 0, 0) return LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
CMD:finger(playerid, params[], 0, 0) return OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
CMD:shouting(playerid, params[], 0, 0) return LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
CMD:cop(playerid, params[], 0, 0) return OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
CMD:elbow(playerid, params[], 0, 0) return OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
CMD:kneekick(playerid, params[], 0, 0) return OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
CMD:fstance(playerid, params[], 0, 0) return LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
CMD:gpunch(playerid, params[], 0, 0) return OnePlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
CMD:airkick(playerid, params[], 0, 0) return OnePlayAnim(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
CMD:gkick(playerid, params[], 0, 0) return OnePlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
CMD:lowthrow(playerid, params[], 0, 0) return OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
CMD:highthrow(playerid, params[], 0, 0) return OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
CMD:dealstance(playerid, params[], 0, 0) return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
CMD:piss(playerid, params[], 0, 0) return SetPlayerSpecialAction(playerid, 68);
CMD:clear(playerid, params[], 0, 0) return ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
CMD:inbedright(playerid, params[], 0, 0) return LoopingAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
CMD:inbedleft(playerid, params[], 0, 0) return LoopingAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);

// Twister animok
CMD:dealidle(playerid, params[], 0, 0) return OnePlayAnim(playerid,"DEALER", "DEALER_IDLE", 4.0,0,0,0,0,0);
CMD:aso(playerid, params[], 0, 0) return OnePlayAnim(playerid,"CHAINSAW", "CSAW_G", 4.0,0,0,0,0,0);

CMD:bilincs(playerid, params[], 0, 0)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__BILINCS_ANIMACIO_TOROLVE"));
	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__BILINCS_ANIMACIO_BEKAPCSOLVA"));
	}
	return 1;
}

CMD:carry(playerid, params[], 0, 0)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__LADAHORDO_ANIMACIO_TOROLVE"));
	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__LADAHORDO_ANIMACIO_BEKAPCSOLVA"));
	}
	return 1;
}

CMD:smoke(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/smoke <1-4>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	    case 2: LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	    case 3: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0);
		default: SendUsage(playerid, "/smoke <1-4>");
	}
   	return 1;
}

CMD:knife(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/knife <1-4>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
	    case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
	    case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
		default: SendUsage(playerid, "/knife <1-4>");
	}
   	return 1;
}

CMD:basket(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/basket <1-6>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
	    case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	    case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
	    case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
	    case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
		default: SendUsage(playerid, "/basket <1-6>");
	}
    return 1;
}

CMD:reload(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/reload <deagle/smg/ak/m4>");

	if(!strcmp("deagle", params, true))
	{
		OnePlayAnim(playerid,"COLT45","colt45_reload",4.0,0,0,0,0,1);
		return 1;
	}
	else if(!strcmp("smg", params, true) || !strcmp("ak", params, true) || !strcmp("m4", params, true))
	{
		OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
		return 1;
	}

	SendUsage(playerid, "/reload <deagle/smg/ak/m4>");
   	return 1;
}

CMD:gwalk(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/gwalk <1-2>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
	    case 2: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		default: SendUsage(playerid, "/gwalk <1-2>");
	}
   	return 1;
}

CMD:aim(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/aim <1-3>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid, "PED", "gang_gunstand",4.0,1,1,1,1,1);
	    case 2: LoopingAnim(playerid, "PED", "Driveby_L",4.0,0,1,1,1,1);
	    case 3: LoopingAnim(playerid, "PED", "Driveby_R",4.0,0,1,1,1,1);
		default: SendUsage(playerid, "/aim <1-3>");
	}
    return 1;
}

CMD:lean(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/lean <1-2>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid, "GANGS", "leanIDLE",4.0,0,1,1,1,0);
	    case 2: LoopingAnim(playerid, "MISC", "Plyrlean_loop",4.0,0,1,1,1,0);
	    default: SendUsage(playerid, "/lean <1-2>");
	}
    return 1;
}

CMD:sup(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/sup <1-3>");

	switch(type)
	{
	    case 1: OnePlayAnim(playerid, "GANGS", "hndshkba",4.0,0,0,0,0,0);
	    case 2: OnePlayAnim(playerid, "GANGS", "hndshkda",4.0,0,0,0,0,0);
	    case 3: OnePlayAnim(playerid, "GANGS", "hndshkfa_swt",4.0,0,0,0,0,0);
	    default: SendUsage(playerid, "/sup <1-3>");
	}
    return 1;
}

CMD:rap(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/rap <1-4>");

	switch(type)
	{
	    case 1: LoopingAnim(playerid, "RAPPING", "RAP_A_Loop",4.0,1,0,0,0,0);
	    case 2: LoopingAnim(playerid, "RAPPING", "RAP_C_Loop",4.0,1,0,0,0,0);
	    case 3: LoopingAnim(playerid, "GANGS", "prtial_gngtlkD",4.0,1,0,0,0,0);
	    case 4: LoopingAnim(playerid, "GANGS", "prtial_gngtlkH",4.0,1,0,0,1,1);
	    default: SendUsage(playerid, "/rap <1-4>");
	}
	return 1;
}

CMD:strip(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/strip <1-7>");

	switch(type)
   	{
       	case 1: LoopingAnim(playerid, "STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
       	case 2: LoopingAnim(playerid, "STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
       	case 3: LoopingAnim(playerid, "STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
       	case 4: LoopingAnim(playerid, "STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
       	case 5: LoopingAnim(playerid, "STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
       	case 6: LoopingAnim(playerid, "STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
       	case 7: LoopingAnim(playerid, "STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
       	default: SendUsage(playerid, "/strip <1-7>");
   	}
	return 1;
}

CMD:dance(playerid, params[], 0, 0)
{
	new
		type;
	if(sscanf(params, "d", type)) return SendUsage(playerid, "/dance <1-4>");

	switch(type)
   	{
       	case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
       	case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
       	case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
       	case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
       	default: SendUsage(playerid, "/dance <1-4>");
   	}

	g_PlayerData[playerid] |= e_USE_LOOP_ANIM;
    ShowWelcome(playerid, LANG(playerid, "MSG_ANIMACIO_MEGALLITASA_RKPED"));
	return 1;
}

CMD:jump(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/jump <on/off/érték>");

    if(!strcmp(params, "on", true))
    {
		if(GetPVarFloat(playerid, "VehicleHopping") > 0.0 && !GetPVarType(playerid, "CPanelRe")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_JARMU_UGRAS_MAR_BE_VAN_KAPCSOLVA"));

		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_JARMU_UGRAS_BEKAPCSOLVA"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHJARMU_UGRAS_BEKAPCSOLVA"));
		SetPVarFloat(playerid, "VehicleHopping", 0.2);
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehiclehopping` = 0.2 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "off", true))
	{
		if(GetPVarFloat(playerid, "VehicleHopping") < 0.1 && !GetPVarType(playerid, "CPanelRe")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_JARMU_UGRAS_MAR_KI_VAN_KAPCSOLVA"));

		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_JARMU_UGRAS_KIKAPCSOLVA"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHJARMU_UGRAS_KIKAPCSOLVA"));
		DeletePVar(playerid, "VehicleHopping");
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehiclehopping` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}

	if(!(0.1 <= (V[0] = floatstr(params)) <= 0.6)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_01_ES_06_KOZOTT"));

	SetPVarFloat(playerid, "VehicleHopping", V[0]);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHJARMU_UGRAS_ERTEKE_ATTALITVA"), V[0]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehiclehopping` = %f WHERE `reg_id` = %d", V[0], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:speedboost(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/speedboost <on/off/érték>");

    if(!strcmp(params, "on", true))
    {
		if(GetPVarFloat(playerid, "VehicleboostValue") > 0.9 && !GetPVarType(playerid, "CPanelRe")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_SPEEDBOOST_MAR_BE_VAN_KAPCSOLVA"));

		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_SPEED_BOOST_BEKAPCSOLVA"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_PHSPEED_BOOST_BEKAPCSOLVA"));
		SetPVarFloat(playerid, "VehicleboostValue", 1.2);
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehicleboost` = 1.2 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "off", true))
	{
		if(GetPVarFloat(playerid, "VehicleboostValue") < 0.9 && !GetPVarType(playerid, "CPanelRe")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_SPEEDBOOST_MAR_KI_VAN_KAPCSOLVA"));

		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_SPEED_BOOST_KIKAPCSOLVA"));
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHSPEED_BOOST_KIKAPCSOLVA"));
		DeletePVar(playerid, "VehicleboostValue");
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehicleboost` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
		return 1;
	}

	if(!(1.0 <= (V[0] = floatstr(params)) <= 2.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_10_ES_20_KOZOTT"));

	SetPVarFloat(playerid, "VehicleboostValue", V[0]);

	InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSPEEDBOOST_ERTEKE_ATTALITVA"), V[0]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vehicleboost` = %f WHERE `reg_id` = %d", V[0], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:boost(playerid, params[], 0, 0)
{
    cmd_speedboost(playerid,"");
	return 1;
}

CMD:autofix(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/autofix <body/engine/full/off>");

	if(!strcmp(params, "body", true)) //Külsõ
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
		SetPVarInt(playerid, "AutoRepair", 2);
   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `autorepair` = '2' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "engine", true)) //Motor
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
		SetPVarInt(playerid, "AutoRepair", 1);
   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `autorepair` = '1' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "full", true) || !strcmp(params, "on", true)) //Teljes
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS"));
		SetPVarInt(playerid, "AutoRepair", 3);
   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_BEKAPCSOLV"));
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `autorepair` = '3' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "off", true)) //Ki
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHAUTOMATIKUS_JARMU_JAVITAS_1"));
		SetPVarInt(playerid, "AutoRepair", 0);
   		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_JAVITAS_KIKAPCSOLV"));
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `autorepair` = '0' WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}

	SendUsage(playerid, "/autofix <body/engine/full/off>");
	return 1;
}
/*
CMD:reloadbabuk(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "HQ") != 1 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES"));

    CreateGroveBabuk(true);
    ShowWelcome(playerid, LANG(playerid, "MSG_BABUK_UJRARAKVA"));
	return 1;
}

CMD:grovefal(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "HQ") != 1 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES"));

	new
	    i;
    if(g_ServerFlags & e_GROVEFAL)
    {
		for( ; i != 16; i++)
		{
			GetDynamicObjectPos(gGroveJobbfal + i, X, Y, Z);
			MoveDynamicObject(gGroveJobbfal + i, X, -1653.33618164, Z, 3.0);

			GetDynamicObjectPos(gGroveBalfal + i, X, Y, Z);
			MoveDynamicObject(gGroveBalfal + i, X, -1662.17053223, Z, 3.0);
		}
	}
	else
	{
		for( ; i != 16; i++)
		{
			GetDynamicObjectPos(gGroveJobbfal + i, X, Y, Z);
			MoveDynamicObject(gGroveJobbfal + i, X, -1644.767211, Z, 3.0);

			GetDynamicObjectPos(gGroveBalfal + i, X, Y, Z);
			MoveDynamicObject(gGroveBalfal + i, X, -1669.569213, Z, 3.0);
		}
	}
	g_ServerFlags ^= e_GROVEFAL;
	return 1;
}

CMD:groveheli(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "HQ") != 1 && GetPVarInt(playerid, "Level") != 4) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES"));

	if(g_GateFlags & (1 << 30))
	{
		MoveDynamicObject(gGroveHeli, 2509.82568359,-1697.24877930,80.62731171, 7.5);
		MoveDynamicObject(gGroveHeli + 1, 2520.10375977,-1696.82678223,80.63930511, 7.5);
	}
	else
	{
		MoveDynamicObject(gGroveHeli, 2468.479980, -1696.825927, 80.644393, 7.5);
		MoveDynamicObject(gGroveHeli + 1, 2468.479980, -1696.825927, 80.644393, 7.5);
	}
	g_GateFlags ^= (1 << 30);
	return 1;
}
*/
CMD:antifall(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_ANTIFALL;
	if(g_PlayerFlags[playerid] & e_ANTIFALL)
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHANTI_FALL_BEKAPCSOLVA"));
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ANTI_FALL_BEKAPCSOLVA"));
   	}
  	else
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHANTI_FALL_KIKAPCSOLVA"));
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ANTI_FALL_KIKAPCSOLVA"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:nomusic(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_MUSIC;
	if(g_PlayerFlags[playerid] & e_MUSIC)
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHZENEK_BEKAPCSOLVA"));
   	}
  	else
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHZENEK_KIKAPCSOLVA"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:nostunts(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_STUNTS;
	if(g_PlayerFlags[playerid] & e_STUNTS)
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHALAP_GTA_JUMPOK_BEKAPCSOLVA"));
   	}
  	else
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHALAP_GTA_JUMPOK_KIKAPCSOLVA"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:carfly(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_CKEYJUMP);

	if(isnull(params))
	{
	    g_PlayerFlags[playerid] ^= e_CARFLY;
		if(g_PlayerFlags[playerid] & e_CARFLY)
		{
			SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_AUTOVAL_VALO_REPULES_BEKAPCSOLVA"), g_pCarFlyValue[playerid]);
	   	}
	  	else
		{
			SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_AUTOVAL_VALO_REPULES_KIKAPCSOLVA"));
	    }
	    SaveFlags(playerid);
		return 1;
	}

	if(sscanf(params, "f", Angle)) return SendUsage(playerid, "/carfly <Érték> {" #XCOLOR_GREEN "}(Ha üresen hagyod, akkor ki/be kapcsolja)");
	if(!(0.1 <= Angle <= 5.0)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_01_ES_50_KOZOTT"));

    SendClientMessagef(playerid, COLOR_YELLOW, "Autóval való repülés értéke átállítva. {" #XCOLOR_SAMP "}Régi: %.2f | Új: %.2f", g_pCarFlyValue[playerid], Angle);
	g_pCarFlyValue[playerid] = Angle;

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `carfly` = %f WHERE `reg_id` = %d", Angle, PlayerInfo[playerid][pRegID]);
    mysql_function_query(1, query, false, "", "");
	return 1;
}

CMD:ghostmode(playerid, params[], 0, D:<DERBY | DM | DUEL | RACE | LOP | KOCSILOP | GANGWAR | CTC | FLAG | BCAR | NOTELE | TAXI>)
{
    g_pGamesData[playerid] ^= e_GHOSTMODE;
	if(g_pGamesData[playerid] & e_GHOSTMODE)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Szellemmód bekapcsolva");
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Szellemmód kikapcsolva");
    }
    DisableRemoteVehicleCollisions(playerid, !!(g_pGamesData[playerid] & e_GHOSTMODE));
	return 1;
}

CMD:fly(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_CKEYJUMP);

    g_PlayerFlags[playerid] ^= e_FLY;
	if(g_PlayerFlags[playerid] & e_FLY)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CGOMBAL_VALO_REPULES_BEKAPCSOLVA"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CGOMBAL_VALO_REPULES_KIKAPCSOLVA"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:stuntbonus(playerid, params[], 0, 0)
{
	g_PlayerFlags[playerid] ^= e_STUNTBONUS;
	if(g_PlayerFlags[playerid] & e_STUNTBONUS)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_STUNTBONUSZ_BEKAPCSOLVA"));
        EnableStuntBonusForPlayer(playerid, true);
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_STUNTBONUSZ_KIKAPCSOLVA"));
		EnableStuntBonusForPlayer(playerid, false);
    }
    SaveFlags(playerid);
	return 1;
}

CMD:readcmds(playerid, params[], 1, 0)
{
    g_PlayerFlags[playerid] ^= e_READCMDS;
	if(g_PlayerFlags[playerid] & e_READCMDS)
	{
		g_PlayerFlags[playerid] |= e_READCMDS;
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_LATSZO_PARANCSOK_BEKAPCSOLVA"));
   	}
  	else
	{
		g_PlayerFlags[playerid] &= ~e_READCMDS;
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_LATSZO_PARANCSOK_KIKAPCSOLVA"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:allowgoto(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_GOTO;
	if(g_PlayerFlags[playerid] & e_GOTO)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JATEKOSOK_HOZZADVALO_TELEPORTALASA"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JATEKOSOK_HOZZADVALO_TELEPORTALASA_1"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:setgoto(playerid, params[], 0, 0)
{
    cmd_allowgoto(playerid,"");
	return 1;
}

CMD:showclanmsg(playerid, params[], 4, 0)
{
    //if(!IsFOOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
    g_PlayerFlags2[playerid] ^= e_SHOW_CLAN_MSG;
	if(g_PlayerFlags2[playerid] & e_SHOW_CLAN_MSG)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_CLAN_MSG_BE"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CLAN_MSG_KI"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:allowspec(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_ALLOW_SPEC;
	if(g_PlayerFlags[playerid] & e_ALLOW_SPEC)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JATEKOSOK_SZAMARA_MEGFIGYELHETOSEGED"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JATEKOSOK_SZAMARA_MEGFIGYELHETOSEGED_1"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:hydtype(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/hydtype <add/remove/default>");

	if(!strcmp(params, "add", true) || !strcmp(params, "on", true))
	{
		SetPVarInt(playerid, "HydType", 1);
        SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_AUTOMATIKUS_HYDRAULIKA_BEKAPCSOLVA"));

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hydtype` = 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "remove", true) || !strcmp(params, "off", true))
	{
		SetPVarInt(playerid, "HydType", 2);
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_AUTOMATIKUS_HYDRAULIKA_KIKAPCSOLVA"));

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hydtype` = 2 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}
	else if(!strcmp(params, "default", true))
	{
		DeletePVar(playerid, "HydType");
        SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_AUTOMATIKUS_HYDRAULIKA_ALAPRA"));

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `hydtype` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	    mysql_function_query(1, query, false, "", "");
		return 1;
	}

	SendUsage(playerid, "/hydtype <add/remove/default>");
	return 1;
}

CMD:dminfo(playerid, params[], 0, 0)
{
	if(g_PlayerFlags[playerid] & e_MAX_DMPLAYERS)
	{
		tmp = "Alap\n{FF0000}Amibe legtöbben vannak{FFFFFF}";
	}
	else
	{
		tmp = "Alap\nAmibe legtöbben vannak";
	}
	for(new i; i != sizeof(g_pDMInfo[]); i++)
	{
		switch(g_pDMInfo[playerid][i])
		{
			case -1: strcpy(country, "N/A");
			case 0..9: strcpy(country, gDMData[ g_pDMInfo[playerid][i] ]);
			default: strcpy(country, GetDMInfoData(g_pDMInfo[playerid][i]));

		}
		format(tmp, sizeof(tmp), "%s\nSlot: %d - %s", tmp, i, country);
	}

	ShowPlayerDialogEx(playerid, DIALOG_DMINFO, DIALOG_STYLE_LIST, "DMInfó módosítása", tmp, "Ok", "Bezár");
	return 1;
}

CMD:fastrespawn(playerid, params[], 0, 0)
{
	g_PlayerFlags[playerid] ^= e_FASTRESPAWN;
	if(g_PlayerFlags[playerid] & e_FASTRESPAWN)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_HALAL_UTANI_ROGTON_SPAWNOLAS"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HALAL_UTANI_ROGTON_SPAWNOLAS_1"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:seepms(playerid, params[], 2, 0)
{
	g_PlayerFlags[playerid] ^= e_SEEPMS;
	SendClientMessagef(playerid, COLOR_YELLOW, "Látszó PM-ek %s!", gBeKi[!!(g_PlayerFlags[playerid] & e_SEEPMS)]);

    SaveFlags(playerid);
	return 1;
}

CMD:telemsg(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_TELEMSG);

	g_PlayerFlags[playerid] ^= e_TELE_MSG;
	if(g_PlayerFlags[playerid] & e_TELE_MSG)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TELEPORTALASI_HELYED_LATHATOSAGA"));
   	}
  	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_TELEPORTALASI_HELYED_LATHATOSAGA_1"));
    }
    SaveFlags(playerid);
	return 1;
}

CMD:antidb(playerid, params[], 4, 0)
{
	g_ServerFlags ^= e_ANTIDB;
	if(g_ServerFlags & e_ANTIDB)
	{
		name = "{" #XCOLOR_WHITE "}Bekapcsolva";
        mysql_function_query(1, "UPDATE `config` SET `antidb` = 1 WHERE `id` = 1", false, "", "");
   	}
  	else
	{
		name = "{" #XCOLOR_WHITE "}Kikapcsolva";
        mysql_function_query(1, "UPDATE `config` SET `antidb` = 0 WHERE `id` = 1", false, "", "");
    }
    foreach(new i: Player)
	{
	    AntiDB(i, true);
    }
    SendClientMessagef(playerid, COLOR_GREEN, "*** e_ANTIDB %s{" #XCOLOR_GREEN "} %d ^= %d!", name, e_ANTIDB, g_ServerFlags & e_ANTIDB);
    AdminCommandLog("ANTIDB", playerid, -1, name);
	return 1;
}

CMD:allowtime(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_GAME_HOUR;
	if(g_PlayerFlags[playerid] & e_GAME_HOUR)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ORAD_ATALITVA_A_JATEKBELI_IDORE"));
		PlayerTextDrawHide(playerid, TD_Datum[playerid]);
		PlayerTextDrawHide(playerid, TD_Ido[playerid]);
		TogglePlayerClock(playerid, true);
	}
  	else
	{
        SendClientMessage(playerid, COLOR_BLUE2, LANG(playerid, "MSG_ORAD_ATALITVA_A_VALOS_IDORE"));
		PlayerTextDrawShow(playerid, TD_Datum[playerid]);
		PlayerTextDrawShow(playerid, TD_Ido[playerid]);
		TogglePlayerClock(playerid, false);
    }
    SaveFlags(playerid);
	return 1;
}

CMD:speedo(playerid, params[], 0, 0)
{
    g_PlayerFlags[playerid] ^= e_SPEEDO;
	if(!(g_PlayerFlags[playerid] & e_SPEEDO))
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SEBESSEGMERO_KIKAPCSOLVA_1"));
		PlayerTextDrawHide(playerid, Speedo[playerid][0]);
  		PlayerTextDrawHide(playerid, Speedo[playerid][1]);
    	PlayerTextDrawHide(playerid, Speedo[playerid][2]);
    	PlayerTextDrawHide(playerid, Speedo[playerid][3]);
    	PlayerTextDrawHide(playerid, Speedo[playerid][4]);
    	PlayerTextDrawHide(playerid, Speedo[playerid][5]);
	    g_PlayerData[playerid] &= ~e_SPEEDO_TD;
	}
  	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_SEBESSEGMERO_BEKAPCSOLVA"));

		if(IsPlayerInAnyDynamicVehicle(playerid))
		{
			PlayerTextDrawShow(playerid, Speedo[playerid][0]);
   			PlayerTextDrawShow(playerid, Speedo[playerid][1]);
      		PlayerTextDrawShow(playerid, Speedo[playerid][2]);
        	PlayerTextDrawShow(playerid, Speedo[playerid][3]);
        	PlayerTextDrawShow(playerid, Speedo[playerid][4]);
	        PlayerTextDrawShow(playerid, Speedo[playerid][5]);
		}
    }
    SaveFlags(playerid);
	return 1;
}

CMD:cnoreload(playerid, params[], 4, 0)
{
	g_PlayerData[playerid] ^= e_NORELOAD;
	if(g_PlayerData[playerid] & e_NORELOAD)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_VEGTELEN_TOLTENY_MOD_BEKAPCSOLVA"));
	}
  	else
	{
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEGTELEN_TOLTENY_MOD_KIKAPCSOLVA"));
    }

	new
	    asd = !!(g_PlayerData[playerid] & e_NORELOAD);
	valstr(name, asd);
    AdminCommandLog("NORELOAD", playerid, -1, name);
	return 1;
}

CMD:explosion(playerid, params[], 0, 0)
{
	g_PlayerData[playerid] ^= e_EXPLOSION_AMMO;
	if(g_PlayerData[playerid] & e_EXPLOSION_AMMO)
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_ROBBANO_TOLTENY_MOD_BEKAPCSOLVA"));
	}
  	else
	{
        SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_ROBBANO_TOLTENY_MOD_KIKAPCSOLVA"));
    }

	new
	    asd = !!(g_PlayerData[playerid] & e_EXPLOSION_AMMO);
	valstr(name, asd);
    AdminCommandLog("EXPLOSION", playerid, -1, name);
	return 1;
}

stock ToggleHouseIcons(playerid, bool:toggle)
{
	if(!toggle)
	{
		foreach(houses, hid)
		{
            Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("MapIcon", hid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("Label", hid), E_STREAMER_PLAYER_ID, playerid);
		}
	}
	else
	{
		foreach(houses, hid)
		{
            Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("MapIcon", hid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("Label", hid), E_STREAMER_PLAYER_ID, playerid);
		}
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	Streamer_Update(playerid, STREAMER_TYPE_MAP_ICON);
	Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
}

stock ToggleBiznisIcons(playerid, bool:toggle)
{
	if(!toggle)
	{
		foreach(biznis, hid)
		{
            Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("BizMapIcon", hid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("BizLabel", hid), E_STREAMER_PLAYER_ID, playerid);
		}
	}
	else
	{
		foreach(biznis, hid)
		{
            Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("BizMapIcon", hid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("BizLabel", hid), E_STREAMER_PLAYER_ID, playerid);
		}
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	}
	Streamer_Update(playerid, STREAMER_TYPE_MAP_ICON);
	Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
}

stock ToggleRaceIcons(playerid, bool:toggle)
{
	if(!toggle)
	{
		foreach(races, rid)
		{
            Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("RaceMapIcon", rid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("RaceLabel", rid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_RemoveArrayData(STREAMER_TYPE_PICKUP, GetGVarInt("RacePickup", rid), E_STREAMER_PLAYER_ID, playerid);
		}
	}
	else
	{
		foreach(races, rid)
		{
            Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, GetGVarInt("RaceMapIcon", rid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, GetGVarInt("RaceLabel", rid), E_STREAMER_PLAYER_ID, playerid);
            Streamer_AppendArrayData(STREAMER_TYPE_PICKUP, GetGVarInt("RacePickup", rid), E_STREAMER_PLAYER_ID, playerid);
		}
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_MAP_ICON);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_PICKUP);
	}
	Streamer_Update(playerid, STREAMER_TYPE_MAP_ICON);
	Streamer_Update(playerid, STREAMER_TYPE_3D_TEXT_LABEL);
	Streamer_Update(playerid, STREAMER_TYPE_PICKUP);
}

CMD:houseicons(playerid, params[], 0, 0)
{
	new bool:toggle = !!(g_PlayerFlags2[playerid] & e_HOUSE_ICONS);
	g_PlayerFlags2[playerid] ^= e_HOUSE_ICONS;

    SendClientMessagef(playerid, COLOR_ORANGE, "Házikonok %s", !toggle ? ("Be") : ("Ki"));

	ToggleHouseIcons(playerid, !toggle);
	SaveFlags(playerid);
	return 1;
}

CMD:bizicons(playerid, params[], 0, 0)
{
	new bool:toggle = !!(g_PlayerFlags2[playerid] & e_BIZNIS_ICONS);
	g_PlayerFlags2[playerid] ^= e_BIZNIS_ICONS;

    SendClientMessagef(playerid, COLOR_ORANGE, "Biznisz ikonok %s", !toggle ? ("Be") : ("Ki"));

	ToggleBiznisIcons(playerid, !toggle);
	SaveFlags(playerid);
	return 1;
}

CMD:raceicons(playerid, params[], 0, 0)
{
	new bool:toggle = !!(g_PlayerFlags2[playerid] & e_RACE_ICONS);
	g_PlayerFlags2[playerid] ^= e_RACE_ICONS;

    SendClientMessagef(playerid, COLOR_ORANGE, "Verseny ikonok %s", !toggle ? ("Be") : ("Ki"));

	ToggleRaceIcons(playerid, !toggle);
	SaveFlags(playerid);
	return 1;
}

CMD:portal(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_PORTAL);

	g_PlayerFlags2[playerid] ^= e_PORTAL;
    SendClientMessagef(playerid, COLOR_ORANGE, "Portal %s", (g_PlayerFlags2[playerid] & e_PORTAL) ? ("Be") : ("Ki"));

	if(g_PlayerFlags2[playerid] & e_PORTAL)
	{
		SendClientMessagef(playerid, COLOR_YELLOW, "1. Portál lerakása: {" #XCOLOR_GREEN "}CÉLZÁS + SHIFT + LÖVÉS");
		SendClientMessagef(playerid, COLOR_YELLOW, "2. Portál lerakása: {" #XCOLOR_GREEN "}CÉLZÁS + ALT + LÖVÉS");
	}
	else
	{
	    DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_1"));
		DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_2"));
		DestroyDynamicObject(GetPVarInt(playerid, "Portal_Obj_3"));
		DestroyDynamicArea(GetPVarInt(playerid, "Portal_Area"));
		DestroyDynamicMapIcon(GetPVarInt(playerid, "Portal_Icon"));
	}
	SaveFlags(playerid);
	return 1;
}

CMD:clearworld(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | NOTELE | WORLDEDIT>)
{
	/*if(IsPlayerInDynamicArea(playerid, gGroveZone) && GetPVarInt(playerid, "HQ") != 1)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD"));

	else*/
	if(IsPlayerInDynamicArea(playerid, gSevileZone) && GetPVarInt(playerid, "HQ") != 2)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_1"));

	else if(IsPlayerInDynamicArea(playerid, gLMZone) && GetPVarInt(playerid, "HQ") != 3)
	    return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_EZT_A_PARANCSOT_ITT_NEM_HASZNALHATOD_2"));

    vID = GetPlayerDynamicVehicleID(playerid);
	if(g_PlayerData[playerid] & e_CLEARWORLD)
	{
		if(GetPlayerInterior(playerid) == 0)
		{
			if(vID == GetPVarInt(playerid, "pCar"))
			{
				SetDynamicVehicleVirtualWorld(vID, 0);
			}
			SetPlayerVirtualWorld(playerid, 0);
		}

		RemovePlayerFromClearworld(playerid);
		ShowClanZones(playerid);
		switch(random(2))
		{
		    case 0: SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__VISSZAJOTTEL_A_RENDES_VILAGBA"));
		    case 1: SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__VISSZAJOTTEL_A_RENDES_VILAGBA_1"));
		}
	}
  	else
	{
        if(isnull(params))
		{
			g_PlayerData[playerid] &= ~e_CLEARWORLD_NOOBJECTS;
			if(GetPlayerInterior(playerid) == 0)
			{
				if(vID == GetPVarInt(playerid, "pCar"))
				{
					SetDynamicVehicleVirtualWorld(vID, 50000);
				}
				SetPlayerVirtualWorld(playerid, 50000);
			}
		}
		else
		{
            g_PlayerData[playerid] |= e_CLEARWORLD_NOOBJECTS;
		}

		AddPlayerToClearworld(playerid);
		HideClanZones(playerid);
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__ATMENTEL_A_TISZTA_VILAGBA"));
    }
	return 1;
}
CMD:cw(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | NOTELE | WORLDEDIT>)
{
	return cmd_clearworld(playerid, params);
}

CMD:racemode(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE>)
{
	vID = GetPlayerDynamicVehicleID(playerid);
	g_PlayerData[playerid] ^= e_RACEMODE;
	if(!(g_PlayerData[playerid] & e_RACEMODE))
	{
        SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__VERSENYMOD_KIKAPCSOLVA"));

		SetPlayerInterior(playerid, 0);
		if(vID)
		{
			LinkDynamicVehicleToInterior(vID, 0);

			foreach(Player, i)
			{
				if(i == playerid) continue;
				if(IsPlayerInDynamicVehicle(i, vID))
				{
	                SetPlayerInterior(i, 0);
				}
			}
		}
	}
  	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG__VERSENYMOD_BEKAPCSOLVA"));

		SetPlayerInterior(playerid, g_iRacemodeInterior);
		if(vID)
		{
			LinkDynamicVehicleToInterior(vID, g_iRacemodeInterior);

			foreach(Player, i)
			{
				if(i == playerid) continue;
				if(IsPlayerInDynamicVehicle(i, vID))
				{
	                SetPlayerInterior(i, g_iRacemodeInterior);
				}
			}
		}

    }
	return 1;
}

/* Debug parancsok */
CMD:racer(playerid, params[], 4, 0)
{
	RaceRotation();
	AdminCommandLog("RACER", playerid, -1);
	return 1;
}

CMD:payday(playerid, params[], 4, 0)
{
	PropertyPayout();

	AdminCommandLog("PAYDAY", playerid, -1);
	return 1;
}

CMD:mat(playerid, params[], 4, 0)
{
	new
		iNumberCount;
	if(sscanf(params, "D(255)", iNumberCount)) return SendUsage(playerid, "/mat <Érték>");
	if(!(0 <= iNumberCount <= 8) && iNumberCount != 0xFF) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_ERTEK_0__8"));

	Feladat(iNumberCount);

	valstr(name, iNumberCount);
	AdminCommandLog("MAT", playerid, -1, name);
	return 1;
}

CMD:reklam(playerid, params[], 4, 0)
{
	Reklam_Mutat();
	AdminCommandLog("REKLAM", playerid, -1);
	return 1;
}

CMD:test(playerid, params[], 4, 0)
{
	ReactionTest(false);

	AdminCommandLog("TEST", playerid, -1);
	return 1;
}

CMD:ttest(playerid, params[], 4, 0)
{
	TeleTest();

	AdminCommandLog("TTEST", playerid, -1);
	return 1;
}

CMD:goldpot(playerid, params[], 4, 0)
{
	if(sscanf(params, "D(9999)", player1)) return SendUsage(playerid, "/goldpot {" #XCOLOR_YELLOW"}<ID>");

	CallGoldpot(player1);
	AdminCommandLog("GOLDPOT", playerid, -1);
	return 1;
}

CMD:cflag(playerid, params[], 3, 0)
{
	CallFlag();
	AdminCommandLog("CFLAG", playerid, -1);
	return 1;
}

CMD:bcar(playerid, params[], 3, 0)
{
	BonusCar();
	AdminCommandLog("BCAR", playerid, -1);
	return 1;
}

CMD:resetpass(playerid, params[], 4, 0)
{
    if(!IsFOOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
	new
		regid,
		password[32];
	if(sscanf(params, "dS(*)[32]", regid, password)) return SendUsage(playerid, "/resetpass <pRegID> <jelszó (ha üresen hagyod akkor 1234)>");

	if(password[0] != '*')
	{
		if(!(3 <= strlen(password) <= 20)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_JELSZO_HOSSZUSAG"));
	}

	mysql_format(1, query, sizeof(query), "SELECT `name`, `pass` FROM `players` WHERE `reg_id` = '%d'", regid);
	mysql_function_query(1, query, true, "THREAD_Resetpass", "ddsd", playerid, regid, password, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Resetpass(playerid, regid, password[], queue);
public THREAD_Resetpass(playerid, regid, password[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Resetpass);

	new pass[32];
	if(!cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZIK_FELHASZNALO"));
		return 1;
	}

	strcpy(pass, password);
	if(pass[0] == '*' && strlen(pass) == 1)
		strcpy(pass, "1234");

	cache_get_row(0, 0, name);
	cache_get_row(0, 1, country);

	SendClientMessagef(playerid, COLOR_YELLOW, "-> %s (regid: %d) jelszava megváltoztatva; {" #XCOLOR_SAMP "}Régi: '%s' | Új: '%s'", name, regid, country, password);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `pass` = '%e' WHERE `reg_id` = '%d'", password, regid);
	mysql_function_query(1, query, false, "", "");

	AdminCommandLog("RESETPASS", playerid, -1, "%s (%d) - old: '%s', new: '%s'", regid, name, country, pass);
	return 1;
}

CMD:regplayer(playerid, params[], 4, 0)
{
	new
	    szName[128],
	    szPassword[128];
	if(sscanf(params, "s[" #STR_SIZE "]s[" #STR_SIZE "]", szName, szPassword)) return SendUsage(playerid, "/regplayer <Név> <Jelszó>");
	if(!(3 <= strlen(szName) <= 20)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_NEV_HOSSZUSAG"));
	if(!(3 <= strlen(szPassword) <= 20)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_JELSZO_HOSSZUSAG"));
	if(!IsValidNickName(szName)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VALID_NAME_CHARS"));

	mysql_format(1, query, sizeof(query), "SELECT `reg_id` FROM `players` WHERE `name` = '%s'", szName);
	mysql_function_query(1, query, true, "THREAD_Regplayer_1", "dssd", playerid, szName, szPassword, g_pQueryQueue[playerid]);

	AdminCommandLog("REGPLAYER", playerid, -1);
	return 1;
}

forward THREAD_Regplayer_1(playerid, regpname[], regppassword[], queue);
public THREAD_Regplayer_1(playerid, regpname[], regppassword[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Regplayer_1);

	if(cache_get_row_count())
	{
        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_NEV__MAR_REGISZTRAL"), regpname);
        return 1;
	}
	getdate(year, month, day);
	gettime(hour, minute, second);

	new
	    datum = CurrentTimestamp();
    mysql_format(1, query, sizeof(query), "INSERT INTO `players`(reg_id, name, ip, pass, flags, reg_date, laston, serial) VALUES(0, '%e', '%s', '%e', %d, %d, %d, %d, '%s')", pName(playerid), ip, regppassword, DEFAULT_PLAYER_FLAGS, DEFAULT_PLAYER_FLAGS2, datum, datum, i_str);
	mysql_function_query(1, query, false, "THREAD_Regplayer_2", "dssd", playerid, regpname, regppassword, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "Név: %s | Jelszó: %s", regpname, regppassword);
    AdminCommandLog("REGPLAYER", playerid, -1, i_str);
	return 1;
}

forward THREAD_Regplayer_2(playerid, regpname[], regppassword[], queue);
public THREAD_Regplayer_2(playerid, regpname[], regppassword[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Regplayer_2);

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_JATEKOS_REGISZTRALVA_REGID"), cache_insert_id(), regpname, regppassword);
	return 1;
}

CMD:ctest(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/ctest <Szöveg>");
	if(strlen(params) >= sizeof(g_szReactionStr)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_SZOVEG_MAXIMUM"));
	if(params[0] == '/') params[0] = '^';

	g_szReactionStr[0] = EOS;
	strcat(g_szReactionStr, params, sizeof(g_szReactionStr));
	ReactionTest(true);

	AdminCommandLog("CTEST", playerid, -1, params);
	return 1;
}

CMD:addgp(playerid, params[], 4, 0)
{
	if(sscanf(params, "ds[" #STR_SIZE "]", datez, i_str)) return SendUsage(playerid, "/addgp <Jutalom> <Név>");
	if(strlen(i_str) > 44) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_45"));

	GetPlayerPos(playerid, X, Y, Z);

	mysql_format(1, query, sizeof(query), "INSERT INTO `goldpot_data`(id, X, Y, Z, hint, reward) VALUES(0, %f, %f, %f, '%e', %d)", X, Y, Z, i_str, datez);
	mysql_function_query(1, query, false, "THREAD_AddGP", "ddsd", playerid, datez, i_str, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "Jutalom: %d, Név: %s", datez, i_str);
	AdminCommandLog("ADDGP", playerid, -1, i_str);
	return 1;
}

forward THREAD_AddGP(playerid, price, goldpotname[], queue);
public THREAD_AddGP(playerid, price, goldpotname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_AddGP);

    goldpot[max_goldpot_id] = cache_insert_id();
    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG___NEVU_ARANYTOJAS_HOZZAADVA"), goldpotname, goldpot[max_goldpot_id], price);
	return 1;
}

CMD:gpname(playerid, params[], 4, 0)
{
	if(sscanf(params, "ds[" #STR_SIZE "]", datez, i_str)) return SendUsage(playerid, "/gpname <ID> <Név>");
	if(strlen(i_str) > 43) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_45"));

	mysql_format(1, query, sizeof(query), "SELECT `hint` FROM `goldpot_data` WHERE `id` = %d", datez);
	mysql_function_query(1, query, true, "THREAD_GPName", "ddsd", playerid, datez, i_str, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "ID: %d, Név: %s", datez, i_str);
	AdminCommandLog("GPNAME", playerid, -1, i_str);
	return 1;
}

forward THREAD_GPName(playerid, goldpotid, goldpotname[], queue);
public THREAD_GPName(playerid, goldpotid, goldpotname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_GPName);

	cache_get_row(0, 0, country);

	mysql_format(1, query, sizeof(query), "UPDATE `goldpot_data` SET `hint` = '%e' WHERE `id` = %d", goldpotname, goldpotid);
	mysql_function_query(1, query, false, "", "");

    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG___NEVU_ARANYTOJAS_ATNEVEZVE"), country, goldpotname);
	return 1;
}

CMD:ugp(playerid, params[], 4, 0)
{
	if(sscanf(params, "dS(*)[" #STR_SIZE "]", datez, i_str)) return SendUsage(playerid, "/ugp <ID> <Név>");
	if(strlen(i_str) > 43) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_HOSSZU_A_NEV_MAXIMUM_45"));

	mysql_format(1, query, sizeof(query), "SELECT `hint` FROM `goldpot_data` WHERE `id` = %d", datez);
	mysql_function_query(1, query, true, "THREAD_UpdateGP", "ddsd", playerid, datez, i_str, g_pQueryQueue[playerid]);

	format(i_str, sizeof(i_str), "ID: %d, Név: %s", datez, i_str);
	AdminCommandLog("UGP", playerid, -1, i_str);
	return 1;
}

forward THREAD_UpdateGP(playerid, goldpotid, goldpotname[], queue);
public THREAD_UpdateGP(playerid, goldpotid, goldpotname[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_UpdateGP);

    cache_get_row(0, 0, country);
	GetPlayerPos(playerid, X, Y, Z);
	if(goldpotname[0] == '*')
	{
		mysql_format(1, query, sizeof(query), "UPDATE `goldpot_data` SET `X` = %f, `Y` = %f, `Z` = %f WHERE `id` = %d", X, Y, Z, datez);
		mysql_function_query(1, query, false, "", "");

	    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG___NEVU_ARANYTOJAS_ATHELYEZVE"), country);
	}
	else
	{
		mysql_format(1, query, sizeof(query), "UPDATE `goldpot_data` SET `hint` = '%e', `X` = %f, `Y` = %f, `Z` = %f WHERE `id` = %d", goldpotname, X, Y, Z, datez);
		mysql_function_query(1, query, false, "", "");

	    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG___NEVU_ARANYTOJAS_ATNEVEZVE_1"), country, goldpotname);
	}
	return 1;
}

CMD:feladat(playerid, params[], 4, 0)
{
	new
		Number[5],
		Character[4];
	if(sscanf(params, "dcdC(,)D(-9998)C(,)D(-9998)C(,)D(-9998)", Number[0], Character[0], Number[1], Character[1], Number[2], Character[2], Number[3], Character[3], Number[4]))
		return SendUsage(playerid, "/feladat <Int1> <Char1> <Int2> <Char2> <Int3> <Char3> <Int4> <Char4> <Int5>");

	new
	    numb;
	for(new i; i != 4; i++)
	{
		if(!i)
		{
			switch(Character[0])
			{
				case '+': numb = Number[0] + Number[1];
				case '-': numb = Number[0] - Number[1];
				case '*': numb = Number[0] * Number[1];
				case '/':
				{
					if(!Number[1]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_1_SZAKASZBAN_0VAL_NEM"));
					numb = Number[0] / Number[1];
				}
				default: return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_MUVELET_AZ_1_SZAKASZBAN"));
			}
		}
		else
		{
			switch(Character[i])
			{
				case ',': break;
				case '+': numb += Number[i + 1];
				case '-': numb -= Number[i + 1];
				case '*': numb *= Number[i + 1];
				case '/':
				{
					if(!Number[i + 1]) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_MUVELET_AZ__SZAKASZBAN"), i);
					numb /= Number[i + 1];
				}
				default: return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBAS_MUVELET_AZ__SZAKASZBAN_1"), i);
			}
		}
	}

	g_iMatMegoldas = numb;
	g_iMatNyeremeny = randomex(5000, 10000);
	g_ServerFlags |= e_MATEK;

	if(Number[1] != -9998 && Number[2] == -9998)
	{
	    foreach(Player, i)
		{
		    if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
		    SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI"), Number[0], Character[0], Number[1]);
	    }
		format(country, sizeof(country), "%d %c %d", Number[0], Character[0], Number[1]);
	}
	else if(Number[2] != -9998 && Number[3] == -9998)
	{
	    foreach(Player, i)
		{
		    if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
	    	SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_1"), Number[0], Character[0], Number[1], Character[1], Number[2]);
  		}
		format(country, sizeof(country), "%d %c %d %c %d", Number[0], Character[0], Number[1], Character[1], Number[2]);
	}
	else
	{
		if(Number[4] == -9998)
		{
		    foreach(Player, i)
			{
		    	if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_2"), Number[0], Character[0], Number[1], Character[1], Number[2], Character[2], Number[3]);
			}
			format(country, sizeof(country), "%d %c %d %c %d %c %d", Number[0], Character[0], Number[1], Character[1], Number[2], Character[2], Number[3]);
		}
		else
		{
		    foreach(Player, i)
			{
		    	if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_3"), Number[0], Character[0], Number[1], Character[1], Number[2], Character[2], Number[3], Character[3], Number[4]);
			}
			format(country, sizeof(country), "%d %c %d %c %d %c %d %c %d", Number[0], Character[0], Number[1], Character[1], Number[2], Character[2], Number[3], Character[3], Number[4]);
		}
	}

	strpack(g_szMatFeladat, country);

	SendClientMessagef(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_G_IMATMEGOLDAS__"), g_iMatMegoldas);

	g_iMatTime = GetTickCount();

	AdminCommandLog("FELADAT", playerid, -1, "%s = %d", country, g_iMatMegoldas);
	return 1;
}

CMD:matek(playerid, params[], 0, 0)
{
	if(!(g_ServerFlags & e_MATEK)) return SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG__MATEK_JELENLEG_NINCS_MATEK"));
    new
		iTick = GetTickCount() - g_iMatTime;
    strunpack(country, g_szMatFeladat);

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__MATEK_JELENLEGI_FELADVANY"), country, (float(iTick) / 1000));
	SendClientMessagef(playerid, COLOR_GREEN2, LANG(playerid, "MSG_JUTALOM__HA_TUDOD_AKKOR_CALL"), g_iMatNyeremeny);
	return 1;
}

CMD:eredmeny(playerid, params[], 0, 0)
{
	if(!IsFOOwner(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
	SendClientMessagef(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_G_IMATMEGOLDAS__"), g_iMatMegoldas);
 	AdminCommandLog("EREDMENY", playerid, -1);
	return 1;
}

/* Top dolgok */
CMD:cmdcount(playerid, params[], 0, 0)
{
    SPAM_CHECK(Cmdcount, 10000)
//	SendClientMessage(playerid, COLOR_LIGHTRED, !"- JELENLEG NEM MÛXIK -");

	if(g_PlayerData[playerid] & e_CMDCOUNT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VARJ_AMIG_LEFUT_A_LEKERDEZES"));
	if(isnull(params)) return SendUsage(playerid, "/cmdcount <Parancs Neve>");

    g_PlayerData[playerid] |= e_CMDCOUNT;

	mysql_format(1, query, sizeof(query), "SELECT COUNT( cmd ) FROM `commands` WHERE `cmd` = '%e'", params);
	mysql_function_query(1, query, true, "THREAD_CommandCount", "dsd", playerid, params, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_CommandCount(playerid, command[], queue);
public THREAD_CommandCount(playerid, command[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_CommandCount);

	new
	    iCount;
	cache_get_row_int(0, 0, iCount);
	if(!iCount)
	{
    	SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_AZ__PARANCSOT_EGYSZER_SEM_HASZ"), command);
	}
	else
	{
    	SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_AZ__PARANCSOT_X_HASZNALTAK"), command, iCount);
	}
	g_PlayerData[playerid] &= ~e_CMDCOUNT;
	return 1;
}

CMD:top(playerid, params[], 0, 0)
{
	foreach(new i: Player)
	{
		SavePlayer(i);
	}
    dline[0] = EOS;
    if(isnull(params)) //Ha nem ír be semmi mást akkor jönnek a kategóriák
	{
	    strcat(dline, "{" #XCOLOR_GOLD "}Általános\n");
	    strcat(dline, "{" #XCOLOR_ORANGE "}Minigamek, Tesztek\n");
	    strcat(dline, "{" #XCOLOR_GOLD "}Ölések, Halálok\n");
	    strcat(dline, "{" #XCOLOR_ORANGE "}Moderáció\n");
	    strcat(dline, "{" #XCOLOR_GOLD "}Egyéb");
	    ShowPlayerDialogEx(playerid, DIALOG_TOP, DIALOG_STYLE_LIST, "{" #XCOLOR_PINK "}Toplista", dline, "Ok", "Mégse");
		return 1;
	}
	else
	{
		new
		    i,
		    iList;
		if(sscanf(params, "s[" #STR_SIZE "]D(1)", i_str, iList)) return SendUsage(playerid, "/top {" #XCOLOR_YELLOW "}<Név> <Lista = 1>");
		if(iList < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

		if(!strcmp(i_str, "xp", true)) i = e_TOP_XP;
		else if(!strcmp(i_str, "szint", true) || !strcmp(i_str, "level", true) || !strcmp(i_str, "lvl", true)) i = e_TOP_SZINT;
		else if(!strcmp(i_str, "money", true) || !strcmp(i_str, "cash", true)) i = e_TOP_MONEY;
		else if(!strcmp(i_str, "bank", true)) i = e_TOP_BANK;
		else if(!strcmp(i_str, "clanbank", true)) i = e_TOP_CLAN_BANK;
		else if(!strcmp(i_str, "kills", true) || !strcmp(i_str, "kill", true)) i = e_TOP_KILLS;
		else if(!strcmp(i_str, "deaths", true) || !strcmp(i_str, "death", true)) i = e_TOP_DEATHS;
		else if(!strcmp(i_str, "killstreak", true)) i = e_TOP_KILLSTREAK;
		else if(!strcmp(i_str, "bounty", true) || !strcmp(i_str, "verdíj", true)) i = e_TOP_BOUNTY;
		else if(!strcmp(i_str, "rangeshots", true) || !strcmp(i_str, "range", true)) i = e_TOP_RANGE;
		else if(!strcmp(i_str, "time", true)) i = e_TOP_TIME;
		else if(!strcmp(i_str, "races", true) || !strcmp(i_str, "race", true)) i = e_TOP_RACES;
		else if(!strcmp(i_str, "goldpots", true) || !strcmp(i_str, "goldpot", true)	|| !strcmp(i_str, "aranytojas", true) || !strcmp(i_str, "aranytojás", true)) i = e_TOP_GOLDPOTS;
		else if(!strcmp(i_str, "reactions", true) || !strcmp(i_str, "test", true) || !strcmp(i_str, "tests", true)) i = e_TOP_REACTIONS;
		else if(!strcmp(i_str, "maths", true) || !strcmp(i_str, "matek", true)) i = e_TOP_MATHS;
		else if(!strcmp(i_str, "tele", true) || !strcmp(i_str, "teles", true)) i = e_TOP_TELES;
		else if(!strcmp(i_str, "post", true) || !strcmp(i_str, "posts", true)) i = e_TOP_POSTS;
		else if(!strcmp(i_str, "stuntbonus", true) || !strcmp(i_str, "stunt", true)) i = e_TOP_STUNTBONUS;
		else if(!strcmp(i_str, "rablo", true) || !strcmp(i_str, "rabló", true)) i = e_TOP_RABLO;
		else if(!strcmp(i_str, "bcartime", true) || !strcmp(i_str, "bcar", true) || !strcmp(i_str, "bonuscar", true)) i = e_TOP_BCARTIME;
		else if(!strcmp(i_str, "flagtime", true) || !strcmp(i_str, "flag", true) || !strcmp(i_str, "zaszlo", true) || !strcmp(i_str, "zászló", true)) i = e_TOP_FLAGTIME;
		else if(!strcmp(i_str, "fuvarok", true) || !strcmp(i_str, "trucking", true)) i = e_TOP_FUVAROK;
		else if(!strcmp(i_str, "fallout", true)) i = e_TOP_FALLOUT;
		else if(!strcmp(i_str, "afk", true) || !strcmp(i_str, "afktime", true)) i = e_TOP_AFK;
		else if(!strcmp(i_str, "afkrecord", true) || !strcmp(i_str, "afkrekord", true)) i = e_TOP_RECORDAFK;
		else if(!strcmp(i_str, "racerecords", true) || !strcmp(i_str, "records", true)) i = e_TOP_RACERECORDS;
		else if(!strcmp(i_str, "postas", true)) i = e_TOP_POSTAS;
		else if(!strcmp(i_str, "pizzas", true)) i = e_TOP_PIZZAS;
		else if(!strcmp(i_str, "derby", true)) i = e_TOP_DERBY;
		else if(!strcmp(i_str, "ctcauto", true)) i = e_TOP_CTC_AUTO;
		else if(!strcmp(i_str, "ctchajo", true)) i = e_TOP_CTC_HAJO;
		else if(!strcmp(i_str, "headshot", true) || !strcmp(i_str, "hs", true)) i = e_TOP_HEADSHOT_KILL;
		else if(!strcmp(i_str, "headshotdeath", true) || !strcmp(i_str, "hsdeath", true)) i = e_TOP_HEADSHOT_DEATH;
		else if(!strcmp(i_str, "warnadmin", true) || !strcmp(i_str, "hskill", true)) i = e_TOP_MOST_WARNADMIN;
		else if(!strcmp(i_str, "unwarnadmin", true)) i = e_TOP_MOST_UNWARNADMIN;
		else if(!strcmp(i_str, "kickadmin", true)) i = e_TOP_MOST_KICKADMIN;
		else if(!strcmp(i_str, "kickedplayer", true)) i = e_TOP_MOST_KICKEDPLAYER;
		else if(!strcmp(i_str, "connected", true)) i = e_TOP_MOST_CONNECTED;
		else if(!strcmp(i_str, "faillogin", true)) i = e_TOP_MOST_FAILLOGIN;
		else if(!strcmp(i_str, "objectmaker", true)) i = e_TOP_MOST_OBJECTMAKER;
		else if(!strcmp(i_str, "rcon", true)) i = e_TOP_MOST_RCON;
		else if(!strcmp(i_str, "failrcon", true)) i = e_TOP_MOST_FAILRCON;
		else if(!strcmp(i_str, "changename", true)) i = e_TOP_MOST_CHANGENAME;
		else if(!strcmp(i_str, "changepass", true)) i = e_TOP_MOST_CHANGEPASS;
		else if(!strcmp(i_str, "pmsender", true)) i = e_TOP_MOST_PMSENDER;
		else if(!strcmp(i_str, "pmreceiver", true)) i = e_TOP_MOST_PMRECEIVER;
		else if(!strcmp(i_str, "banadmin", true)) i = e_TOP_MOST_BANADMIN;
		else if(!strcmp(i_str, "banplayer", true)) i = e_TOP_MOST_BANNEDPLAYER;
		else if(!strcmp(i_str, "admin", true) || !strcmp(i_str, "admins", true))
		{
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid))
				return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

			i = e_TOP_ADMIN;
		}
		else if(!strcmp(i_str, "vobject", true)) i = e_TOP_MOST_VOBJECT;
		else if(!strcmp(i_str, "vobjectset", true)) i = e_TOP_MOST_VOBJECTSET;
		else if(!strcmp(i_str, "hoset", true) || !strcmp(i_str, "hosets", true)) i = e_TOP_MOST_HOSET;
	    else if(!strcmp(i_str, "dmcreator", true)) i = e_TOP_DM_CREATOR;
	    else if(!strcmp(i_str, "music", true)) i = e_TOP_MUSIC_UPLOADER;
	    else if(!strcmp(i_str, "racecreator", true)) i = e_TOP_RACE_CREATOR;
	    else if(!strcmp(i_str, "vip", true) || !strcmp(i_str, "vips", true)) i = e_TOP_VIP;
	    else if(!strcmp(i_str, "taxis", true) || !strcmp(i_str, "taxi", true)) i = e_TOP_TAXI;
	    else if(!strcmp(i_str, "lotto", true) || !strcmp(i_str, "lottó", true)) i = e_TOP_LOTTO;
	    else if(!strcmp(i_str, "bug", true) || !strcmp(i_str, "bugs", true)) i = e_TOP_BUG;
	    else if(!strcmp(i_str, "report", true) || !strcmp(i_str, "reports", true)) i = e_TOP_REPORT;
	    else if(!strcmp(i_str, "idea", true) || !strcmp(i_str, "ideas", true)) i = e_TOP_IDEA;
	    
	    else if(!strcmp(i_str, "teleport", true) || !strcmp(i_str, "teleports", true)) i = e_TOP_TELEPORT;
	    
	    
	    //else if(!strcmp(i_str, "taxikm", true) || !strcmp(i_str, "taxitistance", true) || !strcmp(i_str, "tkm", true)) i = e_TOP_TAXI_KM;
	   // else if(!strcmp(i_str, "vehiclekm", true) || !strcmp(i_str, "vehicledistance", true) || !strcmp(i_str, "vkm", true)) i = e_TOP_VEHICLE_KM;
	    //else if(!strcmp(i_str, "onfootkm", true) || !strcmp(i_str, "onfootkm", true) || !strcmp(i_str, "okm", true)) i = e_TOP_ONFOOT_KM;

		if(i)
		{
			SetPVarInt(playerid, "TopList", iList);
			SetPVarInt(playerid, "TopNoBack", 1);
		    ShowTopListForPlayer(playerid, i, iList, i_str);
		}
	}
	return 1;
}

stock ShowTopListForPlayer(playerid, type, iList, str[])
{
	new
		IsTime,
		bool:bForum;
		
	switch(type)
	{
	    case e_TOP_XP: 	mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `xp` FROM `players` ORDER BY `xp` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_SZINT: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `szint` FROM `players` ORDER BY `szint` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MONEY: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `money` FROM `players` ORDER BY `money` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_BANK: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `bank` FROM `players` ORDER BY `bank` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_KILLS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `kills` FROM `players` ORDER BY `kills` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_DEATHS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `deaths` FROM `players` ORDER BY `deaths` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_KILLSTREAK: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `killstreak` FROM `players` ORDER BY `killstreak` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_BOUNTY: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `bounty` FROM `players` ORDER BY `bounty` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_RANGE: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `rangeshots` FROM `players` ORDER BY `rangeshots` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_TIME: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `o_time` FROM `players` ORDER BY `o_time` DESC LIMIT %d, 30", --iList * 30), IsTime = 1;
		case e_TOP_RACES: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `races` FROM `players` ORDER BY `races` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_GOLDPOTS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `goldpots` FROM `players` ORDER BY `goldpots` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_REACTIONS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `reactionwins` FROM `players` ORDER BY `reactionwins` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MATHS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `maths` FROM `players` ORDER BY `maths` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_TELES: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `teles` FROM `players` ORDER BY `teles` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_POSTS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `posts` FROM `players` ORDER BY `posts` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_STUNTBONUS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `stuntbonus` FROM `players` ORDER BY `stuntbonus` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_RABLO: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `rablasok` FROM `players` ORDER BY `rablasok` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_FLAGTIME: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `flagtime` FROM `players` ORDER BY `flagtime` DESC LIMIT %d, 30", --iList * 30), IsTime = 1;
		case e_TOP_BCARTIME: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `bcartime` FROM `players` ORDER BY `bcartime` DESC LIMIT %d, 30", --iList * 30), IsTime = 1;
		case e_TOP_FUVAROK: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `fuvarok` FROM `players` ORDER BY `fuvarok` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_FALLOUT: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `fallout` FROM `players` ORDER BY `fallout` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_AFK: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `afktime` FROM `players` ORDER BY `afktime` DESC LIMIT %d, 30", --iList * 30), IsTime = 1;
		case e_TOP_RECORDAFK: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `longest_afk` FROM `players` ORDER BY `longest_afk` DESC LIMIT %d, 30", --iList * 30), IsTime = 1;
		case e_TOP_POSTAS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `postas` FROM `players` ORDER BY `postas` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_PIZZAS: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `pizzas` FROM `players` ORDER BY `pizzas` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_DERBY: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `derby` FROM `players` ORDER BY `derby` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_CTC_AUTO: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `ctc_auto` FROM `players` ORDER BY `ctc_auto` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_CTC_HAJO: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `ctc_hajo` FROM `players` ORDER BY `ctc_hajo` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_HEADSHOT_KILL: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `headshot_kill` FROM `players` ORDER BY `headshot_kill` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_HEADSHOT_DEATH: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `headshot_death` FROM `players` ORDER BY `headshot_death` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_VIP: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `vip` FROM `players` ORDER BY `vip` DESC LIMIT %d, 30", --iList * 30), IsTime = 2;
		case e_TOP_CLAN_BANK: mysql_format(1, query, sizeof(query), "SELECT `clanname`, `reg_id`, `bankmoney` FROM `clans` WHERE `is_bank` = '1' AND `bankmoney` != 0  ORDER BY `bankmoney` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_RACERECORDS: mysql_format(1, query, sizeof(query), "SELECT holder, regid, COUNT( regid ) as top FROM racedata WHERE regid != -1 GROUP BY regid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_FORUMTIME: mysql_format(1, query, sizeof(query), "SELECT `real_name`, `id_member`, `total_time_logged_in` FROM `smf_members` ORDER BY `total_time_logged_in` DESC LIMIT %d, 30", --iList * 30), IsTime = 1, bForum = true;
		case e_TOP_FORUMPOSTS: mysql_format(1, query, sizeof(query), "SELECT `real_name`, `id_member`, `posts` FROM `smf_members` ORDER BY `posts` DESC LIMIT %d, 30", --iList * 30), bForum = true;
		case e_TOP_MOST_WARNADMIN: mysql_format(1, query, sizeof(query), "SELECT admin, adminid, COUNT( adminid ) as top FROM adminlog WHERE command = 'WARN' GROUP BY adminid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_UNWARNADMIN: mysql_format(1, query, sizeof(query), "SELECT admin, adminid, COUNT( adminid ) as top FROM adminlog WHERE command = 'UNWARN' GROUP BY adminid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_WARNPLAYER: mysql_format(1, query, sizeof(query), "SELECT player, playerid, COUNT( playerid ) as top FROM adminlog WHERE command = 'WARN' GROUP BY playerid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_UNWARNPLAYER: mysql_format(1, query, sizeof(query), "SELECT admin, adminid, COUNT( adminid ) as top FROM adminlog WHERE command = 'UNWARN' GROUP BY adminid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_KICKADMIN: mysql_format(1, query, sizeof(query), "SELECT admin, admin_regid, COUNT( admin_regid) as top FROM kicks GROUP BY admin_regid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_KICKEDPLAYER: mysql_format(1, query, sizeof(query), "SELECT player, player_regid, COUNT( player_regid ) as top FROM kicks GROUP BY player_regid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_CONNECTED: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id) as top FROM connections GROUP BY name ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_FAILLOGIN: mysql_format(1, query, sizeof(query), "SELECT name, name, COUNT( name ) as top FROM faillogins GROUP BY name ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_OBJECTMAKER: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM holdingobjects GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_RCON: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM rcon GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_FAILRCON: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM rcon_f GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_CHANGENAME: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( namechanges.reg_id ) FROM players, namechanges WHERE namechanges.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( namechanges.reg_id ) DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_CHANGEPASS: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id) as top FROM namechanges_p GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_PMSENDER: mysql_format(1, query, sizeof(query), "SELECT player, reg_id, COUNT( reg_id) as top FROM pm GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_PMRECEIVER: mysql_format(1, query, sizeof(query), "SELECT reciever, reciever_id, COUNT( reciever_id) as top FROM pm GROUP BY reciever_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_ADMIN:
        {
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
			mysql_format(1, query, sizeof(query), "SELECT name, reg_id, level FROM `players` WHERE `level` != '0' ORDER BY `level` DESC LIMIT %d, 30", --iList * 30);
		}
		case e_TOP_MOST_BANADMIN: mysql_format(1, query, sizeof(query), "SELECT admin, adminid, COUNT( adminid ) as top FROM adminlog WHERE command = 'BAN' OR command = 'TEMPBAN' GROUP BY adminid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_BANNEDPLAYER: mysql_format(1, query, sizeof(query), "SELECT player, playerid, COUNT( playerid ) as top FROM adminlog WHERE command = 'BAN' OR command = 'tempban' GROUP BY playerid ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_VOBJECT: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM holdingobjects_v GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_VOBJECTSET: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM holdingobjects_vset GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MOST_HOSET: mysql_format(1, query, sizeof(query), "SELECT name, reg_id, COUNT( reg_id ) as top FROM holdingobjects_set GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_DM_CREATOR: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( custom_dm.creator_id ) FROM players, custom_dm WHERE custom_dm.creator_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( custom_dm.creator_id ) DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MUSIC_UPLOADER: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( musiclist.reg_id ) FROM players, musiclist WHERE musiclist.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( musiclist.reg_id ) DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_RACE_CREATOR: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( racedata.reg_id ) FROM players, racedata WHERE racedata.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( racedata.reg_id ) DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_TELEPORT: mysql_format(1, query, sizeof(query), "SELECT name_hu, cmd, hasznalat FROM `teleports` ORDER BY `hasznalat` DESC LIMIT %d, 30", --iList * 30), IsTime = 3;
		case e_TOP_TAXI: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `taxi` FROM `players` ORDER BY `taxi` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_MUSIC: mysql_format(1, query, sizeof(query), "SELECT `name`, `reg_id`, `played` FROM  `musiclist` ORDER BY  `musiclist`.`played` DESC LIMIT %d, 30", --iList * 30);
		case e_TOP_LOTTO: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( lotto.reg_id ) FROM players, lotto WHERE lotto.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( lotto.reg_id ) DESC LIMIT 0, 30");
        case e_TOP_BUG: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( reports_bug.reg_id ) FROM players, reports_bug WHERE reports_bug.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( reports_bug.reg_id ) DESC LIMIT %d, 30", --iList * 30);
        case e_TOP_IDEA: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( reports_ideas.reg_id ) FROM players, reports_ideas WHERE reports_ideas.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( reports_ideas.reg_id ) DESC LIMIT %d, 30", --iList * 30);
        case e_TOP_REPORT: mysql_format(1, query, sizeof(query), "SELECT players.name, players.reg_id, COUNT( reports_panasz.reg_id ) FROM players, reports_panasz WHERE reports_panasz.reg_id = players.reg_id GROUP BY players.reg_id ORDER BY COUNT( reports_panasz.reg_id ) DESC LIMIT %d, 30", --iList * 30);
        case e_TOP_GIVECASH: mysql_format(1, query, sizeof(query), "SELECT player, reg_id, COUNT( reg_id) as top FROM givecash GROUP BY reg_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
        case e_TOP_ACCEPTCASH: mysql_format(1, query, sizeof(query), "SELECT reciever, reciever_id, COUNT(reciever_id) as top FROM givecash GROUP BY reciever_id ORDER BY top DESC LIMIT %d, 30", --iList * 30);
	}
	mysql_function_query((!bForum) ? 1 : 2, query, true, "THREAD_TopDialog", "ddsd", playerid, IsTime, str, g_pQueryQueue[playerid]);
	return 1;
}

CMD:mynames(playerid, params[], 0, 0)
{
	new
	    iRegID,
	    iLimit = 1;
	if(isnull(params)) iRegID = PlayerInfo[playerid][pRegID];
	else
	{
        CHECK_SZINT(playerid, SZINT_MYNAMES);

		if(sscanf(params, "dD(1)", iRegID, iLimit)) return SendUsage(playerid, "/mynames {" #XCOLOR_YELLOW "}<pRegID> <iLimit>");
	}
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `oldname`, `newname` FROM `namechanges` WHERE `reg_id` = %d ORDER BY `id` LIMIT %d, 100", iRegID, --iLimit * 100);
	mysql_function_query(1, query, true, "THREAD_NameAndPassChanges", "ddd", playerid, 0, g_pQueryQueue[playerid]);
	return 1;
}

CMD:mypass(playerid, params[], 0, 0)
{
	switch(PlayerInfo[playerid][pRegID])
	{
		case 1, 2, 3, 16054:
		{
			new
			    iRegID,
			    iLimit = 1;
			if(isnull(params)) iRegID = PlayerInfo[playerid][pRegID];
			else if(sscanf(params, "dD(1)", iRegID, iLimit)) return SendUsage(playerid, "/mypass {" #XCOLOR_YELLOW "}<pRegID> <iLimit>");

			if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

			mysql_format(1, query, sizeof(query), "SELECT `oldpass`, `newpass` FROM `namechanges_p` WHERE `reg_id` = %d ORDER BY `id` LIMIT %d, 100", iRegID, --iLimit * 100);
			mysql_function_query(1, query, true, "THREAD_NameAndPassChanges", "ddd", playerid, 1, g_pQueryQueue[playerid]);
		}
		default:
		{
			return 0;
		}
	}
	return 1;
}

forward THREAD_NameAndPassChanges(playerid, type, queue);
public THREAD_NameAndPassChanges(playerid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_NameAndPassChanges);

	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		if(type)
		{
			ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_PROPGREEN "}Jelszóváltások", "Ez a játékos egyszer sem váltott jelszót!\nVagy a lista üres!", !"Ok");
		}
		else
		{
			ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_PROPGREEN "}Névváltások", "Ez a játékos egyszer sem váltott nevet!\nVagy a lista üres!", !"Ok");
		}
		return 1;
	}

	for(new i; i != rows; i++)
	{
		cache_get_row(i, 0, name);
		cache_get_row(i, 1, country);

		if(!i)
		{
		    format(dline, 64, "%s -> %s", name, country);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n%s -> %s", dline, name, country);
		}
	}
	if(type)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, "Használt jelszavak listája", dline, !"Ok");
	}
	else
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, "Használt nevek listája", dline, !"Ok");
	}
	return 1;
}

/* Verseny parancsok */
CMD:resetrecord(playerid, params[], 4, 0)
{
	new
	    raceid;
	if(sscanf(params, "d", raceid)) return SendUsage(playerid, "/resetrecord <Verseny ID>");

	mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `regid` = -1, `holder` = 'NINCS', `record` = 0, `recordtime` = 0, `vehicle` = '' WHERE `raceid` = %d", raceid);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "SELECT `race` FROM `racedata` WHERE `raceid` = %d", raceid);
	mysql_function_query(1, query, true, "THREAD_ResetRecord", "ddd", playerid, raceid, g_pQueryQueue[playerid]);

	valstr(name, raceid);
	AdminCommandLog("RESETRECORD", playerid, -1, name);
	return 1;
}

forward THREAD_ResetRecord(playerid, raceid, queue);
public THREAD_ResetRecord(playerid, raceid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ResetRecord);

	cache_get_row(0, 0, country);

    SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_VERSENY_REKORD_TOROLVE_NEV"), country, raceid);
    mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
	return 1;
}

CMD:buildrace(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}
    if(BuildRaceID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_IS_VERSENYT_SZERKESZT"));
	if(GetPVarType(playerid, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_CSATLAKOZTAL_A_VERSENYHEZ"));

	new
		fasz[5][64];

	if(BuildRaceCPSize[playerid] == -1)
	{
		fasz[0] = "{FF0000}Nincs beállítva";
	}
	else format(fasz[0], 64,"%f",BuildRaceCPSize[playerid] );
	switch(BuildRaceType[playerid])
	{
		case 0: fasz[1] = "Normál";
		case 1: fasz[1] = "Hajó";
		case 2: fasz[1] = "Repülõ";
		case 3: fasz[1] = "Futó";
		default: fasz[1] = "{FF0000}Nincs beállítva";
	}
    switch(BuildRaceClearWorld[playerid])
	{
		case 0: fasz[2] = "{FF0000}Kikapcsolva";
		case 1: fasz[2] = "{00FFAA}Bekapcsolva";
		default: fasz[2] = "{FF0000}Nincs beállítva";
	}
 	switch(BuildRaceAutoFix[playerid])
	{
		case 0: fasz[3] = "{FF0000}Kikapcsolva";
		case 1: fasz[3] = "{00FFAA}Bekapcsolva";
		default: fasz[3] = "{FF0000}Nincs beállítva";
	}
	switch(BuildRaceGhostMode[playerid])
	{
		case 0: fasz[4] = "{FF0000}Kikapcsolva";
		case 1: fasz[4] = "{00FFAA}Bekapcsolva";
		default: fasz[4] = "{FF0000}Nincs beállítva";
	}

    format(tmp, 1024, "CP Méret - %s\nVersenytípus - %s \nClearworld - %s\nJármûjavítás - %s\nSzellemmód - %s\nTovább",fasz[0],fasz[1],fasz[2],fasz[3],fasz[4]);
	ShowPlayerDialogEx(playerid, DIALOG_RACE_BUILDMENU , DIALOG_STYLE_LIST, "Versenybeállítások", tmp, !"Ok");
	//AdminCommandLog("BUILDMENU", playerid, -1);
	return 1;
}

CMD:cp(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
	if(BuildRaceCPS[playerid] == 150) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAX_CP_LIMIT_ELERVE_150NEL"));

	GetPlayerPos(playerid, X, Y, Z);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_ELLENORZOPONT__LETREHOZVA_4F"), BuildRaceCPS[playerid], X, Y, Z);

    BuildRaceCP[0][playerid] [BuildRaceCPS[playerid]] = X;
    BuildRaceCP[1][playerid] [BuildRaceCPS[playerid]] = Y;
    BuildRaceCP[2][playerid] [BuildRaceCPS[playerid]] = Z;

	BSelectedCheckpoint = BuildRaceCPS[playerid];
	SetBRaceCheckpoint(playerid, BuildRaceCPS[playerid], -1);
	if(BuildRaceCPS[playerid] == 0)
	{
		if((vID = GetPlayerDynamicVehicleID(playerid)))
		{
			GetDynamicVehicleZAngle(vID, BRaceAngle);
		}
		else
		{
			GetPlayerFacingAngle(playerid, BRaceAngle);
		}
		BuildRaceCP[3][playerid][BuildRaceCPS[playerid]] = BRaceAngle;
		//SendClientMessagef(playerid, -1, LANG(playerid, "MSG_BRACEANGLE_4F"), BRaceAngle);
	}
 	BuildRaceCPS[playerid]++;

    //AdminCommandLog("CP", playerid, -1);
	return 1;
}

CMD:scp(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	new
		sele;
	if(sscanf(params, "d", sele)) return SendUsage(playerid, "/scp <Checkpoint ID>");
	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));

	if(sele > BuildRaceCPS[playerid] - 1 || BuildRaceCPS[playerid] < 1 || sele < 0)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ELLENORZOPONT"));
		return 1;
	}

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_KIVALASZTOTT_ELLENORZOPONT"), sele);
	BActiveCP(playerid, sele);
	BSelectedCheckpoint = sele;

	AdminCommandLog("SCP", playerid, -1);
	return 1;
}

CMD:rcp(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid]  == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
	if(BuildRaceCPS[playerid] < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_OLYAN_ELLENORZOPONT"));

	GetPlayerPos(playerid, X, Y, Z);

	BuildRaceCP[0] [playerid] [BuildRaceCPS[playerid]] = X;
	BuildRaceCP[1] [playerid] [BuildRaceCPS[playerid]] = Y;
	BuildRaceCP[2] [playerid] [BuildRaceCPS[playerid]] = Z;

    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPX", X, BSelectedCheckpoint);
    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPY", Y, BSelectedCheckpoint);
    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPZ", Z, BSelectedCheckpoint);


	BActiveCP(playerid, BSelectedCheckpoint);
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_ELLENORZOPONT__LECSERELVE_4F"), BSelectedCheckpoint, X, Y, Z);

	AdminCommandLog("RCP", playerid, -1);
	return 1;
}

CMD:dcp(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid]  == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
	if(BuildRaceCPS[playerid] < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_OLYAN_ELLENORZOPONT_1"));

	for(new i = BSelectedCheckpoint; i != BuildRaceCPS[playerid]; i++)
	{
	    BuildRaceCP[0][playerid] [i + 1] = X;
	    BuildRaceCP[1][playerid] [i + 1] = Y;
	    BuildRaceCP[2][playerid] [i + 1] = Z;


	    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPX", X, i + 1);
	    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPY", Y, i + 1);
	    //BuildRaceID_[BuildRaceID[playerid]] = SetGVarFloat("BRaceCPZ", Z, i + 1);
	}
	BSelectedCheckpoint--;
	if(--BuildRaceCPS[playerid] < 1)
	{
		DisablePlayerRaceCheckpoint(playerid);
		BSelectedCheckpoint = 0;
		return 1;
	}
	else if(BSelectedCheckpoint < 0)
	{
		BSelectedCheckpoint = 0;
	}
	BActiveCP(playerid, BSelectedCheckpoint);
	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_ELLENORZOPONT_TOROLVE"));

	AdminCommandLog("DCP", playerid, -1);
	return 1;
}

CMD:gcp(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));

	new
		sele;
	if(sscanf(params, "d", sele)) return SendUsage(playerid, "/gcp <Checkpoint ID>");

	if(sele > BuildRaceCPS[playerid] - 1 || BuildRaceCPS[playerid] < 1 || sele < 0)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ROSSZ_ELLENORZOPONT"));
		return 1;
	}
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_ODATELEPORTALTAL_AZ__ELLENORZOP"), sele);
	NormalTele(playerid, BuildRaceCP[0][playerid][sele], BuildRaceCP[1][playerid][sele], BuildRaceCP[2][playerid][sele], 0, BuildRaceCP[3][playerid][sele]);

	AdminCommandLog("GCP", playerid, -1);
	return 1;
}

CMD:clearrace(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));

	clearrace(playerid);
	AdminCommandLog("CLEARRACE", playerid, -1);
	return 1;
}

CMD:saverace(playerid, params[], 0, 0)
{
	// Csak a játékosoknak nézzük a szintjét
	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid))
	{
		CHECK_SZINT(playerid, SZINT_BUILDRACE);
	}

	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
	if(sscanf(params, "s[" #STR_SIZE "]", i_str)) return SendUsage(playerid, "/saverace <Név>");
	if(strlen(i_str) > 40) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_VERSENY_NEVE_NEM_LEHET"));
    if(BuildRaceCPS[playerid] < 7) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_VERSENYNEK_LEGALABB"));

    new Float:fDistance;
    for(new i; i != BuildRaceCPS[playerid] - 1; i++)
    {
		fDistance += GetDistance3D(BuildRaceCP[0][playerid][i], BuildRaceCP[1][playerid][i], BuildRaceCP[2][playerid][i], BuildRaceCP[0][playerid][i+1],BuildRaceCP[1][playerid][i+1],BuildRaceCP[2][playerid][i+1]);
	}
	if(fDistance < 200.0) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_ROVID_A_VERSENYED"), fDistance);

	mysql_format(1, query, sizeof(query), "SELECT `raceid` FROM `racedata` WHERE `race` = '%e'", i_str);
	mysql_function_query(1, query, false, "THREAD_Saverace_1", "dsd", playerid, i_str, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Saverace_1(playerid, racename[], queue);
public THREAD_Saverace_1(playerid, racename[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Saverace_1);

	if(cache_get_row_count())
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_VERSENY__MAR_LETEZIK"), racename);
		return 1;
	}

	mysql_format(1, query, sizeof(query), "INSERT INTO `racedata`(raceid, race, autofix, ghostmode, racetype, clearworld, cpsize, angle, reg_id, createtime, interior) VALUES(0, '%e', %d, %d, %d, %d, %.2f, %f, %d, %d, %d)",
	racename,BuildRaceAutoFix[playerid],BuildRaceGhostMode[playerid], BuildRaceType[playerid], BuildRaceClearWorld[playerid], BuildRaceCPSize[playerid], BuildRaceCP[3][playerid][0], PlayerInfo[playerid][pRegID], CurrentTimestamp(), GetPlayerInterior(playerid));

	//printf(query);
	mysql_function_query(1, query, false, "THREAD_Saverace_2", "dsd", playerid, racename, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Saverace_2(playerid, racename[], queue);
public THREAD_Saverace_2(playerid, racename[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Saverace_2);

	new
	    raceid = cache_insert_id();
	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENYED__ELMENTVE_ES_HOZZAADVA"), racename, raceid);
	SendClientMessagef(playerid, COLOR_GREEN3, LANG(playerid, "MSG_KESZITES_BEFEJEZESEHEZ_IRD"));

	for(new i; i != BuildRaceCPS[playerid]; i++)
	{
		mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `cp_%d` = '%f,%f,%f' WHERE `raceid` = %d", i,


		BuildRaceCP[0] [playerid] [i],
		BuildRaceCP[1] [playerid] [i],
		BuildRaceCP[2] [playerid] [i],
		raceid);

	 	//GetGVarFloat("BRaceCPX", i),
	 	//GetGVarFloat("BRaceCPY", i),
	  	//GetGVarFloat("BRaceCPZ", i),
	  	//raceid);

		mysql_function_query(1, query, false, "", "");
	}
	mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
	AdminCommandLog("SAVERACE", playerid, -1, racename);
	return 1;
}

forward THREAD_ChangeRacename(playerid, raceid, newracename[], queue);
public THREAD_ChangeRacename(playerid, raceid, newracename[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_ChangeRacename);

	new
	    szOldRaceName[41];
	cache_get_row(0, 0, szOldRaceName);

	mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `race` = '%e' WHERE `raceid` = %d", newracename, raceid);
	mysql_function_query(1, query, false, "", "");

	SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENY__ATNEVEZVE_UJ_NEVE"), szOldRaceName, newracename);
	AdminCommandLog("RACENAME", playerid, -1, "ID: %d, Oldname: %s, Newname: %s", raceid, szOldRaceName, newracename);
	return 1;
}

CMD:fsaverace(playerid, params[], 4, 0)
{
	if(BuildRaceID[playerid] == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BUILD_ERROR"));
	if(BuildRaceCPS[playerid] < 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ELMENTESHEZ_LEGALABB"));

	new
	    raceid;
	if(sscanf(params, "d", raceid)) return SendUsage(playerid, "/editrace <ID>");

	mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = %d", raceid);
	mysql_function_query(1, query, true, "THREAD_WriteSaveRace", "ddd", playerid, raceid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_WriteSaveRace(playerid, raceid, queue);
public THREAD_WriteSaveRace(playerid, raceid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_EditRace);

	if(!cache_get_row_count())
	{
        SendClientMessagef(playerid, COLOR_RED, "HIBA: Nem létezik verseny %d ID-vel. Használd a /saverace parancsot.", raceid);
		return 1;
	}

	format(query, sizeof(query), "UPDATE `racedata` SET ");
	for(new i; i != BuildRaceCPS[playerid]; i++)
	{
		format(i_str, sizeof(i_str), "`cp_%d` = '%f,%f,%f'", i, GetGVarFloat("BRaceCPX", i), GetGVarFloat("BRaceCPY", i), GetGVarFloat("BRaceCPZ", i));

		if(i != (BuildRaceCPS[playerid] - 1))
		{
		    strcat(i_str, ", ");
		}
		else
		{
			format(i_str, sizeof(i_str), " WHERE `raceid` = %d", raceid);
		}
		strcat(query, i_str);
	}
	mysql_function_query(1, query, true, "", "");

	SendClientMessagef(playerid, COLOR_GREEN, "Versenyed '%s' felülítva.", g_szBRaceName);
	AdminCommandLog("FSAVERACE", playerid, -1, i_str);
	return 1;
}

CMD:loadrace(playerid, params[], 0, 0)
{
	if((g_ServerFlags & e_RACE_ACTIVE) && Participants && GetPVarInt(playerid, "Level") < 3)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_VAN_OLYAN_VERSENY"));
		return 1;
	}

	new pRaceID = GetRaceID(playerid);
	if(pRaceID == -1)
	{
	    if(isnull(params)) return SendUsage(playerid, "/loadrace <Név>");
		if(g_ServerFlags & e_RACE_ACTIVE)
		{
			endrace();
		}
	    mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `race` = '%e'", params);
		mysql_function_query(1, query, true, "THREAD_LoadRace", "d", playerid);
		return 1;
	}
	else
	{
	    if(g_ServerFlags & e_RACE_ACTIVE)
		{
			endrace();
		}
		mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = '%d'", pRaceID);
		mysql_function_query(1, query, true, "THREAD_LoadRace", "d", playerid);
		return 1;
	}
}

CMD:lr(playerid, params[], 0, 0)
{
	if(g_ServerFlags & e_RACE_ACTIVE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_VAN_AKTIV_VERSENY"));

	new
	    iRaceID;
	if(sscanf(params, "d", iRaceID)) return SendUsage(playerid, "/lr <ID>");

	mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = %d", iRaceID);
	mysql_function_query(1, query, true, "THREAD_LoadRace", "d", playerid);
	return 1;
}

CMD:racea(playerid, params[], 4, 0)
{
	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/racea <Race ID>");

	if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		GetDynamicVehicleZAngle(vID, Angle);
	}
	else
	{
		GetPlayerFacingAngle(playerid, Angle);
	}

	mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `angle` = %f WHERE `raceid` = %d", Angle, datez);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "SELECT `race` FROM `racedata` WHERE `raceid` = %d", datez);
	mysql_function_query(1, query, true, "THREAD_Raceangle", "ddfd", playerid, datez, Angle, g_pQueryQueue[playerid]);

	valstr(name, datez);
	AdminCommandLog("RACEA", playerid, -1, name);
	return 1;
}

forward THREAD_Raceangle(playerid, raceid, Float:fAngle, queue);
public THREAD_Raceangle(playerid, raceid, Float:fAngle, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Raceangle);

	cache_get_row(0, 0, country);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_VERSENY_4F_FORDULASA_BEALLITVA"), fAngle, raceid, country);
	return 1;
}

forward THREAD_Racetype(playerid, raceid, type, queue);
public THREAD_Racetype(playerid, raceid, type, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Racetype);

	switch(type)
	{
		case 0: name = "Alap";
		case 1: name = "Hajó";
		case 2: name = "Repülõ";
		case 3: name = "Gyalog";
	}

	cache_get_row(0, 0, country);
	SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_VERSENY___TIPUSRA_BEALLITVA"), name, type, raceid, country);
	return 1;
}

CMD:editrace(playerid, params[], 4, 0)
{
    if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
	new
	    raceid;
	if(sscanf(params, "d", raceid)) return SendUsage(playerid, "/editrace <ID>");

	mysql_format(1, query, sizeof(query), "SELECT * FROM `racedata` WHERE `raceid` = %d", raceid);
	mysql_function_query(1, query, true, "THREAD_EditRace", "ddd", playerid, raceid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_EditRace(playerid, raceid, queue);
public THREAD_EditRace(playerid, raceid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_EditRace);

	if(!cache_get_row_count())
	{
        SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_LETEZIK_VERSENY__IDVEL"), raceid);
		return 1;
	}

	BuildRaceID[playerid] = raceid;

	cache_get_row(0, 1, g_szBRaceName);
	//cache_get_row_int(0, 2, BVersenyIdo);
	//cache_get_row_int(0, 3, BVersenyMoney);
	cache_get_row_float(0, 4, BuildRaceCPSize[playerid]);
	cache_get_row_float(0, 5, BRaceAngle);
	cache_get_row_int(0, 6, BuildRaceType[playerid]);
	cache_get_row_int(0, 7, BuildRaceClearWorld[playerid]);
	//cache_get_row(0, 8, country);
	//cache_get_row_int(0, 9, TopRacer[reg_id]);
	//cache_get_row_int(0, 10, TopRacer[record]);
	//cache_get_row_int(0, 12, datez);

    SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENY__BETOLTVE_ES_FELKESZITVE"), g_szBRaceName);

    BuildRaceCPS[playerid] = -1;
	for(new i = 15; i != MAX_RACE_CP + 15; i++)
	{
		cache_get_row(0, i, i_str);

		// Ha már nincsenek kordináták, akkor kilépünka ciklusból
		if(i_str[0] == '*') break;

        sscanf(i_str, "p<,>fff", X, Y, Z);

        BuildRaceCPS[playerid]++;
	    SetGVarFloat("BRaceCPX", X, BuildRaceCPS[playerid]);
	    SetGVarFloat("BRaceCPY", Y, BuildRaceCPS[playerid]);
	    SetGVarFloat("BRaceCPZ", Z, BuildRaceCPS[playerid]);
	}
	AdminCommandLog("EDITRACE", playerid, -1, g_szBRaceName);
	return 1;
}

CMD:startrace(playerid, params[], 1, 0)
{
	if(!LCurrentCheckpoint) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_BETOLTVE_VERSENY"));

	if(g_ServerFlags & e_RACE_ACTIVE)
	{
		if(!mscd)
		{
			SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_VERSENY__MAR_ELVAN_INDITVA"), g_szRaceName_);
			return 1;
		}
		else
		{
			mscd = 0;
			mscountdown();
		   	KillTimer(MajStartTimer);

            foreach(Player, i)
			{
			    if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			    SendClientMessagef(i, COLOR_GREEN2, LANG(i, "MSG__ADMIN__ELINDITOTTA_A_VERSEN"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szRaceName_);
			}
		}
	}
	return 1;
}

CMD:racers(playerid, params[], 0, 0)
{
	if(!(g_ServerFlags & e_RACE_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_VERSENY"));

	SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_JELENLEGI__VERSENYZO_AZ__VER"), Participants, g_szRaceName_);
    i_str[0] = EOS;

	new
	    count,
	    TempTime[3];
	foreach(new i: Player)
	{
		switch(GetPVarInt(i, "RaceParticipant"))
		{
			case 0: continue;
			case 1: i_str = "csatlakozva";
		    case 2: i_str = "indulásra várakozás";
		    case 3: i_str = "felkészülve";
		    case 4:
			{
				ConvertTime(var1, PlayerInfo[i][pLastActive] - g_rStartTick, TempTime[0], TempTime[1], TempTime[2]);
				format(i_str, 32, "versenyez ( %d:%02d.%d )", TempTime[0], TempTime[1], TempTime[2]);
			}
		    case 5: i_str = "befejezte";
		}
		SendClientMessagef(playerid, COLOR_GREY, LANG(playerid, "MSG____4"), ++count, GetPlayerColor(i) >>> 8, pName(i), i, i_str);
	}
	return 1;
}

CMD:join(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | GRAV | WORLDEDIT >)
{
    if(BuildRaceID[playerid] != -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_VERSENYT_SZERKESZTESZ_1"));

	if(!(g_ServerFlags & e_RACE_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_JELENLEG_NINCS_VERSENY"));
	if((g_ServerFlags & e_RACE_START) || !mscd) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_A_VERSENY_MAR_ELINDULT"));
	if(g_PlayerData[playerid] & e_RACE_KICKED) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_ELOB_RUGTAK_KI_EBBOL_A"));
	if(strfind(g_szRaceName_, "Vice City", true) != -1 && !IsClient(playerid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_KLIENS_SZUKSEGES"));
	
	if(RaceVehicle != -1) format(i_str, sizeof(i_str),"/car %d",RaceVehicle), CallLocalFunction("OnPlayerCommandText", "is", playerid, i_str);

	
	new
	    pState = GetPlayerState(playerid);
	if(pState == PLAYER_STATE_DRIVER)
 	{
		if((vID = GetPlayerDynamicVehicleID(playerid)) == g_BonusCarID) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_BONUSZAUTOVAL_NEM_CSATLAKOZH"));

		new
			iModel = GetDynamicVehicleModel(vID);
			
		switch(RaceType)
		{
			case 0: //Alap versenytipus
			{
			    if(strfind(g_szRaceName_, "Drag", true) != -1) 
				{
				    if(iModel == 522) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NRG_NEM"));
				}
			    else
			    {
    				switch(GetVehicleType(iModel))
					{
						case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET_1"));
					}
				}
			}
			case 1:
			{
				if(GetVehicleType(iModel) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
			}
			case 2:
			{
				new
				    iType = GetVehicleType(iModel);
				if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
				{
                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
					return 1;
				}
			}
			case 3: return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EBBE_A_VERSENYBE_CSAK_GYALOG"));
		}

		g_pGamesData[playerid] &= ~e_IN_DM;
		X = floatrandom(3.5);

		if(g_PlayerData[playerid] & e_CLEARWORLD)
		{
			RemovePlayerFromClearworld(playerid);
		}
		NormalTele(playerid, GetGVarFloat("RaceCPX", 0) + X, GetGVarFloat("RaceCPY", 0) + X, GetGVarFloat("RaceCPZ", 0) + 1.5, RaceInterior, RaceAngle, (g_RaceClearworld) ? (50001) : (7));
	}
	else
	{
		if(pState == PLAYER_STATE_ONFOOT)
		{
			if(RaceType != 3)
			{
				SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_SOFORNEK_KELL_LENNED_HOGY_CSATLAKOZ"));
				return 1;
			}

		    RemovePlayerFromClearworld(playerid);
		    g_pGamesData[playerid] &= ~e_IN_DM;
			X = floatrandom(3.5);

	        PlayerTele(playerid, GetGVarFloat("RaceCPX", 0) + X, GetGVarFloat("RaceCPY", 0) + X, GetGVarFloat("RaceCPZ", 0) + 1.5, 0, RaceAngle, (g_RaceClearworld) ? (50001) : (7));
		}
	}

    PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "RaceTime"), "~p~Time:~w~ N/A");
	PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "RaceTime"));

	format(name, sizeof(name), "~p~CP:~w~ 0/~r~%d", LCurrentCheckpoint + 1);
	PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "RaceCP"), name);
	PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "RaceCP"));

	format(name, sizeof(name), "~p~Rank: ~w~N/A/%d", ++Participants);
	PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "RaceRank"), name);
	PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "RaceRank"));

	if(!TopRacer[record])
	{
		format(i_str, 32, "~p~Record:~w~ N/A");
	}
	else
	{
		format(i_str, 32, "~p~Record:~w~ %d:%d.%d", TopRacer[convertedtime][0], TopRacer[convertedtime][1], TopRacer[convertedtime][2]);
	}
    TextDrawSetString(RaceRecord, i_str);
    TextDrawShowForPlayer(playerid, RaceRecord);

	DeletePVar(playerid, "CurrentCP");
	SetRaceCheckpoint(playerid, 0, 1);
	HideClanZones(playerid);

	if(RaceGhostMode == 1) DisableRemoteVehicleCollisions(playerid, true);
    else DisableRemoteVehicleCollisions(playerid, false);

	SetPVarInt(playerid, "RaceParticipant", 1);

	g_pGamesData[playerid] |= e_IN_RACE;
	g_pMinigameJoins[playerid][e_Count_RACE] ++;

	SendClientMessagef(playerid, COLOR_ORANGE, LANG(playerid, "MSG_CSATLAKOZTAL_A__VERSENYHEZ"), g_szRaceName_);
	InfoTD_MSGf(playerid, 6000, LANG(playerid, "MSG_YHHCSATLAKOZTAL_A_VERSENYHEZ"), g_szRaceName_);
    SetPlayerGravity(playerid, RaceGravity);
	
	if(Participants != 1)
	{
	    foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_RACE_4"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szRaceName_, Participants);
		}
		foreach(new i: Player)
		{
			if(!GetPVarType(i, "RaceParticipant")) continue;

			PlayerTextDrawSetString(i, PlayerText:GetPVarInt(i, "RaceRank"), name);
			PlayerTextDrawShow(i, PlayerText:GetPVarInt(i, "RaceRank"));
		}
	}
	else
	{
		foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_RACE_5"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szRaceName_, Participants);
		}
	}
	return 1;
}

stock LeavePlayerFromRace(playerid)
{
	DisablePlayerRaceCheckpoint(playerid);
	DisableRemoteVehicleCollisions(playerid, !!(g_pGamesData[playerid] & e_GHOSTMODE));
	TogglePlayerControllable(playerid, true);

	DeletePVar(playerid, "RaceParticipant");
	g_pGamesData[playerid] &= ~e_IN_RACE;
	Participants --;
 	ShowClanZones(playerid);

    PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "RaceCP"));
    PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "RaceTime"));
    PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "RaceRank"));
	TextDrawHideForPlayer(playerid, RaceRecord);
    RemovePlayerMapIcon(playerid, 95);
    RemovePlayerMapIcon(playerid, 96);
	RemovePlayerMapIcon(playerid, 97);
	RemovePlayerMapIcon(playerid, 98);

	SetPlayerVirtualWorld(playerid, 0);
    SetPlayerGravity(playerid, 0.008);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetDynamicVehicleVirtualWorld((vID = GetPlayerDynamicVehicleID(playerid)), 0);

		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(IsPlayerInDynamicVehicle(i, vID))
			{
				SetPlayerVirtualWorld(i, 0);
			}
		}
	}

    //if(g_PlayerFlags[playerid] & e_MUSIC) StopAudioStreamForPlayer(playerid);
}

CMD:leave(playerid, params[], 0, 0)
{
	if(GetPVarType(playerid, "RaceParticipant"))
	{
	 	if(GetPVarInt(playerid, "RaceParticipant") == 3 && (g_ServerFlags & e_RACE_START)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_MAR_ELKEZDOTOTT_A_VISSZASZAMLA"));

        LeavePlayerFromRace(playerid);

		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_KILEPTEL_AZ__VERSENYBOL"), g_szRaceName_);
		if((g_ServerFlags & e_RACE_START) && Participants < 1 /*&& VersenyIdo > 30*/)
		{
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
				SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_VERSENY__BEFEJEZODOTT_LEGUTOLS"), g_szRaceName_, pName(playerid), playerid);
			}
			endrace();
			return 1;
		}

		switch(Participants)
		{
			case 0:
			{
			    foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
					SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_RACE_1"), pName(playerid), playerid, g_szRaceName_);
				}
			}
			case 1:
			{
			    foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
					SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_RACE_2"), pName(playerid), playerid, g_szRaceName_);
				}
			}
			default:
			{
			    foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
					SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_RACE_3"), pName(playerid), playerid, Participants, g_szRaceName_);
				}
			}
		}
	}
	else if(g_pGamesData[playerid] & e_IN_DERBY)
	{
		printf("leave %s(%d) g_DerbyPlayers = %d", pName(playerid), playerid, g_DerbyPlayers);
		g_pGamesData[playerid] &= ~e_IN_DERBY;
		g_PlayerData[playerid] &= ~e_CTC_VOTED;

		// Ha még kocsiban van - tehát játékban
		if(g_DerbyPlayerVehicle[playerid] != INVALID_VEHICLE_ID)
		{
			DestroyDynamicVehicle(g_DerbyPlayerVehicle[playerid]);
			g_DerbyPlayerVehicle[playerid] = INVALID_VEHICLE_ID;
			RemovePlayerFromVehicleEx(playerid);
			g_DerbyPlayers--;
		}

		// Akik freecam-ba vannak, azoknak a freecam kikapcsolása
		if(g_pNoClipObject[playerid] != INVALID_PLAYER_ID)
		{
		    DestroyPlayerObject(playerid, g_pNoClipObject[playerid]);
		    g_pNoClipObject[playerid] = INVALID_OBJECT_ID;
		}

		format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %d", g_DerbyPlayers, g_DerbyTime);
		TextDrawSetString(TD_Derby, FixGameString(i_str));

		TextDrawHideForPlayer(playerid, TD_Derby);
		TogglePlayerControllable(playerid, true);
		SpawnPlayer(playerid);
	}
	else if(GetPVarType(playerid, "FalloutState"))
	{
        SetPlayerVirtualWorld(playerid, 0);
		DeletePVar(playerid, "FalloutState");

		g_pGamesData[playerid] &= ~(e_IN_DM | e_IN_FALLOUT);

		SpawnPlayer(playerid);
		TextDrawHideForPlayer(playerid, FalloutTextdraw);
		TogglePlayerControllable(playerid, true);

		FalloutPlayers --;
		//FalloutActivePlayers --;
		//printf("FalloutPlayers -- Leave %d", FalloutPlayers);
		if(g_ServerFlags & e_FALLOUT_STARTED)
		{
			if(FalloutPlayers < 2)
			{
                //printf("FalloutPlayers = %d, g_ServerFlags = %d", FalloutPlayers, g_ServerFlags & e_FALLOUT_STARTED);
				SendClientMessageToAllf(COLOR_WHITE, "MSG_FALLOUT__FALLOUT_BEFEJEZODOTT_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
				EndFallout();
			}
		}
		format(i_str, sizeof(i_str), FixGameString("~r~~h~Játékosok: ~b~~h~%d~w~/~b~~h~%d ~r~~h~Objectek: ~b~~h~%d~w~/~b~~h~%d"), FalloutPlayers, (GetMaxPlayers() - Iter_Count(Bot)), FalloutOCount, sizeof(FalloutObject));
	   	TextDrawSetString(FalloutTextdraw, i_str);
     	ShowClanZones(playerid);
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RKILEPTEL_A_FALLOUTBOL"));
	}
	else if(g_pGamesData[playerid] & e_IN_RANGE)
	{
        FinishShootingRange(playerid);
		ShowWelcome(playerid, LANG(playerid, "MSG_RKILEPTEL_A_LODOZESBOLW"));
	}
	else if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "");
	}
	else if(GetPVarType(playerid, "Trucking"))
	{
		FinishTrucking(playerid);
		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RKAMIONOZAS_BEFEJEZVE_MIVEL_1"));
	}
	else if(g_pGamesData[playerid] & e_IN_GANGWAR)
	{
		if(g_pSelectTDFlags[playerid]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_VALAMILYEN_TEXTDRAWOT"));

		g_pGamesData[playerid] &= ~e_IN_GANGWAR;
		SetPlayerTeam(playerid, NO_TEAM);
        SetGoodAllowed(playerid, true);

        HideGangwarZones(playerid);
        ShowClanZones(playerid);
        UpdatePlayerSpawnInfo(playerid);
        SpawnPlayer(playerid);
	}
	else if(g_pGamesData[playerid] & e_IN_CTC)
	{
		g_pGamesData[playerid] &= ~e_IN_CTC;
		SetGoodAllowed(playerid, true);
		SetPlayerTeam(playerid, NO_TEAM);

		RemovePlayerMapIcon(playerid, 85);
		SendClientMessage(playerid, -1, LANG(playerid, "MSG_KILEPTEL_A_CTCBOL"));

        UpdatePlayerSpawnInfo(playerid);
		SpawnPlayer(playerid);
        ShowClanZones(playerid);

    	TextDrawHideForPlayer(playerid, TD_CTC);
    	g_PlayerData[playerid] &= ~e_CTC_VOTED;

		// Ha szavazás van, akkor elrejtük a szavazó textdrawot
		if(g_VoteCount)
		{
			for(new j; j != 5; j++)
			{
				TextDrawHideForPlayer(playerid, TD_SelectAuto + Text:j);
			}
			CancelSelectTextDraw(playerid);
		}

		if(!GetPVarInt(playerid, "Color"))
		{
			SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
		}
		else
		{
	        SetPlayerColor(playerid, GetPVarInt(playerid, "Color"));
		}
	}
	else if(g_pGamesData[playerid] & e_POSTAS)
	{
		for(new i; i != 5; i++)
		{
			if(g_pLevelHelyek[playerid]{i} != 0xFF) // Ha van nála levél
			{
				if(g_Posta[g_pElvittLevel[playerid]{i}] == -1) // Ha az a slot amibõl elvitte a levelet üres, akkor oda tesszük vissza
				{
                    g_Posta[g_pElvittLevel[playerid]{i}] = g_pLevelHelyek[playerid]{i};
				}
				else
				{
					for(new x; x != sizeof(g_Posta); x++)
					{
						if(g_Posta[x] == -1)
						{
		                    g_Posta[x] = g_pLevelHelyek[playerid]{i};
		                    break;
						}
					}
				}
                g_pLevelHelyek[playerid]{i} = 0xFF;
			}
	        g_pElvittLevel[playerid]{i} = 0xFF;
		}
	    g_pOnLevel{playerid} = 0xFF;
	    g_pPostasTime[playerid] = 0;
	    g_pPostaMoney[playerid] = 0;

		RemovePlayerMapIcon(playerid, 85); // posta ikon
		RemovePlayerMapIcon(playerid, 86);
		RemovePlayerMapIcon(playerid, 86 + 1);
		RemovePlayerMapIcon(playerid, 86 + 2);
		RemovePlayerMapIcon(playerid, 86 + 3);
		RemovePlayerMapIcon(playerid, 86 + 4);
        ShowClanZones(playerid);
    	PlayerTextDrawHide(playerid, TD_pPostasTime[playerid]);
    	g_pGamesData[playerid] &= ~e_POSTAS;

		if(GetPlayerState(playerid) != PLAYER_STATE_WASTED)
		{
			SpawnPlayer(playerid);
			SendClientMessage(playerid, -1, LANG(playerid, "MSG_KILEPTEL_A_POSTAS_MUNKABOL"));
		}
	}
	else if(g_pGamesData[playerid] & e_PIZZAS)
	{
		for(new i; i != 5; i++)
		{
			if(g_pLevelHelyek[playerid]{i} != 0xFF) // Ha van nála levél
			{
				if(g_Pizza[g_pElvittLevel[playerid]{i}] == -1) // Ha az a slot amibõl elvitte a levelet üres, akkor oda tesszük vissza
				{
                    g_Pizza[g_pElvittLevel[playerid]{i}] = g_pLevelHelyek[playerid]{i};
				}
				else
				{
					for(new x; x != sizeof(g_Pizza); x++)
					{
						if(g_Pizza[x] == -1)
						{
		                    g_Pizza[x] = g_pLevelHelyek[playerid]{i};
		                    break;
						}
					}
				}
                g_pLevelHelyek[playerid]{i} = 0xFF;
			}
	        g_pElvittLevel[playerid]{i} = 0xFF;
		}
	    g_pOnLevel{playerid} = 0xFF;
	    g_pPostasTime[playerid] = 0;
	    g_pPostaMoney[playerid] = 0;
        ShowClanZones(playerid);
		RemovePlayerMapIcon(playerid, 85); // posta ikon
		RemovePlayerMapIcon(playerid, 86);
		RemovePlayerMapIcon(playerid, 86 + 1);
		RemovePlayerMapIcon(playerid, 86 + 2);
		RemovePlayerMapIcon(playerid, 86 + 3);
		RemovePlayerMapIcon(playerid, 86 + 4);

    	PlayerTextDrawHide(playerid, TD_pPostasTime[playerid]);
    	g_pGamesData[playerid] &= ~e_PIZZAS;

		if(GetPlayerState(playerid) != PLAYER_STATE_WASTED)
		{
			SpawnPlayer(playerid);
			SendClientMessage(playerid, -1, LANG(playerid, "MSG_KILEPTEL_A_PIZZAS_MUNKABOL"));
		}
	}
	else if(g_pGamesData[playerid] & e_IN_DUEL)
	{
		new
		    duelid = g_pDuelID{playerid};
		if(duelid != 0xFF)
		{
			new
			    leave;
			if(g_pDuelCaller[playerid] == INVALID_PLAYER_ID)
			{
				leave = 0;
			}
			else leave = 1;

			SendClientMessageToAllf(-1, "MSG_DUEL___ES__KOZOTT_VEGET_1", pName(g_DuelPlayer[duelid][leave]), g_DuelPlayer[duelid][leave], pName(g_DuelPlayer[duelid][!leave]), g_DuelPlayer[duelid][!leave], pName(g_DuelPlayer[duelid][leave]), g_DuelPlayer[duelid][leave]);
	        ExitDuel(duelid);
		}
		else
		{
			printf("ASSERTATION FAILED!!! /leave -> exitduel");
		}
	}
	else if(g_pGamesData[playerid] & e_WORLDEDIT)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
		if(vID == GetPVarInt(playerid, "pCar"))
		{
			SetDynamicVehicleVirtualWorld(vID, 0);
		}
		SetPlayerVirtualWorld(playerid, 0);
		g_pGamesData[playerid] &= ~e_WORLDEDIT;

		// Funkció meghívása a FS-ben
		CallRemoteFunction("FUNC_LeaveWorldEdit", "d", playerid);
	}
	else if(g_pGamesData[playerid] & e_IN_TAXI)
	{
	    SetDynamicVehicleToRespawn(GetPlayerDynamicVehicleID(playerid));
	    g_pGamesData[playerid] &= ~e_IN_TAXI; //ki
	    SpawnPlayer(playerid);
	    DestroyDynamicCP(g_TaxiCP[playerid]);
		RemovePlayerMapIcon(playerid, 99);
		DeletePVar(playerid,"TaxiType");
		DeletePVar(playerid,"TaxiGPS");
		SetPVarInt(playerid,"TaxiVehicleID", INVALID_VEHICLE_ID);
		DeletePVar(playerid,"TaxiLastID");
		DeletePVar(playerid,"TaxiKiszalt");
	}
	// Mindig legalulra kell hogy kerüljön
	else if(g_PlayerData[playerid] & e_CLEARWORLD)
	{
		cmd_clearworld(playerid, "");
	}
	else ShowWelcome(playerid, LANG(playerid, "MSG_RNEMVAGY_MINIGAMEBENNBMINIGA"));
	
	foreach(new i: Player)
	{
		SavePlayer(i);
	}
	return 1;
}
CMD:exitderby(playerid, params[], 0, 0)
{
	return cmd_leave(playerid, params);
}
CMD:exitfallout(playerid, params[], 0, 0)
{
	return cmd_leave(playerid, params);
}

forward FUNC_JoinWorldEdit(playerid);
public FUNC_JoinWorldEdit(playerid)
{
	if(g_pGamesData[playerid] & e_WORLDEDIT)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_CSATLAKOZHATSZ_MEGEGYSZER"));
	    return 0;
	}

	if((e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_DUEL | e_IN_TRUCKING | e_IN_RANGE | e_IN_RACE | e_RABOL | e_KOCSIT_LOP | e_IN_GANGWAR | e_IN_CTC | e_POSTAS | e_PIZZAS | e_FLAG_OWNER | e_BCAR_OWNER | e_NOTELE) & g_pGamesData[playerid])
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_CSATLAKOZHATSZ_A_VILAGSZER"));
		return 0;
	}

	g_pGamesData[playerid] |= e_WORLDEDIT;

	// Ha clearworldben van akk visszarakjuk az alap világba
	if(g_PlayerData[playerid] & e_CLEARWORLD)
		RemovePlayerFromClearworld(playerid);

	SendClientMessage(playerid, COLOR_DB, LANG(playerid, "MSG_CSATLAKOZTAL_A_VILAGSZERKESZTO"));
	SendClientMessage(playerid, COLOR_DB, LANG(playerid, "MSG_SZERKESZTESSEL_KAPCSOLATOS"));
	return 1;
}

CMD:sos(playerid, params[], 0, 0)
{
	CHECK_SZINT(playerid, SZINT_SOS);

   	if(!(g_ServerFlags & e_RACE_ACTIVE)) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NINCS_ELINDITVA_VERSENY"));
	if(!GetPVarType(playerid, "RaceParticipant")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_VERSENYBEN"));
	if(GetPlayerMoneyEx(playerid)< 5000) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NINCS_ELEG_PENZED_5000_KENE"));
	if(!(g_ServerFlags & e_RACE_START)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MEG_NEMMEGY_A_VERSENY"));

	new
		cp = GetPVarInt(playerid, "CurrentCP") - 1;
	if(cp <= 0) cp = 0;

	X = GetGVarFloat("RaceCPX", cp + 1);
    Y = GetGVarFloat("RaceCPY", cp + 1);
    Z = GetGVarFloat("RaceCPZ", cp + 1);
	if(IsPlayerInRangeOfPoint(playerid, 45.0, X, Y, Z)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_KOZEL_VAGY_AZ_ELOZO_CPHEZ"));

	Health = GetGVarFloat("RaceCPX", cp);
	Armour = GetGVarFloat("RaceCPY", cp);

	if(GetPlayerVirtualWorld(playerid) == 333)
	{
	    NormalTele(playerid, Health, Armour, GetGVarFloat("RaceCPZ", cp), GetPlayerInterior(playerid), GetPointAngleToPoint(Health, Armour, X, Y), 333);
	}
	else NormalTele(playerid, Health, Armour, GetGVarFloat("RaceCPZ", cp), GetPlayerInterior(playerid), GetPointAngleToPoint(Health, Armour, X, Y), (g_RaceClearworld) ? (50001) : (7));

	GivePlayerMoneyEx(playerid, -10000, "SOS");

	ShowWelcome(playerid, LANG(playerid, "MSG_RVISSZARAKVAWNGH5000"));
	SetPlayerChatBubble(playerid, COLOR_YELLOW, 25.0, 5000, "MSG_CHATBUBBLE_SOS");
	return 1;
}

CMD:lastcp(playerid, params[], 0, 0) return cmd_sos(playerid,"");

CMD:endrace(playerid, params[], 2, 0)
{
   	if(!(g_ServerFlags & e_RACE_ACTIVE)) return SendClientMessage(playerid, COLOR_YELLOW, LANG(playerid, "MSG_NINCS_ELINDITVA_VERSENY"));

	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
		SendClientMessagef(i, COLOR_BLUE, LANG(i, "MSG__ADMIN__LEALLITOTTA_A_VERSEN"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	}
   	endrace();
	return 1;
}

CMD:racekick(playerid, params[], 2, 0)
{
	if(!(g_ServerFlags & e_RACE_ACTIVE)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_NINCS_VERSENY"));

	if(sscanf(params, "u", player1)) return SendUsage(playerid, "/racekick <Játékos ID/Név>");
    if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

	if(!GetPVarType(player1, "RaceParticipant")) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA__NINCS_VERSENYBEN"), GetPlayerColor(player1) >>> 8, pName(player1), player1);

	SendClientMessagef(player1, COLOR_BLUE, LANG(player1, "MSG__ADMIN__KIDOBOTT_TEGED_AZ_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szRaceName_);
	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG__KIDOBTAD__NEVU_JATEKOST_AZ"), GetPlayerColor(player1) >>> 8, pName(player1), player1, g_szRaceName_);

    g_PlayerData[player1] |= e_RACE_KICKED;
	LeavePlayerFromRace(player1);

	if((g_ServerFlags & e_RACE_START) && Participants < 2 && VersenyIdo > 30)
	{
		VersenyIdo = 30;

		//SendClientMessageToAllf(COLOR_GREEN, "MSG_VERSENY__BEFEJEZODOTT_LEGUTOLS_1", g_szRaceName_, pName(playerid), playerid);
		return 1;
	}
	switch(Participants)
	{
	    case 0:
	    {
	        foreach(Player, i)
	        {
	            if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
	            SendClientMessagef(i, COLOR_GREEN, LANG(player1, "MSG_RACE_9"), pName(player1), player1, g_szRaceName_);
	        }
	    }
	    case 1:
	    {
	        foreach(Player, i)
	        {
	            if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
	            SendClientMessagef(i, COLOR_GREEN, LANG(player1, "MSG_RACE_10"), pName(player1), player1, g_szRaceName_);
	        }
	    }
	    default:
	    {
	        foreach(Player, i)
	        {
	            if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
	            SendClientMessagef(i, COLOR_GREEN, LANG(player1, "MSG_RACE_11"), pName(player1), player1, Participants, g_szRaceName_);
	        }
	    }
	}
	return 1;
}

forward acountdown();
public acountdown()
{
	if(!(g_ServerFlags & e_RACE_START))
	{
		g_ServerFlags |= e_RACE_START;
		foreach(new i: Player)
		{
			if(!GetPVarType(i, "RaceParticipant")) continue;
			if(IsPlayerInRaceCheckpoint(i))
		   	{
		       	TogglePlayerControllable(i, false);
		       	if(!(g_PlayerFlags2[i] & e_FPS_MOD)) SetCameraBehindPlayer(i);
			    //SetCameraBehindPlayer(i);
			}
			else
			{
			    SendClientMessage(i, COLOR_RED, LANG(i, "MSG_KIMENTEL_A_VERSENY_STARTPONTJABOL"));
                LeavePlayerFromRace(i);
				continue;
			}
		}
	}

	switch(--cd)
	{
	    case 5, 4, 3, 2, 1:
	    {
			valstr(name, cd);

			foreach(new i: Player)
			{
				if(GetPVarInt(i, "RaceParticipant") > 1)
				{
                    GameTextForPlayer(i, name, 1000, 3);
					PlayerPlaySound(i, 1056);
			   	}
		   	}
		}
		case 0:
		{
            g_rStartTick = GetTickCount();
			foreach(new i: Player)
			{
			   	if(!GetPVarType(i, "RaceParticipant")) continue;
       			TogglePlayerControllable(i, true);

       			if(GetPVarInt(i, "RaceParticipant") == 1) continue;
				PlayerPlaySound(i, 1057);

				//if(g_PlayerFlags[i] & e_MUSIC) PlayAudioStreamForPlayer(i, !"http://mfrserver.net/SAMP/up/Pump_It.mp3");

				switch(random(5))
				{
				    case 0: GameTextForPlayer(i, "~g~~h~]~h~]~h~]~r~~h~ GO ~g~~h~]~h~]~h~]", 1000, 3);
				    case 1: GameTextForPlayer(i, "~r~~h~]~h~]~h~]~r~~h~ GO ~r~~h~]~h~]~h~]", 1000, 3);
				    case 2: GameTextForPlayer(i, "~b~~h~]~h~]~h~]~r~~h~ GO ~b~~h~]~h~]~h~]", 1000, 3);
				    case 3: GameTextForPlayer(i, "~y~~h~]~h~]~h~]~r~~h~ GO ~y~~h~]~h~]~h~]", 1000, 3);
				    case 4: GameTextForPlayer(i, "~p~~h~]~h~]~h~]~r~~h~ GO ~p~~h~]~h~]~h~]", 1000, 3);
				}

				SetPVarInt(i, "RaceParticipant", 4);
				SetRaceCheckpoint(i, 0, 1);

                PlayerTextDrawSetString(i, PlayerText:GetPVarInt(i, "RaceTime"), "~p~Time:~w~ 0:0");
				PlayerTextDrawShow(i, PlayerText:GetPVarInt(i, "RaceTime"));

				format(name, sizeof(name), "~p~CP:~w~ 0/~r~%d", LCurrentCheckpoint + 1);
				PlayerTextDrawSetString(i, PlayerText:GetPVarInt(i, "RaceCP"), name);
				PlayerTextDrawShow(i, PlayerText:GetPVarInt(i, "RaceCP"));

				if(!TopRacer[record])
				{
					format(i_str, 32, "~p~Record:~w~ Nincs");
				}
				else
				{
					format(i_str, 32, "~p~Record:~w~ %d:%d.%d", TopRacer[convertedtime][0], TopRacer[convertedtime][1], TopRacer[convertedtime][2]);
				}
	            TextDrawShowForPlayer(i, RaceRecord);
                TextDrawSetString(RaceRecord, i_str);
		   	}

           	KillTimer(Countdown);
		}
	}
	return 1;
}

stock SetRaceCheckpoint(playerid, target, next)
{
	if(next == -1 && RaceType != 2)
	{
		SetPlayerRaceCheckpoint(playerid, 1, GetGVarFloat("RaceCPX", target), GetGVarFloat("RaceCPY", target), GetGVarFloat("RaceCPZ", target), 0.0, 0.0, 0.0, CPsize);
		RemovePlayerMapIcon(playerid, 95);

		RemovePlayerMapIcon(playerid, 96);
		RemovePlayerMapIcon(playerid, 97);
		RemovePlayerMapIcon(playerid, 98);
	}
	else if(next == -1 && RaceType == 2)
	{
		SetPlayerRaceCheckpoint(playerid, 4, GetGVarFloat("RaceCPX", target), GetGVarFloat("RaceCPY", target), GetGVarFloat("RaceCPZ", target), 0.0, 0.0, 0.0, CPsize);
	}
	else if(RaceType == 2)
	{
		SetPlayerRaceCheckpoint(playerid, 3, GetGVarFloat("RaceCPX", target), GetGVarFloat("RaceCPY", target), GetGVarFloat("RaceCPZ", target), GetGVarFloat("RaceCPX", next), GetGVarFloat("RaceCPY", next), GetGVarFloat("RaceCPZ", next), CPsize);
	}
	else
	{
		SetPlayerRaceCheckpoint(playerid, 0, GetGVarFloat("RaceCPX", target), GetGVarFloat("RaceCPY", target), GetGVarFloat("RaceCPZ", target), GetGVarFloat("RaceCPX", next), GetGVarFloat("RaceCPY", next), GetGVarFloat("RaceCPZ", next), CPsize);
		SetPlayerMapIcon(playerid, 95, GetGVarFloat("RaceCPX", target + 1), GetGVarFloat("RaceCPY", target + 1), GetGVarFloat("RaceCPZ", target + 1), 33, 0);

		SetPlayerMapIcon(playerid, 96, GetGVarFloat("RaceCPX", target + 2), GetGVarFloat("RaceCPY", target + 2), GetGVarFloat("RaceCPZ", target + 2), 56, 0);
		SetPlayerMapIcon(playerid, 97, GetGVarFloat("RaceCPX", target + 3), GetGVarFloat("RaceCPY", target + 3), GetGVarFloat("RaceCPZ", target + 3), 56, 0);
		SetPlayerMapIcon(playerid, 98, GetGVarFloat("RaceCPX", target + 4), GetGVarFloat("RaceCPY", target + 4), GetGVarFloat("RaceCPZ", target + 4), 56, 0);
	}
	return 1;
}

stock SetBRaceCheckpoint(playerid, target, next)
{
	if(next == -1 && BuildRaceType[playerid] != 2)
	{
		SetPlayerRaceCheckpoint(playerid, 1,BuildRaceCP[0][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[2][playerid][target],0.0, 0.0, 0.0,BuildRaceCPSize[playerid]);
	}
	else if(next == -1 && BuildRaceType[playerid] == 2)
	{
		SetPlayerRaceCheckpoint(playerid, 4,BuildRaceCP[0][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[1][playerid][target],0.0, 0.0, 0.0, BuildRaceCPSize[playerid]);
	}
	else if(BuildRaceType[playerid] == 2)
	{
		SetPlayerRaceCheckpoint(playerid, 3,BuildRaceCP[0][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[0][playerid][next],BuildRaceCP[1][playerid][next],BuildRaceCP[2][playerid][next],BuildRaceCPSize[playerid]);
	}
	else
	{
		SetPlayerRaceCheckpoint(playerid, 0,BuildRaceCP[0][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[1][playerid][target],BuildRaceCP[0][playerid][next],BuildRaceCP[1][playerid][next],BuildRaceCP[2][playerid][next],BuildRaceCPSize[playerid]);
	}
   	return 1;
}

stock endrace()
{
	new
	    i;
	for( ; i != LCurrentCheckpoint; i++)
	{
	    DeleteGVar("RaceCPX", i);
	    DeleteGVar("RaceCPY", i);
	    DeleteGVar("RaceCPZ", i);
        DeleteGVar("CPRank", i);
	}
	LCurrentCheckpoint = 0;

   	foreach(i: Player)
   	{
		g_PlayerData[i] &= ~e_RACE_KICKED;
		if(!GetPVarType(i, "RaceParticipant")) continue;

		LeavePlayerFromRace(i);
		SetPlayerGravity(i, 0.008);
	}

	g_ServerFlags &= ~(e_RACE_MAJSTART | e_RACE_ACTIVE | e_RACE_START);

    g_rStartTick = 0;
    g_rEndTick = 0;
	Participants = 0;
    VersenyIdo = 0;
	SetGVarString("LastRaceName",g_szRaceName_,0);

	KillTimer(MajStartTimer);
	return 1;
}

stock BActiveCP(playerid,sele)
{
	if(BuildRaceCPS[playerid] - 1 == sele)
	{
		SetBRaceCheckpoint(playerid, sele, -1);
	}
	else
	{
		SetBRaceCheckpoint(playerid, sele, sele + 1);
	}
	return 1;
}

forward mscountdown();
public mscountdown()
{
	if((g_ServerFlags & e_RACE_START) || !(g_ServerFlags & e_RACE_MAJSTART))
	{
		g_ServerFlags &= ~e_RACE_MAJSTART;
		KillTimer(MajStartTimer);
		return 1;
	}

	mscd -= 10;
	if(mscd <= 0)
	{
		if(!Participants)
		{
	    	SendClientMessageToAllf(COLOR_GREEN, "MSG_VERSENY__NEM_KEZDODOTT_EL_MIVEL", g_szRaceName_);

	    	endrace();
			return 1;
		}
		else if(Participants < 2 && !(g_ServerFlags & e_RACEDEBUG))
		{
	    	SendClientMessageToAllf(COLOR_GREEN, "MSG_VERSENY__NEM_KEZDODOTT_EL_MIVEL_1", g_szRaceName_);
	    	endrace();
			return 1;
		}

        mscd = 0;
		foreach(new i: Player)
		{
			if(!GetPVarType(i, "RaceParticipant")) continue;
			if(!IsPlayerInRaceCheckpoint(i))
			{
			    SendClientMessage(i, COLOR_RED, LANG(i, "MSG_KIMENTEL_A_VERSENY_STARTPONTJABOL"));
                LeavePlayerFromRace(i);
				continue;
			}

            TogglePlayerControllable(i, false);
			
            g_AllParticipants = Participants;
            if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
   			SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG_VERSENY___VERSENYZOVEL_ELKEZDO"), g_szRaceName_, Participants);
		}

		KillTimer(MajStartTimer);
		g_ServerFlags &= ~e_RACE_MAJSTART;

		cd = 5;
		Countdown = SetTimer("acountdown", 1000, true);
	}
	else
	{
		if(mscd > 50)
		{
			format(i_str, sizeof(i_str), "~y~Verseny elindul ~w~egy~y~ perc múlva!");
		}
		else
		{
			format(i_str, sizeof(i_str), "~y~Verseny elindul ~w~%d~y~ másodperc múlva!", mscd);
		}
		foreach(new i: Player)
		{
		   	if(!GetPVarType(i, "RaceParticipant")) continue;
			InfoTD_MSG(i, 5000, i_str);
		}
	}
	return 1;
}

stock clearrace(playerid)
{
	for(new i; i != BuildRaceCPS[playerid]; i++)
	{
        DeleteGVar("BRaceCPX", i);
        DeleteGVar("BRaceCPY", i);
        DeleteGVar("BRaceCPZ", i);
	}
	BuildRaceCPS[playerid] = 0;
	DisablePlayerRaceCheckpoint(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_VERSENYSZERKESZTES_BEFEJEZVE"));

	BuildRaceID[playerid] = -1;
	BuildRaceCPSize[playerid] = -1;
	BuildRaceType[playerid] = -1;
	BuildRaceClearWorld[playerid] = -1;

 	BuildRaceAutoFix[playerid] = -1;
	BuildRaceGhostMode[playerid] = -1;
	return 1;
}

stock startrace()
{
	g_ServerFlags |= e_RACE_MAJSTART;
	MajStartTimer = SetTimer("mscountdown", 10000, true);
	mscd = 60;

	if(!TopRacer[record])
	{
		foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG__VERSENY___ELINDUL_EGY_PERC"), g_szRaceName_);
		}
	}
	else
	{
        strunpack(country, TopRacer[rname], 24);
        foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			SendClientMessagef(i, COLOR_GREEN, LANG(i, "MSG__VERSENY___INDUL_REKORD_"), g_szRaceName_, TopRacer[convertedtime][0], TopRacer[convertedtime][1],TopRacer[convertedtime][2], country, TopRacer[rec_year], TopRacer[rec_month], TopRacer[rec_day], TopRacer[rec_hour], TopRacer[rec_minute], TopRacer[rec_sec]);
		}
  	}
    g_ServerFlags &= ~e_RACE_START;
	g_ServerFlags |= e_RACE_ACTIVE;
	Ranking = 1;
    VersenyCount = 0;
	return 1;
}

forward THREAD_LoadRace(playerid);
public THREAD_LoadRace(playerid)
{
	new
	    rows = cache_get_row_count();
	if(!rows)
	{
		printf("THREAD_LoadRace rows != 1 (%d)", rows);

		if(playerid != -1) SendClientMessagef(playerid, -1, LANG(playerid, "MSG_THREAD_LOADRACE_ROWS__1_"), rows);
		return 1;
	}
	if(playerid != -1)
	{
	 	if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid) && !g_pVIP[playerid]/* && !(g_ServerFlags & e_RACEDEBUG)*/)
		{
			new tick = GetTickCount() - g_LastRaceStartTick[playerid];
			if(tick < LOADRACE_LIMIT) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_KOVETKEZO_VERSENY_INDITASIG"),(float(LOADRACE_LIMIT - tick) / 1000));
		}

		GetGVarString("LastRaceName", name, sizeof(name), 0);
		cache_get_row(0, 1, g_szRaceName_);

		if(!strcmp(g_szRaceName_, name, true) && !IsOwner(playerid))
		{
		    SendClientMessagef(playerid, -1, LANG(playerid, "MSG_EZT_NEM"));
	     	return 0;
		}
		g_LastRaceStartTick[playerid] = GetTickCount();
	}
	cache_get_row(0, 1, g_szRaceName_);
	cache_get_row_int(0, 2, RaceAutoFix);
	cache_get_row_int(0, 3, RaceGhostMode);
	cache_get_row_float(0, 4, CPsize);
	cache_get_row_float(0, 5, RaceAngle);
	cache_get_row_int(0, 6, RaceType);
	cache_get_row_int(0, 7, g_RaceClearworld);
	cache_get_row(0, 8, country);
	cache_get_row_int(0, 9, TopRacer[reg_id]);
	cache_get_row_int(0, 10, TopRacer[record]);
	cache_get_row_int(0, 12, datez);
	cache_get_row_float(0, 15, RaceGravity);
    cache_get_row_int(0, 16, RaceVehicle);
    cache_get_row_int(0, 17, RaceInterior);
    
    LCurrentCheckpoint = -1;
    
	for(new i = 18; i != MAX_RACE_CP + 18; i++)
	{
		cache_get_row(0, i, i_str);

		// Ha már nincsenek kordináták, akkor kilépünk a ciklusból
		if(i_str[0] == '*') break;

        sscanf(i_str, "p<,>fff", X, Y, Z);

        LCurrentCheckpoint++;
	    SetGVarFloat("RaceCPX", X, LCurrentCheckpoint);
	    SetGVarFloat("RaceCPY", Y, LCurrentCheckpoint);
	    SetGVarFloat("RaceCPZ", Z, LCurrentCheckpoint);
	}

    strpack(TopRacer[rname], country, 24);

	date(datez, TopRacer[rec_day], TopRacer[rec_month], TopRacer[rec_year], TopRacer[rec_hour], TopRacer[rec_minute], TopRacer[rec_sec]);
	ConvertTime(var, TopRacer[record], TopRacer[convertedtime][0], TopRacer[convertedtime][1], TopRacer[convertedtime][2]);

	startrace();
	return 1;
}

forward RaceRotation();
public RaceRotation()
{
    if(!Itter_Count(Player)) return 0;
    // printf("RaceRotation()");

//	if(Participants != 0) //Ha van benne versenyzõ


	if((g_ServerFlags & e_RACE_ACTIVE) || (g_ServerFlags & e_RACE_START) || Participants != 0)
	{
	   	printf("RaceRotation: Verseny '%s' már megy!", g_szRaceName_);
	   	return 1;
	}

	mysql_function_query(1, "SELECT * FROM `racedata` ORDER BY RAND() LIMIT 0,1", true, "THREAD_LoadRace", "d", -1);
	// printf("RaceRotation: LoadRace(%s) sikeresen elindítva! ID: %d!", g_szRaceName_, RRotation);
	return 1;
}

/* Bejelentkezés */
stock LoginPlayer(playerid)
{
	//printf("LoginPlayer(playerid = %s(%d)", pName(playerid), playerid);
	new
		PVarSet[69],
		Float:DeathA,
		szSavedObjects[128],
		szHorseShoes[128],
		aHorseShoes[50],
		aPhotos[50],
		szOysters[128],
		szPhotos[128],
		szElements[128],
		szJumps[145],
		aJumps[70],
		szTags[211],
		szDMInfo[64],
		aTags[100],
		szClothes[64],
		szMyText[180],
		szWeaponShots[192],
		szSpawn[24],
		szJoins[128],
		cVar[8],
		mVar,
		iHydType,
		bool:mUse,
		mText[129],
		Float:mOffset,
		aOysters[50],
		Float:Spin[3],
		i,
		iRegID = GetPVarInt(playerid, "LineID"),
		ForumRegID;
	//	KM[8],
//		asd[2];

	if(!iRegID) return print(!"Assertation failed! Login Player error! Wrong line ID!");

	if(iRegID == 1 || iRegID == 3)
	{
		//g_PlayerData[playerid] |= e_REJTETT;
		Bit_SetAll(g_pIgnoreList[playerid], true);
	}

	g_PlayerData[playerid] |= e_LOGGED_IN;

	// Ha véletlen a szerver be tette õt botnak, akkor kivesszük õt onnan
	g_pOtherFlags[playerid] &= ~e_RAKSAMP;

	PlayerInfo[playerid][pRegID] = iRegID;

	cache_get_row_int(0, 2, ForumRegID); // Forum ID
	//printf("forumid: %d", ForumRegID);

	PlayerInfo[playerid][fRegID] = ForumRegID;

	if(ForumRegID == 0)
	{
		PlayerInfo[playerid][fRegID] = -1;
		//printf("set to null");
	}

	cache_get_row_int(0, 5, mVar); // date(timestamp, &f_day, &f_month, &f_year, &f_hour, &f_min, &f_sec)
	date(mVar, PlayerInfo[playerid][pRegDay], PlayerInfo[playerid][pRegMonth], PlayerInfo[playerid][pRegYear],
				PlayerInfo[playerid][pRegHour], PlayerInfo[playerid][pRegMinute], PlayerInfo[playerid][pRegSecond]);

	cache_get_row_int(0, 6, mVar);
	date(mVar, PlayerInfo[playerid][pLastDay], PlayerInfo[playerid][pLastMonth], PlayerInfo[playerid][pLastYear],
				PlayerInfo[playerid][pLastHour], PlayerInfo[playerid][pLastMinute], PlayerInfo[playerid][pLastSecond]);

	cache_get_row_int(0, 7, PVarSet[0]); //PVarSet[0] = strval(name); // Level
	//printf("level: %d", PVarSet[0]);
	cache_get_row_int(0, 8, PVarSet[1]); //PVarSet[1] = strval(name); // Money
	cache_get_row_int(0, 9, PVarSet[2]); //PVarSet[2] = strval(name); // Bank
	cache_get_row_int(0, 10, PVarSet[3]); //PVarSet[3] = strval(name); // Kills
	cache_get_row_int(0, 11, PVarSet[4]); //PVarSet[4] = strval(name); // Deaths
	cache_get_row_int(0, 12, PVarSet[32]); //PVarSet[32] = strval(name); // Killstreak
	cache_get_row_int(0, 13, PVarSet[5]); //PVarSet[5] = strval(name); // Score
	cache_get_row_int(0, 14, PVarSet[6]); //PVarSet[6] = strval(name); // Fightingstyle
	cache_get_row_int(0, 15, PVarSet[8]); //PVarSet[8] = strval(name); // Reactionwins
	cache_get_row_int(0, 16, PVarSet[30]); //PVarSet[30] = strval(name); // Goldpots
	cache_get_row_int(0, 17, PlayerInfo[playerid][pTotalSeconds]); // Online Time
	cache_get_row_int(0, 18, PVarSet[10]); //PVarSet[10] = strval(name); // Posts
	cache_get_row_int(0, 19, PVarSet[11]); //PVarSet[11] = strval(name); // HQ
	cache_get_row_int(0, 20, PVarSet[13]); //PVarSet[13] = strval(name); // Warns
	cache_get_row_int(0, 21, PVarSet[28]); //PVarSet[28] = strval(name); // Races

	cache_get_row_int(0, 22, PVarSet[38]); //PVarSet[38] = strval(name); // Rablasok
	cache_get_row_int(0, 23, PVarSet[39]); //PVarSet[39] = strval(name); // Rangeshot
	cache_get_row_int(0, 24, PVarSet[40]); //PVarSet[40] = strval(name); // Nitro State
	cache_get_row_int(0, 25, PVarSet[42]); //PVarSet[42] = strval(name); // Laser Pointer
	cache_get_row_int(0, 26, PVarSet[43]); //PVarSet[43] = strval(name); // Last Rabolt
	cache_get_row_int(0, 27, PVarSet[44]); //PVarSet[44] = strval(name); // ID Color
	cache_get_row_int(0, 28, PVarSet[45]); //PVarSet[45] = strval(name); // Flagtime
	cache_get_row_int(0, 29, PVarSet[46]); //PVarSet[46] = strval(name); // BCartime
	cache_get_row_int(0, 30, PVarSet[47]); //PVarSet[47] = strval(name); // Fuvarok
	cache_get_row_int(0, 31, PVarSet[55]); //PVarSet[55] = strval(name); // Stuntbonus
	cache_get_row_int(0, 32, PVarSet[62]); //PVarSet[62] = strval(name); // Fallout Won
	cache_get_row_int(0, 33, PVarSet[63]); //PVarSet[63] = strval(name); // Mute Time
	cache_get_row_int(0, 34, PVarSet[64]); //PVarSet[64] = strval(name); // Freeze Time

	cache_get_row_float(0, 35, X); //X = floatstr(name); // SavedX
	cache_get_row_float(0, 36, Y); //Y = floatstr(name); // SavedY
	cache_get_row_float(0, 37, Z); //Z = floatstr(name); // SavedZ
	cache_get_row_int(0, 38, PVarSet[14]); //PVarSet[14] = strval(name); // Interior

	cache_get_row_int(0, 39, PVarSet[15]); //PVarSet[15] = strval(name); // World
	cache_get_row_float(0, 40, Angle); //Angle = floatstr(name); // World

	cache_get_row_float(0, 41, V[0]); //V[0] = floatstr(name); // DeathX
	cache_get_row_float(0, 42, V[1]); //V[1] = floatstr(name); // DeathY
	cache_get_row_float(0, 43, V[2]); //V[2] = floatstr(name); // DeathZ
	cache_get_row_float(0, 44, DeathA); //DeathA = floatstr(name); // DeathA
	cache_get_row_int(0, 45, PVarSet[52]); //PVarSet[52] = strval(name); // DeathInt
	cache_get_row_int(0, 46, PVarSet[53]); //PVarSet[53] = strval(name); // DeathWorld
	cache_get_row_int(0, 47, iHydType); //iHydType = strval(name); // Hydraulics Type
	cache_get_row_float(0, 48, Spin[0]); //Spin[0] = floatstr(name); // SpinX
	cache_get_row_float(0, 49, Spin[1]); //Spin[1] = floatstr(name); // SpinY
	cache_get_row_float(0, 50, Spin[2]); //Spin[2] = floatstr(name); // SpinZ

	g_pSzint{playerid} = cache_get_row_int_ex(0, 51); //g_pSzint{playerid} = strval(name); // Szint
	cache_get_row_int(0, 52, PVarSet[49]); //PVarSet[49] = strval(name); // XP

	cache_get_row_int(0, 53, PVarSet[51]); //PVarSet[51] = strval(name); // Chatcolor
	cache_get_row_int(0, 54, PVarSet[50]); //VarSet[50] = strval(name); // Walkstyle
	cache_get_row_int(0, 55, PVarSet[17]); //PVarSet[17] = strval(name); // Jailtime
	cache_get_row_int(0, 56, PVarSet[18]); //PVarSet[18] = strval(name); // FavCarRadio
	cache_get_row_int(0, 57, PVarSet[19]); //PVarSet[19] = strval(name); // Autorepair

	cache_get_row_int(0, 58, PlayerInfo[playerid][pAFKTime]); //PlayerInfo[playerid][pAFKTime] = strval(name); // AFKTime
	//cache_get_row_int(0, 59, g_pGangwarTeam[playerid]); //g_pGangwarTeam[playerid] = strval(name); // gangwar_team

	cache_get_row_float(0, 60, Health); //Health = floatstr(name); // Boost
	cache_get_row_float(0, 61, Armour); //Armour = floatstr(name); // Hopping

	cache_get_row_int(0, 62, PVarSet[34]); //PVarSet[34] = strval(name); // Boost Key
	cache_get_row_int(0, 63, PVarSet[35]); //PVarSet[35] = strval(name); // Hopping Key
	cache_get_row_int(0, 64, PVarSet[36]); //PVarSet[36] = strval(name); // Flip Key
	cache_get_row_int(0, 120, PVarSet[65]); //PVarSet[65] = strval(name); // Teleport Key
	cache_get_row_int(0, 121, PVarSet[66]); //PVarSet[66] = strval(name); // CarFly Key
	cache_get_row_int(0, 122, PVarSet[67]); //PVarSet[67] = strval(name); // Fly Key
	cache_get_row_int(0, 123, PVarSet[68]); //PVarSet[67] = strval(name); // Load teleport

	SetPVarInt(playerid, "Maths", cache_get_row_int_ex(0, 65)); // Matek megoldások
	SetPVarInt(playerid, "Teles", cache_get_row_int_ex(0, 66)); // Teleport tesztek

	cache_get_row_int(0, 67, PVarSet[33]); //PVarSet[33] = strval(name); // Weather
	cache_get_row_int(0, 68, PVarSet[23]); //PVarSet[23] = strval(name); // Time

	cache_get_row_int(0, 69, PVarSet[24]); //PVarSet[24] = strval(name); // CarColor1
	cache_get_row_int(0, 70, PVarSet[56]); //PVarSet[56] = strval(name); // CarColor2
	cache_get_row_int(0, 71, PVarSet[57]); //PVarSet[57] = strval(name); // Paintjob
	cache_get_row_int(0, 72, PVarSet[58]); //PVarSet[58] = strval(name); // Fav Wheel

	cache_get_row(0, 73, szSpawn); //PVarSet[25] = strval(name); // Spawn location
	cache_get_row_int(0, 74, PVarSet[26]); //PVarSet[26] = strval(name); // Favskin
	cache_get_row_int(0, 75, PVarSet[37]); //PVarSet[37] = strval(name); // Armedweapon
	cache_get_row_int(0, 76, PVarSet[27]); //PVarSet[27] = strval(name); // Color
	cache_get_row_int(0, 77, g_pBounty[playerid]); //g_pBounty[playerid] = strval(name); // Bounty
	g_pTDFlags[playerid] = e_TD_Flags:cache_get_row_int_ex(0, 78);
	g_PlayerFlags[playerid] = e_PlayerFlags:cache_get_row_int_ex(0, 79); // "clicktele" -> PlayerFlags
	// printf("Flags: %d, Name: %s", g_PlayerFlags[playerid], name);

    cache_get_row(0, 80, i_str); // Weaponskill
    cache_get_row(0, 81, tmp); // Weapons
    cache_get_row(0, 82, dline); // Ammo
    cache_get_row(0, 83, szSavedObjects); // Savedobjects
    cache_get_row(0, 84, szHorseShoes); // horseshoes
    cache_get_row(0, 85, szOysters); // oysters
    cache_get_row(0, 86, szPhotos); // photos
    cache_get_row(0, 87, szClothes); // clothes
    cache_get_row(0, 88, szElements); // house elements
    cache_get_row(0, 89, szMyText); // mytext
	cache_get_row(0, 90, szJumps); // jumps
	cache_get_row(0, 91, szTags); // tags
	cache_get_row(0, 92, szDMInfo); // dminfo

	SetPVarInt(playerid, "Postas", cache_get_row_int_ex(0, 94)); // postas
	SetPVarInt(playerid, "Pizzas", cache_get_row_int_ex(0, 95)); // pizzas
	SetPVarInt(playerid, "Derby", cache_get_row_int_ex(0, 96)); // derby
	SetPVarInt(playerid, "CTC_Auto", cache_get_row_int_ex(0, 97)); // ctc_auto
	SetPVarInt(playerid, "CTC_Hajo", cache_get_row_int_ex(0, 98)); // ctc_hajo
	SetPVarInt(playerid, "Headshot_Kill", cache_get_row_int_ex(0, 99)); // headshot_kill
	SetPVarInt(playerid, "Headshot_Death", cache_get_row_int_ex(0, 100)); // headshot_death

    cache_get_row_float(0, 102, g_pCarFlyValue[playerid]); // carfly
    g_pLang{playerid} = cache_get_row_int_ex(0, 103); // lang

	cache_get_row_int(0, 105, g_PlayerFlags2[playerid]); // flags2
/*
	SetPVarFloat(playerid, "PosVY", cache_get_row_float_ex(0, 104)); // vy
	SetPVarFloat(playerid, "PosVZ", cache_get_row_float_ex(0, 105)); // vz
*/
	SetPVarInt(playerid, "LongestAFK", cache_get_row_int_ex(0, 106)); // longest_afk

	cache_get_row(0, 107, szWeaponShots); // weaponshots
	cache_get_row(0, 108, szJoins); // minigamejoins
	g_pVIP[playerid] = cache_get_row_int_ex(0, 109); // vip
	SetPVarInt(playerid, "VIPColor", cache_get_row_int_ex(0, 123));

    SetPVarInt(playerid,"TaxiFuvarok", cache_get_row_int_ex(0, 124));
    g_pChatMSGFlags[playerid] = e_ChatMSG_Flags:cache_get_row_int_ex(0, 125);

//    cache_get_row(0, 127, KM); printf("asdasdas %s", KM);
    
    
    /*
    sscanf(KM, "p<.>dd", asd[0], asd[1]);

	printf("asd1 %d",asd[0]);
	printf("asd2 %d",asd[1]);

    SetPVarInt(playerid,"TotalKM", asd[0]);
	SetPVarInt(playerid,"TotalM", asd[1]);

*/


	// Adatok feldarabolása
    sscanf(i_str, "p<,>A<i>(0)[11]", g_pWeaponSkill[playerid]);
    sscanf(tmp, "p<,>A<i>(0)[13]", g_pWeaponSlot[playerid]);
    sscanf(dline, "p<,>A<i>(0)[13]", g_pWeaponAmmo[playerid]);
    sscanf(szSavedObjects, "p<,>A<i>(0)[10]", g_pSavedObject[playerid]);
    sscanf(szHorseShoes, "p<,>A<i>(0)[50]", aHorseShoes);
    sscanf(szOysters, "p<,>A<i>(0)[50]", aOysters);
    sscanf(szPhotos, "p<,>A<i>(0)[50]", aPhotos);
    sscanf(szClothes, "p<,>A<i>(0)[8]", cVar);
    sscanf(szMyText, "p<,>dfds[128]", bool:mUse, mOffset, mVar, mText);
	sscanf(szElements, "p<,>A<i>(0)[30]", g_pRaktar[playerid]);
    sscanf(szJumps, "p<,>A<i>(0)[70]", aJumps);
    sscanf(szTags, "p<,>A<i>(0)[100]", aTags);
    sscanf(szDMInfo, "p<,>a<i>[11]", g_pDMInfo[playerid]);
    sscanf(szWeaponShots, "p<,>a<i>[14]", g_pWeaponShots[playerid]);
    sscanf(szJoins, "p<,>a<i>[15]", g_pMinigameJoins[playerid]);

	// Mentett pozíciók betöltése
	for(new slot = 0; slot != MAX_PLAYER_POS; slot++)
	{
		cache_get_row(0, 110 + slot, i_str);
		sscanf(i_str, "p<,>ffffddfff", g_pSavedPosition[playerid][slot][0], g_pSavedPosition[playerid][slot][1], g_pSavedPosition[playerid][slot][2], g_pSavedPosition[playerid][slot][3],
		    g_pSavedPositionInt[playerid][slot], g_pSavedPositionWorld[playerid][slot],
		    g_pSavedPositionVel[playerid][slot][0], g_pSavedPositionVel[playerid][slot][1], g_pSavedPositionVel[playerid][slot][2]);
//		printf("i_str %d: %s", slot, i_str);
	}

	// Ha már lejárt a VIP-je
	if(g_pVIP[playerid] < CurrentTimestamp() && g_pVIP[playerid] != 0)
	{
        g_pVIP[playerid] = 0;
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `vip` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
	}

	new
		bool:bBreak;
 	foreach(clans, clanid)
 	{
		for(i = 0; i != MAX_CLAN_PLAYERS; i++)
		{
			if(gClanPlayers[clanid][0][i] == iRegID)
			{
                g_pClan{playerid} = clanid;
			    g_pClanRank{playerid} = gClanPlayers[clanid][1][i];
	            bBreak = true;
	            break;
			}
		}

		// Fasz!
		if(bBreak) break;
	}

	if(cVar[0])
	{
		g_PlayerData[playerid] |= e_SAVE_STYLE;
		if(cVar[1] != -1) PlayerInfo[playerid][P_GlassesCount] = cVar[1];
		if(cVar[2] != -1) PlayerInfo[playerid][P_WatchesCount] = cVar[2];
		if(cVar[3] != -1) PlayerInfo[playerid][P_WeaponsCount] = cVar[3];
		if(cVar[4] != -1) PlayerInfo[playerid][P_OthersCount] = cVar[4];
		if(cVar[5] != -1) PlayerInfo[playerid][P_HatsCount] = cVar[5];
		if(cVar[6] != -1) SetPVarInt(playerid, "Weapons", cVar[6]);
		if(cVar[7] != -1) SetPVarInt(playerid, "wHand", cVar[7]);
	}

	if(mText[0] != '*')
	{
		if(PlayerInfo[playerid][p3DText] != Text3D:INVALID_3DTEXT_ID) Delete3DTextLabel(PlayerInfo[playerid][p3DText]);
        g_PlayerData[playerid] |= e_MYTEXT;

		if(mUse)
		{
			PlayerInfo[playerid][p3DText] = Create3DTextLabel(mText, (!mVar) ? ((random(0xFFFFFF) << 8) | 0xFF) : (mVar), 0.0, 0.0, 0.0, 50.0, 0, 1);
			Attach3DTextLabelToPlayer(PlayerInfo[playerid][p3DText], playerid, 0.0, 0.0, mOffset);
		}

        SetPVarString(playerid, "MyTextString", mText);
		SetPVarInt(playerid, "Text3DColor", (!mVar) ? ((random(0xFFFFFF) << 8) | 0xFF) : (mVar));
		SetPVarFloat(playerid, "MyTextOffset", mOffset);
		// printf("MyText: %s | Color: %d | Offset: %.4f", mText, mVar, mOffset);
	}

	if(PVarSet[0] > 4) PVarSet[0] = 0;

	if(PVarSet[0] == 4 /*&& !IsFOOwner(playerid)*/)
	{
		if(iRegID != 1 && iRegID != 2 && iRegID != 3 && iRegID != 5)
		{
		    mysql_format(1, query, sizeof(query), "UPDATE `players` SET `level` = 3 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");
			PVarSet[0] = 3; // Nagy lófaszt. AZT!
		}
	}
	
	SetPVarInt(playerid, "Level", PVarSet[0]);
	if(PVarSet[18] != 0xF) SetPVarInt(playerid, "FavRadioStation", PVarSet[18]);

	if(g_PlayerFlags[playerid] & e_STUNTBONUS)
	{
        EnableStuntBonusForPlayer(playerid, true);
	}
	else
	{
        EnableStuntBonusForPlayer(playerid, false);
	}

	if(PVarSet[55]) SetPVarInt(playerid, "Stuntbonus", PVarSet[55]);
	if(PVarSet[43]) SetPVarInt(playerid, "LastRabolt", PVarSet[43]);
	SetPVarInt(playerid, "TotalHours", (PlayerInfo[playerid][pTotalSeconds] / 3600)); // 3
	datez = PlayerInfo[playerid][pTotalSeconds] - (GetPVarInt(playerid, "TotalHours") * 3600); // 10800

	SetPVarInt(playerid, "TotalMinutes", (datez / 60)); // 180
	PlayerInfo[playerid][pTotalSeconds] = datez - (GetPVarInt(playerid, "TotalMinutes") * 60); // 10800

	SetPlayerMoneyEx(playerid, PVarSet[1]);
    SetPlayerScore(playerid, 0);
	GivePlayerScore(playerid, PVarSet[49]);

    SetPVarInt(playerid, "Style", PVarSet[6]);

	if(PVarSet[26] != -1) SetPVarInt(playerid, "FavSkinID", PVarSet[26]);

	if(PVarSet[37] != 127) SetPVarInt(playerid, "ArmedWeapon", PVarSet[37]);
    SetPVarInt(playerid, "FavCarColor_1", PVarSet[24]);
    SetPVarInt(playerid, "FavCarColor_2", PVarSet[56]);
	if(PVarSet[57] != 4) SetPVarInt(playerid, "AutoPaintjob", PVarSet[57]);
	if(!PVarSet[58])
	{
		DeletePVar(playerid, "FavWheel");
	}
	else
	{
		SetPVarInt(playerid, "FavWheel", PVarSet[58]);
	}

	if(PVarSet[4]) SetPVarInt(playerid, "Deaths", PVarSet[4]);
	if(PVarSet[3]) SetPVarInt(playerid, "Kills", PVarSet[3]);
	if(PVarSet[2]) SetPVarInt(playerid, "Bank", PVarSet[2]);
	if(PVarSet[10]) SetPVarInt(playerid, "Posts", PVarSet[10]);
	if(PVarSet[8]) SetPVarInt(playerid, "ReactionWins", PVarSet[8]);
    if(PVarSet[17]) SetPVarInt(playerid, "JailTime", PVarSet[17]);
	if(PVarSet[13]) SetPVarInt(playerid, "Warnings", PVarSet[13]);

	if(PVarSet[11]) SetPVarInt(playerid, "HQ", PVarSet[11]);
	//if(PVarSet[25]) SetPVarInt(playerid, "SpawnLocation", PVarSet[25]);

	new sp1, sp2, help[32];
	sscanf(szSpawn, "p<,>ds[32]", sp1, help); //type, cmd

	// Ha teleporta spawnja, akkro kikeressük a teleport ID-t a név alapján
	if(sp1 == SPAWNPLACE_TELEPORT)
	{
		// Teleport ID megkeresése név alapján
		//sp2 = GetTeleportIDByName(help);
        sp2 = GetTeleportIDByCMD(help);
		// Ha a teleport nem található, akkor random spawn lesz
		if(sp2 == -1)
			sp1 = SPAWNPLACE_RANDOM;
	}
	else
	{
		sp2 = strval(help);
	}

    SetPVarInt(playerid, "SpawnLocation", sp1);
    SetPVarInt(playerid, "SpawnLocation2", sp2);

	if(PVarSet[28]) SetPVarInt(playerid, "RacesWon", PVarSet[28]);
	if(PVarSet[30]) SetPVarInt(playerid, "Goldpots", PVarSet[30]);

    if(PVarSet[38]) SetPVarInt(playerid, "RablasokSzama", PVarSet[38]);
    if(PVarSet[39]) SetPVarInt(playerid, "G_Range", PVarSet[39]);

    if(PVarSet[40]) SetPVarInt(playerid, "NOS", PVarSet[40]);
	else DeletePVar(playerid, "NOS");

	if(PVarSet[47]) SetPVarInt(playerid, "Fuvarok", PVarSet[47]);
	if(PVarSet[50]) SetPlayerWalkingStyle(playerid, PVarSet[50]);
    if(PVarSet[51]) SetPVarInt(playerid, "ChatColor", PVarSet[51]);

	// Némítás & Fagyasztás
	if(PVarSet[62]) SetPVarInt(playerid, "FalloutWon", PVarSet[62]);
	if(PVarSet[63]) SetPVarInt(playerid, "Muted", PVarSet[63]);
	if(PVarSet[64]) SetPVarInt(playerid, "FreezeTime", PVarSet[64]);

	if(!IsBlack(PVarSet[44])) SetPVarInt(playerid, "IDColor", PVarSet[44]);

	SetPVarInt(playerid, "HydType", iHydType);
	SetPVarFloat(playerid, "SpinX", Spin[0]);
	SetPVarFloat(playerid, "SpinY", Spin[1]);
	SetPVarFloat(playerid, "SpinZ", Spin[2]);

	switch(PVarSet[42])
	{
		case -1: SetPVarInt(playerid, "LaserPointer", Lasers[random(sizeof(Lasers))]);
		case 0: DeletePVar(playerid, "LaserPointer");
		default: SetPVarInt(playerid, "LaserPointer", PVarSet[42]);
	}

	// Death Pos
	if(PVarSet[25] == 4 && V[0] != 0.0)
	{
		// printf("V[0] = %f | V[1] = %f | V[2] = %f", V[0], V[1], V[2]);
		SetPVarFloat(playerid, "DeathX", V[0]);
		SetPVarFloat(playerid, "DeathY", V[1]);
		SetPVarFloat(playerid, "DeathZ", V[2]);
        SetPVarFloat(playerid, "DeathA", DeathA);
		SetPVarInt(playerid, "DeathInt", PVarSet[52]);
		SetPVarInt(playerid, "DeathWorld", PVarSet[53]);
	}

	// Saved Pos
	if(X != -1 && Y != -1)
	{
		SetPVarFloat(playerid, "PosX", X);
		SetPVarFloat(playerid, "PosY", Y);
		SetPVarFloat(playerid, "PosZ", Z);
		SetPVarInt(playerid, "PosInt", PVarSet[14]);
		SetPVarInt(playerid, "PosWorld", PVarSet[15]);
		SetPVarFloat(playerid, "PosAngle", Angle);
	}

	// Config
	if(PVarSet[19] != 0) SetPVarInt(playerid, "AutoRepair", PVarSet[19]);
	else SetPVarInt(playerid, "AutoRepair", 0);

	if(Health != 0.0) SetPVarFloat(playerid, "VehicleboostValue", Health);
	else DeletePVar(playerid, "VehicleboostValue");

	if(Armour != 0.0) SetPVarFloat(playerid, "VehicleHopping", Armour);
	else DeletePVar(playerid, "VehicleHopping");

    if(PVarSet[32] != 0) SetPVarInt(playerid, "MaxKillStreak", PVarSet[32]);

	if(PVarSet[23] != -1)
	{
		new
		    Ora = PVarSet[23] / 60;
		SetPVarInt(playerid, "PlayerTime_Hour", Ora);
		SetPVarInt(playerid, "PlayerTime_Minute", PVarSet[23] - (Ora * 60));
	}

	if(PVarSet[45]) SetPVarInt(playerid, "FlagTime", PVarSet[45]);
	if(PVarSet[46]) SetPVarInt(playerid, "bCarTime", PVarSet[46]);

	if(PVarSet[33] != 0xFF) SetPVarInt(playerid, "PlayerWeather", PVarSet[33]);

	// Gombok
	SetPVarInt(playerid, "SpeedBoostKey", PVarSet[34]);
	SetPVarInt(playerid, "VehicleHoppingKey", PVarSet[35]);
	SetPVarInt(playerid, "FlipKey", PVarSet[36]);
	SetPVarInt(playerid, "TeleportMenuKey", PVarSet[65]);
	SetPVarInt(playerid, "CarFlyKey", PVarSet[66]);
	SetPVarInt(playerid, "FlyKey", PVarSet[67]);

	foreach(houseid: houses)
	{
		if(PlayerInfo[playerid][pRegID] != GetGVarInt("PropOwnerRegID", houseid)) continue;

		SetPVarInt(playerid, "PlayerProp", houseid);
		break;
	}

	foreach(houseid: biznis)
	{
		if(PlayerInfo[playerid][pRegID] != GetGVarInt("BizOwnerRegID", houseid)) continue;

		SetPVarInt(playerid, "PlayerBiz", houseid);
		break;
	}

	for(i = 0; i != 50; i++)
	{
        if(!aHorseShoes[i]) continue;
		Bit_Let(g_pHorseshoes[playerid], i);
	}
	for(i = 0; i != 50; i++)
	{
		if(!aOysters[i]) continue;
		Bit_Let(g_pOysters[playerid], i);
	}
	for(i = 0; i != 50; i++)
	{
        if(!aPhotos[i]) continue;
		Bit_Let(g_pPhotos[playerid], i);
	}

	for(i = 0; i != 70; i++)
	{
		if(!aJumps[i]) continue;
		Bit_Let(g_pJumps[playerid], i);
	}
	for(i = 0; i != 100; i++)
	{
		if(!aTags[i]) continue;
		Bit_Let(g_pTags[playerid], i);
	}

	#if defined YSF
	if(/*PVarSet[0] == 4 && */IsFOOwner(playerid)) // Ha tulaj, akkor rögtön RCON adminnak állítása
	{
		SetPlayerAdmin(playerid, true);
	}
	#endif

	if(g_PlayerFlags[playerid] & e_GOD)
	    SetGoodAllowed(playerid, true);

	ToggleHouseIcons(playerid, !!(g_PlayerFlags2[playerid] & e_HOUSE_ICONS));
	ToggleBiznisIcons(playerid, !!(g_PlayerFlags2[playerid] & e_BIZNIS_ICONS));
    ToggleRaceIcons(playerid, !!(g_PlayerFlags2[playerid] & e_RACE_ICONS));
    
    //Hud beállítása
	if(g_PlayerFlags2[playerid] & e_HUD) TogglePlayerWidescreen(playerid, bool:true);

	new count;
    foreach(clans, clanid)
	{
		if(g_ClanFlags{clanid} & e_CLAN_ACTIVE) continue;
		count++;
	}
	if(count != 0 && IsOwner(playerid)) SendClientMessagef(playerid,-1,"*** Jelenleg %d megerõsítetlen klán van! Megtekintés: /aclans", count);

	// printf("LoginPlayer(playerid = %s(%d), len = %d, tick = %d) <END>");
    // SendClientMessagef(playerid, COLOR_WHITE, LANG(playerid, "MSG_LOGINPLAYERPLAYERID___TICK"), pName(playerid), playerid, GetTickCount() - iTick1);
	// printf("Success Login");
	if(!PVarSet[27])
	{
		SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
		return 1;
	}
	SetPlayerColor(playerid, PVarSet[27]);
	SetPVarInt(playerid, "Color", PVarSet[27]);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// Üres üzenetet nem lehet elküldeni a hibák elkerülése végett
	if(isnull(text)) return 0;

    if(IPCheck(playerid, text, "chat"))
		return 0;

	if(++PlayerInfo[playerid][pMSGCount] > MAX_FLOOD)
	{
		Kick(playerid);
		return 0;
	}
	
	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	getdate(year, month, day);
	gettime(hour, minute, second);

	new
	    pLevel = GetPVarInt(playerid, "Level"),
	    len = strlen(text),
	    bool:bIsRCON = !!IsPlayerAdmin(playerid),
		hexcount,
		colors,
	    numbCount;

	if(pLevel < 4 && !bIsRCON)
	{
	    for(new i; i != sizeof(g_szTiltottSzavak2); i++) if(strfind(text, g_szTiltottSzavak2[i], true) != -1) return 0;
	}
	/////////////////////////////////////
	if(!(g_PlayerData[playerid] & e_TIMESSPAWNED) && pLevel < 4 && !bIsRCON)
	{
 		InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEM_VAGY_LESPAWNOLVA"));
        return 0;
	}

    if(!(g_PlayerData[playerid] & e_LOGGED_IN))
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEM_VAGY_BEJELENTKEZVENBJ"));
	 	return 0;
    }

	if((g_PlayerData[playerid] & e_AFK) && pLevel < 4 && !bIsRCON)
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_AFKBAN_NEM_IRHATSZ_A_CHATBE"));
		return 0;
	}

	if(GetPVarType(playerid, "Muted"))
	{
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEMITVA_VAGY__MASODPERCIG"), GetPVarInt(playerid, "Muted"));
	 	return 0;
    }

	if(text[0] == '#' && (pLevel || bIsRCON) && len > 1)
	{
		mysql_escape_string(text[1], tmp);
		mysql_format(1, query, sizeof(query), "INSERT INTO `adminchat`(ID, player, reg_id, msg, time) VALUES(0, '%s', %d, '%s', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], tmp, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");

		if(len > 87)
		{
			new
				szString[128 + 1],
				szString2[128 + 1];

			strcat(szString, text[1], sizeof(szString));
		    strmid(szString2, szString, 87, len); // Belerakjuk a string2-be a végit
			strdel(szString, 87, len);

			if(GetPVarType(playerid, "FakeAdmin"))
			{
	            format(tmp, 144, "Admin Chat: FakeAdmin: %s", szString);
	            format(i_str, sizeof(i_str), "Admin Chat: FakeAdmin: %s", szString2);
			}
			else
			{
				format(tmp, 144, "Admin Chat: {%06x}%s(%d){" #XCOLOR_GREEN "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(szString));
				format(i_str, sizeof(i_str), "Admin Chat: {%06x}%s(%d){" #XCOLOR_GREEN "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(szString2));
			}

			foreach(new i: Player)
			{
				if(!GetPVarInt(i, "Level") && !IsPlayerAdmin(i)) continue;
				SendClientMessage(i, COLOR_GREEN, tmp);
				SendClientMessage(i, COLOR_GREEN, i_str);
			}
		}
		else
		{
			new bool:bFakeAdmin;
			if((bFakeAdmin = !!GetPVarType(playerid, "FakeAdmin")))
			{
				format(tmp, 144, "Admin Chat: {%06x}%s(%d){" #XCOLOR_GREEN "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
				format(text, 144, "Admin Chat: FakeAdmin: %s", ColouredText(text[1]));
			}
			else
			{
				format(text, 144, "Admin Chat: {%06x}%s(%d){" #XCOLOR_GREEN "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
			}

			new level;
			foreach(new i: Player)
			{
				if(!(level = GetPVarInt(i, "Level"))) continue;

				if(level < 4 && !IsPlayerAdmin(i))
				{
					SendClientMessage(i, COLOR_GREEN, text);
				}
				else
				{
                    SendClientMessage(i, COLOR_GREEN, (bFakeAdmin) ? (tmp) : (text));
				}
			}
		}

		session[messages] ++;
		PVarIntFel(playerid, "Posts");
		return 0;
	}

	//else if(text[0] == '>' && IsFOOwner(playerid) && len > 1)
	else if(text[0] == '>' && (pLevel == 4 || bIsRCON) && len > 1)
	{
		mysql_escape_string(text[1], tmp);
		mysql_format(1, query, sizeof(query), "INSERT INTO `adminchat`(ID, player, reg_id, msg, type, time) VALUES(0, '%s', %d, '%s', 4, '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], tmp, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");

		if(len > 87)
		{
			new
				szString[128 + 1],
				szString2[128 + 1];

			strcat(szString, text[1], sizeof(szString));
		    strmid(szString2, szString, 87, len); // Belerakjuk a string2-be a végit
			strdel(szString, 87, len);

            format(tmp, 144, "<<->>: {%06x}%s(%d){" #XCOLOR_DEFAULT "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(szString));
            format(i_str, sizeof(i_str), "<<->>: {%06x}%s(%d){" #XCOLOR_DEFAULT "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(szString2));

			foreach(new i: Player)
			{
				//if(!IsFOOwner(i)) continue;
				if(GetPVarInt(i, "Level") != 4 && !IsPlayerAdmin(i)) continue;
				SendClientMessage(i, COLOR_SAMP, tmp);
				SendClientMessage(i, COLOR_SAMP, i_str);
			}
		}
		else
		{
            format(text, 144, "<<->>: {%06x}%s(%d){" #XCOLOR_DEFAULT "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));

			foreach(new i: Player)
			{
				//if(!IsFOOwner(i)) continue;
				if(GetPVarInt(i, "Level") != 4 && !IsPlayerAdmin(i)) continue;
				SendClientMessage(i, COLOR_SAMP, text);
			}
		}

        session[messages] ++;
		PVarIntFel(playerid, "Posts");
	    return 0;
	}

	else if(text[0] == '!' && len > 1)
	{
		new
		    pTeam = GetPlayerTeam(playerid);
		if(g_pGamesData[playerid] & e_IN_GANGWAR)
		{
			new
			    color = GetGangwarZoneColorByTeam(pTeam);
			switch(pTeam)
			{
				case TEAM_GROVE: name = "Grove";
				case TEAM_BALLAS: name = "Ballas";
				case TEAM_VAGOS: name = "Vagos";
				case TEAM_AZTECAS: name = "Aztecas";
			}

			format(tmp, 154, "%s: <{%06x}%s(%d){%06x}>: %s", name, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, color >>> 8, ColouredText(text[1]));
			foreach(new i: Player)
			{
				if(g_pGamesData[i] & e_IN_GANGWAR)
				{
					if(GetPlayerTeam(i) != pTeam) continue;
					SendClientMessage(i, color, tmp);
				}
			}

			session[messages] ++;
			PVarIntFel(playerid, "Posts");
			return 0;
		}
		else if(g_pGamesData[playerid] & e_IN_CTC)
		{
			format(tmp, 154, "TeamChat: <{%06x}%s(%d){" #XCOLOR_DEFAULT "}>: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
			foreach(new i: Player)
			{
				if(g_pGamesData[i] & e_IN_CTC)
				{
					if(GetPlayerTeam(i) != pTeam) continue;
					SendClientMessage(i, COLOR_DEFAULT, tmp);
				}
			}

			session[messages] ++;
			PVarIntFel(playerid, "Posts");
			return 0;
		}
		else if(g_pGamesData[playerid] & e_IN_TRUCKING)
		{
			mysql_escape_string(text[1], tmp);
			mysql_format(1, query, sizeof(query), "INSERT INTO `chat_t`(ID, player, reg_id, msg, time) VALUES(0, '%s', %d, '%s', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], tmp, year, month, day, hour, minute, second);
			mysql_function_query(1, query, false, "", "");

			format(text, 144, "TRUCKING: <{%06x}%s(%d){" #XCOLOR_BLUE2 "}>: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
			foreach(new i: Player)
			{
				if(!GetPVarType(i, "Trucking")) continue;
				SendClientMessage(i, COLOR_BLUE2, text);
			}

			session[messages] ++;
			PVarIntFel(playerid, "Posts");
			return 0;
		}
		else if(g_pGamesData[playerid] & e_POSTAS)
		{
			format(text, 144, "POSTA: <{%06x}%s(%d){" #XCOLOR_BLUE3 "}>: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
			foreach(new i: Player)
			{
				if(!(g_pGamesData[i] & e_POSTAS)) continue;
				SendClientMessage(i, COLOR_BLUE3, text);
			}
			PVarIntFel(playerid, "Posts");
			return 0;
		}
		else if(g_pGamesData[playerid] & e_PIZZAS)
		{
			format(text, 144, "PIZZA: <{%06x}%s(%d){" #XCOLOR_BLUE3 "}>: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
			foreach(new i: Player)
			{
				if(!(g_pGamesData[i] & e_PIZZAS)) continue;
				SendClientMessage(i, COLOR_BLUE2, text);
			}

			session[messages] ++;
			PVarIntFel(playerid, "Posts");
			return 0;
		}

		new
		    pDMZone = g_pDeathMatchID[playerid],
		    team;
		if(pDMZone != -1)
		{
			if((team = g_pDeathMatchTeam[playerid]) != -1)
			{
				format(text, 144, "Team: <{%06x}%s(%d){" #XCOLOR_DEFAULT "}>: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, ColouredText(text[1]));
				foreach(new i: Player)
				{
					if(g_pDeathMatchTeam[i] != team) continue;
					SendClientMessage(i, COLOR_RED, text);
				}

				session[messages] ++;
				PVarIntFel(playerid, "Posts");
			}
			return 0;
		}
	}
	else if(text[0] == '=' && g_pClan{playerid} != 0xFF)
	{
		new
		    clanid = g_pClan{playerid};

		format(tmp, 144, "CLAN: {%06x}%s(%d){" #XCOLOR_BLUE3 "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, text[1]);
		foreach(Player, i)
		{
		    if(g_pClan{i} != clanid) continue;
		    if(g_pChatMSGFlags[i] & e_ClanChat_MSG) continue;
			SendClientMessage(i, -1, tmp);
		}
		format(tmp, 144, "%s: {%06x}%s(%d){" #XCOLOR_BLUE3 "}: %s", gClanName[clanid], GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, text[1]);
		foreach(Player, i)
		{
		    //if(!IsFOOwner(i)) continue;
		    if(!(g_PlayerFlags2[i] & e_SHOW_CLAN_MSG)) continue;
		    if(g_pClan{i} == clanid) continue;
		    if(g_pChatMSGFlags[i] & e_ClanChat_MSG) continue;
		    SendClientMessage(i, 0x439BED, tmp);
  		}

        session[messages] ++;
		PVarIntFel(playerid, "Posts");

	    getdate(year, month, day);
		gettime(hour, minute, second);
	   	mysql_escape_string(text[1], i_str);
		format(query, sizeof(query), "INSERT INTO `chat_clans`(ID, player, reg_id, clan, clanid, msg, time) VALUES(0, '%s', %d, '%s', %d, '%s', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], gClanName[clanid], clanid, i_str, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");
		return 0;
	}
	else if(text[0] == '@' && len > 1)
	{
		new
		    iLastPM = GetPVarInt(playerid, "lastPMer");
  		//printf("lastpmid %d",iLastPM);
		switch(iLastPM)
	    {
	        case INVALID_PLAYER_ID:
			{
			    SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_A_JATEKOS_AKI_UTOLJARA_KULDOTT"));
			    return 0;
			}
			default:
			{
				if(text[1] == ' ')
				{
			 		format(text, 256, "%d %s", iLastPM, text[2]);
				}
				else
				{
				    format(text, 256, "%d %s", iLastPM, text[1]);
				}
				//strcpy(text, "asd ");
				cmd_pm(playerid, text);
				return 0;
			}
		}
	}
	else if(text[0] == '$' && g_pVIP[playerid] && len > 1)
	{
		format(tmp, 144, "VIP: {%06x}%s(%d){" #XCOLOR_BLUE3 "}: %s", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, text[1]);
		foreach(Player, i)
		{
		    if(g_pVIP[i]) SendClientMessage(i, -1, tmp);
		}

        session[messages] ++;
		PVarIntFel(playerid, "Posts");

	    getdate(year, month, day);
		gettime(hour, minute, second);
	   	mysql_escape_string(text[1], i_str);
		format(query, sizeof(query), "INSERT INTO `chat_vip`(id, reg_id, player, msg, time) VALUES(0, '%d','%s','%s','%02d.%02d.%02d/%02d.%02d.%02d')",
	 	PlayerInfo[playerid][pRegID],pName(playerid),i_str,year, month, day, hour, minute, second);

		mysql_function_query(1, query, false, "", "");
		return 0;
	}


	new
		iEggyezik[128 + 1],
		szMessage[128 + 1],
		len2;
	strcat(szMessage, text, 128);
	if(pLevel < 3 && !bIsRCON)
	{
		// Pár speciális szó tiltása lowok miatt..
		if(/*strfind(text, "cheat", true) != -1 || strfind(text, "csít", true) != -1 || strfind(text, "hack", true) != -1
			|| strfind(text, "sobeit", true) != -1 || strfind(text, "s0beit", true) != -1
			|| strfind(text, "airbreak", true) != -1 || strfind(text, "airbrake", true) != -1 || strfind(text, "mure", true) != -1
			|| */strfind(text, "wses", true) != -1 || strfind(text, "ws-es", true) != -1  || strfind(text, "ws.es", true) != -1)
		{
			//SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_HA_CSALOT_LATSZ_JELENTSD_A"));
			return 0;
		}
		/*
		if(strfind(text, "kurta", true) != -1)
		{
			SendClientMessage(playerid, COLOR_SAMP, LANG(playerid, "MSG_NEM__1"));
			return 0;
		}
*/
		for(new i; i < len-1; )
		{
			// Ha található benne #RRGGBB részlet, akkor azt átlépjük
	        hexcount = 0;
			if(szMessage[i] == '#')
			{
				for(new j = 1; j != 7; j++)
				{
					if(IsValidHex(szMessage[i + j]))
						hexcount++;
				}

				if(hexcount == 6)
				{
	                i += 4;
	                colors++;
				}
			}

			if('0' <= szMessage[i] <= '9') numbCount ++;

			new
				x = i;

			while(szMessage[i] == szMessage[x])
			{
				iEggyezik[i]++;
				if(++x >= 128) break;
			}

		    //x += bEggyezik[i];
			if(iEggyezik[i] > 3)
			{
				//printf("while: %d, %c, %d, %d", bEggyezik[i], string[i], (x - bEggyezik[i]) + 3, x);

				new
				    start = (x - iEggyezik[i]) + 3; // Kivonjuk az x-bõl az eggyezett karakterek számát, így megkapjuk, hogy honanntól kezdõdik. Ehhez hozzáadunk 3-at, mivel nekünk csak az elsõ három kell.
				strdel(szMessage, start, x); // Letöröljük az elsõ három betû és az utolsó eggyezõ betû következtéig.
				//print(string);
				iEggyezik[i] = 3; // Csak három karakter eggyezik, mivel a többit törültük.
				//break;
			}
		    i += iEggyezik[i]; // "i" változó értékét továbbléptessük anynival, amennyi karakter eggyezik.
		}

		len2 = strlen(szMessage);
	}
	else
	{
        len2 = len;
	}

    if(pLevel == 4)
    {
		if(GetPVarType(playerid, "BuildHouseID"))
		{
			if(!strcmp(text, "igen", true, 4))
		    {
                new maxid, iWorld, Float:fScanRange;
				sscanf(text, "{s[8]}F(5.0)", fScanRange); // Scan range megadható, mert pár interiorhoz az 5.0 nem elég
				//printf("scanrange: %f", fScanRange);

			    houseid = GetPVarInt(playerid, "BuildHouseID");
				GetPlayerPos(playerid, X, Y, Z);
		        GetPlayerFacingAngle(playerid, Angle);

				FindFreeHouseWorld(playerid, maxid, iWorld, fScanRange);
				SetPlayerVirtualWorld(playerid, iWorld);

				new
				    iInterior = GetPlayerInterior(playerid);
				SetGVarFloat("InX", X, houseid);
				SetGVarFloat("InY", Y, houseid);
				SetGVarFloat("InZ", Z, houseid);
				SetGVarFloat("InA", Angle, houseid);

		        SetGVarInt("Interior", iInterior, houseid);
		        SetGVarInt("VirtualWorld", iWorld, houseid);

				// Ház 3D Text, Map Icon és pickup adatjainak felújítása
				UpdateHouse(houseid);

				ShowWelcomef(playerid, LANG(playerid, "MSG_HAZ_BELSO_KORDINATAI_LEMENTVE"), iWorld);

				DeletePVar(playerid, "BuildHouseID");

				mysql_format(1, query, sizeof(query), "UPDATE `houses` SET `in_x` = %f, `in_y` = %f, `in_z` = %f, `in_angle` = %f, `interior` = %d, `virtualworld` = %d WHERE `id` = %d", X, Y, Z, Angle, iInterior, iWorld, houseid);
				mysql_function_query(1, query, false, "", "");
				return 0;
		    }
			else if(!strcmp(text, "nem"))
			{
			    ShowWelcome(playerid, LANG(playerid, "MSG_MEGSZAKITVA"));
                DeletePVar(playerid, "BuildHouseID");
				return 0;
			}
		}
	}

 if(strfind(text, "rcon login", true) != -1)
		return 0;

	if(strfind(text, "/q", true) != -1)
		return 0;

    if(strfind(text, "/ q", true) != -1)
		return 0;

	if(!strcmp(text, g_szReactionStr) && g_szReactionStr[0])
	{
		switch(g_iReactionActive)
		{
			case 1:
			{
				ReactionWin(playerid);
			}
			case 2:
			{
				if(g_iReactionWinner == playerid)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_EZT_A_TESZTET_MAR_MEGNYERTED"));
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, LANG(playerid, "MSG_LASSU_VAGY_"));
				}
			}
		}
	}

    if(!(pLevel == 4 || bIsRCON))
    {
		new
			szStripped[128],
			szOutput[128],
			x;
		strcat(szStripped, text, sizeof(szStripped));
		for(new i; i != len2; i++)
		{
	        szStripped[i] |= 0x20;
			if(!('a' <= szStripped[i] <= 'z') && !('0' <= szStripped[i] <= '9')) continue;
			szOutput[x++] = szStripped[i];
		}

		GetPVarString(playerid, "LastMSG", i_str, sizeof(i_str));
		if(i_str[0] && szOutput[0])
		{
			if(!strcmp(szOutput, i_str, true))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG__NE_IRD_LE_EGYMAS_UTAN_UGYANAZT"));
				return 0;
			}
			SetPVarString(playerid, "LastMSG", szOutput);
		}
	}

    session[messages] ++;
	PVarIntFel(playerid, "Posts");

	mysql_format(1, query, sizeof(query), "INSERT INTO `chat`(ID, player, reg_id, msg, time) VALUES(0, '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(playerid), PlayerInfo[playerid][pRegID], text, year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");
/*
	format(tmp, 192, "02[%d] 07%s: %s", playerid, pName(playerid), text);
	IRC_GroupSay(groupID, IRC_CHANNEL, tmp);
*/

	// Ha DM-ben van, akkor nem mutatjuk a feje fölött a beírt szöveget
	if(!(g_pGamesData[playerid] & e_IN_DM))
	{
		SetPlayerChatBubble_(playerid, text, COLOR_RED, 20.0, 5000);
	}

	if(len2 > 87)
	{
		new
			iSpace = -1;
//			pChatColor = GetPVarInt(playerid, "ChatColor");

		for(new i = 70; i != 90; i++)
		{
			if(szMessage[i] == ' ')
			{
		    	iSpace = i;
            	break;
			}
		}
		if(iSpace == -1) iSpace = 87;

	    strmid(i_str, szMessage, iSpace, len2); // Belerakjuk a string2-be a végit
		strdel(szMessage, iSpace, len2);
	}


	new
		color = GetPlayerColor(playerid),
		chatcolor = GetPVarInt(playerid, "ChatColor"),
		vipcolor = GetPVarInt(playerid, "VIPColor");
	if(GetPVarType(playerid, "IDColor"))
	{
	    if(g_pVIP[playerid] && g_PlayerFlags2[playerid] & e_VIP_TEXT && vipcolor != 0)
	    {
	        format(tmp, 256, "{%06x}[VIP] {%06x}%s{%06x}(%d): {%06x}%s",vipcolor>>> 8, color >>> 8, pName(playerid), GetPVarInt(playerid, "IDColor") >>> 8, playerid, chatcolor >>> 8, ColouredText(szMessage));
	    }
	    else
	    {
			format(tmp, 256, "%s{%06x}(%d): {%06x}%s", pName(playerid), GetPVarInt(playerid, "IDColor") >>> 8, playerid, chatcolor >>> 8, ColouredText(szMessage));
		}
	}
	else
	{
 		if(g_pVIP[playerid] && g_PlayerFlags2[playerid] & e_VIP_TEXT && vipcolor != 0)
	    {
	        format(tmp, 256, "{%06x}[VIP] {%06x}%s(%d): {%06x}%s", vipcolor>>> 8, color >>> 8, pName(playerid), playerid, chatcolor >>> 8, ColouredText(szMessage));
	    }
	    else
	    {
			format(tmp, 256, "%s(%d): {%06x}%s", pName(playerid), playerid, chatcolor >>> 8, ColouredText(szMessage));
		}
	}
	foreach(Player, i)
	{
		if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
		SendClientMessage(i, color, tmp);
	}

    if(len2 > 87)
    {
		foreach(Player, i)
		{
			if(Bit_Get(g_pChatIgnoreList[i], playerid)) continue;
			SendClientMessage(i, chatcolor, i_str);
		}
	}
	return 0;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    session[commands] ++;
	//printf("%s(%d) -> %s", pName(playerid), playerid, cmdtext);

	if(++PlayerInfo[playerid][pMSGCount] > MAX_FLOOD)
	{
        Kick(playerid);
		return 0;
	}

	if(IsPlayerNPC(playerid)) return 1;
	// Utolsó tevékenység idejének frissítése
    g_pLastActiveTick[playerid] = GetTickCount();

	new
	    bool:bReturn,
	    bool:bDMCommand;
    if((!(g_PlayerData[playerid] & e_LOGGED_IN)) && !bReturn && !(g_pOtherFlags[playerid] & e_RAKSAMP))
	{
		if(strcmp(cmdtext, "/login", true, 6) != 0 && strcmp(cmdtext, "/sqlreconnect", true, 13) != 0 && strcmp(cmdtext, "/aka", true, 4) != 0)
		{
			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEM_VAGY_BEJELENTKEZVE"));
            bReturn = true;
            printf("1");
		}
    }

	if(IsPlayerInDynamicArea(playerid, gDamZone))
	{
	    if(strcmp(cmdtext, "/kill", true, 9) != 0)
		{
 			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
		    bReturn = true;
	    }
	}

    if(GetPVarType(playerid, "JailTime") && !bReturn)
	{
		if(strcmp(cmdtext, "/jailtime", true) != 0 && strcmp(cmdtext, "/unjail", true, 7) != 0 && strcmp(cmdtext, "/stop", true, 5) != 0 && strcmp(cmdtext, "/spawnplace", true) != 0 && strcmp(cmdtext, "/help", true, 5) && strcmp(cmdtext, "/cmds", true, 5) && strcmp(cmdtext, "/radio", true, 6) && strcmp(cmdtext, "/musiclist", true, 10))
		{
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHBORTONBE_VAGY_ZARVA_W_R"), GetPVarInt(playerid, "JailTime"));
		 	bReturn = true;
		 	printf("2");
		}
    }

	if(GetPVarType(playerid, "FreezeTime") && !bReturn)
    {
		if(strcmp(cmdtext, "/unfreeze", true, 9) != 0)
		{
		    InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHFAGYASZTVA_VAGY_W_RHMA"), GetPVarInt(playerid, "FreezeTime"));
		 	bReturn = true;
		 	printf("3");
		}
    }

	if(!(g_PlayerData[playerid] & e_TIMESSPAWNED) && !bReturn && !(g_pOtherFlags[playerid] & e_RAKSAMP))
	{
		if(strcmp(cmdtext, "/spawn", true) != 0 && strcmp(cmdtext, "/uptime", true) != 0 && strcmp(cmdtext, "/serverinfo", true) != 0)
		{
	    	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEM_VAGY_LESPAWNOLVA_YHNE"));
			bReturn = true;
			printf("4");
		}
	}

 	if(GetPVarType(playerid, "Muted") && !bReturn)
	{
		if(strcmp(cmdtext, "/unmute", true, 7) != 0 && strcmp(cmdtext, "/stop", true, 5) != 0)
		{
			InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHNEMITVA_VAGY_W_RHMASOD"), GetPVarInt(playerid, "Muted"));
		 	bReturn = true;
		 	printf("5");
		}
	}

	if(!bReturn)
	{
		// DM parancsok lefuttatása
		foreach(DeathMatches, i)
		{
			if(!(g_DMFlags[i] & e_COMPLETED)) continue;
			if(!strcmp(cmdtext, g_szDMCommand[i], true))
	        {
				if(g_DMFlags[i] & e_IS_TDM)
				{
	                ShowDMJoinDialog(playerid, i);
					SetPVarInt(playerid, "NoBack", 1);
					SetPVarInt(playerid, "DMSelect", i);
				}
				else
				{
	                JoinPlayerToDM(playerid, i, -1);
				}
				bReturn = true;
				bDMCommand = true;
				break;
			}
		}
		// Teleport parancsok lefuttatása
		foreach(Teleports, i)
		{
		    if(!strcmp(cmdtext, g_szTeleportCommand[i], true))
	        {
	            if(strfind(g_szTeleportCommand[i], "/rendvc", true) != -1 || strfind(g_szTeleportCommand[i], "/vcmarscafe", true) != -1 || strfind(g_szTeleportCommand[i], "/vcstadium", true) != -1 || strfind(g_szTeleportCommand[i], "/vcgolf", true) != -1 || strfind(g_szTeleportCommand[i], "/vcbeach", true) != -1 || strfind(g_szTeleportCommand[i], "/oceanview", true) != -1)
			    {
			         /*if(!IsClient(playerid))
					 {
					 	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_KLIENS_SZUKSEGES"));
					 	bReturn = true;
					 	//printf("222222222222");
					 	//return 1;
					 }
			         else
			         {*/
	                	SQLTeleport(playerid, g_szTeleportMSG[i], g_szTeleportCommand[i], g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2], g_TeleportPos[i][3], g_TeleportInterior[i], g_TeleportWorld[i]);
		            	bReturn = true;
		            	bDMCommand = true;
		            	break;
			         //}
			    }
			    else
			    {
       				SQLTeleport(playerid, g_szTeleportMSG[i], g_szTeleportCommand[i], g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2], g_TeleportPos[i][3], g_TeleportInterior[i], g_TeleportWorld[i]);
       				bReturn = true;
		           	bDMCommand = true;
	            	break;
       			}
			}
		}
	}
	if((g_ServerFlags & e_TELEPORT)/* && !bReturn*/)
	{
		if(!strcmp(cmdtext, g_szTeleStr, true))
		{
			if(!NoTele(playerid))
			{
       			if(strfind(g_szTeleStr, "/rendvc", true) != -1 || strfind(g_szTeleStr, "/vcmarscafe", true) != -1 || strfind(g_szTeleStr, "/vcstadium", true) != -1 || strfind(g_szTeleStr, "/vcgolf", true) != -1 || strfind(g_szTeleStr, "/vcbeach", true) != -1 || strfind(g_szTeleStr, "/oceanview", true) != -1)
    			{
			         if(!IsClient(playerid)) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_KLIENS_SZUKSEGES"));
			    }
				new
					iTick = GetTickCount() - g_iTeleTime;
		        session[wins][2] ++;

				GivePlayerMoneyEx(playerid, 7000, "TeleTest");
				GivePlayerXP(playerid, XP_TELEPORT);

				PVarIntFel(playerid, "Teles");

				foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_TeleTest_MSG) continue;
					SendClientMessagef(i, 0x63DCF1AA, LANG(i, "MSG__TELETESZT___NYERTE_MEG_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, (float(iTick) / 1000));
				}
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YHGRATULALOKNBHHMEGNYER"));

                g_ServerFlags &= ~e_TELEPORT;

				getdate(year, month, day);
				gettime(hour, minute, second);
				mysql_format(1, query, sizeof(query), "INSERT INTO `teletests`(id, reaction, winner, winner_regid, speed, time) VALUES(0, '%s', '%s', %d, %.3f, '%02d.%02d.%02d/%02d.%02d.%02d')", g_szTeleStr, pName(playerid), PlayerInfo[playerid][pRegID], (float(iTick) / 1000), year, month, day, hour, minute, second);
				mysql_function_query(1, query, false, "", "");

				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `teles` = `teles` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				mysql_function_query(1, query, false, "", "");
			}
		}
    }

	getdate(year, month, day);
	gettime(hour, minute, second);
	mysql_format(1, query, sizeof(query), "INSERT INTO `commands`(ID, player, reg_id, cmd, time) VALUES(0, '%s', %d, '%e', %d)", pName(playerid), PlayerInfo[playerid][pRegID], cmdtext, CurrentTimestamp());
	mysql_function_query(1, query, false, "", "");

	if(bReturn)
	{
		// Pár speciális parancs rejtése az adminok által, hogy ne tudják a látszó parancsokkal olvasni õket
	    if(!strcmp(cmdtext, "/pm ", true, 4) || !strcmp(cmdtext, "/c ", true, 3) || !strcmp(cmdtext, "/su ", true, 4) || !strcmp(cmdtext, "/sh ", true, 4) || !strcmp(cmdtext, "/adminlogin ", true, 12) || !strcmp(cmdtext, "/dir", true, 4) || !strcmp(cmdtext, "/getdata ", true, 8) || !strcmp(cmdtext, "/setconmsg ", true, 11))
			return 0;

		new
		    iLevel,
		    pLevel = GetPVarInt(playerid, "Level"),
		    pColorRGB = GetPlayerColor(playerid) >>> 8;

		foreach(new i: Player)
		{
			if(!(g_PlayerFlags[i] & e_READCMDS)) continue;
			if((iLevel = GetPVarInt(i, "Level")) >= pLevel && iLevel > 0 && i != playerid)
			{
			    if(IsFOOwner(playerid) && !IsFOOwner(i)) continue;
				SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_CMD_USED"), (bDMCommand) ? ("true") : ("false"), pColorRGB, pName(playerid), playerid, cmdtext);
			}
		}
		return 0;
	}
	return 1;
}

CMD:mez(playerid, params[], 0, 0) return OnPlayerCommandPerformed(playerid, !"/méz", true);
CMD:aranytojas(playerid, params[], 0, 0) return OnPlayerCommandPerformed(playerid, !"/aranytojás", true);
CMD:sor(playerid, params[], 0, 0) return OnPlayerCommandPerformed(playerid, !"/sör", true);
CMD:hajodm(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | GRAV | WORLDEDIT>) return OnPlayerCommandPerformed(playerid, !"/hajódm", true);
CMD:hazdm(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | GRAV | WORLDEDIT>) return OnPlayerCommandPerformed(playerid, !"/házdm", true);
CMD:haboru(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | GRAV | WORLDEDIT>) return OnPlayerCommandPerformed(playerid, !"/háború", true);

CMD:szoma(playerid, params[], 0, 0) return OnPlayerCommandPerformed(playerid, !"/szóma", true);
CMD:szinek(playerid, params[], 0, D:<GANGWAR | CTC>) return OnPlayerCommandPerformed(playerid, !"/színek", true);
CMD:colors(playerid, params[], 0, D:<GANGWAR | CTC>) return OnPlayerCommandPerformed(playerid, !"/színek", true);

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	// Pár speciális parancs rejtése az adminok által, hogy ne tudják a látszó parancsokkal olvasni õket
    if(!strcmp(cmdtext, "/pm ", true, 4) || !strcmp(cmdtext, "/c ", true, 3) || !strcmp(cmdtext, "/su ", true, 4) || !strcmp(cmdtext, "/sh ", true, 4) || !strcmp(cmdtext, "/adminlogin ", true, 12) || !strcmp(cmdtext, "/dir", true, 4) || !strcmp(cmdtext, "/getdata ", true, 8)	|| !strcmp(cmdtext, "/setconmsg ", true, 11))
		return 1;

	new
	    iLevel,
	    pLevel = GetPVarInt(playerid, "Level"),
	    pColorRGB = GetPlayerColor(playerid) >>> 8;

	foreach(new i: Player)
	{
		if(!(g_PlayerFlags[i] & e_READCMDS)) continue;
		if((iLevel = GetPVarInt(i, "Level")) >= pLevel && iLevel > 0 && i != playerid)
		{
		    if(IsFOOwner(playerid) && !IsFOOwner(i)) continue;
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_CMD_USED"), (success) ? ("true") : ("false"), pColorRGB, pName(playerid), playerid, cmdtext);
		}
	}
    if(IsPlayerInDynamicArea(playerid, gDamZone))
	{
	    if(strcmp(cmdtext, "/kill", true, 9) != 0)
		{
 			InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
 			return 1;
	    }
	}
//////////////////////////////
	if(!strcmp(cmdtext, !"/méz", true))
	{
        SPAM_CHECK(Mez, 8000)

		//SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SITTING);
	    SendClientMessageToAllf(COLOR_PINK, "MSG___UGY_SZERETI_A_MEZET_MINT", pColorRGB, pName(playerid), playerid);
		return 1;
	}

	if(!strcmp(cmdtext, !"/aranytojás", true))
	{
		if(!goldpot[gPickup]) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JELENLEG_NINCS_ELREJTVE_ARANYTOJAS"));

		new
			iTick = GetTickCount() - goldpot[gTick];
		strunpack(country, gHint[g_pLang{playerid}], 45);

		SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_JELENLEG_VAN_ARANYTOJAS_AMIT"), (float(iTick) / 1000));
		SendClientMessagef(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_HELY_"), country);
		return 1;
	}

	if(!strcmp(cmdtext, !"/sör", true))
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YADDIG_PIGYALNRHAMIG_HBI"));
		return 1;
	}

	if(!strcmp(cmdtext, !"/szóma", true))
	{
		NormalTeleEx(playerid, "Szóma Mászás", "szóma", -1826.5924, 549.5391, 35.1641, 299.9765);
		return 1;
	}

	if(!strcmp(cmdtext, !"/színek", true))
	{
        ShowPlayerDialogEx(playerid, DIALOG_COLORS, DIALOG_STYLE_LIST, "Színváltás", "{02B70C}Világoszöld\n{0B4B05}Sötétzöld\n{EE1604}Piros\n{4361EF}Világoskék\n\
		{132CD5}Sötétkék\n{FAFA01}Sárga\n{F58B0A}Narancssárga\n{57DB99}Kékeszöld\n{C0C0C0}Szürke\n{910000}Vérpiros\n{63DCF1}Fölhõkék\n{BE0EBA}Lila\n{663300}Barna\n\
		{FF66FF}Rózsaszín\nEgyedi Szín(Hex)", "Ok", "Mégse");
		return 1;
	}

	// Színváltó ( Elsõ Szkriptem :D )
	if(!((e_IN_GANGWAR | e_IN_CTC) & g_pGamesData[playerid]))
	{
		if(!strcmp(cmdtext, "/világoszöld", true)) return SetPlayerColor(playerid, 0x02B70C96);
		if(!strcmp(cmdtext, "/sötétzöld", true)) return SetPlayerColor(playerid, 0x0B4B0596);
		if(!strcmp(cmdtext, "/világoskék", true)) return SetPlayerColor(playerid, 0x4361EF96);
		if(!strcmp(cmdtext, "/sötétkék", true)) return SetPlayerColor(playerid, 0x132CD596);
		if(!strcmp(cmdtext, "/sárga", true)) return SetPlayerColor(playerid, 0xFAFA0196);
		if(!strcmp(cmdtext, "/narancssárga", true)) return SetPlayerColor(playerid, 0xF58B0A96);
		if(!strcmp(cmdtext, "/kékeszöld", true)) return SetPlayerColor(playerid, 0x57DB99966);
		if(!strcmp(cmdtext, "/szürke", true)) return SetPlayerColor(playerid, 0xC0C0C096);
		if(!strcmp(cmdtext, "/vérpiros", true)) return SetPlayerColor(playerid, 0x91000096);
		if(!strcmp(cmdtext, "/fölhõkék", true)) return SetPlayerColor(playerid, 0x63DCF196);
		if(!strcmp(cmdtext, "/lila", true)) return SetPlayerColor(playerid, 0xBE0EBA96);
		if(!strcmp(cmdtext, "/barna", true)) return SetPlayerColor(playerid, COLOR_BROWN);
		if(!strcmp(cmdtext, "/rózsaszín", true)) return SetPlayerColor(playerid, COLOR_BROWN);
		if(!strcmp(cmdtext, "/piros", true)) return SetPlayerColor(playerid, 0xEE160496);
	}
	// Ha még nem futott le, akkor már nem is fog...
	if(!success)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_RISMERETLEN_PARANCSW"), .time = 800);
		return 1;
	}
	return 1;
}

/* Commands */
CMD:help(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, DIALOG_HELP, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_HELP"));
	return 1;
}

CMD:viphelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_VIP_HELP"));
	return 1;
}

CMD:forumhelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_FORUM_HELP"));
	return 1;
}

CMD:hohelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_HO_HELP"));
	return 1;
}

CMD:vohelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_VO_HELP"));
	return 1;
}

CMD:bones(playerid, params[], 0, 0)
{
    dline[0] = EOS;
	for(new i; i != sizeof(g_szBones); i++)
	{
		strcat(dline, g_szBones[i]);
	    strcat(dline, "\n");
	}

	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_SAMP "}Testrészek...", dline, "Ok");
	return 1;
}

CMD:stop(playerid, params[], 0, 0)
{
    StopAudioStreamForPlayer(playerid);

	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHZENE_HMEGALLITVA"));
	return 1;
}

CMD:addmusic(playerid, params[], 0, 0)
{
	if(sscanf(params, "s[128]s[128]", i_str, tmp)) return SendUsage(playerid, "/addmusic <URL> <Név>");
	if(strlen(tmp) > 44) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_HULYE_VAGY_A_NEV_MAXIMUM"));

	if(strfind(i_str, "mfrserver.net/up/", true) == -1)
	//if(strfind(i_str, "188.226.147.231/up/", true) == -1)
	{
		SendClientMessage(playerid, COLOR_RED, "HIBA: Csak a szerver weboldalára feltöltött zenéket rakhatod be a zenelistába.");
		SendClientMessage(playerid, COLOR_RED, "HIBA: Ide töltsd fel a zenét, végül a megjelent linket add meg: {" #XCOLOR_WHITE "}" #WEB_ADDRESS "/upload.php");
		return 1;
	}

	mysql_format(1, query, sizeof(query), "INSERT INTO `musiclist`(`id`, `activated`, `reg_id`, `name`, `url`, `time`) VALUES (0, 0, %d, '%e', '%e', %d)", PlayerInfo[playerid][pRegID], tmp, i_str, CurrentTimestamp());
    mysql_function_query(1, query, true, "THREAD_MusicList_Insert", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_MusicList_Insert(playerid, queue);
public THREAD_MusicList_Insert(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MusicList_Insert);

	new
	    id = cache_insert_id();

	SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG_ZENE_HOZZAADVA_A_LISTAHOZ_ID"), id);
	return 1;
}

CMD:musiclist(playerid, params[], 0, 0)
{
	new
	    iLimit,
	    type;
	if(sscanf(params, "D(1)D(2)", iLimit, type)) return SendUsage(playerid, "/musiclist <Lista | Alapból: 1, Minden oldalon 50db van> <0 = Csak aktiváltak, 1 = Aktiválatlanok, 2 = Mind>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	switch(type)
	{
        // Csak aktiváltak
		case 0, 1: mysql_format(1, query, sizeof(query), "SELECT `id`, `name`, `activated`, `played` FROM `musiclist` WHERE `activated` = %d ORDER BY `id` LIMIT %d, 50", type, --iLimit * 50);
		default: mysql_format(1, query, sizeof(query), "SELECT `id`, `name`, `activated`, `played` FROM `musiclist` ORDER BY `id` LIMIT %d, 50", --iLimit * 50);
	}

    mysql_function_query(1, query, true, "THREAD_MusicList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findmusic(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findmusic <Részlet> <Lista = 1>");

	mysql_format(1, query, sizeof(query), "SELECT `id`, `name`, `activated`, `played` FROM `musiclist` WHERE `name` LIKE '%s%e%s'", "%%", params, "%%");
    mysql_function_query(1, query, true, "THREAD_MusicList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:mymusic(playerid, params[], 0, 0)
{
	new
	    iLimit,
	    type;
	if(sscanf(params, "D(1)", iLimit, type)) return SendUsage(playerid, "/mymusic <Lista | Alapból: 1, Minden oldalon 50db van>");
	if(iLimit < 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_INVALID_LIST_ID"));

	mysql_format(1, query, sizeof(query), "SELECT `id`, `name`, `activated`, `played` FROM `musiclist` WHERE `reg_id` = %d ORDER BY `id` LIMIT %d, 50",PlayerInfo[playerid][pRegID], --iLimit * 50);
    mysql_function_query(1, query, true, "THREAD_MusicList", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_MusicList(playerid, queue);
public THREAD_MusicList(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_MusicList);

	new
	    rows = cache_get_row_count(),
	    id;
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Zenelista", "Egy zene sincs a listában!", "Ok");
		return 1;
	}

	static const
		    sColor[2] = {COLOR_RED, COLOR_DEFAULT};

	for(new i; i != rows; )
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, country);
		cache_get_row_int(i, 2, datez);
		cache_get_row_int(i, 3, vID);

		if(!i++)
		{
  			format(dline, sizeof(dline), "{%06x}%d. %s (%dx)", sColor[datez] >>> 8, id, country, vID);
		}
		else
		{
			format(dline, sizeof(dline), "%s\n{%06x}%d. %s (%dx) ", dline, sColor[datez] >>> 8, id, country, vID);
		}
	}

	format(country, sizeof(country), "{" #XCOLOR_BLUE3 "}Zenelista {" #XCOLOR_WHITE "}<%d>", rows);
 	ShowPlayerDialogEx(playerid, DIALOG_RADIO + 3, DIALOG_STYLE_LIST, country, dline, "Lejátszás", "Mégse");
	return 1;
}

CMD:randommusic(playerid, params[], 0, 0)
{
    new _rand = random(g_Musics);
    mysql_format(1, query, sizeof(query), "SELECT * FROM `musiclist` WHERE `id` = '%d'", _rand);
	mysql_function_query(1, query, true, "THREAD_RandomMusic", "ddd", playerid, _rand, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_RandomMusic(playerid, id, queue);
public THREAD_RandomMusic(playerid, id, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_RandomMusic);

    new rows = cache_get_row_count();
	if(!rows)
	{
	    cmd_randommusic(playerid,"");
		return 1;
	}
	cache_get_row(0, 3, country);

	SetPVarInt(playerid,"RandomMusic",1);
	mysql_format(1, query, sizeof(query), "SELECT `activated`, players.name, `url`, musiclist.`time` FROM `musiclist` LEFT JOIN players ON (players.reg_id = musiclist.reg_id) WHERE musiclist.`id` = %d", id);
 	mysql_function_query(1, query, true, "THREAD_MusicListPlay", "dsd", playerid, country, g_pQueryQueue[playerid]);
	return 1;
}

CMD:radio(playerid, params[], 0, 0)
{
    mysql_format(1, query, sizeof(query), "SELECT * FROM `radio`", params, "%%");
    mysql_function_query(1, query, true, "THREAD_Radio", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

forward THREAD_Radio(playerid, queue);
public THREAD_Radio(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_Radio);

	new
	    rows = cache_get_row_count(),
	    id,
	    played;
	if(!rows)
	{
		ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_BLUE3 "}Rádió", "Nincs egy rádió se!", "Ok");
		return 1;
	}
	//i_str[0] = EOS;
    for(new i; i != rows; )
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, country);
		cache_get_row_int(i, 5, played);

		if(!i++)
		{
  			format(dline, sizeof(dline), "{%06x}%d. %s (%dx)",random(0xFFFFFF),id,country,played);
		}
		else
		{
   			format(dline, sizeof(dline), "%s\n{%06x}%d. %s (%dx)",dline,random(0xFFFFFF),id,country,played);
		}
	}

	format(country, sizeof(country), "{" #XCOLOR_BLUE3 "}Rádiók {" #XCOLOR_WHITE "}<%d>", rows);
 	ShowPlayerDialogEx(playerid, DIALOG_RADIO_SQL, DIALOG_STYLE_LIST, country, dline, "Lejátszás", "Mégse");
	return 1;
}

CMD:spawnplace(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, SPAWNCHANGE, DIALOG_STYLE_LIST, "Spawnhely választás", "Alap\nVéletlenszerû\nKlán (Ha van)\nL&M HQ (Csak tagoknak)\nSevile HQ (Csak tagoknak)\nHalál elõtti\nMentett pozíció\nHáznál {" #XCOLOR_BLUE3 "}(Kint)\nHáznál {" #XCOLOR_BLUE3 "}(Bent)\nBiznisz {" #XCOLOR_BLUE3 "}(Kint)\nBiznisz {" #XCOLOR_BLUE3 "}(Bent)\nAdmin által mentett pozíció\n{" #XCOLOR_YELLOW "}Meglévõ teleport", "Ok", "Mégse");
	return 1;
}

CMD:wskill(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, WEAPONSKILL, DIALOG_STYLE_LIST, "{" #XCOLOR_BLUE "}Fegyver tapasztalat beállítás", "Colt 45\nTompított Colt45\nDesert Eagle\nShotgun\nSawn-Off\nCombat Shotgun\nMicro UZI\nMP5\nAK47\nM4\nSniper", "Ok", "Mégse");
	SetPVarInt(playerid, "FirstW", 1);
	return 1;
}

CMD:updates(playerid, params[], 0, 0)
{
	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_UJDONSAGOK"));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, LANG(playerid, "MSG_MOSTANATOL_A_TELJES_UJITAS"));
	SendClientMessage(playerid, COLOR_GREEN2, LANG(playerid, "MSG_ITT_MEGTALALHATOD__WEB_ADDRESS"));
	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_A_MOD_UTOLJARA_EKKOR_VOLT_FRISSITVE"));
	return 1;
}

#define MAX_CMDS 31 //cmds oldalszám
CMD:cmds(playerid, params[], 0, 0)
{
	new
	    id,
		title[64],
		dialogtext[6144],
		key1[16];

	title[0] = EOS;
	dialogtext[0] = EOS;
 	key1[0] = EOS;
	i_str[0] = EOS;

	if(sscanf(params, "D(1)", id)) return SendUsage(playerid, "/parancslista <ID>");
    SetPVarInt(playerid, "ParancsID", id);

    format(i_str, sizeof(i_str), "DIALOG_CMDS_%d_TITLE", id); GetGVarString(i_str, title, sizeof(title), g_pLang{playerid});
	format(i_str, sizeof(i_str), "DIALOG_CMDS_%d", id); GetGVarString(i_str, dialogtext, sizeof(dialogtext), g_pLang{playerid});
	format(i_str, sizeof(i_str), "DIALOG_CMDS_%d_Key1", id); GetGVarString(i_str, key1, sizeof(key1), g_pLang{playerid});

	if(g_pLang{playerid} == LANGUAGE_HU) format(i_str, sizeof(i_str), "Parancslista - %s | Oldalszám: %d/%d",title,id,MAX_CMDS);
    else format(i_str, sizeof(i_str), "Commands - %s | Page: %d/%d",title,id,MAX_CMDS);

	TextDrawShowForPlayer(playerid, TD_CMDListAlatt[0]);
   	TextDrawShowForPlayer(playerid, TD_CMDListAlatt[1]);
    g_pSelectTDFlags[playerid] |= e_SELECT_CMDLIST;
	SelectTextDraw(playerid, 0xFF0000AA);

	ShowPlayerDialogEx(playerid, CMDMENU, DIALOG_STYLE_MSGBOX, i_str, dialogtext, key1);
	return 1;
}

CMD:mfrcmds(playerid, params[], 0, 0)
{
    cmd_cmds(playerid, "29");
	return 1;
}

CMD:wheels(playerid, params[], 0, D:<BCAR >)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	ShowPlayerDialogEx(playerid, DIALOG_WHEELS, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTGREEN "}Kerékcsere", "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Ok", "Mégse");
	return 1;
}

CMD:hyd(playerid, params[], 0, D:<BCAR >)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));

	AddDynamicVehicleComponent(GetPlayerDynamicVehicleID(playerid), 1087);
	SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_HIDRAULIKA_HOZZAADVA_TORLES"));
	return 1;
}

CMD:favwheel(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, DIALOG_WHEELS + 528, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTGREEN "}Kedvenc kerék", "Alap\nVéletlenszerû\nOffroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Ok", "Mégse");
	return 1;
}

CMD:command(playerid, params[], 0, 0)
{
	return cmd_cmds(playerid, params);
}

CMD:parancs(playerid, params[], 0, 0)
{
	return cmd_cmds(playerid, params);
}

CMD:parancsok(playerid, params[], 0, 0)
{
	return cmd_cmds(playerid, params);
}

CMD:fps(playerid, params[], 0, 0)
{
	dline[0] = EOS;
	foreach(new i: Player)
	{
		// Botok FPS-e mindig nulla, úgyhogy kibaszunk
		if(!(g_pOtherFlags[i] & e_RAKSAMP))
		{
			format(i_str, sizeof(i_str), "{%06x}%s(%d)'s FPS: %d [%d]", GetPlayerColor(i) >>> 8, pName(i), i, g_pFPS[i], GetAverageFPS(i));
		}
		else
		{
			format(i_str, sizeof(i_str), "{%06x}%s(%d)'s FPS: %d [%d]", GetPlayerColor(i) >>> 8, pName(i), i, randomex(25, 30), randomex(27, 29));
		}
		strcat(dline, i_str);
		strcat(dline, "\n");
    }
	ShowPlayerDialogEx(playerid, DIALOG_FPS, DIALOG_STYLE_LIST, "Frame's Per Second", dline, "Felújítás", "Mégse");
	return 1;
}

CMD:interiors(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | TAXI>)
{
    dline[0] = EOS;
    for(new i; i != sizeof(g_Interiors); i++)
	{
	    if(!IsClient(playerid) && strfind(g_Interiors[i][e_szIntName], "Vice City", true) != -1) continue;
		strcpy(country, g_Interiors[i][e_szIntName]);
		strcat(dline, country);
	    strcat(dline, "\n");
	}

	ShowPlayerDialogEx(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Interior lista", dline, "Ok", "Mégse");
	return 1;
}

CMD:prophelp(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, DIALOG_HOUSEMENU - 1, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_PROP_HELP"));
	return 1;
}
CMD:propinfo(playerid, params[], 0, 0)
{
	return cmd_prophelp(playerid, params);
}

CMD:bizhelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_BIZ_HELP"));
	return 1;
}
CMD:bizinfo(playerid, params[], 0, 0)
{
	return cmd_bizhelp(playerid, params);
}

CMD:rules(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_RULES"));
	return 1;
}

CMD:buy(playerid, params[], 0, 0)
{
	if(!IsPlayerInDynamicCP(playerid, gCP_BAR) && !IsPlayerInDynamicCP(playerid, gCP_LC)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_BOLTBAN"));
    ShowPlayerDialogEx(playerid, DIALOG_BUY, DIALOG_STYLE_LIST, "Mit szeretnél vennei?", "Bor\nSör\nPálinka\nCigi\nPizza\nTyúk\n", "Megvesz", "Mégse");
	return 1;
}

CMD:credits(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_CREDITS"));
	return 1;
}

CMD:minigames(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_MINIGAMES"));
	return 1;
}

CMD:jobs(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_JOBS"));
	return 1;
}

CMD:munkak(playerid, params[], 0, 0)
{
	return cmd_jobs(playerid, params);
}

CMD:rtele(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | e_NOTELE | SPEC >)
{
	Ide:
    new rand_ = Itter_Random(Teleports);
	if(rand_ == 0 || rand_ == Itter_Count(Teleports) + 1) goto Ide;
    format(query, sizeof(query), "SELECT * FROM `teleports` WHERE id = %d", rand_);
    mysql_function_query(1, query, true, "THREAD_ShowSQLTeleportList3", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}

CMD:findtele(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/findtele <Részlet>");

	mysql_format(1, query, sizeof(query), "SELECT * FROM `teleports` WHERE `name_hu` LIKE '%s%s%s'", "%%", params, "%%");
	mysql_function_query(1, query, true, "THREAD_FindTeleport", "dsd", playerid, params, g_pQueryQueue[playerid]);
	printf(query);
	return 1;
}

forward THREAD_FindTeleport(playerid, reszlet[], queue);
public THREAD_FindTeleport(playerid, reszlet[], queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_FindTeleport);

	new
	    rows = cache_get_row_count(),
     	bool:asd_,
     	kategoria[48];
     	
	dline[0] = EOS;
	if(!rows)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_TALALAT_A__RESZLETRE"), reszlet);
		return 1;
	}
	else if(rows > 180)
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_A__RESZLETRE_TOBB_MINT_180"), reszlet, rows);
		return 1;
	}

    format(dline, sizeof(dline), "Név\tTeleport\tHasználat\tKategória\n");
	for(new x; x != rows; x++)
	{
	    asd_ = !asd_;
        cache_get_row(x, 1, name);
        cache_get_row(x, 3, country);
	    cache_get_row_int(x, 12, vID); //Használat
        
        if(g_pLang{playerid} == LANGUAGE_HU) cache_get_row(x, 10, kategoria); //magyar
		else cache_get_row(x, 11, kategoria); //angol


        format(i_str, sizeof(i_str), "{%s}%s{000000}|\t{FFFF00}%s\t%dx\t{CDF917}%s\n", (asd_ == true) ? ("CDF917") : ("FF9900"),name, country, vID, kategoria);
		strcat(dline, i_str);
	}
	format(tmp, 128, "Találatok a '%s' részletre.. (%d)", reszlet, rows);
	ShowPlayerDialogEx(playerid, DIALOG_TELEPORTS + 2, DIALOG_STYLE_TABLIST_HEADERS, tmp, dline, "Ok", "Kilépés");
	return 1;
}

CMD:donate(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_DONATE"));
	return 1;
}

CMD:clienthelp(playerid, params[], 0, 0)
{
    ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_CLIENT_HELP"));
	return 1;
}

CMD:styles(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, STYLES, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN2 "}Harcstílusok", "{" #XCOLOR_BLUE3 "}Elbow\n{" #XCOLOR_BLUE3 "}Boxing\n{" #XCOLOR_BLUE3 "}Grabkick\n{" #XCOLOR_BLUE3 "}Kneehead\n{" #XCOLOR_BLUE3 "}Kungfu\n{" #XCOLOR_BLUE3 "}Normál", "Ok", "Mégse");
	return 1;
}

CMD:walkstyle(playerid, params[], 0, 0)
{
	ShowPlayerDialogEx(playerid, DIALOG_WALKSTYLE, DIALOG_STYLE_LIST, "Séta stílusok", "Alap séta\nNormál\nHatározott\nGangsta\nGangsta2\nÖreges\nSánta Öreges\nSánta\nNõi\nNõi2\nKurva\nKurva2\nRészeg\nKézfeltartó", "Kiválaszt", "Mégse");
	return 1;
}

CMD:sprunk(playerid, params[], 0, 0)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	return 1;
}

CMD:bor(playerid, params[], 0, 0)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YADDIG_PIGYALNRHAMIG_HBI"));
	return 1;
}

CMD:cigi(playerid, params[], 0, 0)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHSZIVD_HSZIVDWRY"));
	return 1;
}

CMD:sober(playerid, params[], 0, 0)
{
	if(GetPVarType(playerid, "LofaszHouseID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_JOZANITHATOD_KI_MAGAD"));

	SetPlayerDrunkLevel(playerid, 0);
    InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_GKIJOHZANODHTALR"));
	return 1;
}
CMD:drunkoff(playerid, params[], 0, 0)
{
	return cmd_sober(playerid, params);
}

CMD:mydrunk(playerid, params[], 0, 0)
{
	if(GetPVarType(playerid, "LofaszHouseID")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_HASZNALHATOD_EZT_A_1"));

	if(sscanf(params, "d", datez)) return SendUsage(playerid, "/mydrunk <Erõsség>");
	if(!(0 <= datez <= 50000)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_MEGFELELO_ERTEK_0"));

    if(!(0 <= datez <= 2000)) i_str = "~g~Józan vagy ~y~~h~O_o";
    else if(!(2001 <= datez <= 4999)) i_str = "~b~~h~Hát elég rendesen ~r~bebasztál~w~...";
    else if(!(5000 <= datez <= 50000)) i_str = "~r~Arrébb lehet tóni a biciglit~w~!";

	SetPlayerDrunkLevel(playerid, datez);
	InfoTD_MSG(playerid, MESSAGE_TIME, i_str);
	return 1;
}

CMD:inf(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_RANGE_ZONABAN_NEM_RAKHATSZ"));
    if(IsPlayerInDynamicArea(playerid, gSpawnZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_SPAWN_ZONABAN_NEM_SPAWNOLHAT"));
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    if(g_pGamesData[playerid] & e_IN_RACE && RaceType == 3) return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_VERSENYBE_NEM_HASZNALHATOD"));
 	CarSpawner(playerid, 411);
		//InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHINFERNUS_LESPAWNOLVAW"));
	return 1;
}

CMD:nrg(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>)
{
    if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_RANGE_ZONABAN_NEM_RAKHATSZ"));
    if(IsPlayerInDynamicArea(playerid, gSpawnZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_HIBA_A_SPAWN_ZONABAN_NEM_SPAWNOLHAT"));
	if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
	if(g_pGamesData[playerid] & e_IN_RACE && RaceType == 3) return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_VERSENYBE_NEM_HASZNALHATOD"));

	
	CarSpawner(playerid, 522);
		//InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BHNRG500_LESPAWNOLVAW"));
	return 1;
}

CMD:jailtime(playerid, params[], 0, 0)
{
    if(!GetPVarType(playerid, "JailTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_BORTONBEN"));

	ShowWelcomef(playerid, LANG(playerid, "MSG_BORTON_IDOD_W_GETPVARINTPLAY"), GetPVarInt(playerid, "JailTime"));
	return 1;
}

CMD:weaponshots(playerid, params[], 0, 0)
{
	format(dline, sizeof(dline), "COLT45 = %s\nSILENCED = %s\nDEAGLE = %s\nSHOTGUN = %s\nSAWEDOFF = %s\nSHOTGSPA = %s\nUZI = %s\nMP5 = %s\nAK47 = %s\nM4 = %s\nTEC9 = %s\nRIFLE = %s\nSNIPER = %s\nMINIGUN = %s",
	    FormatNumber(gWeaponShots[0]), FormatNumber(gWeaponShots[1]), FormatNumber(gWeaponShots[2]), FormatNumber(gWeaponShots[3]), FormatNumber(gWeaponShots[4]), FormatNumber(gWeaponShots[5]), FormatNumber(gWeaponShots[6]), FormatNumber(gWeaponShots[7]), FormatNumber(gWeaponShots[8]), FormatNumber(gWeaponShots[9]), FormatNumber(gWeaponShots[10]), FormatNumber(gWeaponShots[11]), FormatNumber(gWeaponShots[12]), FormatNumber(gWeaponShots[13]));
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "{" #XCOLOR_YELLOW "}Ellõtt töltények 2014.02.22 óta a szerveren", dline, "Ok", "Mégse");
	return 1;
}

CMD:shots(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/shots {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));
	if(!(g_PlayerData[player1] & e_LOGGED_IN)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_JATEKOS_NINCS_BEJELENTKEZVE"));

	format(dline, sizeof(dline), "COLT45 = %s\nSILENCED = %s\nDEAGLE = %s\nSHOTGUN = %s\nSAWEDOFF = %s\nSHOTGSPA = %s\nUZI = %s\nMP5 = %s\nAK47 = %s\nM4 = %s\nTEC9 = %s\nRIFLE = %s\nSNIPER = %s\nMINIGUN = %s",
	    FormatNumber(g_pWeaponShots[player1][0]), FormatNumber(g_pWeaponShots[player1][1]), FormatNumber(g_pWeaponShots[player1][2]), FormatNumber(g_pWeaponShots[player1][3]), FormatNumber(g_pWeaponShots[player1][4]), FormatNumber(g_pWeaponShots[player1][5]), FormatNumber(g_pWeaponShots[player1][6]), FormatNumber(g_pWeaponShots[player1][7]), FormatNumber(g_pWeaponShots[player1][8]), FormatNumber(g_pWeaponShots[player1][9]), FormatNumber(g_pWeaponShots[player1][10]), FormatNumber(g_pWeaponShots[player1][11]), FormatNumber(g_pWeaponShots[player1][12]), FormatNumber(g_pWeaponShots[player1][13]));

	format(i_str, 64, "{%06x}%s(%d) {" #XCOLOR_YELLOW "}-> {" #XCOLOR_BLUE "}[2014.02.22 óta]", GetPlayerColor(player1) >>> 8, pName(player1), player1);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, i_str, dline, "Ok", "Mégse");
	return 1;
}

CMD:weapons(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | GANGWAR | RANGE | RACE | CTC | POSTAS | PIZZAS>)
{
    if(GetPVarType(playerid, "JailTime")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_BORTONBEN_NEM_VEHETSZ_FEGYVERT"));
    if(GetPVarInt(playerid, "InDuel") == 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_PARBAJ_KOZBEN_NEM_VEHETSZ_FEGYVEREKE"));

    new
        dmid = g_pDeathMatchID[playerid];
	if(dmid != -1)
	{
		if(!(g_DMFlags[dmid] & e_WEAPONS_BUY)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBEN_A_DMBEN_TILTVA_VAN"));
	}

    dline[0] = EOS;
	for(new i; i != sizeof(g_szWeaponDialog); i++)
	{
		if(IsEven(i)) strcat(dline, "{" #XCOLOR_BLUE2 "}");
		else strcat(dline, "{" #XCOLOR_BLUE "}");
		strcat(dline, g_szWeaponDialog[i]);
	    strcat(dline, "\n");
	}

	ShowPlayerDialogEx(playerid, WEAPONMENU, DIALOG_STYLE_LIST, "{" #XCOLOR_GREEN "}Fegyverek (Kilépés után megmaradnak)", dline, "Ok", "Mégse");
	return 1;
}
CMD:fegyver(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | GANGWAR | RANGE | RACE | CTC | POSTAS | PIZZAS>)
{
	return cmd_weapons(playerid, params);
}
CMD:fegyverek(playerid, params[], 0, D:<DERBY | FALLOUT | TRUCKING | GANGWAR | RANGE | RACE | CTC | POSTAS | PIZZAS>)
{
	return cmd_weapons(playerid, params);
}

CMD:heal(playerid, params[], 0, D:<DM | DUEL | LOP | GANGWAR | CTC | FLAG | BCAR>)
{
	if((g_PlayerFlags[playerid] & e_GOD) && (g_pOtherFlags[playerid] & e_GOD_ALLOWED)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OROK_ELETED_BE_VAN_KAPCSOLVA"));
	if(GetPVarType(playerid, "InDuel")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_PARBAJ_KOZBEN_NEM_TOLTHETED"));
    if(g_pOtherFlags[playerid] & e_IN_HOUSE && GetPVarInt(playerid, "PlayerProp") != GetPlayerHouseID_ByZone(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBA_NEM_HASZNALHATOD_EZT"));
    
    // Ha nem admin, akkor spam ellenõrzés
	if(GetPVarInt(playerid, "Level") == 0) SPAM_CHECK(Heal, 10000) //10 mp

	GetPlayerHealth(playerid, Health);
	GetPlayerArmour(playerid, Armour);

	// Klienset használóknak 175 a max élet
	new Float:fMaxHealth = IsClient(playerid) ? 176.0 : 100.0;
	if(Health == fMaxHealth && Armour == 100.0) return InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_YTELE_VAN_AZ_RHELETED_YES_A"));
	GetPlayerPos(playerid,X,Y,Z);

	if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 30.0 || GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 30.0 && !IsOwner(playerid))
	{
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TUL_KOZEL_VAGY_A_BONUSZAUTOHOZ"));
 		return 1;
	}

	datez = floatround(fMaxHealth + 100.0);
	new pLost = floatround(75 * (datez - (Health + Armour)));

	if(!g_pVIP[playerid])
	{
		if(GetPlayerMoneyEx(playerid) < pLost) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_ELEG_PENZED__KENE"), FormatNumber(pLost));

		GivePlayerMoneyEx(playerid, -pLost, "Heal");
		format(i_str, sizeof(i_str), "~g~~h~~h~Életed feltöltve~w~!~n~~b~~h~Ára~w~: ~r~-~g~~h~%d", pLost);
	}
	else
	{
		strcpy(i_str, "~g~~h~~h~Életed feltöltve~w~!");
	}
	InfoTD_MSG(playerid, MESSAGE_TIME, i_str);

	SetPlayerHealth(playerid, fMaxHealth);
	SetPlayerArmour(playerid, 100.0);
	PlayerPlaySound(playerid, 1139);

	SetPlayerChatBubble(playerid, COLOR_BLUE, 20.0, 3000, "MSG_CHATBUBBLE_HEAL");
	return 1;
}

CMD:exitdm(playerid, params[], 0, 0)
{
	if(GetPVarInt(playerid, "InDuel") == 2) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_PARBAJBOL_NEM_LEPHETSZ_KI"));

	new
		bool:IsCheck = (strval(params) != 295375),
		Color = GetPVarInt(playerid, "Color"),
		dmid = g_pDeathMatchID[playerid];

	if(IsCheck && dmid == -1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_DMBEN"));
	if(!Color)
	{
        SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
	}
	else
	{
		SetPlayerColor(playerid, Color);
	}

	if(dmid != -1)
	{
		if(CurrKillStreakID[dmid] == playerid)
		{
			foreach(new i: Player)
			{
				if(g_pDeathMatchID[i] != dmid) continue;
				SendClientMessagef(i, COLOR_GOLD, LANG(i, "MSG_KILLSTREAK_A_JELENLEGI_LEGNAGYOBB"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, CurrKillStreak[dmid]);
			}

			if(g_PlayerFlags[playerid] & e_MUSIC) StopAudioStreamForPlayer(playerid);

			CurrKillStreak[dmid] = 2;
		    CurrKillStreakID[dmid] = INVALID_PLAYER_ID;
		}
	}

	DeletePVar(playerid, "InDMKills");
	DeletePVar(playerid, "InDMDeaths");
	DeletePVar(playerid, "InDMXP");

	LeavePlayerFromDM(playerid);
	g_pGamesData[playerid] &= ~e_IN_DM;
	SetPlayerTeam(playerid, NO_TEAM);

    SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
	//SetPlayerHealth(playerid, 100.0);
	SetPlayerArmour(playerid, 0.0);

	UpdateDMPlayers();
	LoadPlayerWeaponInfo(playerid);

	// Nametagok frissítése
	foreach(new i: Player)
	{
		//if(!(g_PlayerFlags[i] & e_NO_NAMETAG)) continue;
		//if(PlayerInfo[i][pRegID] == 3) continue; //Nem...
		//ShowPlayerNameTagForPlayer(playerid, i, true);
    	//SetPlayerMarkerForPlayer(playerid, i, GetPlayerColor(i));
    	UpdateNametagsForPlayer(i);
	}

	format(i_str, sizeof(i_str), LANG(playerid, "MSG_TD_KILLDEATH_STAT"), 0, 0, 0.0, 0);
	PlayerTextDrawSetString(playerid, InDMKills[playerid], i_str);
	if(!(g_pTDFlags[playerid] & e_NOTD_DMKILLS)) PlayerTextDrawHide(playerid, InDMKills[playerid]);
	if(IsCheck)
	{
		UpdatePlayerSpawnInfo(playerid);

		if(GetPVarInt(playerid, "SpawnLocation") == SPAWNPLACE_SP)
		{
            g_PlayerData[playerid] |= e_SPAWN_SP;
		}
		else
		{
		    SpawnPlayer(playerid);
		}
	}
	return 1;
}

CMD:p(playerid, params[], 0, 0)
{
	GivePlayerWeapon(playerid, 46, 1);
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_HBTESSEK_EJTOERNYOW"));
	return 1;
}
CMD:para(playerid, params[], 0, 0)
{
	return cmd_p(playerid, params);
}

CMD:afk(playerid, params[], 0, D:<GANGWAR | CTC | FLAG | BCAR>)
{
   	if(g_PlayerData[playerid] & e_AFK) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_AFKBAN_VAGY_VISSZALEPES"));

    SPAM_CHECK(AFK, 10000)
	if(ZaszloOwner == playerid)
	{
		cmd_dropflag(playerid, "255");
	}

	if(g_BonusCarOwner == playerid)
	{
		BonusCar();
	}

	if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "");
	}

	if(MINIGAMES_LEAVE & g_pGamesData[playerid])
	{
		cmd_leave(playerid, "");
	}

	if(isnull(params))
	{
	/*	if(PlayerInfo[playerid][pRegID] == 3)
		{
			SendClientMessageToAllf(COLOR_BLUE, "MSG___ELMENT_SOK_IDORE_KB_FELN", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		}
		else
		{*/
		SendClientMessageToAllf(COLOR_BLUE, "MSG___ELMENT_EGY_KIS_IDORE_MIND", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	//	}
	}
	else
	{
		if((datez = strlen(params)) > 40)
		{
			strdel(params, 40, datez);
		}

		/*if(PlayerInfo[playerid][pRegID] == 3)
		{
			SendClientMessageToAllf(COLOR_BLUE, "MSG___ELMENT_SOK_IDORE_KB_FELN_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, params);
		}
		else
		{*/
		SendClientMessageToAllf(COLOR_BLUE, "MSG___ELMENT_EGY_KIS_IDORE_MIND_1", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, params);
		//}
		SetPVarString(playerid, "AFKReason", params);
	}
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_BVISSZAJOVESHEZ_IRD_BEW_RBAC"));

	SetPVarInt(playerid, "BeforeAFK", GetPlayerVirtualWorld(playerid));
	SetTimerEx("SetPlayerAFK", 500, false, "d", playerid);
	return 1;
}

forward SetPlayerAFK(playerid);
public SetPlayerAFK(playerid)
{
    // printf("SetPlayerAFK()");
	g_PlayerData[playerid] |= e_AFK;
	SetPlayerColor(playerid, 0);
	if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
	//SetCameraBehindPlayer(playerid);

 	TogglePlayerControllable(playerid, false);
 	SetPlayerHealth(playerid, HEALTH_GOD);
	SetPlayerVirtualWorld(playerid, 35 + playerid);
	g_PlayerData[playerid] &= ~e_FALLED;
	return 1;
}

CMD:back(playerid, params[], 0, 0)
{
	if(!(g_PlayerData[playerid] & e_AFK)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_AFKBAN"));
    SPAM_CHECK(BACK, 3000)
    g_PlayerData[playerid] &= ~e_AFK;
    TogglePlayerControllable(playerid, true);

	if(!GetPVarInt(playerid, "Color"))
	{
		SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
	}
	else
	{
        SetPlayerColor(playerid, GetPVarInt(playerid, "Color"));
	}

	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "BeforeAFK"));
	DeletePVar(playerid, "BeforeAFK");
	DeletePVar(playerid, "AFKReason");

    SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
	//SetPlayerHealth(playerid, 100.0);
	SendClientMessageToAllf(COLOR_BLUE, "MSG___VISSZAJOTT_A_JATEKBA", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	return 1;
}

CMD:afklist(playerid, params[], 0, 0)
{
	datez = 0;
	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "AFKTime") && !(g_PlayerData[i] & e_AFK)) continue;

		datez ++;
	}

	if(datez)
	{
		SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_AFKBAN_LEVO_JATAKOSOK_SZAMA"), datez);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_NINCS_SEMILYEN_JATEKOS_AFKBAN"));
		return 1;
	}

	foreach(new i: Player)
	{
 		if(!GetPVarType(i, "AFKTime") && !(g_PlayerData[i] & e_AFK)) continue;

        if(!GetPVarType(i, "AFKReason"))
        {
			i_str[0] = EOS;
		}
		else
		{
			GetPVarString(i, "AFKReason", i_str, 40);
		}
		SendClientMessagef(playerid, COLOR_BLUE, LANG(playerid, "MSG___IDO___GETPLAYERCOL"), GetPlayerColor(i) >>> 8, pName(i), i, GetPVarInt(i, "AFKTime"), i_str);
	}
	return 1;
}

CMD:detach(playerid, params[], 0, D:<TRUCKING>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JARMUBEN_KELL_LENNEN_HOGY_LECSATOLH"));
	if(!IsTrailerAttachedToDynamicVeh((vID = GetPlayerDynamicVehicleID(playerid)))) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_TRAILER_A_JARMUVEDEN"));

    AttachTrailerToDynamicVehicle(GetDynamicVehicleTrailer(vID), vID);
	DetachTrailerFromDynamicVeh(vID);
	PlayerPlaySound(playerid, 1137);
	return 1;
}

CMD:tow(playerid, params[], 0, D:<TRUCKING>)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_JARMUBEN_KELL_LENNEN_HOGY_FELCSATOL"));

	new
		vehicle;
	GetPlayerPos(playerid, X, Y, Z );
	GetVehicleWithinDistance(playerid, X, Y, Z, 30.0, vehicle);
	if(vehicle != 0)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_PTRAINER_YHFELKAPCSOLVAW"), .time = 750);
		AttachTrailerToDynamicVehicle(GetPlayerDynamicVehicleID(playerid), vehicle);
	}
	else
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_RNINCS_HSEMMI_HA_HKOZELEDBEN"), .time = 750);
	}
	return 1;
}

CMD:avc(playerid, params[], 0, 0)
{
	if(isnull(params)) return SendUsage(playerid, "/avc <Slow/Fast/Off>");

	if(!strcmp(params, "slow", true))
	{
		SetPVarInt(playerid, "ColorChanger", 1);
		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_SZINEZES"));
		return 1;
	}
	else if(!strcmp(params, "fast", true))
	{
		SetPVarInt(playerid, "ColorChanger", 2);
		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_SZINEZES_1"));
		return 1;
	}
	else if(!strcmp(params, "off", true))
	{
		DeletePVar(playerid, "ColorChanger");
		SendClientMessage(playerid, COLOR_BLUE, LANG(playerid, "MSG_AUTOMATIKUS_JARMU_SZINEZES_2"));
		return 1;
	}

	SendUsage(playerid, "/avc <Slow/Fast/Off>");
	return 1;
}
CMD:rainbow(playerid, params[], 0, 0)
{
	return cmd_avc(playerid, params);
}

CMD:up(playerid, params[], 0, 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(!IsPlayerInRangeOfPoint(playerid, 10, -1569.7793, 98.3563, 3.2789)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_MESSZE_VAGY_A_DARUTOL_HA"));

	SetDynamicVehiclePos(GetPlayerDynamicVehicleID(playerid), -1569.7985, 98.4256, 17.4063);
	SendClientMessage(playerid, COLOR_GOLD, LANG(playerid, "MSG_JARMUVED_FELRAKVA_A_DARURA"));
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHHOZZAKAPCSOLODTAL_HA_HDARU"));
	return 1;
}

CMD:down(playerid, params[], 0, 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_INCAR"));
	if(!IsPlayerInRangeOfPoint(playerid, 120, -1569.7793, 98.3563, 3.2789)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_A_DARUN_HA_ODA_AKARSZ"));

	GetDynamicVehiclePos((vID = GetPlayerDynamicVehicleID(playerid)), X, Y, Z);
	SetDynamicVehicleToRespawn(vID);
	SetDynamicVehiclePos(vID, X + random(5), Y + random(5), Z + random(5));
	PutPlayerInDynamicVehicle(playerid, vID, 0);
	SendClientMessage(playerid, COLOR_GOLD, LANG(playerid, "MSG_JARMUVED_LERAKVA_A_DARUROL"));
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHLEKAPCSOLODTAL_HA_HDARU_B"));
	return 1;
}

CMD:roller(playerid, params[], 0, 0)
{
    if(IsDynamicObjectMoving(Roller_Platform)) return 1;
    new Float:pos[3];
    GetDynamicObjectPos(Roller_Platform, pos[0], pos[1], pos[2]);

    if(pos[2] == 5.97849) MoveDynamicObject(Roller_Platform, pos[0], pos[1], 25.5624, 2.5);
	return 1;
}
CMD:csuszda(playerid, params[], 0, 0)
{
	return cmd_roller(playerid, params);
}

CMD:carousel(playerid, params[], 0, 0)
{
    if(IsObjectMoving(Carousel_Base)) return 1;
    new Float:pos[3];
    GetDynamicObjectPos(Carousel_Base, pos[0], pos[1], pos[2]);

    new Float:rot[3];
    GetDynamicObjectRot(Carousel_Base, rot[0], rot[1], rot[2]);

    if(rot[2] == 0.0) MoveDynamicObject(Carousel_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, 0.00, 0.00, 180.00);
	return 1;
}
CMD:tehenkorhinta(playerid, params[], 0, 0)
{
	return cmd_carousel(playerid, params);
}

CMD:revolution(playerid, params[], 0, 0)
{
    if(IsObjectMoving(Revolution_Base)) return 1;
    new Float:pos[3];
    GetDynamicObjectPos(Revolution_Base, pos[0], pos[1], pos[2]);

    new Float:rot[3];
    GetDynamicObjectRot(Revolution_Base, rot[0], rot[1], rot[2]);

    if(rot[2] == 0) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, 0.00, 0.00, 180.00);
	return 1;
}
CMD:korhinta(playerid, params[], 0, 0)
{
	return cmd_revolution(playerid, params);
}

CMD:topgun(playerid, params[], 0, 0)
{
    if(IsDynamicObjectMoving(Topgun_Stairs[0])) return 1;
    if(IsObjectMoving(Topgun_Base)) return 1;
    new Float:pos[6];
    GetDynamicObjectPos(Topgun_Stairs[0], pos[0], pos[1], pos[2]);
    GetDynamicObjectPos(Topgun_Stairs[1], pos[3], pos[4], pos[5]);
    MoveDynamicObject(Topgun_Stairs[0], pos[0], pos[1], pos[2]-3.5, 1.5);
    MoveDynamicObject(Topgun_Stairs[1], pos[3], pos[4], pos[5]-3.5, 1.5);
    stair = true;
	return 1;
}
CMD:forgo(playerid, params[], 0, 0)
{
	return cmd_topgun(playerid, params);
}

CMD:thejail(playerid, params[], 0, 0)
{
	if(IsObjectMoving(Jail_Base)) return 1;
	if(IsObjectMoving(Jail_Doors[0])) return 1;
	new Float:pos2[3];
	GetObjectPos(Jail_Doors[0], pos2[0], pos2[1], pos2[2]);
	MoveObject(Jail_Doors[0], pos2[0]-1.5, pos2[1], pos2[2], 1.5);

	new Float:pos3[3];
	GetObjectPos(Jail_Doors[1], pos3[0], pos3[1], pos3[2]);
	MoveObject(Jail_Doors[1], pos3[0]+1.5, pos3[1], pos3[2], 1.5);
	door = false;
	return 1;
}
CMD:borton(playerid, params[], 0, 0)
{
	return cmd_thejail(playerid, params);
}

CMD:projekt(playerid, params[], 0, 0)
{
	if(IsObjectMoving(Projekt_Base[0])) return 1;
	new Float:pos[3];
	GetDynamicObjectPos(Projekt_Base[0], pos[0], pos[1], pos[2]);
	new Float:rot[3];
	GetDynamicObjectRot(Projekt_Base[0], rot[0], rot[1], rot[2]);
	if(rot[0] == 0.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.1, 10.00, 90.00, 0.00);
	return 1;
}
CMD:project1(playerid, params[], 0, 0)
{
	return cmd_projekt(playerid, params);
}

CMD:viking(playerid, params[], 0, 0)
{
	if(IsObjectMoving(Vikingo_Base)) return 1;
	new Float:pos[3];
	GetDynamicObjectPos(Vikingo_Base, pos[0], pos[1], pos[2]);
	new Float:rot[3];
	GetDynamicObjectRot(Vikingo_Base, rot[0], rot[1], rot[2]);
	if(rot[1] == 0.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 20.00, 0.00);
	else SetObjectRot(Vikingo_Base, 0.0, 0.0, 0.0);
	return 1;
}

CMD:observer(playerid, params[], 0, 0)
{
    if(IsObjectMoving(Observer_Base)) return 1;
    new Float:pos[3];
    GetDynamicObjectPos(Observer_Base, pos[0], pos[1], pos[2]);

    new Float:rot[3];
    GetDynamicObjectRot(Observer_Base, rot[0], rot[1], rot[2]);
    if(rot[2] == 0) MoveDynamicObject(Observer_Base, pos[0], pos[1], pos[2]+95.61682, 5.5, 0, 0, 180);
	return 1;
}
CMD:forgoszek(playerid, params[], 0, 0)
{
	return cmd_observer(playerid, params);
}

/*
CMD:ferriswheel(playerid, params[], 0, 0)
{
	if(IsObjectMoving(FerrisWheel_Base)) return 1;
	new Float:pos[3];
	GetDynamicObjectPos(FerrisWheel_Base, pos[0], pos[1], pos[2]);
	new Float:rot[3];
	GetDynamicObjectRot(FerrisWheel_Base, rot[0], rot[1], rot[2]);
	if(rot[1] == 0.00) MoveDynamicObject(FerrisWheel_Base, pos[0], pos[1], pos[2]+0.05, 0.01, 0.00, 180.00, 90.00);
	return 1;
}
*/
CMD:caida(playerid, params[], 0, 0)
{
    if(IsObjectMoving(Caida_Base[0])) return 1;
    new Float:pos[3];
    GetDynamicObjectPos(Caida_Base[0], pos[0], pos[1], pos[2]);
    if(pos[2] == 13.52)  MoveDynamicObject(Caida_Base[0], pos[0], pos[1], pos[2]+5.5, 1.5);
	return 1;
}
CMD:hidraulika(playerid, params[], 0, 0)
{
	return cmd_caida(playerid, params);
}

CMD:cow(playerid, params[], 0, 0)
{
	if(IsDynamicObjectMoving(Cow_Seats[0])) return 1;
	new Float:pos[12];
	GetDynamicObjectPos(Cow_Seats[0], pos[0], pos[1], pos[2]);
	new Float:rot[3];
	GetDynamicObjectRot(Cow_Seats[0], rot[0], rot[1], rot[2]);
	MoveDynamicObject(Cow_Seats[0], pos[0], pos[1], pos[2]+0.05, 0.5, random(10), random(10), random(5));
	MoveDynamicObject(Cow_Seats[1], pos[3], pos[4], pos[5]+0.05, 0.5, random(10), random(10), random(5));
	MoveDynamicObject(Cow_Seats[2], pos[6], pos[7], pos[8]+0.05, 0.5, random(10), random(10), random(5));
	MoveDynamicObject(Cow_Seats[3], pos[9], pos[10], pos[11]+0.05, 0.5, random(10), random(10), random(5));
	F_ret = 0;
	SetTimer("StopBull", BULL_TIME, 0);
	return 1;
}

/* Animations */

// /apa BLOWJOBZ BJ_STAND_END_P   4.0 0 1 1 1 0 0
CMD:sex1(playerid, params[], 0, 0)
{
	// /apa BLOWJOBZ BJ_STAND_END_P 4.0 10 0 0 0 -1 0
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}
//LoopingAnim(
CMD:sex2(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex3(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex4(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex5(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex6(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex7(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex8(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex9(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex10(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex11(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:sex12(playerid, params[], 0, 0)
{
	LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:tune(playerid, params[], 0, 0)
{
	SendUsage(playerid, "/tune {" #XCOLOR_WHITE "}<1-5>");
	return 1;
}

CMD:range(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR>)
{
	ShowPlayerDialogEx(playerid, 2593, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_MSG_RANGE_INFO"));
	ResetPlayerWeapons(playerid);
	PlayerTele(playerid, 795.8624, 1685.6016, 5.2813, 0, 188.0242);
	return 1;
}

CMD:loadderbymap_(playerid, params[], 4, 0)
{
    new
    	buffer[128],
    	File:fDerbyFile,
    	Float:Angle_a;
    	
	if(sscanf(params, "s", buffer)) return SendUsage(playerid, "/loadderbymap_ map neve");
    format(buffer, 128, "/NMSS/derby/%s.txt", buffer);
    if(!(fDerbyFile = fopen(buffer, io_read))) printf("lófasz a füledbe - file: %s", buffer);
    else
	{
 		g_DerbyUpperPos = -1;
		while(fread(fDerbyFile, buffer))
		{
  			if(!++g_DerbyUpperPos)
			{
				//sscanf(buffer, "p<,>df", g_DerbyVehicleModel, g_DerbyMinZ);
				//printf("---> %d, %f", g_DerbyVehicleModel, g_DerbyMinZ);
			}
			else
			{
				sscanf(buffer, "p<,>ffff", X, Y, Z, Angle_a);
				CreateDynamicVehicle(411, X, Y, Z, Angle_a, -1, -1, -1, 0, 11);
			}
		}
	}
	return 1;
}

CMD:loadderbymap__(playerid, params[], 4, 0)
{
    


    SetDerbyCamera_(playerid, strval(params));

	return 1;
}
stock SetDerbyCamera_(playerid, he)
{
    strunpack(i_str, g_DerbyNames[he], 128);
    SendClientMessagef(playerid,-1, "map %s",i_str);
    
    
    
	SetPlayerVirtualWorld(playerid,11);
	SetPlayerPos(playerid, g_DerbyPos[he][0], g_DerbyPos[he][1], g_DerbyPos[he][2]);
	SetPlayerCameraPos(playerid, g_DerbyPos[he][3], g_DerbyPos[he][4], g_DerbyPos[he][5]);
	SetPlayerCameraLookAt(playerid, g_DerbyPos[he][6], g_DerbyPos[he][7], g_DerbyPos[he][8]);
}

stock SetDerbyCamera(playerid)
{
    g_PlayerData[playerid] &= ~e_FALLED;

	SetPlayerPos(playerid, g_DerbyPos[g_DerbyMode][0], g_DerbyPos[g_DerbyMode][1], g_DerbyPos[g_DerbyMode][2]);
	SetPlayerCameraPos(playerid, g_DerbyPos[g_DerbyMode][3], g_DerbyPos[g_DerbyMode][4], g_DerbyPos[g_DerbyMode][5]);
	SetPlayerCameraLookAt(playerid, g_DerbyPos[g_DerbyMode][6], g_DerbyPos[g_DerbyMode][7], g_DerbyPos[g_DerbyMode][8]);
}

CMD:derby(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | GHOSTMODE | SPEC | TAXI>)
{
	if(g_PlayerData[playerid] & e_RACEMODE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLD_KI_A_RACEMODET_RACEMODE"));
	if(GetAverageFPS(playerid) < MINIGAMES_MIN_FPS) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_LEGALABB__MINIGAMES_MIN_2"), MINIGAMES_MIN_FPS);
	if(GetAveragePing(playerid) > MINIGAMES_MAX_PING) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ATLAG_PINGEDNEK__MINIGAME_2"));

	// Játékos pénzének ellenõrzése, hogy meg-e van az elegendõ
	MoneyCheck(playerid, DERBY_WIN);

	new
	    count;
	g_pGamesData[playerid] |= e_IN_DERBY;

	g_pMinigameJoins[playerid][e_Count_DERBY] ++;

	if(g_pMinigameJoins[playerid][e_Count_DERBY] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_DERBY"));

	foreach(Player, i)
	{
		if(g_pGamesData[i] & e_IN_DERBY) count++;
	}

	if(count == 2)
	{
		g_DerbyStartTime = 3;
		g_ServerFlags |= e_DERBY_CAN_START;
	}

	UpdateDMPlayers();
	RemovePlayerFromClearworld(playerid);

	CarDeleter(playerid);
	HideClanZones(playerid);
	SetDerbyCamera(playerid);
	SetPlayerVirtualWorld(playerid, 11);
	TextDrawShowForPlayer(playerid, TD_Derby);
    TogglePlayerControllable(playerid, false);

	if(!g_DerbyTime)
	{
		//printf("derbystart joined %s(%d), g_DerbyPlayers = %d", pName(playerid), playerid, g_DerbyPlayers);
		g_DerbyPlayers = count;

		format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %ds.", count, g_DerbyTime);
		TextDrawSetString(TD_Derby, FixGameString(i_str));
	}
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
		SendClientMessagef(i, 0x00FF7FAA, LANG(i, "MSG__DERBY___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, count);
	}
	return 1;
}

CMD:derbymode(playerid, params[], 4, 0)
{
    if(isnull(params))
	{
		SendClientMessagef(playerid, -1, LANG(playerid, "MSG_G_DERBYMODE___G_DERBYTIME_"), g_DerbyMode, g_DerbyTime);
	}
	else
	{
		g_DerbyMode = random(sizeof(g_DerbyNames));
	}
	return 1;
}

CMD:derbytime(playerid, params[], 4, 0)
{
	if(isnull(params)) return SendClientMessagef(playerid, -1, "%d", g_DerbyTime);

    g_DerbyTime = strval(params);
    return 1;
}

CMD:fallout(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | TAXI>)
{
	if(g_PlayerData[playerid] & e_RACEMODE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_KAPCSOLD_KI_A_RACEMODET_RACEMODE"));
	if(GetAverageFPS(playerid) < MINIGAMES_MIN_FPS) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_LEGALABB__MINIGAMES_MIN_3"), MINIGAMES_MIN_FPS);
	if(GetAveragePing(playerid) > MINIGAMES_MAX_PING) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_AZ_ATLAG_PINGEDNEK__MINIGAME_3"), MINIGAMES_MAX_PING);

	// Játékos pénzének ellenõrzése, hogy meg-e van az elegendõ
	MoneyCheck(playerid, FALLOUT_WIN);

	PlayerTele(playerid, 2054.5508, 652.8755, 75, .worldid = 6);
	SetPlayerCameraPos(playerid, 2081.3545, 671.5437, 76.3614);
	SetPlayerCameraLookAt(playerid, 2080.4712, 671.0813, 75.3713);
    TogglePlayerControllable(playerid, false);
    SetPlayerHealth(playerid, HEALTH_GOD);

    CarDeleter(playerid);
	SetPVarInt(playerid, "FalloutState", FALLOUT_STATE_WAITING);

	g_pGamesData[playerid] |= e_IN_FALLOUT;
	g_pMinigameJoins[playerid][e_Count_FALLOUT] ++;
	if(g_pMinigameJoins[playerid][e_Count_FALLOUT] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_FALLOUT"));

	if(!(g_pTDFlags[playerid] & e_NOTD_FALLOUT)) TextDrawShowForPlayer(playerid, FalloutTextdraw);

	new
	    count;
	foreach(new i: Player)
	{
		if(GetPVarType(i, "FalloutState")) count++;
	}
    if(g_ServerFlags & e_FALLOUT_STARTED)
    {
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RCSATLHAKOHZTAL_A_BHFALLH"), fmcd);
	}
	else
	{
        FalloutPlayers++;
		InfoTD_MSGf(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RCSATLHAKOHZTAL_A_BHFALLH_1"), fmcd);

		format(i_str, sizeof(i_str), FixGameString("~r~~h~Játékosok: ~b~~h~%d~w~/~b~~h~%d ~r~~h~Objectek: ~b~~h~%d~w~/~b~~h~%d"), FalloutPlayers, (GetMaxPlayers() - Iter_Count(Bot)), FalloutOCount, sizeof(FalloutObject));
	   	TextDrawSetString(FalloutTextdraw, i_str);
	}
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
		SendClientMessagef(i, 0x00FF7FAA, LANG(i, "MSG__FALLOUT___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, count);
	}
	HideClanZones(playerid);
	return 1;
}

CMD:startfallout(playerid, params[], 4, 0)
{
	if(g_ServerFlags & e_FALLOUT_STARTED) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_FALLOUT_MAR_MEGY"));

	SendClientMessageToAllf(COLOR_YELLOW, "MSG__ADMIN__ELINDITOTTA_A_FALLOU", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	fmcd = 10;
	f_mscountdown();
	return 1;
}

CMD:endfallout(playerid, params[], 3, 0)
{
    if(!(g_ServerFlags & e_FALLOUT_STARTED)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_A_FALLOUT_JELENLEG_LEVAN"));

	SendClientMessageToAllf(COLOR_PROPGREEN, "MSG__ADMIN__LEALLITOTTA_A_FALLOU", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
	EndFallout();
	return 1;
}
//ANGE | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | TAXI>) return cmd_car(playerid, params);
CMD:taxis(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | SPEC | FLAG | BCAR | GRAV | WORLDEDIT | TAXI>)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_CSAK_GYALOG"));
	new count;
	//RemovePlayerFromVehicleEx(playerid);
	//CarDeleter(playerid);
    
    g_PlayerData[playerid] &= ~e_CLEARWORLD;
	PlayerTele(playerid, 2154.9353,-1135.3007,25.3954, 0, 181.8977, 50010);
    
	g_pGamesData[playerid] |= e_IN_TAXI;
	g_pMinigameJoins[playerid][e_Count_TAXI] ++;
	SetPVarInt(playerid,"TaxiVehicleID", INVALID_VEHICLE_ID);
	DeletePVar(playerid,"TaxiKiszalt");
	//if(g_pMinigameJoins[playerid][e_Count_POSTAS] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_POSTAS"));

	//SetPlayerMapIcon(playerid, 85, POSTAS_KEZDOHELY, 35, 0, MAPICON_GLOBAL);
	SendClientMessage(playerid, COLOR_BLUE2, LANG(playerid, "MSG_TAXISNAK_MENTEL_VEGYEL_FEL"));
    HideClanZones(playerid);
    
	foreach(Player, i) if(g_pGamesData[i] & e_IN_TAXI) count++;
	
 	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
		SendClientMessagef(i, 0x00FF7FAA, LANG(i, "MSG__TAXIS___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, count);
	}
	return 1;
}

CMD:postas(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | TAXI>)
{
	new count;
    g_PlayerData[playerid] &= ~e_CLEARWORLD;
	PlayerTele(playerid, -316.4944, 1050.0117 + random(10), 20.3403, 0, 95.7926, 12);

	g_pGamesData[playerid] |= e_POSTAS;
	g_pMinigameJoins[playerid][e_Count_POSTAS] ++;
	if(g_pMinigameJoins[playerid][e_Count_POSTAS] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_POSTAS"));

	SetPlayerMapIcon(playerid, 85, POSTAS_KEZDOHELY, 35, 0, MAPICON_GLOBAL);
	SendClientMessage(playerid, -1, LANG(playerid, "MSG_POSTASNAK_MENTEL_VEGYEL_FEL"));

    HideClanZones(playerid);

	foreach(Player, i) if(g_pGamesData[i] & e_POSTAS) count++;
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
		SendClientMessagef(i, 0x00FF7FAA, LANG(i, "MSG__POSTAS___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, count);
	}
	return 1;
}

CMD:pizzas(playerid, params[], 0, D:<DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | RACE | LOP | KOCSILOP | GANGWAR | CTC | POSTAS | PIZZAS | FLAG | BCAR | GRAV | WORLDEDIT | TAXI>)
{
    new count;
    g_PlayerData[playerid] &= ~e_CLEARWORLD;
	PlayerTele(playerid, 2339.6057, 69.3378 + random(5), 26.3359, 0, 51.3850, 13);

	g_pGamesData[playerid] |= e_PIZZAS;
	g_pMinigameJoins[playerid][e_Count_PIZZAS] ++;
	if(g_pMinigameJoins[playerid][e_Count_PIZZAS] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_PIZZAS"));

	SetPlayerMapIcon(playerid, 85, PIZZAS_KEZDOHELY, 35, 0, MAPICON_GLOBAL);
	SendClientMessage(playerid, -1, LANG(playerid, "MSG_PIZZASNAK_MENTEL_VEGYEL_FEL"));
	
	HideClanZones(playerid);
	
	foreach(Player, i) if(g_pGamesData[i] & e_PIZZAS) count++;
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
		SendClientMessagef(i, 0x00FF7FAA, LANG(i, "MSG__PIZZAS___CSATLAKOZOTT_A_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, count);
	}
	return 1;
}

CMD:postasinfo(playerid, params[], 0, 0)
{
    format(dline, 144, "g_pOnLevel: %d | LevelHelyek: %d, %d, %d, %d, %d | ElvittLevel: %d, %d, %d, %d, %d", g_pOnLevel{playerid},
	g_pLevelHelyek[playerid]{0}, g_pLevelHelyek[playerid]{1}, g_pLevelHelyek[playerid]{2}, g_pLevelHelyek[playerid]{3}, g_pLevelHelyek[playerid]{4},
	g_pElvittLevel[playerid]{0}, g_pElvittLevel[playerid]{1}, g_pElvittLevel[playerid]{2}, g_pElvittLevel[playerid]{3}, g_pElvittLevel[playerid]{4});
	SendClientMessage(playerid, -1, dline);
	return 1;
}

CMD:levelek(playerid, params[], 0, 0)
{
	if(!(g_pGamesData[playerid] & e_POSTAS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_NEM_VAGY_POSTAS"));
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, POSTAS_KEZDOHELY)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_NEM_VAGY_A_POSTANAL"));

    dline[0] = EOS;
 	for(new i; i != 50; i++)
	{
		if(g_Posta[i] == -1) continue;

		if(!dline[0])
		{
			format(dline, 64, "%d. - %.3f méter - Fort Carson - %d", i, GetDistance3D(POSTAS_KEZDOHELY, g_LevelPos[g_Posta[i]][0], g_LevelPos[g_Posta[i]][1], g_LevelPos[g_Posta[i]][2]), g_Posta[i]);
		}
		else
		{
            format(dline, sizeof(dline), "%s\n%d. - %.3f méter - Fort Carson - %d", dline, i, GetDistance3D(POSTAS_KEZDOHELY, g_LevelPos[g_Posta[i]][0], g_LevelPos[g_Posta[i]][1], g_LevelPos[g_Posta[i]][2]), g_Posta[i]);
		}
	}

	if(!dline[0])
    {
 		ShowPlayerDialogEx(playerid, DIALOG_POSTA, DIALOG_STYLE_MSGBOX, "Levelek", "Jelenleg üres a posta!", "Várok");
	}
	else
	{
 		ShowPlayerDialogEx(playerid, DIALOG_POSTA, DIALOG_STYLE_LIST, "Levelek", dline, "Elvisz", "Mégse");
	}
	return 1;
}

CMD:pizzak(playerid, params[], 0, 0)
{
	if(!(g_pGamesData[playerid] & e_PIZZAS)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_NEM_VAGY_PIZZAS"));
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, PIZZAS_KEZDOHELY)) return SendClientMessage(playerid, -1, LANG(playerid, "MSG_NEM_VAGY_A_PIZZERIABAN"));

    dline[0] = EOS;
 	for(new i; i != 50; i++)
	{
		if(g_Pizza[i] == -1) continue;

		if(!dline[0])
		{
			format(dline, 64, "%d. - %.3f méter - Palomino Creek - %d", i, GetDistance3D(PIZZAS_KEZDOHELY, g_PizzaPos[g_Pizza[i]][0], g_PizzaPos[g_Pizza[i]][1], g_PizzaPos[g_Pizza[i]][2]), g_Pizza[i]);
		}
		else
		{
            format(dline, sizeof(dline), "%s\n%d. - %.3f méter - Palomino Creek - %d", dline, i, GetDistance3D(PIZZAS_KEZDOHELY, g_PizzaPos[g_Pizza[i]][0], g_PizzaPos[g_Pizza[i]][1], g_PizzaPos[g_Pizza[i]][2]), g_Pizza[i]);
		}
	}

	if(!dline[0])
    {
 		ShowPlayerDialogEx(playerid, DIALOG_POSTA, DIALOG_STYLE_MSGBOX, "Pizzák", "Jelenleg nincs pizza, amit kikéne szállítanod!", "Várok");
	}
	else
	{
 		ShowPlayerDialogEx(playerid, DIALOG_POSTA, DIALOG_STYLE_LIST, "Pizzák", dline, "Elvisz", "Mégse");
	}
	return 1;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
forward OnRconCommand(cmd[]);
public OnRconCommand(cmd[])
{
    //printf("OnRconCommand_GM -> %s", cmd);
#if defined YSF
	if(!strcmp(cmd, "clearbans", true))
	{
		ClearBanList();
		print("banlista törölve");
		return 1;
	}
#endif
	if(!strcmp(cmd, "stat", true))
	{
		mysql_stat(tmp);
		print(tmp);
		return 1;
	}

	if(!strcmp(cmd, "bcar", true))
	{
		printf("BCar: %d, Flag: %d", g_BonusCarOwner, ZaszloOwner);
		return 1;
	}

	if(!strcmp(cmd, "reconnect", true))
	{
		mysql_reconnect();
		print(!"reconnect");
		return 1;
	}
/*
	if(!strcmp(cmd, "ping", true))
	{
		printf("MySQL Ping: %d", mysql_ping());
		return 1;
	}
*/
	if(!strcmp(cmd, "help", true))
	{
		print("Rcon parancsok");
		print("info, aka, pm, asay, ann, uconfig, chat");
		return 1;
	}

	if(!strcmp(cmd, "pm", .length = 2))
	{
	    new arg_1 = argpos(cmd), arg_2 = argpos(cmd, arg_1),targetid = strval(cmd[arg_1]), message[128];

    	if (!cmd[arg_1] || cmd[arg_1] < '0' || cmd[arg_1] > '9' || targetid > MAX_PLAYERS || targetid < 0 || !cmd[arg_2])
	        print(!"HASZNÁLAT: \"pm [Játékos ID] [Üzenet]\"");

	    else if (!IsPlayerConnected(targetid)) print(LANG(0, "MSG_NOT_CONNECTED"));
    	else
	    {
	        format(message, sizeof(message), "[RCON] PM: %s", cmd[arg_2]);
	        SendClientMessage(targetid, COLOR_WHITE, message);
   	        printf("Rcon PM '%s' sent", cmd[arg_1] );
    	}
	    return 1;
	}

	if(!strcmp(cmd, "asay", .length = 4))
	{
	    new arg_1 = argpos(cmd);

    	if (!cmd[arg_1] || cmd[arg_1] < '0') print(!"HASZNÁLAT: \"asay  [Üzenet] \"(Üzenet adminoknak)");
	    else
	    {
	        format(i_str, sizeof(i_str), "[RCON] MessageToAdmins: %s", cmd[arg_1]);
		    foreach(new i: Player)
			{
				if(!GetPVarInt(i, "Level")) continue;
				SendClientMessage(i, COLOR_WHITE, i_str);
			}
	        printf("Admin Üzenet '%s' elküldve.", cmd[arg_1] );
    	}
	    return 1;
	}

	if(!strcmp(cmd, "ann", .length = 3))
	{
	    new arg_1 = argpos(cmd), message[128];
    	if (!cmd[arg_1] || cmd[arg_1] < '0') print(!"Használat: \"ann  [Üzenet]\" (Játék üzenet mindenkinek)");
	    else
	    {
	        format(message, sizeof(message), "[RCON]: %s", cmd[arg_1]);
	        GameTextForAll(message,3000,3);
	        printf("GameText Message '%s' sent", cmd[arg_1] );
    	}
	    return 1;
	}

	if(!strcmp(cmd, "msg", .length = 3))
	{
	    new arg_1 = argpos(cmd);
    	if (!cmd[arg_1] || cmd[arg_1] < '0') print(!"Használat: \"msg  [Üzenet]\" (Üzenet mindenkinek)");
	    else
	    {
	        SendClientMessageToAllf(COLOR_WHITE, "[RCON]: %s", cmd[arg_1]);
	        printf("Üzented '%s' elküldve.", cmd[arg_1] );
    	}
	    return 1;
	}

	if(!strcmp(cmd, "uconfig", true))
	{
		mysql_function_query(1, "SELECT * FROM `config` WHERE `id` = 1", true, "THREAD_Settings", "");
		print(!"Sikeres frissítés");
		return 1;
	}

	if(!strcmp(cmd, "saveplayers", true))
	{
		foreach(new i: Player)
		{
			SavePlayer(i);
		}
	    return 1;
	}
	return 0;
}

public OnRconLoginAttempt(p_ip[], password[], success)
{
    if(!success)
    {
        if(++g_iRCONFails > 5)
		{
			SendRconCommandf("banip %s", p_ip);
			return 0;
		}

	   	foreach(new i: Player)
		{
            GetPlayerIp(i, ip, sizeof(ip));
            printf("i = %d | ip = %s | p_ip = %s", i, ip, p_ip);
			if(!strcmp(p_ip, ip, true))
            {
				ShowPlayerDialogEx(i, 5000, DIALOG_STYLE_MSGBOX, "Hibás jelszó", "Hiába próbálkozol belépni, nemfogsz sikerrel járni :)\n\nAz RCON jelszót {" #XCOLOR_SAMP "}CSAK {" #XCOLOR_RED "}Ati, Dave és Dávid {" #XCOLOR_DEFAULT "}tudja, senki más nem!", "Ok");

				getdate(year, month, day);
				gettime(hour, minute, second);

				mysql_format(1, query, sizeof(query), "INSERT INTO `rcon_f`(id, name, reg_id, ip, pass, time) VALUES(0, '%s', %d, '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(i), PlayerInfo[i][pRegID], ip, password, year, month, day, hour, minute, second);
				mysql_function_query(1, query, false, "", "");
				return 1;
			}
        }
    }
	else
	{
	   	foreach(new i: Player)
		{
            GetPlayerIp(i, ip, sizeof(ip));
			printf("i = %d | ip = %s | p_ip = %s", i, ip, p_ip);
			if(!strcmp(p_ip, ip, true))
            {
				/*if(!(g_ServerFlags & e_RACEDEBUG))
				{
					if(GetCountryName(ip, country, sizeof(country)))
					{
                        if(strcmp(country, "Slovakia", true) != 0) return 0; // Nem lép be rcon-ba, ha nem szlovákiábú van!
					}
				}
				*/
				getdate(year, month, day);
				gettime(hour, minute, second);

				mysql_format(1, query, sizeof(query), "INSERT INTO `rcon`(id, name, reg_id, ip, pass, time) VALUES(0, '%s', %d, '%s', '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", pName(i), PlayerInfo[i][pRegID], ip, password, year, month, day, hour, minute, second);
				mysql_function_query(1, query, false, "", "");
				return 1;
			}
		}
    }
	return 1;
}

#if defined YSF
public OnRemoteRCONPacket(const ipaddr[], port, const password[], success, const command[])
{
	printf("remote console - ip: %s, port: %d, pass: %s, success: %d, command: %s", ipaddr, port, password, success, command);
	if(!success)
	{
    	BlockIpAddress(ipaddr, 0);
		printf("remote rcon ban %s", ipaddr);
    	return 0;
	}
/*
	mysql_escape_string(ipaddr, ip);
	mysql_escape_string(password, i_str);
	mysql_escape_string(command, tmp);
	format(query, sizeof(query), "INSERT INTO `rcon_remote`(id, ip, port, pass, command, success, time) VALUES(0, '%s', %d, '%s', '%s', %d, %d)", ip, port, i_str, tmp, success, CurrentTimestamp());
	mysql_function_query(1, query, false, "", "");

	if(!success)
	{
		SendRconCommandf("banip %s", ipaddr);
		printf("remote rcon ban %s", ipaddr);
		return 0;
	}
	*/
	return 1;
}
#endif

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    foreach(Player, i)
    {
        if(spectatorid[i] == playerid)
        {
            SetPlayerInterior(i, GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
        }
    }

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if((vID = GetPlayerDynamicVehicleID(playerid)) != g_BonusCarID)
		{
			LinkDynamicVehicleToInterior(vID, newinteriorid);
		}
	}
	return 1;
}

OnePlayAnim(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, freeze, time)
{
	ShowWelcome(playerid, LANG(playerid, "MSG_ANIMACIO_MEGALLITASA_RKPED"));
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, freeze, time);
	return 1;
}

LoopingAnim(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, freeze, time)
{
    g_PlayerData[playerid] |= e_USE_LOOP_ANIM;
    ShowWelcome(playerid, LANG(playerid, "MSG_ANIMACIO_MEGALLITASA_RKPED"));
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, freeze, time, 1);
	return 1;
}

StopLoopingAnim(playerid)
{
	g_PlayerData[playerid] &= ~e_USE_LOOP_ANIM;
    ClearAnimations(playerid);
	return 1;
}

stock SetPlayerRandomSpawn(playerid, skinid)
{
	Ide:
	new rand_ = Itter_Random(Teleports);
	if(rand_ == 0 || rand_ == Itter_Count(Teleports) + 1) goto Ide;
	
	SetPVarInt(playerid, "RandSpawnID", rand_);
	SetSpawnInfo(playerid, NO_TEAM, skinid, g_TeleportPos[rand_][0], g_TeleportPos[rand_][1], g_TeleportPos[rand_][2], g_TeleportPos[rand_][3], 0, 0, 0, 0, 0, 0);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

//	SendClientMessageToAllf(COLOR_WHITE, "MSG_ONPLAYERDEATHPLAYERID___KILLERI", playerid, killerid, reason, GetPlayerDynamicVehicleID(playerid));
//	new tick1 = GetTickCount();
	new
	    pScore = GetPlayerScore(killerid);
	if(reason == 0xFF) reason = WEAPON_COLLISION;

	if(killerid != INVALID_PLAYER_ID)
	{
		if(g_pOtherFlags[killerid] & e_KICKED) return 0;

		// Anti fake kill
		if(!Bit_Get(gPlayerShotPlayer[killerid], playerid) && !IsPlayerNPC(killerid) && !IsPlayerNPC(playerid))
		{
			// DM-ben ha a robbantó töltény be van kapcsolva akkro valószinûleg sebzés nélkül öli meg a játékost, szal nem fake kill
			new dmid = g_pDeathMatchID[killerid];
			if(dmid != -1)
			{
				if(g_DMFlags[dmid] & e_EXPLOSIVE_AMMO)
				    goto NotFakeKill;
			}

			// Ha a robbantó töltény be van kapcoslva, akkor továbbugrjuk ezt a részt a fent leírtak miatt
			if(g_PlayerData[killerid] & e_EXPLOSION_AMMO)
			    goto NotFakeKill;

			format(tmp, 144, "Lehetséges fake kill! {%06x}%s(%d) {FFFFFF}-> {%06x}%s(%d), {FFFFFF}reason: %d, streamedin: %d", GetPlayerColor(killerid) >>> 8, pName(killerid), killerid, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, reason, IsPlayerStreamedIn(killerid, playerid));
			foreach(Player, i)
			{
				if(GetPVarInt(i, "Level") < 1) continue;
				SendClientMessage(i, -1, tmp);
			}

			print(tmp);
			Bit_SetAll(gPlayerShotPlayer[killerid], false);

			mysql_format(1, query, sizeof(query), "INSERT INTO `fakekills`(`id`, `killer`, `killer_regid`, `player`, `player_regid`, `weaponid`, `type`, `time`) VALUES (0, '%s', %d, '%s', %d, %d, 0, %d)", pName(killerid), PlayerInfo[killerid][pRegID], pName(playerid), PlayerInfo[playerid][pRegID], reason, CurrentTimestamp());
			mysql_function_query(1, query, false, "", "");

			g_FakeKillKick{playerid}++;
			if(g_FakeKillKick{playerid} > 3)
			{
				format(tmp, 144, "Fake Kill: {%06x}%s(%d) kickelve lett, mivel 1 perc alatt több, mint 3 lehetséges fakekillje volt.", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
				foreach(Player, i)
				{
					if(GetPVarInt(i, "Level") < 1) continue;
					SendClientMessage(i, -1, tmp);
				}
				Kick(playerid);
				return 1;
			}
		}

		// Ha a gyilkos vezeti a jármûvet és nincs semilyen minigameban
		if(IsPlayerInAnyDynamicVehicle(killerid) && !(IN_MINIGAME_AND_SHITS & g_pGamesData[playerid]))
		{
			printf("lofasz");
			// Ha az indok elütés, repülõvel való elütés, robbanás
			if(0 <= reason <= 55)
			{
				vID = GetPlayerDynamicVehicleID(killerid);
				datez = GetDynamicVehicleModel(vID);

				// Ha helikopterben vagy repülõben van a gyilkos - vagy tank
				if(VEHICLE_HELI <= GetVehicleType(datez) <= VEHICLE_PLANE || datez == 432)
				{
					SendClientMessagef(killerid, COLOR_YELLOW, LANG(killerid, "MSG_DRIVEBY_MIATT_10_PERC_BORTONT"));
					SendClientMessageToAllf(COLOR_DB, "MSG_ANTIDB___BORTONBE_LETT_ZARVA", GetPlayerColor(killerid) >>> 8, pName(killerid), killerid);
					SetPVarInt(killerid, "JailTime", 2 * 60);

					UpdatePlayerSpawnInfo(killerid);
					SpawnPlayer(killerid);
				}
			}
		}
	}

NotFakeKill:
	Bit_SetAll(gPlayerShotPlayer[playerid], false);
	if(g_pGamesData[playerid] & e_IN_RANGE)
	{
	    SendClientMessage(playerid, 0xFFBF00FF, LANG(playerid, "MSG_SHOOTING_RANGE_MEGHALTAL_A"));
		FinishShootingRange(playerid);
	}

/*
	else if(reason == 51)
	{
		foreach(new i: Player)
		{
			if(!GetPVarType(i, "BombX") || playerid == i) continue;

			if(IsPlayerInRangeOfPoint(playerid, 6, GetPVarFloat(i, "BombX"), GetPVarFloat(i, "BombY"), GetPVarFloat(i, "BombZ")))
			{
				killerid = i;
	            InfoTD_MSG(i, MESSAGE_TIME, LANG(i, "MSG_RA_BOMBAD_HMEGOLT_BHVALAKIT"));
				break;
			}
		}
	}
*/

	g_PlayerData[playerid] &= ~e_USE_LOOP_ANIM;
    PVarIntFel(playerid, "Deaths");
	getdate(year, month, day);
	gettime(hour, minute, second);

	country[0] = EOS;
	GetWeaponName(GetPlayerWeapon(killerid), country, 45);
	if(!IsPlayerConnected(killerid) && killerid == INVALID_PLAYER_ID)
	{
		new
		    dmid = g_pDeathMatchID[playerid];
		mysql_format(1, query, sizeof(query), "INSERT INTO `killlist`(id, player, player_id, killer, killer_id, reason, weaponname, dm_zone, killstreak, time) \
										VALUES(0, '%s', %d, '%s', %d, %d, '%s', %d, 0, '%02d.%02d.%02d/%02d.%02d.%02d')", \
										pName(playerid), PlayerInfo[playerid][pRegID], "INVALID_PLAYER_ID", -1, reason, country, (dmid != -1) ? DM_SQL(dmid) : -1, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");
	}
	else if(IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID)
	{
		// Ha nem botot ölt, akkor a kill floodot emeljük
		if(!IsPlayerNPC(playerid))
			g_pKillFlood{killerid}++;

		if(g_pKillFlood{killerid} > 7)
        {
			AntiCheatLog(killerid, "KILLSPAM ( %s ) <%d>'",  country, reason);

			SendClientMessage(killerid, COLOR_WHITE, LANG(killerid, "MSG_KILL_SPAM_IDO_ELERVE_NEM_OLHETSZ"));
			SetTimerEx("KickPlayer", KICK_TIME, false, "d", killerid);
			return 1;
		}

		if(++g_pDeathFlood{playerid} > 10 && !(g_pGamesData[playerid] & e_GRAV))
		{
			AntiCheatLog(playerid, "KILLSPAM DEATH ( %s ) <%d>'",  country, reason);

			SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_KILL_SPAM_IDO_ELERVE_NEM_OLHETSZ"));
			SetTimerEx("KickPlayer", KICK_TIME, false, "d", playerid);
			return 1;
		}

		new
		    dmid = g_pDeathMatchID[playerid];
		mysql_format(1, query, sizeof(query), "INSERT INTO `killlist`(id, player, player_id, killer, killer_id, reason, weaponname, dm_zone, killstreak, time) \
										VALUES(0, '%s', %d, '%s', %d, %d, '%s', %d, %d, '%02d.%02d.%02d/%02d.%02d.%02d')", \
										pName(playerid), PlayerInfo[playerid][pRegID], pName(killerid), PlayerInfo[killerid][pRegID], reason, country, (dmid != -1) ? DM_SQL(dmid) : -1, GetPVarInt(killerid, "KillStreak") + 1, year, month, day, hour, minute, second);
		mysql_function_query(1, query, false, "", "");

		// Killisthez ID hozzárakása
		format(name, sizeof(name), "%s(%d)", pName(playerid), playerid);
		SetPlayerName(playerid, name, false);

		format(name, sizeof(name), "%s(%d)", pName(killerid), killerid);
		SetPlayerName(killerid, name, false);

        SendDeathMessage(killerid, playerid, reason);

		SetPlayerName(playerid, pName(playerid), false);
		SetPlayerName(killerid, pName(killerid), false);

		PVarIntFel(killerid, "Kills");
        session[kills][0] ++;
       	if(!(g_pOtherFlags[playerid] & e_NO_TEXTDRAWS)) InfoTD_MSGf(playerid, 3500, LANG(playerid, "MSG_RBAZDMEGW_RHW_MEGO"), pName(killerid), killerid);
        
		// Gangwarban ölések emelése
		if((g_pGamesData[playerid] & e_IN_GANGWAR) && (g_pGamesData[killerid] & e_IN_GANGWAR))
		{
			new
			    KilllerTeam = GetPlayerTeam(killerid),
			    DeathTeam = GetPlayerTeam(playerid),
			    bool:bNull;
			for(new id; id != 40; id++)
			{
				if(g_ZoneIsAttacked[id] != 2) continue;

				// Ha a ellenséges zóna támadója megeggyezik a játékos csapatával, aki megölte a játékost
				if(g_ZoneAttacker[id] == KilllerTeam && g_ZoneOwner[id] == DeathTeam)
				{
                    g_ZoneKillsAttacker[id]++;
                    bNull = true;
				}

				if(g_ZoneAttacker[id] == DeathTeam && g_ZoneOwner[id] == KilllerTeam)
				{
                    g_ZoneKillsDefender[id]++;
                    bNull = true;
				}

                if(bNull) g_ZoneLastKill[id] = 0;
			}
		}

		// Ha körözött a személy
		if(GetPlayerWantedLevel(playerid) > 0)
		{
			new
				penz = GetPlayerWantedLevel(playerid) * 2000;
		    SendClientMessagef(killerid, COLOR_PINK, LANG(killerid, "MSG_MEGOLTED_A_KOROZOTT_SZEMELYT"), FormatNumber(penz));

	        GivePlayerMoneyEx(killerid, penz, "WantedKill");
	    	GivePlayerXP(killerid, 4);
			SetPlayerWantedLevel(playerid, 0);
		}

		// Ha van vérdíj a fején
		if(g_pBounty[playerid])
		{
		    SendClientMessagef(killerid, COLOR_WHITE, LANG(killerid, "MSG_VERDIJ_MEGOLTED__NEVU_JATEKOS"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(g_pBounty[playerid]));
		    SendClientMessageToAllf(0xFFFF00FF, "MSG_VERDIJ_MEGOLTE__NEVU_JATEKOST", GetPlayerColor(killerid) >>> 8, pName(killerid), killerid, GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, FormatNumber(g_pBounty[playerid]));

			GivePlayerMoneyEx(killerid, g_pBounty[playerid], "BountyKill");

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `bounty` = 0 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");
			
			mysql_format(1, query, sizeof(query), "INSERT INTO `bounty_kill` (`id`, `killerid`, `killer`, `regid`, `player`, `cash`, `time`) VALUES (0, %d, '%s', %d, '%s', %d, '%02d.%02d.%02d %02d:%02d:%02d')", PlayerInfo[killerid][pRegID], pName(killerid), PlayerInfo[playerid][pRegID], pName(playerid), g_pBounty[playerid],year, month, day, hour, minute, second);
			mysql_function_query(1, query, false, "", "");
			g_pBounty[playerid] = 0;
		}
	}

	session[kills][1] ++;
	if(!(/*IsPlayerInDynamicArea(killerid, gGroveZone) || */IsPlayerInDynamicArea(killerid, gLMZone)&& IsPlayerInDynamicArea(killerid, gSevileZone)))
	{
		if(GetPVarInt(playerid, "SpawnLocation") == SPAWNPLACE_BEFORE_DEATH)
		{
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, Angle);

			SetPVarFloat(playerid, "DeathX", X);
			SetPVarFloat(playerid, "DeathY", Y);
			SetPVarFloat(playerid, "DeathZ", Z);
            SetPVarFloat(playerid, "DeathA", Angle);
			SetPVarInt(playerid, "DeathInt", GetPlayerInterior(playerid));

			SetPVarInt(playerid, "DeathWorld", ((e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_TRUCKING | e_IN_RACE | e_IN_GANGWAR | e_IN_CTC | e_POSTAS | e_PIZZAS) & g_pGamesData[playerid]) ? 0 : GetPlayerVirtualWorld(playerid));

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `deathx` = %f, `deathy` = %f, `deathz` = %f, `deatha` = %f, `deathint` = %d, `deathworld` = %d WHERE `reg_id` = %d", X, Y, Z, Angle, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), PlayerInfo[playerid][pRegID]);
		    mysql_function_query(1, query, false, "", "");

			if(ZaszloOwner == playerid) g_PlayerData[playerid] |= e_ZASZLONA_MEGDOGLOTT;
		}
/*
		if(!GetPlayerWantedLevel(playerid))
		{
			if(ZaszloOwner != playerid && !IsPlayerInDynamicVehicle(playerid, g_BonusCarID))
			{
				GivePlayerMoneyEx(killerid, - 5000);
				GameTextForPlayer(killerid, FixGameString("Ne ölj ha nemvagy DM-be ~n~ -5,000 dollár!"), 4000, 3);
			}
		}
*/
	}

    if(g_pDeathMatchID[playerid] != -1)
    {
		new
		    dmid = g_pDeathMatchID[playerid];
		if(CurrKillStreakID[dmid] == playerid)
	    {
			if(killerid != INVALID_PLAYER_ID)
			{
				foreach(new i: Player)
				{
					if(g_pDeathMatchID[i] != dmid) continue;
					SendClientMessagef(i, COLOR_GOLD, LANG(i, "MSG_KILLSTREAK_A_LEGNAGYOBB_GYILKOS"), GetPlayerColor(playerid)>>> 8, pName(playerid), playerid, pName(killerid), killerid);
				}
			}
			else
			{
				foreach(new i: Player)
				{
					if(g_pDeathMatchID[i] != dmid) continue;
					SendClientMessagef(i, COLOR_GOLD, LANG(i, "MSG_KILLSTREAK_A_LEGNAGYOBB_GYILKOS_1"), GetPlayerColor(playerid)>>> 8, pName(playerid), playerid);
				}
			}
	        CurrKillStreak[dmid] = 2;
	        CurrKillStreakID[dmid] = INVALID_PLAYER_ID;

			//if(g_PlayerFlags[playerid] & e_MUSIC) StopAudioStreamForPlayer(playerid);
		}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
		new
		    dmid = g_pDeathMatchID[killerid];
		if(dmid != -1 || /*IsPlayerInDynamicArea(killerid, gGroveZone) ||*/ IsPlayerInDynamicArea(killerid, gSevileZone) || IsPlayerInDynamicArea(killerid, gLMZone))
		{
			// Fegyver töltény emelése
			if(GetPlayerWeapon(killerid) == WEAPON_SNIPER)
			{
	        	SetPlayerAmmo(killerid, GetPlayerWeapon(killerid), GetPlayerAmmo(killerid) + 7);
	  		}
	  		else
			{
			    SetPlayerAmmo(killerid, GetPlayerWeapon(killerid), GetPlayerAmmo(killerid) + 100);
			}

			if(dmid != -1)
			{
		        PVarIntFel(killerid, "KillStreak");
				new
				    CurrKS = GetPVarInt(killerid, "KillStreak");

				if(CurrKS > CurrKillStreak[dmid])
				{
					CurrKillStreak[dmid]++;// PlayAudioStreamForPlayer(killerid, !"http://www.mfrserver.tk/SAMP/One_Shot_2_Shot.mp3");
					foreach(new i: Player)
					{
						if(g_pDeathMatchID[i] != dmid) continue;
						SendClientMessagef(i, COLOR_GOLD, LANG(i, "MSG_KILLSTREAK_JELENLEG__A_LEGNAG"), GetPlayerColor(killerid) >>> 8, pName(killerid), killerid, CurrKillStreak[dmid]);

						if(g_DM_MaxKillstreak[dmid] < CurrKillStreak[dmid])
						{
						    g_DM_MaxKillstreak[dmid]++;
						    g_DM_MaxKillstreakPlayerID[dmid] = PlayerInfo[killerid][pRegID];
						    strcpy(g_DM_MaxKillstreakPlayer[dmid], pName(killerid));


					     	mysql_format(1, query, sizeof(query), "UPDATE `custom_dm` SET `maxkillstreak` = %d, `player` = '%s', `player_id` = %d WHERE `id` = %d", g_DM_MaxKillstreak[dmid], g_DM_MaxKillstreakPlayer[dmid], g_DM_MaxKillstreakPlayerID[dmid], DM_SQL(dmid));
							mysql_function_query(1, query, true, "", "");
						}
					}

		            CurrKillStreakID[dmid] = killerid;
					SetPVarInt(killerid, "KillStreak", CurrKillStreak[dmid]);

		            if(CurrKillStreak[dmid] < 15)
		            {
						format(i_str, sizeof(i_str), "~b~Megölted %s(%d)-t!~n~~g~~h~Kaptál érte ~y~~h~+%d XP-t!", pName(playerid), playerid, CurrKillStreak[dmid]);

					    //GivePlayerMoneyEx(killerid, (CurrKillStreak[dmid] * 1000));
			            GivePlayerXP(killerid, CurrKillStreak[dmid]);
					}
					else
					{
						format(i_str, sizeof(i_str), "~b~Megölted %s(%d)-t!~n~~g~~h~Kaptál érte ~y~~h~+15 XP-t!", pName(playerid), playerid);

						//GivePlayerMoneyEx(killerid, 15000);
			            GivePlayerXP(killerid, 15);
					}
					InfoTD_MSG(killerid, 2000, i_str);

					if(CurrKillStreak[dmid] > GetPVarInt(killerid, "MaxKillStreak"))
					{
						SetPVarInt(killerid, "MaxKillStreak", CurrKillStreak[dmid]);

						mysql_format(1, query, sizeof(query), "UPDATE `players` SET `killstreak` = %d WHERE `reg_id` = %d", CurrKillStreak[dmid], PlayerInfo[killerid][pRegID]);
					    mysql_function_query(1, query, false, "", "");
					}
				}
				else
				{
					if(!(g_pOtherFlags[killerid] & e_NO_TEXTDRAWS)) InfoTD_MSGf(killerid, 3500, LANG(killerid, "MSG_BMEGOLTED_TNGHKAPTAL"), pName(playerid), playerid);

					if(g_pSzint{playerid} < 10) GivePlayerMoneyEx(killerid, 3000, "DMKill");
		            GivePlayerXP(killerid, 2);
				}

				// KillerID
				new Kills, Deaths;
				SetPVarInt(killerid, "InDMXP", GetPVarInt(killerid, "InDMXP") + (GetPlayerScore(killerid) - pScore));
				SetPVarInt(playerid, "InDMXP", GetPVarInt(playerid, "InDMXP") - 2);
				// DM Kill Infó
				PVarIntFel(killerid, "InDMKills");
				PVarIntFel(playerid, "InDMDeaths");


				// playerid
				if(!(g_pTDFlags[playerid] & e_NOTD_DMKILLS))
				{
					Kills = GetPVarInt(playerid, "InDMKills");
					Deaths = GetPVarInt(playerid, "InDMDeaths");

					//printf("asd %d, %d", Kills, Deaths);
					format(i_str, sizeof(i_str), LANG(playerid, "MSG_TD_KILLDEATH_STAT"), Kills, Deaths, (Kills && Deaths) ? floatdiv(Kills, Deaths) : 0.0, GetPVarInt(playerid, "InDMXP"));
					PlayerTextDrawSetString(playerid, InDMKills[playerid], i_str);
				}

				// killerid
				if(!(g_pTDFlags[killerid] & e_NOTD_DMKILLS))
				{
					Kills = GetPVarInt(killerid, "InDMKills");
					Deaths = GetPVarInt(killerid, "InDMDeaths");

					format(i_str, sizeof(i_str), LANG(killerid, "MSG_TD_KILLDEATH_STAT"), Kills, Deaths, (Kills && Deaths) ? floatdiv(Kills, Deaths) : 0.0, GetPVarInt(killerid, "InDMXP"));
					PlayerTextDrawSetString(killerid, InDMKills[killerid], i_str);
				}
			}
		}
	}

	new
	    duelid = g_pDuelID{playerid},
	    bool:bIsEllenfel;
	if(killerid != INVALID_PLAYER_ID)
	{
		//printf("1 - %d", killerid);
		// Ha mind a 2 játékos duelben van
		if(g_pDuelID{playerid} != 0xFF && g_pDuelID{killerid} != 0xFF)
		{
            bIsEllenfel = true;
/*
			new
			    duelid = g_pDuelID{killerid};
*/
		    //printf("2 - id - %d, %d, caller: %d", g_pDuelID{playerid}, duelid, g_pDuelCaller[playerid]);

            // Ha nem hívta meg õt senki sem a párbajra, akkor õ a meghívó játékos
            if(g_pDuelCaller[killerid] == INVALID_PLAYER_ID)
            {
            	g_DuelKills[duelid][0] ++;
			}
			else
			{
                g_DuelKills[duelid][1] ++;
			}
			// Menetek számának növelése
			g_DuelRounds[duelid]++;
		}
	}
	else
	{
        //printf("else - %d", killerid);
		// Ha a játékos simán megdögût - nem lõtte le õtet senki
		if(duelid != 0xFF)
		{
 			//printf("else != 0xFF - %d", killerid);

            // Ha nem hívta meg õt senki sem a párbajra, akkor õ a meghívó játékos
			if(g_pDuelCaller[playerid] == INVALID_PLAYER_ID)
			{
				// Újraspawnoljuk a meghívott játékost
				SpawnPlayer(g_DuelPlayer[duelid][1]);
				printf("else 1- %d", g_DuelPlayer[duelid][1]);
			}
			else
			{
                SpawnPlayer(g_DuelPlayer[duelid][0]);
				printf("else 2- %d", g_DuelPlayer[duelid][1]);
			}
			g_DuelRounds[duelid]++;
		}
	}

	if(duelid != 0xFF)
	{
		new
		    iLoc = g_DuelLocation{duelid},
			bool:bExit;
		// Ha még nem az utolsó menet, akkor újra a duelben spawnoljuk újra
		if(g_DuelRounds[duelid] != g_DuelMaxRound[duelid])
		{
			SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), g_fDuel[iLoc][e_fDuelPos][0], g_fDuel[iLoc][e_fDuelPos][1], g_fDuel[iLoc][e_fDuelPos][2], g_fDuel[iLoc][e_fDuelPos][3], 0, 0, 0, 0, 0, 0);
			if(bIsEllenfel) SetSpawnInfo(killerid, NO_TEAM, GetPlayerSkin(killerid), g_fDuel[iLoc][e_fDuelPos][4], g_fDuel[iLoc][e_fDuelPos][5], g_fDuel[iLoc][e_fDuelPos][6], g_fDuel[iLoc][e_fDuelPos][7], 0, 0, 0, 0, 0, 0);
		}
		else
		{
			new
			    winner;
			// Megnézzük, hogy a kihívottnak, vagy a kihívónak van-e a több killje
			if(g_DuelKills[duelid][0] > g_DuelKills[duelid][1])
			{
				winner = 0;
				printf("finish A");
			}
			else if(g_DuelKills[duelid][0] < g_DuelKills[duelid][1])
			{
	        	winner = 1;
				printf("finish B");
			}
			else
			{
	            winner = -1;
				printf("finish C");
			}

			// Ha nem egyenlõek az ölések, akkor kiírjuk, hogy ki a nyertes
			if(winner != -1)
			{
                datez = g_DuelPlayer[duelid][winner];
				SendClientMessageToAllf(-1, "MSG_DUEL___ES__KOZOTT_VEGET_2", pName(g_DuelPlayer[duelid][0]), g_DuelPlayer[duelid][0], pName(g_DuelPlayer[duelid][1]), g_DuelPlayer[duelid][1], GetPlayerColor(datez) >>> 8, pName(datez), datez, g_DuelKills[duelid][winner] - g_DuelKills[duelid][!winner], g_DuelKills[duelid][winner], g_DuelKills[duelid][!winner]);
			}
			else
			{
				SendClientMessageToAllf(-1, "MSG_DUEL___ES__KOZOTT_DONTE", pName(g_DuelPlayer[duelid][0]), g_DuelPlayer[duelid][0], pName(g_DuelPlayer[duelid][1]), g_DuelPlayer[duelid][1], g_DuelKills[duelid][0], g_DuelKills[duelid][1]);

			}
			bExit = true;
		}
		if(bIsEllenfel) SendClientMessagef(killerid, -1, LANG(killerid, "MSG_OLESEK_MEGHIVO___MEGHIVOTT"), g_DuelKills[duelid][0], g_DuelKills[duelid][1], g_DuelRounds[duelid], g_DuelMaxRound[duelid]);
		SendClientMessagef(playerid, -1, LANG(playerid, "MSG_OLESEK_MEGHIVO___MEGHIVOTT"), g_DuelKills[duelid][0], g_DuelKills[duelid][1], g_DuelRounds[duelid], g_DuelMaxRound[duelid]);

        SpawnPlayer(g_DuelPlayer[duelid][0]);
        SpawnPlayer(g_DuelPlayer[duelid][1]);

		if(bExit) ExitDuel(duelid);
	}
	else
	{
    	UpdatePlayerSpawnInfo(playerid);
	}

    new
		dmid = g_pDeathMatchID[playerid];
	// Anyád picsjaáér, méris másér..
	if(dmid != -1 && killerid != INVALID_PLAYER_ID)
	{
		new
		    teamid = g_pDeathMatchTeam[killerid];

		// Ha TDM-be van
		if(teamid != -1)
		{
			// Elsõ ölés leadásától számoljuk az idõt
			if(g_DMTeamKills[dmid][0] == 0 && g_DMTeamKills[dmid][1] == 0)
	            g_DMRoundStart[dmid] = GetTickCount();

			g_DMTeamKills[dmid][teamid] ++;

			format(name, sizeof(name), "%s: %d", FixGameString(g_szDMTeams[dmid][teamid]), g_DMTeamKills[dmid][teamid]);
			TextDrawSetString(g_DMTextdraw[dmid][teamid], name);

			if(g_DMTeamKills[dmid][teamid] >= g_DMMaxKills[dmid] && g_DMMaxKills[dmid])
			{
				new iTick = GetTickCount() - g_DMRoundStart[dmid];
				SendClientMessageToAllf(COLOR_WHITE, "MSG_DM___NEVU_CSAPATBA_ERTE_EL", g_DMTeamColor[dmid][teamid] >>> 8, g_szDMTeams[dmid][teamid], g_DMMaxKills[dmid]);
				SendClientMessageToAllf(COLOR_WHITE, "MSG_ELTELT_IDO_3F_MASODPERC", (float(iTick) / 1000));

	            g_DMTeamKills[dmid][0] = 0;
	            g_DMTeamKills[dmid][1] = 0;

				format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[dmid][0]), 0);
				TextDrawSetString(g_DMTextdraw[dmid][0], name);

				format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[dmid][1]), 0);
				TextDrawSetString(g_DMTextdraw[dmid][1], name);
			}
		}
 	}

	if(GetPVarType(playerid, "RaceParticipant"))
	{
		LeavePlayerFromRace(playerid);

		if((g_ServerFlags & e_RACE_START) && Participants < 2 && VersenyIdo > 30)
		{
			VersenyIdo = 30;
			return 1;
		}
		switch(Participants)
		{
			case 0: SendClientMessageToAllf(COLOR_GREEN, "MSG_RACE_6", pName(playerid), playerid, g_szRaceName_);
			case 1: SendClientMessageToAllf(COLOR_GREEN, "MSG_RACE_7", pName(playerid), playerid, g_szRaceName_);
		   	default: SendClientMessageToAllf(COLOR_GREEN, "MSG_RACE_8", pName(playerid), playerid, Participants, g_szRaceName_);
		}
    }

	if(GetPVarType(playerid, "LofaszHouseID"))
	{
		DeletePVar(playerid, "LofaszHouseID");
		DeletePVar(playerid, "LofaszEllopott");

		RemoveHouseRaktarIcon(playerid);
		SetGoodAllowed(playerid, true);
		DisableRemoteVehicleCollisions(playerid, !!(g_pGamesData[playerid] & e_GHOSTMODE));

		SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_LOPAS_BEFEJEZVE__MEGHALTAL"));
	}

	if((e_POSTAS | e_PIZZAS | e_IN_TAXI) & g_pGamesData[playerid])
	{
		cmd_leave(playerid, "");
	}

	// Halál után pickup létrehozása, amibõl felveheti a pénzt - ez csak 10es szintû játékosoktól megy
	{
		// Pénzt a játékos csak 10-es szinttõl veszt
		if(g_pSzint{playerid} > 9)
			GivePlayerMoneyEx(playerid, -3000, "DMDeath");

		new
		    pickup[5];
		GetPlayerPos(playerid, X, Y, Z);
		pickup[0] = CreateDynamicPickup(1212, 8, X + 0.4, Y - 0.7, Z - 0.8, -1);
		pickup[1] = CreateDynamicPickup(1212, 8, X - 0.5, Y + 0.5, Z - 0.8, -1);
		pickup[2] = CreateDynamicPickup(1212, 8, X - 0.7, Y + 0.7, Z - 0.8, -1);
		pickup[3] = CreateDynamicPickup(1212, 8, X - 0.1, Y + 0.9, Z - 0.8, -1);
		pickup[4] = CreateDynamicPickup(1212, 8, X + 0.3, Y - 0.1, Z - 0.8, -1);

		for(new i; i != 5; i++)
		{
			if(pickup[i] != -1)
			{
				Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickup[i], E_STREAMER_EXTRA_ID, e_PICKUP_TYPE_DEATH_MONEY);
			}
		}

		// Baszom a retkes anynát ha nem adja át a tömböket megoldom így -.- Kye <3
		SetTimerEx("DestroyHalottPickup", 12000, false, "dddddd", playerid, pickup[0], pickup[1], pickup[2], pickup[3], pickup[4]);
	}

	GivePlayerXP(playerid, XP_HALAL);
	DeletePVar(playerid, "RaceParticipant");
	g_pGamesData[playerid] &= ~e_IN_RACE;
	PlayerTextDrawHide(playerid, TD_InDMPlayers[playerid]);
    TextDrawHideForPlayer(playerid, NoKill);
	BlackBox(playerid);

	if(ZaszloOwner == playerid)
	{
		GetPlayerPos(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]);
		RemovePlayerAttachedObject(playerid, 9);

		ZaszloPickup = CreateDynamicPickup(2914, 1, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], 0);
		ZaszloOwner = INVALID_PLAYER_ID;
		g_pGamesData[playerid] &= ~e_FLAG_OWNER;
        ZaszloRespawn = 0;

        foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Flag_MSG) continue;
			SendClientMessagef(i, 0x132CD5AA, LANG(i, "MSG__FLAG___MEGHALT_MOST_A_ZA"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetClosestZaszloPos());
		}
	}
    //printf("death tick: %d", GetTickCount() - tick1);

//    ClearAnimations(playerid);
	return (g_PlayerFlags[playerid] & e_FASTRESPAWN) ? (SetTimerEx("RespawnPlayerAfterDeath", 50, false, "d", playerid)) : (1);
}

forward RespawnPlayerAfterDeath(playerid);
public RespawnPlayerAfterDeath(playerid)
{
/*
	if(GetPVarInt(playerid, "InDuel") == 2)
	{
    	ShowPlayerDialogEx(playerid, DIALOG_DUEL_LOCATION + 2, DIALOG_STYLE_LIST, "{" #XCOLOR_RED "}Párbaj - {" #XCOLOR_BLUE3 "}Szeretnél menni új menetet?", "Igen\nNem", "Oké");
	}
*/
    if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
	//SetCameraBehindPlayer(playerid);
	//SetPlayerHealth(playerid, 100.0);
	SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
	return SpawnPlayer(playerid);
}

forward DestroyHalottPickup(playerid, pickup1, pickup2, pickup3, pickup4, pickup5);
public DestroyHalottPickup(playerid, pickup1, pickup2, pickup3, pickup4, pickup5)
{
	if(IsValidDynamicPickup(pickup1) && Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickup1, E_STREAMER_EXTRA_ID) == e_PICKUP_TYPE_DEATH_MONEY)
		DestroyDynamicPickup(pickup1);

	if(IsValidDynamicPickup(pickup2) && Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickup2, E_STREAMER_EXTRA_ID) == e_PICKUP_TYPE_DEATH_MONEY)
		DestroyDynamicPickup(pickup2);

	if(IsValidDynamicPickup(pickup3) && Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickup3, E_STREAMER_EXTRA_ID) == e_PICKUP_TYPE_DEATH_MONEY)
		DestroyDynamicPickup(pickup3);

	if(IsValidDynamicPickup(pickup4) && Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickup4, E_STREAMER_EXTRA_ID) == e_PICKUP_TYPE_DEATH_MONEY)
		DestroyDynamicPickup(pickup4);

	if(IsValidDynamicPickup(pickup5) && Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickup5, E_STREAMER_EXTRA_ID) == e_PICKUP_TYPE_DEATH_MONEY)
		DestroyDynamicPickup(pickup5);
	return 1;
}

stock ShowClanZones(playerid)
{
    if(!(g_PlayerFlags2[playerid] & e_HIDE_CLANZONES))
    {
		foreach(clans, clanid)
		{
			if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) continue;
			GangZoneShowForPlayer(playerid, gClanGangZone[clanid], gClanColor[clanid]);
		}
		SetPVarInt(playerid,"HideClanZones",0);
	}
}

stock HideClanZones(playerid)
{
	foreach(clans, clanid)
	{
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) continue;
		GangZoneHideForPlayer(playerid, gClanGangZone[clanid]);
	}
	SetPVarInt(playerid,"HideClanZones",1);
}

public OnPlayerRequestClass(playerid, classid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

	// printf("OnPlayerRequestClass(playerid = %d, classid = %d)", playerid, classid);
	if(IsPlayerNPC(playerid)) return 1;

	SetPlayerTime(playerid, 24, 0);
	g_PlayerData[playerid] &= ~e_TIMESSPAWNED;
	if(!(g_PlayerData[playerid] & e_FIRST_CLASS))
	{
		g_PlayerData[playerid] |= e_FIRST_CLASS;
		if(!(g_PlayerFlags[playerid] & e_AUTOSPAWN) && !(g_PlayerData[playerid] & e_LOGGED_IN)) SetTimerEx("ApplyClassAnim", 150, false, "d", playerid);

        // Klánrendszer zónáinak mutatása
        ShowClanZones(playerid);

		if(!(g_PlayerData[playerid] & e_LOGGED_IN) && (g_PlayerData[playerid] & e_THREADS_DONE))
		{
			if(GetPVarInt(playerid, "LineID"))
			{
				LoginDialog(playerid);
			}
			else
			{
			    SelectLanguage(playerid);
			}
		}
	}

	if((g_PlayerFlags[playerid] & e_AUTOSPAWN) && (g_PlayerData[playerid] & e_LOGGED_IN))
	{
		SetUpSpawnData(playerid);
		UpdatePlayerSpawnInfo(playerid);
		if(GetPVarInt(playerid, "SpawnLocation") == SPAWNPLACE_SP) // Ha nem admin által mentett pozíció, akkor nem spawnoljuk le
		{
			g_PlayerData[playerid] |= e_SPAWN_SP;
		}
		else
		{
			SpawnPlayer(playerid);
		}
		return 0;
	}

    Streamer_UpdateEx(playerid, 2108.3535, 1286.0878, 24.7357);
	SetPlayerPos(playerid, 2129.6768, 1286.5992, 12.4058);
	SetPlayerFacingAngle(playerid, 91.2443);
    SetPlayerCameraPos(playerid, 2108.3535, 1286.0878, 24.7357);
	SetPlayerCameraLookAt(playerid, 2109.3533, 1286.1368, 24.4560);

	SetPlayerInterior(playerid, 0);
    ApplyAnimation(playerid, "DANCING", RandAnims[random(sizeof(RandAnims))], 4.0, 1, 1, 1, 1, -1);

	HideDefaultTextdraws(playerid);
    BlackBox(playerid);
	return 1;
}

forward ApplyClassAnim(playerid);
public ApplyClassAnim(playerid)
{
	ApplyAnimation(playerid, "DANCING", RandAnims[random(sizeof(RandAnims))], 4.0, 1, 1, 1, 1, -1);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    if(IsPlayerNPC(playerid)) return 1;

	if(!(g_PlayerData[playerid] & e_LOGGED_IN) && (g_PlayerData[playerid] & e_THREADS_DONE))
    {
		if(GetPVarInt(playerid, "LineID"))
		{
			LoginDialog(playerid);
		}
		else
		{
			RegisterDialog(playerid);
		}
		return 0;
	}

	else if(GetPlayerSkin(playerid) == ADMIN_SKIN_ID)
	{
		if(GetPVarInt(playerid, "Level") < 1)
		{
			ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Barom", "{" #XCOLOR_RED "}Ezt a skint csak adminok használhatják!", "Elfogad", "I'm n00b");
			return 0;
		}
	}

	SetUpSpawnData(playerid);
	UpdatePlayerSpawnInfo(playerid);

	if(GetPVarInt(playerid, "SpawnLocation") == SPAWNPLACE_SP) // Ha nem admin által mentett pozíció, akkor nem spawnoljuk le
	{
        g_PlayerData[playerid] |= e_SPAWN_SP;
		return 0;
	}
    return 1;
}

stock ShowXPTDs(playerid)
{
	new
	    xp = GetPlayerScore(playerid);
	X = 0;
	if(g_pSzint{playerid} != 50)
	{                                                               // Array mérete 49, 50-es szintél nem szabad ráengedni, hogy innen olvasson
		format(i_str, 64, "~w~XP: ~b~~h~~h~~h~%d~w~/~r~~h~%d", xp, g_aiXPsEgyben[g_pSzint{playerid}]);
		if(g_aiXPsEgyben[g_pSzint{playerid}] > 100000) X = 592;
	}
	else
	{
        format(i_str, 64, "~w~XP: ~b~~h~~h~~h~%d", xp);
	}
	PlayerTextDrawSetString(playerid, g_XPText[playerid], i_str);

	// Szintet mutató textdraw méretezése és egyben felmutatása
	if(!X) X = 577;

	#if defined YSF
	PlayerTextDrawSetPos(playerid, g_SzintText[playerid], X, 404);
	#endif
    format(name, sizeof(name), "%d", g_pSzint{playerid});
	PlayerTextDrawSetString(playerid, g_SzintText[playerid], name);
}

stock SetUpSpawnData(playerid)
{
    ShowXPTDs(playerid);
	ShowDefaultTextdraws(playerid);

	StopAudioStreamForPlayer(playerid);
    BlackBoxHide(playerid);
    //HideKezdoTextdraws(playerid);
}

stock UpdatePlayerSpawnInfo(playerid)
{
	if(g_pGamesData[playerid] & e_IN_CTC) return 1;

	new
	    iSkinID = (GetPVarType(playerid, "FavSkinID")) ? (GetPVarInt(playerid, "FavSkinID")) : (GetPlayerSkin(playerid));

	switch(g_pDeathMatchID[playerid])
	{
		case DM_ZONE_INVALID:
		{
			if(g_pGamesData[playerid] & e_IN_GANGWAR)
			{
				new
				    id = random(sizeof(g_fGANGWAR_Grove));
				switch(GetPlayerTeam(playerid))
				{
					case TEAM_GROVE:
					{
						SetSpawnInfo(playerid, TEAM_GROVE, randomex(105, 108), g_fGANGWAR_Grove[id][0], g_fGANGWAR_Grove[id][1], g_fGANGWAR_Grove[id][2], g_fGANGWAR_Grove[id][3], 0, 0, 0, 0, 0, 0);
					}
					case TEAM_BALLAS:
					{
						SetSpawnInfo(playerid, TEAM_BALLAS, randomex(102, 105), g_fGANGWAR_Ballas[id][0], g_fGANGWAR_Ballas[id][1], g_fGANGWAR_Ballas[id][2], g_fGANGWAR_Ballas[id][3], 0, 0, 0, 0, 0, 0);
					}
					case TEAM_VAGOS:
					{
						SetSpawnInfo(playerid, TEAM_VAGOS, randomex(108, 111), g_fGANGWAR_Vagos[id][0], g_fGANGWAR_Vagos[id][1], g_fGANGWAR_Vagos[id][2], g_fGANGWAR_Vagos[id][3], 0, 0, 0, 0, 0, 0);
					}
					case TEAM_AZTECAS:
					{
						SetSpawnInfo(playerid, TEAM_AZTECAS, randomex(114, 117), g_fGANGWAR_Aztecas[id][0], g_fGANGWAR_Aztecas[id][1], g_fGANGWAR_Aztecas[id][2], g_fGANGWAR_Aztecas[id][3], 0, 0, 0, 0, 0, 0);
					}
				}
				return 1;
			}

			if(GetPVarType(playerid, "JailTime"))
			{
				SetSpawnInfo(playerid, NO_TEAM, iSkinID, 6519.1816, 562.2757, 1.5871, 63.9206, 0, 0, 0, 0, 0, 0);
				return 1;
			}

			switch(GetPVarInt(playerid, "SpawnLocation"))
			{
				case SPAWNPLACE_DEFAULT: // Alap
				{
					static                 // minx    miny     maxx        maxy
						Float:fPos[4] = {2123.8721,1284.3772, 2127.9702,1289.1694};
					// 2125.2859, 1286.5763
					SetSpawnInfo(playerid, NO_TEAM, iSkinID, floatrandom(fPos[2] - fPos[0]) + fPos[0], floatrandom(fPos[3] - fPos[1]) + fPos[1], 12.4058, 92.1933, 0, 0, 0, 0, 0, 0);
				}
				case SPAWNPLACE_RANDOM: // Random
				{
					SetPlayerRandomSpawn(playerid, iSkinID);
				}
				case SPAWNPLACE_CLAN: // Klán spawn
				{
					new
					    clanid = g_pClan{playerid};
					if(clanid != 0xFF)
					{
                        SetSpawnInfo(playerid, NO_TEAM, iSkinID, gClanSpawnPos[clanid][0], gClanSpawnPos[clanid][1], gClanSpawnPos[clanid][2], gClanSpawnPos[clanid][3], 0, 0, 0, 0, 0, 0);
					}
					else
					{
                        SetPlayerRandomSpawn(playerid, iSkinID);
					}
				}
				case SPAWNPLACE_HQ: // L&M
				{
					switch(GetPVarInt(playerid, "SpawnLocation2"))
					{
						case 0:
						{
							if(GetPVarInt(playerid, "HQ") == 3)
							{
								SetSpawnInfo(playerid, NO_TEAM, iSkinID, 837.3903, -2230.4626, 15.9688, 179.2868, 0, 0, 0, 0, 0, 0);
							}
							else
							{
		                        SetPlayerRandomSpawn(playerid, iSkinID);
							}

						}
						case 1:
						{
							if(GetPVarInt(playerid, "HQ") == 2)
							{
		                        SetSpawnInfo(playerid, NO_TEAM, iSkinID, -2892.2456, -1964.6521, 37.4233, 0.0, 0, 0, 0, 0, 0, 0);
							}
							else
							{
		                        SetPlayerRandomSpawn(playerid, iSkinID);
							}
						}
					}
				}
				case SPAWNPLACE_BEFORE_DEATH: // Halál elõtti pozíció
				{
					if(GetPVarType(playerid, "DeathX"))
					{
						if(g_PlayerData[playerid] & e_ZASZLONA_MEGDOGLOTT) // Ha a zászló közelében halt meg és halál elõtti a spawnhelye
						{       // Ha a zászló kevesebb, mint 100m-re van a halál helyétõl, akkor az alap spawnhelyre rakjuk, hogy ne legyen olyan könnyû csalni
							//printf("flagrespawn: %d, %f, %f, %f, %f, %f, %f", GetDistance3D(ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], GetPVarFloat(playerid, "DeathX"), GetPVarFloat(playerid, "DeathY"), GetPVarFloat(playerid, "DeathZ")), ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], GetPVarFloat(playerid, "DeathX"), GetPVarFloat(playerid, "DeathY"), GetPVarFloat(playerid, "DeathZ"));
							if(GetDistance3D(ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], GetPVarFloat(playerid, "DeathX"), GetPVarFloat(playerid, "DeathY"), GetPVarFloat(playerid, "DeathZ")) < IN_RANGE_DISTANCE)
							{
				 				SetSpawnInfo(playerid, NO_TEAM, iSkinID, 2125.2859, 1286.5763, 12.4058, 92.1933, 0, 0, 0, 0, 0, 0);
								return 1;
							}
							else
							{
                                g_PlayerData[playerid] &= ~e_ZASZLONA_MEGDOGLOTT;
							}
						}

						new
						    Float:DeathPos[3],
						    Interior = GetPVarInt(playerid, "DeathInt"),
						    Float:ZMap;
						DeathPos[0] = GetPVarFloat(playerid, "DeathX");
						DeathPos[1] = GetPVarFloat(playerid, "DeathY");
						DeathPos[2] = GetPVarFloat(playerid, "DeathZ");

						MapAndreas_FindZ_For2DCoord(DeathPos[0], DeathPos[1], ZMap);
						if(ZMap == 0.0)
						{
							if(Interior)
							{
								SetSpawnInfo(playerid, NO_TEAM, iSkinID, DeathPos[0], DeathPos[1], DeathPos[2], GetPVarFloat(playerid, "DeathA"), 0, 0, 0, 0, 0, 0);
							}
							else
							{
								SetSpawnInfo(playerid, NO_TEAM, iSkinID, DeathPos[0], DeathPos[1], DeathPos[2] + 3.5, GetPVarFloat(playerid, "DeathA"), 0, 0, 0, 0, 0, 0);
							}
						}
						else
						{
							SetSpawnInfo(playerid, NO_TEAM, iSkinID, DeathPos[0], DeathPos[1], DeathPos[2], GetPVarFloat(playerid, "DeathA"), 0, 0, 0, 0, 0, 0);
						}
					}
					else
					{
                        SetPlayerRandomSpawn(playerid, iSkinID);
					}
				}
				case SPAWNPLACE_SAVED_POSITION: // Mentett pozíció ( /s & /l )
				{
					new slot = GetPVarInt(playerid, "SpawnLocation2");
					if(g_pSavedPosition[playerid][slot][0] != 0.0 && g_pSavedPosition[playerid][slot][1] != 0.0 && g_pSavedPosition[playerid][slot][2] != 0.0)
					{
						SetSpawnInfo(playerid, NO_TEAM, iSkinID, g_pSavedPosition[playerid][slot][0], g_pSavedPosition[playerid][slot][1], g_pSavedPosition[playerid][slot][2], g_pSavedPosition[playerid][slot][3], 0, 0, 0, 0, 0, 0);
					}
					else
					{
                        SetPlayerRandomSpawn(playerid, iSkinID);
					}
				}
				case SPAWNPLACE_HOUSE: // Háznál
				{
					if(!GetPVarInt(playerid, "SpawnLocation2")) // Kint
					{
						if((houseid = GetPVarInt(playerid, "PlayerProp")))
						{
							SetSpawnInfo(playerid, NO_TEAM, iSkinID, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid), GetGVarFloat("PropA", houseid), 0, 0, 0, 0, 0, 0);
						}
						else
						{
							SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
					else // Bent
					{
						if((houseid = GetPVarInt(playerid, "PlayerProp")))
						{
							SetSpawnInfo(playerid, NO_TEAM, iSkinID, GetGVarFloat("InX", houseid), GetGVarFloat("InY", houseid), GetGVarFloat("InZ", houseid), GetGVarFloat("InA", houseid), 0, 0, 0, 0, 0, 0);
						}
						else
						{
							SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
				}
				case SPAWNPLACE_BIZNIS: // Háznál ( bent )
				{
					if(!GetPVarInt(playerid, "SpawnLocation2")) // Kint
					{
						if((houseid = GetPVarInt(playerid, "PlayerBiz")))
						{
							SetSpawnInfo(playerid, NO_TEAM, iSkinID, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid), GetGVarFloat("BizA", houseid), 0, 0, 0, 0, 0, 0);
						}
						else
						{
							SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
					else
					{
						if((houseid = GetPVarInt(playerid, "PlayerBiz")))
						{
							SetSpawnInfo(playerid, NO_TEAM, iSkinID, GetGVarFloat("BizInX", houseid), GetGVarFloat("BizInY", houseid), GetGVarFloat("BizInZ", houseid), GetGVarFloat("BizInA", houseid), 0, 0, 0, 0, 0, 0);
						}
						else
						{
							SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
				}
				case SPAWNPLACE_SP: // Mentett pozíció ( /s & /l )
				{
					new slot = GetPVarInt(playerid, "SpawnLocation2");
					mysql_format(1, query, sizeof(query), "SELECT `x`, `y`, `z`, `angle`, `interior`, `world` FROM `savepositions` WHERE `id` = %d", slot);
					mysql_function_query(1, query, true, "THREAD_SpawnSP", "ddd", playerid, iSkinID, g_pQueryQueue[playerid]);
				}
				case SPAWNPLACE_TELEPORT: // Meglévõ teleport
				{
				    //SendClientMessage(playerid,-1,"Meglévõ teleport");
					new
					    id = GetPVarInt(playerid, "SpawnLocation2");
					SetSpawnInfo(playerid, NO_TEAM, iSkinID, g_TeleportPos[id][0], g_TeleportPos[id][1], g_TeleportPos[id][2], g_TeleportPos[id][3], 0, 0, 0, 0, 0, 0);
				}
	        }
		}
		default:
		{
		    new
				dmid = g_pDeathMatchID[playerid],
			    spawnid;
			// Ha TDM
			if(g_DMFlags[dmid] & e_IS_TDM)
			{
				if(!g_pDeathMatchTeam[playerid])
				{
					spawnid = random(g_DMUpperSpawnID{dmid});
					//printf("spawnid1: %d - %d", spawnid, g_DMUpperSpawnID{dmid});
				}
				else
				{
					new
					    buzivagyok = g_DMUpperSpawnID_2{dmid}; // faszopó bugos fos
					spawnid = random((buzivagyok - 15)) + 15;

					//printf("spawnid2: %d - %d", spawnid, g_DMUpperSpawnID_2{dmid});
					//printf("coords: %f, %f, %f, %f", g_DMSpawns[dmid][spawnid][0], g_DMSpawns[dmid][spawnid][1], g_DMSpawns[dmid][spawnid][2], g_DMSpawns[dmid][spawnid][3]);
				}
			}
			else
			{
				spawnid = random(g_DMUpperSpawnID_2{dmid});
				//printf("spawnid: %d - %d", spawnid, g_DMUpperSpawnID_2{dmid});
			}
			SetSpawnInfo(playerid, NO_TEAM, iSkinID, g_DMSpawns[dmid][spawnid][0], g_DMSpawns[dmid][spawnid][1], g_DMSpawns[dmid][spawnid][2], g_DMSpawns[dmid][spawnid][3], 0, 0, 0, 0, 0, 0);
		}
	}
	return 1;
}

forward THREAD_SpawnSP(playerid, skinid, queue);
public THREAD_SpawnSP(playerid, skinid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SpawnSP);

	new
	    iInt,
	    iWorld;
	cache_get_row_float(0, 0, X);
	cache_get_row_float(0, 1, Y);
	cache_get_row_float(0, 2, Z);
	cache_get_row_float(0, 3, Angle);
	cache_get_row_int(0, 4, iInt);
	cache_get_row_int(0, 5, iWorld);

	SetPVarInt(playerid, "s_SP_Int", iInt);
	SetPVarInt(playerid, "s_SP_World", iWorld);

	if(X == -1 && Y == -1)
	{
         SetPlayerRandomSpawn(playerid, skinid);
	}
	else
	{
		SetSpawnInfo(playerid, NO_TEAM, skinid, X, Y, Z, Angle, 0, 0, 0, 0, 0, 0);
	}

	if(g_PlayerData[playerid] & e_SPAWN_SP)
	{
		g_PlayerData[playerid] &= ~e_SPAWN_SP;
		SpawnPlayer(playerid);
	}
	return 1;
}

stock UpdatePlayerCachedData(playerid)
{
	mysql_format(1, query, sizeof(query), "SELECT COUNT( regid ) FROM racedata WHERE regid = %d", PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, true, "THREAD_StorePlayerChachedData", "dd", playerid, g_pQueryQueue[playerid]);
}

forward THREAD_StorePlayerChachedData(playerid, queue);
public THREAD_StorePlayerChachedData(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_StoreChachedData);

	g_pRaceRecords[playerid] = cache_get_row_int_ex(0, 0);
	return 1;
}

forward SpawnRakSamp(playerid);
public SpawnRakSamp(playerid)
{
	Ide:
	new rand_ = Itter_Random(Teleports);
	if(rand_ == 0 || rand_ == Itter_Count(Teleports) + 1) goto Ide;

	SetPVarInt(playerid, "RandSpawnID", rand_);
	SetSpawnInfo(playerid, NO_TEAM, random(310), g_TeleportPos[rand_][0] + randomex(1,3), g_TeleportPos[rand_][1] + randomex(1,3), g_TeleportPos[rand_][2], g_TeleportPos[rand_][3], 0, 0, 0, 0, 0, 0);
	
	SetPlayerSkin(playerid, random(310));
	//printf("SpawnRakSamp(%d)",playerid);
}

public OnPlayerSpawn(playerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
	if(IsPlayerNPC(playerid))
	{
 		if(!strcmp(pName(playerid), !"ShamalDriver")) 			SpawnNPC(playerid,0,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Thomas")) 			SpawnNPC(playerid,1,0,-1,"Thomas"); //Sf tram
		else if(!strcmp(pName(playerid), !"TrainDriver")) 		SpawnNPC(playerid,2,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Slice",true)) 		SpawnNPC(playerid,3,0,-1,"titkosvoset"); //LV ufo
		else if(!strcmp(pName(playerid), !"Roel",true)) 		SpawnNPC(playerid,4,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"MadeMan",true)) 		SpawnNPC(playerid,5,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"RedFusion",true)) 	SpawnNPC(playerid,6,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Sreyas",true)) 		SpawnNPC(playerid,7,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Joshb93",true)) 		SpawnNPC(playerid,8,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Nas",true)) 		    SpawnNPC(playerid,9,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"DeathKing",true)) 	SpawnNPC(playerid,10,0,-1,"N/A");
		else if(!strcmp(pName(playerid), !"Jontay",true)) 		SpawnNPC(playerid,11,0,-1,"titkosvoset"); //LS ufo
		else if(!strcmp(pName(playerid), !"Joron",true)) 		SpawnNPC(playerid,12,0,-1,"titkosvoset"); //SF ufo
		return SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
	}

    SetPlayerWorldBounds(playerid, WB_MAX_X, WB_MIN_X, WB_MAX_Y, WB_MIN_Y);
	g_PlayerData[playerid] &= ~(e_FALLED | e_NOCARMSG);
	for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
    	g_HoldingObject[playerid][i] = -1;
	}

	if(!(g_PlayerData[playerid] & e_TIMESSPAWNED))
	{
		g_PlayerData[playerid] |= e_TIMESSPAWNED;

        UpdatePlayerCachedData(playerid);
	}
	if(IsClient(playerid))
	{
		if(!(g_PlayerFlags[playerid] & e_HAS_VIP))
		{
            GivePlayerVIP(playerid, 10 * 24 * 3600);
			SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG__VIP_RANGOT_KAPTAL_10_NAPIG"));

			g_PlayerFlags[playerid] |= e_HAS_VIP;
			SaveFlags(playerid);
		}
	}

	new
	    iAntiSK = 2650,
	    bool:bCancel;
	BlackBoxHide(playerid);
	///////////////////////////////////////////////////////////////////////////////////
	switch(g_pDeathMatchID[playerid])
	{
		case DM_ZONE_INVALID:
		{
            if(g_pGamesData[playerid] & e_IN_GANGWAR)
            {
				new
				    p_Team = GetPlayerTeam(playerid);
                SetPlayerTeam(playerid, p_Team);

                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 8);
				SetPlayerColor(playerid, GetGangwarZoneColorByTeam(p_Team));

				// Futás megszakítása
				bCancel = true;
			}

			if(g_pGamesData[playerid] & e_IN_CTC)
			{
				new
				    pTeam = GetPlayerTeam(playerid);
                SetPlayerTeam(playerid, pTeam);

				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 10);

				if(!g_RoundType)
				{
					SetDynamicVehParamsForPlayer(g_CTC_Auto[pTeam], playerid, false, true);
					SetDynamicVehParamsForPlayer(g_CTC_Auto[!pTeam], playerid, true, false);
				}
				else
				{
					SetDynamicVehParamsForPlayer(g_CTC_Hajo[pTeam], playerid, false, true);
					SetDynamicVehParamsForPlayer(g_CTC_Hajo[!pTeam], playerid, true, false);
				}

				// Futás megszakítása
				bCancel = true;
			}

			if(g_pGamesData[playerid] & e_IN_DERBY)
            {
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 11);

		        TogglePlayerControllable(playerid, false);
				SetDerbyCamera(playerid);

				// Futás megszakítása
				bCancel = true;
			}

			if(GetPVarType(playerid, "JailTime"))
			{
                SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerHealth(playerid, HEALTH_GOD);
				ResetPlayerWeapons(playerid);

				SetPlayerWeather(playerid, 19);
				SetPlayerTime(playerid, 24, 0);
				ShowWelcome(playerid, LANG(playerid, "MSG_RUDV_UJRA_A_BORTONBENW"));

                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
                PlayAudioStreamForPlayer(playerid, !"http://mfrserver.net/SAMP/up/Borton_Ablakaba.mp3");

				// Futás megszakítása
				bCancel = true;
			}

			new
			    duelid = g_pDuelID{playerid};
			if(duelid != 0xFF)
			{
				for(new i; i != 13; i++)
				{
					if(g_DuelWeapons[duelid]{i} == 0xFF) continue;

					GivePlayerWeapon(playerid,g_DuelWeapons[duelid]{i}, 5000);
				}
				SetPlayerVirtualWorld(playerid, DM_ZONE_DUEL + duelid);

				// Futás megszakítása
				bCancel = true;
			}

			if(!bCancel)
			{
				switch(GetPVarInt(playerid, "SpawnLocation"))
				{
					case SPAWNPLACE_DEFAULT, SPAWNPLACE_RANDOM, SPAWNPLACE_HQ, SPAWNPLACE_TELEPORT: // Random
					{
						new
							spawn = GetPVarInt(playerid, "SpawnLocation");
                        // Ha alap spawnhely és kevesebb, mint 20 órát játszott a szerveren
						if(spawn == SPAWNPLACE_DEFAULT && GetPVarInt(playerid, "TotalHours") < 20)
						{
							SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__MFR__ALAP_SPAWNHELYEN_SPAWNOLTA"));
						}
						else if(spawn == SPAWNPLACE_RANDOM) // Véletlenszerû
						{
							SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG__MFR___NEVU_HELYEN_SPAWNOLTAL"), g_szTeleportName[GetPVarInt(playerid, "RandSpawnID")] );
						}

						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
					case SPAWNPLACE_CLAN: // Klán spawnhely
					{
						new
						    clanid = g_pClan{playerid};
						if(clanid != 0xFF)
						{
							SetPlayerVirtualWorld(playerid, gClanSpawnInterior[clanid]);
							SetPlayerInterior(playerid, gClanSpawnWorld[clanid]);
						}
					}
					case SPAWNPLACE_BEFORE_DEATH: // Halál elõtti pozíció
					{
						if(GetPVarType(playerid, "DeathX"))
						{
							new
							    Float:DeathPos[2],
							    Interior = GetPVarInt(playerid, "DeathInt"),
							    Float:ZMap;
							DeathPos[0] = GetPVarFloat(playerid, "DeathX");
							DeathPos[1] = GetPVarFloat(playerid, "DeathY");

							MapAndreas_FindZ_For2DCoord(DeathPos[0], DeathPos[1], ZMap);
							if(ZMap == 0.0)
							{
								if(Interior)
								{
									SetPlayerInterior(playerid, Interior);
									SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "DeathWorld"));
								}
								else
								{
									SetPlayerInterior(playerid, Interior);
									SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "DeathWorld"));
									LoadObjectForPlayer(playerid);
								}
							}
							else
							{
								SetPlayerInterior(playerid, Interior);
								SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "DeathWorld"));
							}
						}
						else
						{
	                        //SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
					case SPAWNPLACE_SAVED_POSITION: // Mentett pozíció ( /s & /l )
					{
						new
						    slot = GetPVarInt(playerid, "SpawnLocation2");
						if(g_pSavedPosition[playerid][slot][0] != 0.0 && g_pSavedPosition[playerid][slot][1] != 0.0 && g_pSavedPosition[playerid][slot][2] != 0.0)
						{
							SetPlayerInterior(playerid, g_pSavedPositionInt[playerid][slot]);
							SetPlayerVirtualWorld(playerid, g_pSavedPositionWorld[playerid][slot]);
						}
						else
						{
	                        // SetPlayerRandomSpawn(playerid, iSkinID);
						}
					}
					case SPAWNPLACE_HOUSE: // Háznál ( Kint )
					{
						if(!GetPVarInt(playerid, "SpawnLocation2"))
						{
		                    SetPlayerInterior(playerid, GetGVarInt("OutInt", houseid));
							SetPlayerVirtualWorld(playerid, 0);
						}
						else
						{
							if((houseid = GetPVarInt(playerid, "PlayerProp")))
							{
								SetPlayerInterior(playerid, GetGVarInt("Interior", houseid));
								SetPlayerVirtualWorld(playerid, GetGVarInt("VirtualWorld", houseid));
							}
							else
							{
								//SetPlayerRandomSpawn(playerid, iSkinID);
							}
						}
					}
					case SPAWNPLACE_BIZNIS: // Biznisz ( Kint )
					{
						if(!GetPVarInt(playerid, "SpawnLocation2"))
						{
		                    SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, 0);
						}
						else
						{
							if((houseid = GetPVarInt(playerid, "PlayerBiz")))
							{
								SetPlayerInterior(playerid, GetGVarInt("BizInterior", houseid));
								SetPlayerVirtualWorld(playerid, GetGVarInt("BizVirtualWorld", houseid));
							}
							else
							{
								//SetPlayerRandomSpawn(playerid, iSkinID);
							}
						}
					}
					case SPAWNPLACE_SP:
					{
						SetPlayerInterior(playerid, GetPVarInt(playerid, "s_SP_Int"));
						SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "s_SP_World"));
					}
					default:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
			    }
			}

			if(!GetPVarType(playerid, "JailTime")) //Ha nincs börtönbe
			{
				for(new i; i != 11; i++)
				{
					SetPlayerSkillLevel(playerid, i, g_pWeaponSkill[playerid][i]);
				}

                if(g_pDeathMatchID[playerid] != -1 && g_DM_Time[g_pDeathMatchID[playerid]] != -1) //Ha DM-be van ÉS megadva idõ a dmre
                {
                    SetPlayerTime(playerid,g_DM_Time[g_pDeathMatchID[playerid]],0);
					printf("spawn 4");
                }
                else
                {
                    if(GetPVarType(playerid, "PlayerTime_Hour"))
				 	{
					 	SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
						//printf("spawn 1");
					}
					else if(!GetPVarInt(playerid, "SpawnLocation"))
					{
						SetPlayerTime(playerid, 23, 59);
						//printf("spawn 2");
					}
					else
					{
						SetPlayerTime(playerid, up_minutes, uptimeCount);
						//printf("spawn 3");
					}
                }
				if(GetPVarType(playerid, "PlayerWeather"))
				{
				    if(g_pDeathMatchID[playerid] != -1 && g_DM_Weather[g_pDeathMatchID[playerid]] == -1) SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
				}

				// Ha a range zónában van, 1-es csapatba rakjuk - ezáltal nem tud megsebezni senkit sem abban a zónában
				if(IsPlayerInDynamicArea(playerid, gRangeZone))
				{
					SetPlayerTeam(playerid, 1);
					
					TextDrawShowForPlayer(playerid, NoKill);
		            
					//GameTextForPlayer(playerid, FixGameString("~w~Itt nincs ~r~ölés~w~!"), 2000, 4);
				}

				// Élet beállítás
                if((e_IN_CTC | e_IN_GANGWAR) & g_pGamesData[playerid])
                {
                    Health = 100.0;
                    Armour = 0.0;
				}
				else
				{
					Health = (IsClient(playerid)) ? (176.0) : (100.0);

					// VIP játékosok alapból max armourral spawnolnak
					Armour = (g_pVIP[playerid]) ? (100.0) : (0.0);
				}

				if(!bCancel)
				{
		            new
						color = GetPVarInt(playerid, "Color");
					if(!IsBlack(color))
					{
						SetPlayerColor(playerid, color);
				    }
					//LoadPlayerWeaponInfo(playerid);
				}
			}
		}
		default:
		{
		    new
				dmid = g_pDeathMatchID[playerid],
				team = g_pDeathMatchTeam[playerid];
			ResetPlayerWeapons(playerid);

			SetPlayerInterior(playerid, g_DMInterior[dmid]);
			SetPlayerVirtualWorld(playerid, DM_WORLD_START + floatround(dmid / DM_ZONE_WORLD_DIVIDE, floatround_floor));

			// Ha TDM-be csatlakozott akkor belerakjuk a csapatba
			if(team != -1) SetPlayerTeam(playerid, team);

			iAntiSK = 750;
			Health = g_DMHealth[dmid];
			Armour = g_DMArmour[dmid];
		}
	}

	DeletePVar(playerid, "KillStreak");
	DeletePVar(playerid, "GOD_Health");
	DeletePVar(playerid, "GOD_Armour");

 	InfoTD_Hide(playerid);

	if(!(g_PlayerData[playerid] & e_SAVE_STYLE))
	{
		mysql_format(1, query, sizeof(query), "SELECT `id`, `object_id`, `bone_id`, `offset_x`, `offset_y`, `offset_z`, `rotation_x`, `rotation_y`, `rotation_z`, `scale_x`, `scale_y`, `scale_z`, `materialcolor1`, `materialcolor2` FROM `holdingobjects` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
		g_pSavedObject[playerid][0], g_pSavedObject[playerid][1], g_pSavedObject[playerid][2], g_pSavedObject[playerid][3], g_pSavedObject[playerid][4], g_pSavedObject[playerid][5], g_pSavedObject[playerid][6], g_pSavedObject[playerid][7], g_pSavedObject[playerid][8], g_pSavedObject[playerid][9]);
		mysql_function_query(1, query, true, "THREAD_LoadPlayerHObjects", "dd", playerid, g_pQueryQueue[playerid]);
	}
	else
	{
		for(new i; i != MAX_PLAYER_ATTACHED_OBJECTS; i++)
		{
            RemovePlayerAttachedObject(playerid, i);
		}
		OnGlassesSetup(playerid);
		OnWatchesSetup(playerid);
		OnHatsSetup(playerid);
		OnWeaponsSetup(playerid);
		OnOthersSetup(playerid);
	}
	SetPlayerFightingStyle(playerid, GetPVarInt(playerid, "Style"));

	if(g_PlayerData[playerid] & e_AFK)
	{
		TogglePlayerControllable(playerid, false);
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "BeforeAFK"));
	}

    CarDeleter(playerid);

	// Ha nincs börtönben
	if(!GetPVarType(playerid, "JailTime"))
	{
		if(iAntiSK)
		{
			if(GetPVarType(playerid, "SpawnKill"))
			{
				KillTimer(GetPVarInt(playerid, "SpawnKill"));
			}

			SetPVarInt(playerid, "SpawnKill", SetTimerEx("RestoreHealth", iAntiSK, false, "dff", playerid, Health, Armour));
		    SetPlayerHealth(playerid, HEALTH_GOD);
		}
		else
		{
		    SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
		    //SetPlayerHealth(playerid, 100.0);
		    SetPlayerArmour(playerid, 0.0);
		}
	}

	if(!(g_pOtherFlags[playerid] & e_NO_TEXTDRAWS))
	{
		if(g_pTDFlags[playerid] & e_NOTD_DMINFO)
		{
			PlayerTextDrawHide(playerid, TD_InDMPlayers[playerid]);
		}
		else
		{
			PlayerTextDrawShow(playerid, TD_InDMPlayers[playerid]);
		}

		if(GetPVarInt(playerid, "TotalHours") < 10 && !IsClient(playerid))
		{
			TextDrawShowForPlayer(playerid, TD_Info);
		}
		else
		{
	  		TextDrawHideForPlayer(playerid, TD_Info);
		}
	}
	if(GetPVarType(playerid, "PlayerTime_Hour"))
	{
		if(g_pDeathMatchID[playerid] != -1 && g_DM_Time[g_pDeathMatchID[playerid]] == -1) SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
	}
	if(GetPVarInt(playerid,"MostRegisztralt") == 1)
    {
        SetPlayerTime(playerid,19,0);
        SetPlayerWeather(playerid, 17);
        DeletePVar(playerid,"MostRegisztralt");
    }
	return 1;
}

forward RestoreHealth(playerid, Float:fHealth, Float:fArmour, weaponid);
public RestoreHealth(playerid, Float:fHealth, Float:fArmour, weaponid)
{
	DeletePVar(playerid, "SpawnKill");

	SetPlayerHealth(playerid, fHealth);
	SetPlayerArmour(playerid, fArmour);

	// Fegyverek kiadása, amint az Anti SK lejárt - Ne öljön a játékos god módban, csak futni tudjon
	switch(g_pDeathMatchID[playerid])
	{
		case DM_ZONE_INVALID:
		{
            if(g_pGamesData[playerid] & e_IN_GANGWAR)
            {
				GivePlayerWeapon(playerid, WEAPON_AK47, 5000);
				GivePlayerWeapon(playerid, WEAPON_TEC9, 5000);
				GivePlayerWeapon(playerid, WEAPON_COLT45, 5000);
				GivePlayerWeapon(playerid, WEAPON_SNIPER, 5000);
				GivePlayerWeapon(playerid, WEAPON_GRENADE, 5000);

				//GivePlayerWeapon(playerid, WEAPON_SAWEDOFF, 5000);
				return 1;
			}

			if(g_pGamesData[playerid] & e_IN_CTC)
			{
				GivePlayerWeapon(playerid, WEAPON_MP5, 5000);
				GivePlayerWeapon(playerid, WEAPON_M4, 5000);
				GivePlayerWeapon(playerid, WEAPON_SNIPER, 100);
				return 1;
			}

			if(!GetPVarType(playerid, "JailTime"))
			{
				LoadPlayerWeaponInfo(playerid);
			}
		}
		default :
		{
			new
				dmid = g_pDeathMatchID[playerid];
			//printf("g_DMInterior[dmid] = %d", g_DMInterior[dmid]);
			for(new i; i != 13; i++)
			{
				if(g_DMWeapons[dmid][i][0] == 0 && g_DMWeapons[dmid][i][1] == 0) continue;
		        GivePlayerWeapon(playerid, g_DMWeapons[dmid][i][0], g_DMWeapons[dmid][i][1]);
			}

			// Ha benvan állítva a kezdõ fegyver akkor arra állítjuk a fegyverét
			if(g_DMArmedWeapon{dmid} != 0xFF)
			{
				SetPlayerArmedWeapon(playerid, g_DMArmedWeapon{dmid});
			}

			if(g_DMFlags[dmid] & e_JETPACK_MODE)
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		}
	}
	return 1;
}

forward THREAD_LoadPlayerHObjects(playerid, queue);
public THREAD_LoadPlayerHObjects(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_LoadPlayerHObjects);

	new
	    iMaterial1,
	    iMaterial2,
	    rows = cache_get_row_count();
	for(new i; i != 10; i++)
	{
		if(i == 9 && ZaszloOwner == playerid) break;
		if(!g_pSavedObject[playerid][i])
		{
			RemovePlayerAttachedObject(playerid, i);
			continue;
		}

		for(new x; x != rows; x++)
		{
			if(g_pSavedObject[playerid][i] == cache_get_row_int_ex(x, 0))
			{
				cache_get_row_int(x, 1, datez); // Model ID
				cache_get_row_int(x, 2, vID); // Bone ID
				cache_get_row_float(x, 3, X); // X
				cache_get_row_float(x, 4, Y); // Y
				cache_get_row_float(x, 5, Z); // Z
				cache_get_row_float(x, 6, V[0]); // RotX
				cache_get_row_float(x, 7, V[1]); // RotY
				cache_get_row_float(x, 8, V[2]); // RotZ
				cache_get_row_float(x, 9, Health); // ScaleX
				cache_get_row_float(x, 10, Armour); // ScaleY
				cache_get_row_float(x, 11, Angle); // ScaleZ
				cache_get_row_int(x, 12, iMaterial1); // Materialcolor1
				cache_get_row_int(x, 13, iMaterial2); // Materialcolor2

				// printf("datez: %d, vID: %d, X: %f, Y: %f, Z: %f, V: %f, V: %f, V: %f S: %f S :%f S:%f", datez, vID, X, Y, Z, V[0], V[1], V[2], Health, Armour, Angle);
				SetPlayerAttachedObject(playerid, i, datez, vID, X, Y, Z, V[0], V[1], V[2], Health, Armour, Angle, ShiftRGBAToARGB(iMaterial1), ShiftRGBAToARGB(iMaterial2));
				break;
			}
		}
	}
	return 1;
}

forward RespawnNPC();
public RespawnNPC()
{
    // printf("RespawnNPC");

	// Beállítsuk az alap dolgokat, ezmiatt felesleges újra meghívni a "PropertyPayout"-ot..
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_RULE);
    #endif
*/
	SetWeather(1);
	SetWorldTime(12);
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_READONLY);
	#endif
*/
	#if !defined YSF
	switch(ServerInfo[WorldTimeFormat])
	{
		case 0:
		{
			SendRconCommand("worldtime " #WEB_ADDRESS "");
		}
		case 1:
		{
			SendRconCommandf("worldtime Rekord: %d", ServerInfo[CurrPlayers]);
		}
		case 2:
		{
			date(session[startuptime], day, month, year, hour, minute, second);
			SendRconCommandf("worldtime %02d/%02d/%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
		}
	}
	#endif

	BonusCar(); // Lerakjuk a bónuszautót
	CallFlag(); // Lerakjuk a zászlót
	foreach(new i: Bot) // Respawnolunk minden botot a hibák elkerülése végett
	{
		SpawnPlayer(i);
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	// Botokkal semmi CP-vel kapcsolatos dolog nem mûködhet
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
	if(IsPlayerNPC(playerid)) return 1;
    if(g_pDebug{playerid} == 13) SendClientMessagef(playerid, -1, "OnPlayerEnterDynamicCP(playerid = %d, checkpointid = %d)", playerid, checkpointid);

	if(g_pGamesData[playerid] & e_IN_GANGWAR)
	{
		new
		    id = GetPlayerVisibleDynamicCP(playerid) - 1;
		if(0 <= id <= 39 && GetPlayerVirtualWorld(playerid) == 8)
		{
			new
			    pTeam = GetPlayerTeam(playerid),
			    attackers,
			    defenders,
			    offset = GetGangwarZoneID(id) * 10; // Mindig az elsõ zóna a fõ zónája minden csapatnak

			// Ha saját banda CP-be megy bele, akkor üzenetet küldünk
			if(pTeam == g_ZoneOwner[id])
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHEZ_A_TE_BHBANDAD_RHTER"));
				return 1;
			}

			// Hamá vki benne van a CP-be, akkor nem foglaljuk újra
			if(g_ZoneIsAttacked[id])
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_REZT_A_ZONAT_EPP_FOGLALJAK"));
				return 1;
			}

			// Hamár támad egy zónát, akkor nem támodhat még egyet
			if(GetPVarInt(playerid, "ZoneAttacked") != INVALID_GANG_ZONE)
			{
				InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHMAR_TAMADSZ_EGY_TERULETETW"));
				return 1;
			}

			foreach(new i: Player)
			{
                if(!(g_pGamesData[i] & e_IN_GANGWAR)) continue;

				if((datez = GetPlayerTeam(i)) == pTeam) attackers++;
				else if(datez == g_ZoneOwner[id]) defenders++;
			}

			if((attackers < 2 || defenders < 2) && !(g_ServerFlags & e_RACEDEBUG))
			{
				SendClientMessage(playerid, -1, LANG(playerid, "MSG_KEVESEN_VAGYTOK_LEGALABB_A"));
				return 1;
			}

			//SendClientMessagef(playerid, -1, "attack: %d, defender: %d", attackers, defenders);

			// Ha valamelyik fõzónát akar elfoglalni, akkor megnézzük már el-e foglalta az összes többit
			if((id == offset) && GetGangwarZoneID(offset) == g_ZoneOwner[offset])
			{
				for(new i; i != 40; i++)
				{
					// Jelenlegi zónát nem vesszük figyelembe
					if(i == offset) continue;
					// Ha vmelyik zóna tulaja egyenlõ a fõ zóna tulajával DE az már nem az erdeti zóna tulaja, akkor engedjük elfogallni
					if(g_ZoneOwner[i] == g_ZoneOwner[offset]) // Ha még vmelyik zónát nem foglalta el, akkor nem foglalhassa a fõt
					{
						printf("FAIL: %d, %d, pTeam: %d", g_ZoneOwner[i], i, pTeam);
						InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RFO_ZONAT_CSAK_AKKOR_FOGLALHATOD"));
                        return 1;
					}
				}
			}

			g_pInCPCount{playerid} = 0xFF;
			g_ZoneIsAttacked[id] = 1;
			SetPVarInt(playerid, "ZoneAttacked", id);

			//SendClientMessagef(playerid, COLOR_WHITE, "cpid: %d", id);
		}
	}

	if(checkpointid == gCP_GOLDPOT)
	{
		switch(GetPlayerVirtualWorld(playerid))
		{
			case 0..20, 50000:
			{
				new
					iTick = GetTickCount() - goldpot[gTick],
					iValue = (iTick / 1000) * 2;

				DestroyDynamicPickup(goldpot[gPickup]);
				goldpot[gPickup] = 0;

				DestroyDynamicCP(gCP_GOLDPOT);
				gCP_GOLDPOT = -1;
				GivePlayerMoneyEx(playerid, goldpot[gMoney], "Goldpot");
				GivePlayerXP(playerid, XP_ARANYTOJAS);

				PVarIntFel(playerid, "Goldpots");
				
				foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Goldpot_MSG) continue;
					SendClientMessagef(i, 0xFF00FFAA, LANG(i, "MSG__ARANYTOJAS___TALALTA_MEG_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, (float(iTick) / 1000), goldpot[gMoney]);
				}

				DestroyDynamic3DTextLabel(goldpot[gText]);

				InfoTD_MSGf(playerid, 12000, LANG(playerid, "MSG_YHARANYTOJASYHH_NGHM"), (float(iTick) / 1000), (goldpot[gMoney] - iValue));

				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `goldpots` = `goldpots` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				mysql_function_query(1, query, false, "", "");

				strunpack(country, gHint[0], 45);
				mysql_format(1, query, sizeof(query), "INSERT INTO `goldpots`(id, goldpot, name, reg_id, speed, time) VALUES(0, '%e', '%s', %d, %.3f, %d)", country, pName(playerid), PlayerInfo[playerid][pRegID], (float(iTick) / 1000), CurrentTimestamp());
				mysql_function_query(1, query, false, "", "");
				return 1;
			}
		}
	}

	if(IsPlayerInBank(playerid))
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_PENZ_BETETEL_RDEPOSITNWPENZT"));
		return 1;
	}

	if(checkpointid == gCP_CH) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/sfa");
	if(checkpointid == gCP_AA) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/lv");
	if(checkpointid == gCP_SFA) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/dam");
	if(checkpointid == gCP_LSA) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/monster");
	if(checkpointid == gCP_JIZZY) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/shipstunt");
	if(checkpointid == gCP_SKTP) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/sfst");
	if(checkpointid == gCP_ARMY) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/lvsz");
	if(checkpointid == gCP_LVA) return CallLocalFunction("OnPlayerCommandText", "is", playerid, "/sktp");
	if(checkpointid == gCP_LVSZ) return  CallLocalFunction("OnPlayerCommandText", "is", playerid, "/quarry");

	if(checkpointid == gCP_BAR || checkpointid == gCP_LC) return SendClientMessage(playerid, COLOR_GREENYELLOW, LANG(playerid, "MSG_HA_AKARSZ_PIAT_VENNI_AKKOR"));

	/*if(checkpointid == gCP_GATE)
	{
        if(GetPVarInt(playerid, "HQ") != 1) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VAGY_GROVES"));
		if(!(g_ServerFlags & e_AUTOGATE))
    	{
		 	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPU_AUTOMATA_MODRA_ALLITASA"));
		}
		else
		{
		 	SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG_KAPU_MANUALIS_MODRA_ALLITASA"));
		}
		return 1;
	}*/

	if(checkpointid == gCP_ROCKET[0])
	{
	    if(!IsPlayerInAnyDynamicVehicle(playerid))
		{
			ShowWelcome(playerid, LANG(playerid, "MSG_RSZEREZZ_MAGADNAK_EGY_JARMUVET"));
			return 1;
		}

        if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
        //SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, false);

		SetPVarInt(playerid, "RocketTime", 4);
		if(GetPVarType(playerid, "Rocket"))
		{
			KillTimer(GetPVarInt(playerid, "Rocket"));
		}
		SetPVarInt(playerid, "Rocket", SetTimerEx("Kiloves", 1000, true, "ib", playerid, false));
		return 1;
	}

	if(checkpointid ==  gCP_ROCKET[1] || checkpointid == gCP_ROCKET[2] || checkpointid == gCP_ROCKET[3])
	{
	    if(!IsPlayerInAnyDynamicVehicle(playerid))
		{
			ShowWelcome(playerid, LANG(playerid, "MSG_RSZEREZZ_MAGADNAK_EGY_JARMUVET"));
			return 1;
		}

        if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
        //SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, false);

		SetPVarInt(playerid, "RocketTime", 4);
		if(GetPVarType(playerid, "Rocket"))
		{
			KillTimer(GetPVarInt(playerid, "Rocket"));
		}
		SetPVarInt(playerid, "Rocket", SetTimerEx("Kiloves", 1000, true, "ib", playerid, true));
		return 1;
	}

	if(checkpointid == gCP_TRUCKMISSION)
	{
		if((e_RABOL | e_KOCSIT_LOP | e_FLAG_OWNER | e_BCAR_OWNER | e_NOTELE | e_GRAV | e_WORLDEDIT) & g_pGamesData[playerid])
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_KAMIONOZHATSZ_LEPJ"));
			return 1;
		}

		SetPlayerVirtualWorld(playerid, 50000);
		SetPVarInt(playerid, "Trucking", 1);

		g_pGamesData[playerid] |= e_IN_TRUCKING;
		g_pMinigameJoins[playerid][e_Count_TRUCKING] ++;
		if(g_pMinigameJoins[playerid][e_Count_TRUCKING] < MINIGAME_TUTORIAL_COUNT) ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, DIALOG(playerid, "DIALOG_TUTORIAL_TRUCKING"));

		ShowWelcome(playerid, LANG(playerid, "MSG_ELKEZDTED_A_KAMIONOZAST"));
		InfoTD_MSG(playerid, 6000, LANG(playerid, "MSG_BSZALJ_BELE_A_RHKAMIONBANY"));
		
		foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_MinigameJoins_MSG) continue;
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG__TRUCKING___ELMENT_KAMIONO"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
		}
		SendClientMessage(playerid, COLOR_LIGHTGREEN, LANG(playerid, "MSG_KAMIONOS_CHAT__SZOVEG_PL_CSA"));
		HideClanZones(playerid);
		AddPlayerToClearworld(playerid);
		return 1;
	}
	if(checkpointid == g_TaxiCP[playerid])
	{
	    switch(GetPVarInt(playerid,"TaxiType"))
	    {
	        case 0: //Felveszi az utast
	        {
         		UjFuvar(playerid, 1, -1);
	        }
	        case 1: //Kirakja az utast
	        {
	            //Jutalom kiszámítása...
	            new
					Float:distance = GetPVarFloat(playerid,"tDistance"),
					//Float:vHealth,
					szorzo,
					oszto,
					xp,
	            	cash,
	            	TempTime[3];

				switch(floatround(distance, floatround_round))
				{
				    case 0..200: szorzo = 2, oszto = 300;
				    case 201..600: szorzo = 3, oszto = 270;
				    case 601..1200: szorzo = 4, oszto = 250;
				    case 1201..2500: szorzo = 5, oszto = 210;
				    case 2501..3500: szorzo = 6, oszto = 190;
					default: szorzo = 7, oszto = 170;
				}
				cash = floatround(distance, floatround_round) * szorzo;
				xp = floatround(distance, floatround_round) / oszto;
				
				new
					tick = GetTickCount() - g_TaxiTime[playerid];

				ConvertTime(var1, tick, TempTime[0], TempTime[1], TempTime[2]);
	            SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi ::{AAAAAA} Sikeresen kiszállítottad az utasodat. Hamarosan új fuvar lesz elérhetõ!");
	            SendClientMessagef(playerid,-1,"{00FF7F}:: Taxi ::{AAAAAA} Jutalmad: {FF0000}%s{AAAAAA}$ és {FF0000}%d{AAAAAA} xp | Kiszállítás ideje: {FF0000}%02d:%02d.%02d",FormatNumber(cash), xp, TempTime[0], TempTime[1], TempTime[2]);

	            DestroyDynamicCP(g_TaxiCP[playerid]);
				RemovePlayerMapIcon(playerid, 99);
	            
                UjFuvar(playerid, 0, randomex(5000,15000)); //Új fuvar
                
                GivePlayerXP(playerid, xp);
                GivePlayerMoneyEx(playerid, cash, "Taxi");

                PVarIntFel(playerid, "TaxiFuvarok");
				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `taxi` = `taxi` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
				mysql_function_query(1, query, false, "", "");
	        }
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid) // enterdynamiccp| entercp
{
	// NPC-vel semmi CP-vel kapcsolatos dolog nem mûködhet
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
	if(IsPlayerNPC(playerid)) return 1;
	if(g_pDebug{playerid} == 13) SendClientMessagef(playerid, -1, "OnPlayerEnterCheckpoint(playerid = %d)", playerid);

	if(GetPVarInt(playerid, "Trucking") == 3 && IsPlayerInDynamicVehicle(playerid, GetPVarInt(playerid, "TruckingVehicle")))
	{
		if(GetPlayerVirtualWorld(playerid) == 50000)
		{
			rand = GetPVarInt(playerid, "TruckID");

			new
			    Float:iValue = float(GetTickCount() - GetPVarInt(playerid, "TruckTick")),
			    iEarning = (floatround(iValue) / 1000) * 10;

			for(new x; x != sizeof(gTruck); x++)
			{
				if(gTruck[x] != GetPVarInt(playerid, "TruckingVehicle")) continue;

			    if(GetDynamicVehicleTrailer(gTruck[x]) != GetPVarInt(playerid, "TruckingVehicleT"))
	            {
					SendClientMessage(playerid, -1, LANG(playerid, "MSG_NINCS_TRAILER_A_KAMIONODON"));
					SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEDD_FEL_A_HOZZAVALO_TRAILERT"));
					return 1;
				}
				break;
			}

			if(((TruckPos[rand][T_Jovedelem] * 2) - iEarning) <= 0)
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_TUL_SOKAIG_TARTOTT_A_FUVAROZAS"));
				FinishTrucking(playerid);
				return 1;
			}

			new
			    TempTime[3];
			ConvertTime(var1, GetTickCount() - GetPVarInt(playerid, "TruckTick"), TempTime[0], TempTime[1], TempTime[2]);
			format(i_str, sizeof(i_str), "~g~~h~Sikeresen leadtad a ~y~fuvart! ~n~~w~Jutalom: ~g~$~h~%d~n~~n~~w~Id§: ~r~~h~%d~w~:~r~~h~%02d~w~.~r~~h~%03d", (TruckPos[rand][T_Jovedelem] * 2) - iEarning, TempTime[0], TempTime[1], TempTime[2]);
			ShowWelcome(playerid, i_str, .time = 10000);

			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_SZALLITAS_IDEJE_2D3D_TELJE"), TempTime[0], TempTime[1], TempTime[2], FormatNumber((TruckPos[rand][T_Jovedelem] * 2)), FormatNumber((TruckPos[rand][T_Jovedelem] * 2) - iEarning), FormatNumber(iEarning));
			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_UT_HOSSZA_3FM"), GetPlayerDistanceFromPoint(playerid, -90.6903, -1167.5345, 2.4317));

			PVarIntFel(playerid, "Fuvarok");
			GivePlayerMoneyEx(playerid, (TruckPos[rand][T_Jovedelem] * 2) - iEarning, "Trucking");
			GivePlayerXP(playerid, XP_TRUCKING);
			FinishTrucking(playerid);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `fuvarok` = `fuvarok` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
			mysql_function_query(1, query, false, "", "");
		}
		return 1;
	}
    return 1;
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
    if(g_pDebug{playerid} == 13) SendClientMessagef(playerid, -1, "OnPlayerLeaveDynamicCP(playerid = %d, checkpointid = %d)", playerid, checkpointid);

    // printf("OnPlayerLeaveDynamicCP(playerid = %d, checkpointid = %d)", playerid, checkpointid);
	if(g_pGamesData[playerid] & e_IN_GANGWAR)
	{
		new
		    id = GetPlayerVisibleDynamicCP(playerid) - 1;
		if(0 <= id <= 39 && GetPlayerVirtualWorld(playerid) == 8)
		{
			// Hamá vki benne van a CP-be, tehát akkor nem fogjuk mégeccer lefuttatni a dógokot mer mi a fasznak
			if(GetPVarInt(playerid, "ZoneAttacked") == id && g_ZoneIsAttacked[id] == 1)
			{
				InfoTD_MSG(playerid, 2600, LANG(playerid, "MSG_RTAMADAS_BEFEJEZVE"));

				g_pInCPCount{playerid} = 0;
				g_ZoneIsAttacked[id] = 0;
				g_ZoneAttacker[id] = 0xFF;

				SetPVarInt(playerid, "ZoneAttacked", INVALID_GANG_ZONE);
				return 1;
			}
		}
	}

	if(checkpointid == gCP_ROCKET[0] || checkpointid == gCP_ROCKET[1] || checkpointid == gCP_ROCKET[2] || checkpointid == gCP_ROCKET[3])
	{
		if(GetPVarType(playerid, "Rocket"))
		{
			KillTimer(GetPVarInt(playerid, "Rocket"));

			DeletePVar(playerid, "RocketTime");
			DeletePVar(playerid, "Rocket");
			TogglePlayerControllable(playerid, true);
		}
	}
    return 1;
}

#if !defined abs
stock abs(value)
{
    return ((value < 0 ) ? (-value) : (value));
}
#endif

public OnPlayerEnterRaceCheckpoint(playerid)
{ // enterracecp
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
    if(g_pDebug{playerid} == 13) SendClientMessagef(playerid, -1, "OnPlayerEnterRaceCheckpoint(playerid = %d)", playerid);

    // printf("OnPlayerEnterRaceCheckpoint(playerid = %d)", playerid);
	switch(GetPVarInt(playerid, "RaceParticipant"))
	{
	   	case 0:
		{
			return 1;
		}
		case 1:
		{
		    if(!(g_ServerFlags & e_RACE_START))
		    {
				if(mscd > 50)
				{
					SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENY__ELINDUL_EGY_PERC_MULVA"), g_szRaceName_);
					format(i_str, sizeof(i_str), "~r~~h~Maradj az ellenõrzõpontban. ~n~~r~~h~A verseny elindul ~y~~h~egy ~r~~h~perc múlva.");
				}
				else
				{
					SendClientMessagef(playerid, COLOR_GREEN, LANG(playerid, "MSG_VERSENY__ELINDUL__MASODPERC"), g_szRaceName_, mscd);
					format(i_str, sizeof(i_str), "~r~~h~Maradj az ellenõrzõpontban. ~n~~r~~h~A verseny elindul ~y~~~%d ~r~~h~másodperc múlva.", mscd);
				}
				InfoTD_MSG(playerid, 6000, i_str);
				SetPVarInt(playerid, "RaceParticipant", 2);
		    }
		}
		case 6:
		{
			g_rEndTick = GetTickCount();
			PlayerPlaySound(playerid, 1139);

			static const
			    s_Money[3][3] = {{25000, 17500, 10000}, {20000, 12500, 7500}, {15000, 75000, 3500}};

			datez = -1;
			switch(g_AllParticipants)
			{
				case 1..3: datez = 0;
				case 4..5: datez = 1;
				default: datez = 2;
			}
			switch(Ranking)
			{
				case 1:
				{
					GivePlayerMoneyEx(playerid, s_Money[datez][Ranking - 1], "RaceWin1");
					GivePlayerXP(playerid, XP_RACE_1);
                    SetPVarInt(playerid, "RacesWon", GetPVarInt(playerid, "RacesWon") + 1);

					InfoTD_MSGf(playerid, 10000, LANG(playerid, "MSG_GGRATULALOK__HTE_LETTEL_AZ"), s_Money[datez][Ranking - 1]);

			 		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `races` = `races` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
					mysql_function_query(1, query, false, "", "");
				}
				case 2:
				{
					GivePlayerMoneyEx(playerid, s_Money[datez][Ranking - 1], "RaceWin2");
					GivePlayerXP(playerid, XP_RACE_2);

					InfoTD_MSGf(playerid, 10000, LANG(playerid, "MSG_GGRATULALOK__HTE_LETTEL_A_MASOD"), s_Money[datez][Ranking - 1]);
				}
				case 3:
				{
					GivePlayerMoneyEx(playerid, s_Money[datez][Ranking - 1], "RaceWin3");
					GivePlayerXP(playerid, XP_RACE_3);

					InfoTD_MSGf(playerid, 10000, LANG(playerid, "MSG_GGRATULALOK__HTE_LETTEL_A_HARMA"), s_Money[datez][Ranking - 1]);
				}
   			}

			if(Ranking > 3)
			{
				InfoTD_MSGf(playerid, 10000, LANG(playerid, "MSG_RHGRATULALOKNGHHHELYEZE"), Ranking);
			}
			new
				TotalTime = g_rEndTick - g_rStartTick,
				TempTime[3];

			ConvertTime(var1, TotalTime, TempTime[0], TempTime[1], TempTime[2]);
			if(TotalTime < TopRacer[record] || !TopRacer[record])
			{
			    if(!(g_PlayerFlags2[playerid] & e_ALLOW_RACE_RECORD))
			    {
			        foreach(Player, i)
			        {
			            if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
			            SendClientMessagef(i, COLOR_ORANGE, LANG(i, "MSG_MFR__BEFEJEZTE_A_VERSENYT_AZ"), pName(playerid), playerid, Ranking, TempTime[0], TempTime[1], TempTime[2]);
			            SendClientMessagef(i, COLOR_LIGHTGREEN, LANG(i, "MSG_MFR__UJ_KORIDOT_CSINALT_AZ"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, g_szRaceName_);
			        }
					if(TopRacer[record])
	   				{
						new
						    minut,
						    sec,
						    ms,
						    curr = TopRacer[record] - TotalTime;

						ConvertTime(var2, curr, minut, sec, ms);
						
						
						foreach(Player, i)
			       	 	{
			            	if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
						    SendClientMessagef(i, COLOR_LIGHTGREEN, LANG(i, "MSG_MFR_AZ_UJ_REKORD2D3D_2D"), TempTime[0], TempTime[1], TempTime[2], sec, ms, TopRacer[convertedtime][0], TopRacer[convertedtime][1], TopRacer[convertedtime][2]);
						}
					}

	                TopRacer[record] = TotalTime;
					TopRacer[convertedtime][0] = TempTime[0];
					TopRacer[convertedtime][1] = TempTime[1];
					TopRacer[convertedtime][2] = TempTime[2];

					UpdatePlayerCachedData(playerid);

					getdate(year, month, day);
					gettime(hour, minute, second);
					mysql_format(1, query, sizeof(query), "UPDATE `racedata` SET `holder` = '%s', `regid` = %d, `record` = %d, `recordtime` = %d, `vehicle` = '%s' WHERE `race` = '%e'", pName(playerid), PlayerInfo[playerid][pRegID], TotalTime, CurrentTimestamp(), VehName(GetPlayerDynamicVehicleID(playerid)), g_szRaceName_);
					mysql_function_query(1, query, false, "", "");
					mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
				}
				else
				{
				    new
				    minut,
				    sec,
				    ms,
				    curr = TotalTime - TopRacer[record];

					ConvertTime(var2, curr, minut, sec, ms);
					foreach(Player, i)
					{
						if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
					    SendClientMessagef(i, COLOR_ORANGE, LANG(i, "MSG_MFR__BEFEJEZTE_A_VERSENYT_AZ_1"), pName(playerid), playerid, Ranking, TempTime[0], TempTime[1], TempTime[2], minut, sec, ms);
					}
				}
			}
			else
			{
				new
				    minut,
				    sec,
				    ms,
				    curr = TotalTime - TopRacer[record];

				ConvertTime(var2, curr, minut, sec, ms);
				foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
	    			SendClientMessagef(i, COLOR_ORANGE, LANG(i, "MSG_MFR__BEFEJEZTE_A_VERSENYT_AZ_1"), pName(playerid), playerid, Ranking, TempTime[0], TempTime[1], TempTime[2], minut, sec, ms);
				}
			}
			Ranking ++;

            LeavePlayerFromRace(playerid);

			if(Participants <= 0)
	       	{
	       	    foreach(Player, i)
				{
					if(g_pChatMSGFlags[i] & e_Race_MSG) continue;
					SendClientMessagef(i, COLOR_GREEN2, LANG(i, "MSG_MFR_VERSENY__BEFEJEZODOTT_LEG"), g_szRaceName_);
				}
				SetGVarString("LastRaceName", g_szRaceName_, 0);
				endrace();
	       	}
		}
		default:
		{
		    if(g_ServerFlags & e_RACE_START)
		    {
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && RaceType != 3)
				{
					InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNEM_HVAGY_HKOCSIBANWNG"));
					return 1;
				}

				new
                    iCP = GetPVarInt(playerid, "CurrentCP") + 1, // Következõ CP id
					iRanking = GetGVarInt("CPRank", iCP);

				SetGVarInt("CPRank", ++iRanking, iCP);

				format(name, sizeof(name), "~p~Rank: ~w~%d/%d", iRanking, Participants);
				PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "RaceRank"), name);
				PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "RaceRank"));

				PlayerPlaySound(playerid, 1138);
				SetPVarInt(playerid, "CurrentCP", iCP);
				if(GetPVarInt(playerid, "CurrentCP") == LCurrentCheckpoint)
				{
					SetRaceCheckpoint(playerid, GetPVarInt(playerid, "CurrentCP"), -1);
					SetPVarInt(playerid, "RaceParticipant", 6);
				}
				else
				{
					SetRaceCheckpoint(playerid, GetPVarInt(playerid, "CurrentCP"), GetPVarInt(playerid, "CurrentCP") + 1);
				}

				format(i_str, sizeof(i_str), "~p~CP:~w~ %d/~r~%d", GetPVarInt(playerid, "CurrentCP"), LCurrentCheckpoint + 1);
				PlayerTextDrawSetString(playerid, PlayerText:GetPVarInt(playerid, "RaceCP"), i_str);
				PlayerTextDrawShow(playerid, PlayerText:GetPVarInt(playerid, "RaceCP"));
			}
		}
	}
	return 1;
}

forward Kiloves(playerid, bool:isup);
public Kiloves(playerid, bool:isup)
{
	//printf("Kiloves(playerid = %d, isup = %d)", playerid, isup);
	new
	    RocketTime = GetPVarInt(playerid, "RocketTime") - 1;
	SetPVarInt(playerid, "RocketTime", RocketTime);

	if(RocketTime < 1)
	{
		TogglePlayerControllable(playerid, true);

		vID = GetPlayerDynamicVehicleID(playerid);
		SetTimerEx("SetVelocity", 150, false, "ddb", playerid, vID, bool:isup);

		KillTimer(GetPVarInt(playerid, "Rocket"));

		DeletePVar(playerid, "RocketTime");
		DeletePVar(playerid, "Rocket");
	}
	else
	{
		format(name, sizeof(name), "~b~~h~%d", RocketTime);
        GameTextForPlayer(playerid, name, 1100, 3);
		PlayerPlaySound(playerid, 1056);
	}
	return 1;
}

forward SetVelocity(playerid, vehicleid, bool:isup);
public SetVelocity(playerid, vehicleid, bool:isup)
{
    GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_KILOVES")), 1000, 3);

	if(!isup)
	{
		SetDynamicVehicleVelocity(vehicleid, 0.0, (!GetPVarType(playerid, "RocketSpeed")) ? (3.5) : (GetPVarFloat(playerid, "RocketSpeed")), 0.0);
	}
	else
	{
		SetDynamicVehicleVelocity(vehicleid, 0.0, 0.0, (!GetPVarType(playerid, "RocketSpeed")) ? (3.5) : (GetPVarFloat(playerid, "RocketSpeed")));
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
    if(IsPlayerNPC(playerid)) return 0;
    if(g_pDebug{playerid} == 5) SendClientMessagef(playerid, COLOR_WHITE, "OnPlayerEnterDynamicArea(playerid = %d, areaid = %d)", playerid, areaid);

	new
		iState = GetPlayerState(playerid);
    if(iState != PLAYER_STATE_SPECTATING)
    {
		if((g_PlayerFlags2[playerid] & e_PORTAL) && !(IN_MINIGAME_AND_SHITS & g_pGamesData[playerid]))
		{
			if(GetPVarInt(playerid, "Portal_Area") == areaid)
			{
				new obj = GetPVarInt(playerid, "Portal_Obj2_1");
				if(obj != 0)
				{
					GetDynamicObjectPos(obj, X, Y, Z);
					GetDynamicObjectRot(obj, Angle, Angle, Angle);

					GetXYInFrontOfPoint(X, Y, Angle - 90, 2.5);
					NormalTele(playerid, X, Y, Z, GetPlayerInterior(playerid), Angle - 90, GetPlayerVirtualWorld(playerid));
					PlayerPlaySound(playerid, 6003);
				}
			}
			else if(GetPVarInt(playerid, "Portal_Area2") == areaid)
			{
				new obj = GetPVarInt(playerid, "Portal_Obj_1");
				if(obj != 0)
				{
					GetDynamicObjectPos(obj, X, Y, Z);
					GetDynamicObjectRot(obj, Angle, Angle, Angle);

					GetXYInFrontOfPoint(X, Y, Angle - 90, 2.5);
					NormalTele(playerid, X, Y, Z, GetPlayerInterior(playerid), Angle - 90, GetPlayerVirtualWorld(playerid));
					PlayerPlaySound(playerid, 6003);
				}
			}
		}

		if(iState == PLAYER_STATE_DRIVER || iState == PLAYER_STATE_ONFOOT)
		{
			// Ha nincs clearworld-ben csak akkro megy a stuntbónusz - biztonsági okokból mert pár helyet (pl. /pc) ki lehet használni, hogy csak simán zuhansz lefelé és kapod a pontot
			if(!(g_PlayerData[playerid] & e_CLEARWORLD))
			{
				new
				    iMax = sizeof(g_SC_StuntRange[]) - 1;
				for(new i; i != MAX_STUNTS; i++)
				{
					for(new x; x != iMax; x++)
					{
						// printf("g_SC_StuntRange[%d][ g_pSC_Count[%d][%d] ] = %d, %d", i, playerid, i, g_SC_StuntRange[i][ g_pSC_Count[playerid][i] ], g_pSC_Count[playerid][i]);
						if(areaid == g_SC_StuntRange[i][x] && !(g_pSC_StuntCount[playerid][i] & (1 << x)))
						{
							if(!(g_SC_StuntScore{i} >>> 7 & 0x1) && iState == PLAYER_STATE_ONFOOT)
							{
								//ShowWelcome(playerid, LANG(playerid, "MSG_GYALOG_VAGY_BAROM"));
								return 1;
							}

							g_pSC_StuntCount[playerid][i] |= (1 << x);

							if(g_pDebug{playerid} == 5)
							{
								ShowWelcomef(playerid, LANG(playerid, "MSG_IP_G"), g_pSC_Count[playerid]{i});
							}

			                if(g_pSC_Count[playerid]{i} < iMax) g_pSC_Count[playerid]{i} ++;

			                strunpack(country, g_SC_StuntName[i], 45);
							mysql_format(1, query, sizeof(query), "INSERT INTO `stunts`(id, player, reg_id, pos, stunt, reward, cpcount, time) VALUES(0, '%s', %d, %d, '%s', 0, 0, %d)", pName(playerid), PlayerInfo[playerid][pRegID], x, country, CurrentTimestamp());
							mysql_function_query(1, query, false, "", "");
							break;
						}
					}

					// printf("sizeof(g_SC_StuntRange[i]) = %d | %d", sizeof(g_SC_StuntRange[]), g_pSC_Count[playerid][i]);
					if(areaid == g_SC_StuntRange[i][iMax])
					{
						if(g_pSC_Count[playerid]{i} < 8) //	if(g_pSC_Count[playerid]{i} < 7)
						{
							SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_MENTEL_AT_MIND_AZ_OSSZES"));
							break;
						}
						else
						{
							new
							    earning = g_SC_StuntScore{i} & 0x7F;
							//printf("earning = %d, g_SC_StuntScore = %d, i = %d", earning, g_SC_StuntScore{i}, i);
							strunpack(country, g_SC_StuntName[i], 45);
							InfoTD_MSGf(playerid, 10000, LANG(playerid, "MSG_BEFEJEZTED_EZT_A_STUNTOT_NGH"), country, earning, earning * 1000);

							GivePlayerXP(playerid, earning);
							GivePlayerMoneyEx(playerid, earning * 1000, "Stunt");

							mysql_format(1, query, sizeof(query), "INSERT INTO `stunts`(id, player, reg_id, pos, stunt, reward, cpcount, time) VALUES(0, '%s', %d, %d, '%s', %d, %d, %d)", pName(playerid), PlayerInfo[playerid][pRegID], 9, country, earning, g_pSC_Count[playerid]{i}, CurrentTimestamp());
							mysql_function_query(1, query, false, "", "");

							g_pSC_Count[playerid]{i} = 0;
							g_pSC_StuntCount[playerid][i] = 0;
							break;
						}
					}
				}
			}

			if(iState == PLAYER_STATE_DRIVER && (g_PlayerFlags[playerid] & e_STUNTS))
			{
				//printf("asd");
				if(g_JumpsAreaStartID <= areaid <= (g_JumpsAreaStartID + 140))
				{
					//printf("asd 1");
					new
					    id = (areaid - g_JumpsAreaStartID) / 2; // Osztunk kettõvel, mivel 70darab zóna van és mindegyikbû kettõ
					GetDynamicVehicleVelocity(GetPlayerDynamicVehicleID(playerid), V[0], V[1], V[2]);
					//printf("asd2 id %d, vel: %f", id, CalculateVelocity(V[0], V[1], V[2]));

					if(CalculateVelocity(V[0], V[1], V[2]) > 70.0 && !Bit_Get(g_pJumps[playerid], id))
					{
						//printf("asd3 %d", areaid & (g_JumpsAreaStartID & 1));
						if(areaid & (g_JumpsAreaStartID & 1)) // Ha párotlan a kezdõ zóna, akkor a jump kezdõ zónája is páratlan lesz
						{
							if(g_pDebug{playerid} == 5) SendClientMessagef(playerid, -1, "Stunt jump, %d!", id);
	                        g_pJumpID{playerid} = id;
                            g_pJumpTick[playerid] = GetTickCount();

	                        GetPlayerPos(playerid, X, Y, Z);
							SetPlayerCameraPos(playerid, g_Jumps[id][0], g_Jumps[id][1], g_Jumps[id][2]);
							SetPlayerCameraLookAt(playerid, X, Y, Z);
						}
						else
						{
							if(g_pDebug{playerid} == 5) SendClientMessagef(playerid, -1, "Stunt Area LAND, %d", id);
							if(g_pJumpID{playerid} != 0xFF)
							{
								g_pJumpID{playerid} = 0xFF;
								g_pJumpTick[playerid] = 0;
								Bit_Let(g_pJumps[playerid], id);

                                if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
								//SetCameraBehindPlayer(playerid);

								new
								    Curr = UpdatePlayerJumps(playerid);
								if(Curr == 70)
								{
			                        GivePlayerXP(playerid, 700);
									GivePlayerMoneyEx(playerid, 700000, "StuntJump_All");
									ShowWelcome(playerid, LANG(playerid, "MSG_MINDEN_JUMPOT_MEGCSINALTAL"));
								}
								else
								{
                                    GivePlayerXP(playerid, XP_STUNT);
									GivePlayerMoneyEx(playerid, 700, "StuntJump");
									ShowWelcomef(playerid, LANG(playerid, "MSG_GSIKERES_RHHJUMPWNB"), Curr);
								}
							}
						}
					}
				}
			}
			foreach(clans, clanid)
			{
				if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) continue;
				if(GetPVarInt(playerid,"HideClanZones")) continue;
				if(g_pDeathMatchID[playerid] != -1) continue;
				if(g_PlayerFlags2[playerid] & e_HIDE_CLANZONES) continue;
				if(gClanZone[clanid] == areaid)
				{
					ShowWelcomef(playerid, LANG(playerid, "MSG_UDV_AZ_BH_WKLAN_TERULETEN"), gClanName[clanid]);

					if(!(g_pTDFlags[playerid] & e_TD_GPS)   &&   !(g_pOtherFlags[playerid] & e_ZONE_UPDATE_DISABLED) )
					{
                       	static
	    					szSpeed[110];

	    				g_pOtherFlags[playerid] |= e_ZONE_UPDATE_DISABLED;
    					format(szSpeed, sizeof(szSpeed), "~r~~h~GPS: ~y~%s %s", gClanName[clanid], (g_pLang{playerid} == LANGUAGE_HU) ? ("klánzóna") : ("clanzone"));
						PlayerTextDrawSetString(playerid,TD_pGPS[playerid], FixGameString(szSpeed));
					}
					break;
				}
			}
		}

		if(areaid == gRangeZone && g_pDeathMatchID[playerid] == -1 && !GetPVarType(playerid, "RaceParticipant"))
		{
			if(g_BonusCarOwner == playerid)
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_RANGE_ZONABA_NEM_VIHETED"));
				BonusCar();
			}

			if(ZaszloOwner == playerid)
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_A_RANGE_ZONABA_NEM_VIHETED_1"));
				CallFlag();
			}

   			// God letiltása
   			ResetPlayerWeapons(playerid);
			SetPlayerTeam(playerid, 1);
			if(!(g_PlayerData[playerid] & e_CLEARWORLD))
			{
	            TextDrawShowForPlayer(playerid, NoKill);
				GameTextForPlayer(playerid, FixGameString(LANG(playerid, "MSG_GAMETEXT_NO_KILL")), 2000, 4);
   			}
		}
/*
		else if(areaid == gSawnoffZone)
		{
			if(GetPlayerVirtualWorld(playerid) == DM_ZONE_SAWNOFFDM && g_pDeathMatchID[playerid] != != DM_ZONE_SAWNOFFDM)
			{
//				cmd_sawnoffdm(playerid, "1");
				GameTextForPlayer(playerid, FixGameString("~w~Nem mehetõ be!~n~~b~ÉRCSEDMÁMEG!"), 2000, 4);
			}
		}
*/
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
	if(IsPlayerNPC(playerid)) return 0;
    if(g_pDebug{playerid} == 5) SendClientMessagef(playerid, COLOR_WHITE, "OnPlayerLeaveDynamicArea(playerid = %d, areaid = %d)", playerid, areaid);

    if(areaid == gDavidHaza && g_pDeathMatchID[playerid] == -1 && !GetPVarType(playerid, "RaceParticipant") && GetPVarInt(playerid,"Level") != 4)
	{
	    // God engedélyezése
		SetGoodAllowed(playerid, true);
	}

    foreach(clans, clanid)
	{
		if(!(g_ClanFlags{clanid} & e_CLAN_ACTIVE)) continue;
		if(gClanZone[clanid] == areaid)
		{
			if(!(g_pTDFlags[playerid] & e_TD_GPS))
			{
			    g_pOtherFlags[playerid] &= ~e_ZONE_UPDATE_DISABLED;
			}
			break;
		}
	}

	/*foreach(DeathMatches, dmid)
	{
	    if(areaid == g_DMAreaID[dmid] &&  g_pDeathMatchID[playerid] != -1)
	    {
	        SendClientMessagef(playerid,-1,"Túl messze mentél a(z) %s nevû DM zónától! Van 10 másodperced hogy visszamenjél!",g_szDMName[dmid]);
	        SetPVarInt(playerid,"DM_Leave_Zone", 10);
	    }
	}*/

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		if(areaid == gRangeZone /*&& g_pDeathMatchID[playerid] == -1 */&& !GetPVarType(playerid, "RaceParticipant"))
		{
         	LoadPlayerWeaponInfo(playerid);

			SetPlayerTeam(playerid, NO_TEAM);
            TextDrawHideForPlayer(playerid, NoKill);
		}
		if(areaid == gJailZone)
		{
			if(GetPVarType(playerid, "JailTime"))
			{
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NE_PROBALJ_MEGSZOKNI_A_BORTONBOL"));
				PlayerTele(playerid, 6519.1816, 562.2757, 1.5871, 0, 63.9206);
                SetPlayerHealth(playerid, HEALTH_GOD);
			}
		}
		else if(areaid == gJailRange)
		{
			if(GetPVarType(playerid, "PlayerTime_Hour"))
		 	{
			 	SetPlayerTime(playerid, GetPVarInt(playerid, "PlayerTime_Hour"), GetPVarInt(playerid, "PlayerTime_Minute"));
			}
			else if(!GetPVarInt(playerid, "SpawnLocation"))
			{
				SetPlayerTime(playerid, 23, 59);
			}
			else
			{
				SetPlayerTime(playerid, up_minutes, uptimeCount);
			}
			if(GetPVarType(playerid, "PlayerWeather"))
			{
				if(g_pDeathMatchID[playerid] != -1 && g_DM_Weather[g_pDeathMatchID[playerid]] == -1) SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
			}
			else
			{
   				if(g_pDeathMatchID[playerid] != -1 && g_DM_Weather[g_pDeathMatchID[playerid]] == -1) SetPlayerWeather(playerid, GetServerVarAsInt("weather"));
			}
		}
		else if(areaid == g_PostaArea && (g_pGamesData[playerid] & e_POSTAS))
		{
			if(g_pPostasTime[playerid] == 1)
			{
				PlayerTextDrawShow(playerid, TD_pPostasTime[playerid]);
				g_pPostasTime[playerid] = 2;

				SendClientMessage(playerid, -1, LANG(playerid, "MSG_KIMENTEL_A_POSTANAL_LEVO_LEVEL"));
			}
		}
		else if(areaid == g_PizzaArea && (g_pGamesData[playerid] & e_PIZZAS))
		{
			if(g_pPostasTime[playerid] == 1)
			{
				PlayerTextDrawShow(playerid, TD_pPostasTime[playerid]);
				g_pPostasTime[playerid] = 2;

				SendClientMessage(playerid, -1, LANG(playerid, "MSG_KIMENTEL_A_PIZZERIABOL_SZALLITSD"));
			}
		}
	}
	return 1;
}

stock GetGangwarZoneColor(id)
{
	switch(id)
	{
		case 0..9: return 0xFF00AA;
		case 10..19: return 0xFF00FFAA;
		case 20..29: return 0xFFFF00AA;
		case 30..39: return 0xFFFFAA;
	}
	return 0;
}

stock GetGangwarZoneColorByTeam(id)
{
	switch(id)
	{
		case TEAM_GROVE: return 0xFF00AA;
		case TEAM_BALLAS: return 0xFF00FFAA;
		case TEAM_VAGOS: return 0xFFFF00AA;
		case TEAM_AZTECAS: return 0xFFFFAA;
	}
	return 0;
}

stock GetGangwarZoneIcon(id)
{
	switch(id)
	{
		case 0..9: return 62;
		case 10..19: return 59;
		case 20..29: return 60;
		case 30..39: return 58;
	}
	return 0;
}

stock GetGangwarZoneIconByTeam(id)
{
	switch(g_ZoneOwner[id])
	{
		case TEAM_GROVE: return 62;
		case TEAM_BALLAS: return 59;
		case TEAM_VAGOS: return 60;
		case TEAM_AZTECAS: return 58;
	}
	return -1;
}

stock GetGangwarZoneID(id)
{
	switch(id)
	{
		case 0..9: return TEAM_GROVE;
		case 10..19: return TEAM_BALLAS;
		case 20..29: return TEAM_VAGOS;
		case 30..39: return TEAM_AZTECAS;
	}
	return -1;
}

stock GetGangwarTeamName(teamid)
{
	new
	    ret[10];
	switch(teamid)
	{
		case TEAM_GROVE: ret = "Grove";
		case TEAM_BALLAS: ret = "Ballas";
		case TEAM_VAGOS: ret = "Vagos";
		case TEAM_AZTECAS: ret = "Aztecas";
		default: ret = " ";
	}
	return ret;
}

stock GetGangwarZones(teamid)
{
	new
	    count,
	    asd = teamid * 10;
	for(new i = asd; i != (asd + 9); i++)
	{
        if(g_ZoneOwner[i] == teamid) count++;
	}
	return count;
}

CMD:myzone(playerid, params[], 0, 0)
{
	if(isnull(params)) player1 = playerid;
	else if(sscanf(params, "u", player1)) return SendUsage(playerid, "/myzone {" #XCOLOR_YELLOW "}<Játékos ID/Név>");

	if(IsNotConnected(player1)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NOT_CONNECTED"));

    GetPlayerPos(player1, X, Y, Z);
    for(new i; i != 40; i++)
    {
        if(X >= gZoneInfo[i][e_MinX] && X <= gZoneInfo[i][e_MaxX] && Y >= gZoneInfo[i][e_MinY] && Y <= gZoneInfo[i][e_MaxY])
        {
			if(GetPVarInt(playerid, "Level") < 4 && !IsPlayerAdmin(playerid)) // Ha nem admin, akkor nem mutatjuk a kordinánát - nem fogják elcsórni a buzi faszzopók
			{
				SendClientMessagef(playerid, -1, "%d, %.4f, %.4f, %.4f, %.4f", i, gZoneInfo[i][e_MinX], gZoneInfo[i][e_MinY], gZoneInfo[i][e_MaxX], gZoneInfo[i][e_MaxY]);
			}
			else
			{
				SendClientMessagef(playerid, -1, "%d", i);
			}

			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_G_ZONEISATTACKED__G_ZONEATTACKER"),
				g_ZoneIsAttacked[i], g_ZoneAttacker[i], g_ZoneKillsAttacker[i], g_ZoneKillsDefender[i], g_ZoneOwner[i], g_ZoneAttackTime[i]);

			SendClientMessagef(playerid, -1, LANG(playerid, "MSG_G_ZONEATTACKRAHUZAS__G_ZONELASTKI"),
				g_ZoneAttackRahuzas[i], g_ZoneLastKill[i]);
        }
    }
	return 1;
}

stock SaveGangwarZones()
{
	new
		File:fGangwar = fopen("NMSS/gangwar.txt", io_write);
	for(new i; i != 40; i++)
	{
		valstr(name, g_ZoneOwner[i]);
		if(i != 39) strcat(name, "\n");
		fwrite(fGangwar, name);
	}
	fclose(fGangwar);
}

stock LoadLanguages()
{
	printf("loading languages....");
  	LoadLang("hu", LANGUAGE_HU);
	LoadLang("en", LANGUAGE_EN);
	printf("Loaded!");
}

public OnGameModeInit()
{
	#if defined YSF
	AllowNickNameCharacter('!', true);
	AllowNickNameCharacter('"', true);
	AllowNickNameCharacter('#', true);
	AllowNickNameCharacter('&', true);
	//AllowNickNameCharacter('\'', true);
	AllowNickNameCharacter('*', true);
	AllowNickNameCharacter('+', true);
	AllowNickNameCharacter(',', true);
	//AllowNickNameCharacter('-', true);
	AllowNickNameCharacter(':', true);
	AllowNickNameCharacter(';', true);
	AllowNickNameCharacter('<', true);
	AllowNickNameCharacter('>', true);
	AllowNickNameCharacter('?', true);
	AllowNickNameCharacter('{', true);
	AllowNickNameCharacter('|', true);
	AllowNickNameCharacter('}', true);
	AllowNickNameCharacter('(', true);
	AllowNickNameCharacter(')', true);
	AllowNickNameCharacter('á', true);
	AllowNickNameCharacter('é', true);
	AllowNickNameCharacter('í', true);
	AllowNickNameCharacter('ó', true);
	AllowNickNameCharacter('ö', true);
	AllowNickNameCharacter('õ', true);
	AllowNickNameCharacter('ú', true);
	AllowNickNameCharacter('ü', true);
	AllowNickNameCharacter('û', true);
	
	
	//AllowNickNameCharacter('~', true);
	#endif

	//printf("flags2: %d", DEFAULT_PLAYER_FLAGS2);
	SSCANF_Init(MAX_PLAYERS, INVALID_PLAYER_ID, MAX_PLAYER_NAME);
	//
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
    SetServerRule("version", "0.3.7-R2");
	SetObjectsDefaultCameraCol(false);
	DisableInteriorEnterExits();
	ShowNameTags(1);
    UsePlayerPedAnims();
    AllowInteriorWeapons(1);
	EnableStuntBonusForAll(1);
	EnableVehicleFriendlyFire();
    SetNameTagDrawDistance(50.0);
    Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 750);
//    Streamer_ToggleErrorCallback(1);
//    Audio_CreateTCPServer(GetServerVarAsInt("port"));
//    Audio_SetPack("default_pack");
    SSCANF_Option(MATCH_NAME_PARTIAL, 1);
    SSCANF_Option(CELLMIN_ON_MATCHES, 1);
    g_RoundType = random(2);
    g_DerbyMode = random(sizeof(g_DerbyNames));
    Streamer_TickRate(50);
    YSF_SetTickRate(50);
    Bit_SetAll(gIsHouseCar, false);
	Bit_SetAll(g_bDuelActive, false);

    // Load languages
    LoadLanguages();
	//
    Vidampark();
	for(new i; i != MAX_PLAYERS; i++)
	{
        g_pDuelCaller[i] = INVALID_PLAYER_ID;
        g_pDuelPlayer[i] = INVALID_PLAYER_ID;
        g_pDuelLocation{i} = 0xFF;
        g_pDuelID{i} = 0xFF;

		for(new x; x != 13; x++)
		{
	    	g_pDuelWeapon[i]{x} = 0xFF;

			if(i < 30) g_DuelWeapons[i]{x} = 0xFF;
		}

		DeletePVar(i, "InDuel");
		DeletePVar(i, "DuelRounds");
	}

	for(new i; i != (MAX_PLAYERS / 2); i++)
	{
        g_DuelPlayer[i][0] = INVALID_PLAYER_ID;
        g_DuelPlayer[i][1] = INVALID_PLAYER_ID;
        g_DuelLocation{i} = 0xFF;
	}

	for(new i; i != MAX_DM; i++)
	{
		g_DMTextdraw[i][0] = Text:-1;
		g_DMTextdraw[i][1] = Text:-1;
		g_DMArmedWeapon{i} = 0xFF;
	}

	//NPC

 	ConnectNPC("ShamalDriver", "shamal");
   	ConnectNPC("Thomas", "Thomas");
   	ConnectNPC("TrainDriver", "train");
    ConnectNPC("Slice","lv_ufo");
    ConnectNPC("Jontay","ls_ufo");
    ConnectNPC("Joron","sf_ufo");

    g_NPC_Car[0] = CreateDynamicVehicle(519, 2109.1763, 1503.0453, 32.2887, 82.2873, random(255), random(255), -1); // gNPCShamal
	//g_NPC_Car[1] = CreateDynamicVehicle(449, 2109.1763, 1503.0453, 32.2887, 82.2873, random(255), random(255), -1); // gNPCTram
	g_NPC_Car[1] = CreateDynamicVehicle(449, -2006.5000,158.5440,28.2500,0.0000, random(255), random(255), -1); // Tram ( Thomas )
	g_NPC_Car[2] = AddStaticVehicleEx(538, -1942.2496, 177.8349, 26.1223, 176.3963, random(255), random(255), -1); // gNPCTrain
    g_NPC_Car[3] = CreateDynamicVehicle(594, 2109.1763, 1503.0453, 32.2887, 82.2873, random(255), random(255), -1); //LV UFO
	g_NPC_Car[4] = CreateDynamicVehicle(411, -1988.0057, 116.6116, 27.6411, 0.6686, random(255), random(255), -1);
    g_NPC_Car[5] = CreateDynamicVehicle(409, 2125.1548, 1045.6689, 10.6029, 125.6300, random(255), random(255), -1);
	g_NPC_Car[6] = CreateDynamicVehicle(409, 2039.3546, 989.0201, 10.4719, 179.9125, random(255), random(255), -1);
    g_NPC_Car[7] = CreateDynamicVehicle(420, 1710.0829, 1452.1614, 10.5395, 343.1176, random(255), random(255), -1);
    g_NPC_Car[8] = CreateDynamicVehicle(562, 2085.3762, 863.2629, 6.4877, 89.4885, random(255), random(255), -1);
    g_NPC_Car[9] = CreateDynamicVehicle(411, 2085.3762, 863.2629, 6.4877, 89.4885, random(255), random(255), -1);
	g_NPC_Car[10] =	CreateDynamicVehicle(411, 2044.8854, 1473.2106, 10.4494, 181.3339, random(255), random(255), -1);
	g_NPC_Car[11] =	CreateDynamicVehicle(594, 2044.8854, 1473.2106, 10.4494, 181.3339, random(255), random(255), -1);
	g_NPC_Car[12] =	CreateDynamicVehicle(594, 2044.8854, 1473.2106, 10.4494, 181.3339, random(255), random(255), -1);


	// Grove
	CreateDynamicVehicle(492,2511.9511700,-1669.1289100,13.2995000,2.1260000,86,86,120, 0, 8); //Greenwood
	CreateDynamicVehicle(567,2508.7490200,-1686.2802700,13.4559000,50.5810000,86,86,120, 0, 8); //Savanna
	CreateDynamicVehicle(412,2499.4921900,-1654.5351600,13.2698000,80.9780000,86,86,120, 0, 8); //Voodoo
	CreateDynamicVehicle(567,2470.1215800,-1670.3883100,13.1858000,11.8440000,86,86,120, 0, 8); //Savanna
	CreateDynamicVehicle(487,2505.5928000,-1696.8290000,18.1267000,2.0480000,86,86,120, 0, 8); //Maverick
	CreateDynamicVehicle(522,2487.6860000,-1651.3181000,13.0650000,89.9930000,86,86,120, 0, 8); //NRG-500
	CreateDynamicVehicle(600,2473.2480500,-1695.7128900,13.2348000,1.0600000,86,86,120, 0, 8); //Picador
	CreateDynamicVehicle(461,2443.6193800,-1643.1395300,13.0558000,178.0000000,86,86,120, 0, 8); //PCJ-600
	CreateDynamicVehicle(492,2451.2009300,-1670.4769300,13.3964400,90.1310000,86,86,120, 0, 8); //Greenwood
	CreateDynamicVehicle(412,2425.5717800,-1644.2635500,13.4526000,184.9780000,86,86,120, 0, 8); //Voodoo
	CreateDynamicVehicle(600,2431.5678700,-1643.8397200,13.3410300,181.0600000,86,86,120, 0, 8); //Picador
	CreateDynamicVehicle(481,2500.3120100,-1647.4355500,13.1640700,170.0000000,86,86,120, 0, 8); //BMX
	CreateDynamicVehicle(492,2372.3093300,-1646.5174600,13.4307600,116.1310000,86,86,120, 0, 8); //Greenwood
	CreateDynamicVehicle(567,2378.6882300,-1645.3886700,13.5064000,223.8430000,86,86,120, 0, 8); //Savanna
	CreateDynamicVehicle(521,2402.3352100,-1678.6622300,13.2684300,0.0000000,86,86,120, 0, 8); //FCR-900
	CreateDynamicVehicle(412,2361.1633300,-1680.0577400,13.4932500,0.0000000,86,86,120, 0, 8); //Voodoo
	CreateDynamicVehicle(567,2393.0009800,-1678.8415500,14.4053300,1.8410000,86,86,120, 0, 8); //Savanna
	CreateDynamicVehicle(600,2229.4841300,-1627.2589100,15.4053600,13.0600000,86,86,120, 0, 8); //Picador
	CreateDynamicVehicle(600,2190.9487300,-1810.8878200,13.3887200,57.0570000,86,86,120, 0, 8); //Picador
	CreateDynamicVehicle(567,2070.7124000,-1589.6262200,13.4719300,19.8410000,86,86,120, 0, 8); //Savanna
//	g_ZoneCars[a++] = CreateDynamicVehicle(492,2202.4316400,-1699.3011500,13.5372500,120.1310000,86,86,120, 0, 8); //Greenwood

	// Ballas
	CreateDynamicVehicle(566,1966.3085900,-1218.5097700,25.0088000,4.3620000,85,85,120, 0, 8); //Tahoma
	CreateDynamicVehicle(517,1964.3769500,-1155.3828100,25.7983000,358.8080000,85,85,120, 0, 8); //Majestic
	CreateDynamicVehicle(412,1974.3457000,-1177.3105500,25.8540000,0.5050000,85,85,120, 0, 8); //Voodoo
	CreateDynamicVehicle(566,2460.5585900,-1351.5557900,23.9000000,141.0340000,85,85,120, 0, 8); //Tahoma
	CreateDynamicVehicle(487,1969.3066400,-1136.4877900,25.9627000,275.1690000,85,85,120, 0, 8); //Maverick
	CreateDynamicVehicle(522,1965.4735000,-1177.3368000,19.5870000,267.3340000,85,85,120, 0, 8); //NRG-500
	CreateDynamicVehicle(517,1979.5904500,-1242.5483400,24.1153900,160.8080000,85,85,120, 0, 8); //Majestic
	CreateDynamicVehicle(412,1876.5682400,-1246.6300000,13.7957000,156.5050000,85,85,120, 0, 8); //Voodoo
	CreateDynamicVehicle(521,1884.8159200,-1150.3999000,23.7436300,112.0000000,112,10,120, 0, 8); //FCR-900
	CreateDynamicVehicle(481,2055.4431200,-1156.6748000,23.3390800,258.0000000,112,10,120, 0, 8); //BMX
	CreateDynamicVehicle(566,2157.5935100,-1188.1401400,23.7250800,125.0000000,85,85,120, 0, 8); //Tahoma
	CreateDynamicVehicle(566,1871.8689000,-1177.4084500,23.7281200,160.3620000,85,85,120, 0, 8); //Tahoma
	CreateDynamicVehicle(517,2033.2080100,-1335.6379400,23.9200400,300.8070000,85,85,120, 0, 8); //Majestic
	CreateDynamicVehicle(521,1863.7109400,-1352.8256800,13.1507700,217.9950000,112,10,120, 0, 8); //FCR-900
	CreateDynamicVehicle(412,2003.3310500,-1121.8819600,26.6934200,180.5050000,85,85,120, 0, 8); //Voodoo
	CreateDynamicVehicle(566,1893.8292200,-1109.3010300,25.1734400,180.3560000,85,85,120, 0, 8); //Tahoma
	CreateDynamicVehicle(412,2286.2509800,-1173.6977500,26.1646200,140.5000000,85,85,120, 0, 8); //Voodoo
	CreateDynamicVehicle(412,2170.9929200,-1395.6967800,23.9416800,150.4990000,85,85,120, 0, 8); //Voodoo
	CreateDynamicVehicle(517,2099.8264200,-1365.7835700,23.9200400,34.8070000,85,85,120, 0, 8); //Majestic
	CreateDynamicVehicle(412,2146.9809600,-1417.6926300,25.5193300,0.5050000,85,85,120, 0, 8); //Voodoo

	// Vagos
	CreateDynamicVehicle(474,2637.4882800,-1080.1787100,69.2968000,1.6590000,194,194,120, 0, 8); //Hermes
	CreateDynamicVehicle(576,2596.5214800,-1065.0732400,69.1908000,0.9670000,194,194,120, 0, 8); //Tornado
	CreateDynamicVehicle(467,2600.6298800,-1125.3242200,65.6081000,61.3480000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(487,2600.6435500,-1038.7861300,69.8431200,271.2580000,194,194,120, 0, 8); //Maverick
	CreateDynamicVehicle(474,2551.1191400,-1128.9199200,63.1716000,1.6590000,194,194,120, 0, 8); //Hermes
	CreateDynamicVehicle(467,2604.0869100,-1069.6845700,69.4565000,25.3450000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(522,2595.7685500,-1087.6069300,69.0272100,348.0000000,163,154,120, 0, 8); //NRG-500
	CreateDynamicVehicle(521,2586.3183600,-1028.6396500,69.2321200,182.0000000,194,194,120, 0, 8); //FCR-900
	CreateDynamicVehicle(510,2572.5722700,-1070.8847700,68.9807100,51.9980000,194,194,120, 0, 8); //Mountain Bike
	CreateDynamicVehicle(467,2636.6142600,-1101.5302700,68.9518300,191.3430000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(576,2523.9316400,-1108.3828100,56.1686000,356.9680000,194,194,120, 0, 8); //Tornado
	CreateDynamicVehicle(467,2151.9863300,-1008.7558600,62.6499000,25.3400000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(467,2355.1679700,-1043.6689500,54.0122400,177.3410000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(576,2749.9316400,-1119.4228500,69.3281300,114.9720000,194,194,120, 0, 8); //Tornado
	CreateDynamicVehicle(522,2828.1709000,-1201.2353500,24.4311900,343.9930000,194,194,120, 0, 8); //NRG-500
	CreateDynamicVehicle(474,2699.7959000,-1085.4101600,69.0787900,343.6630000,194,194,120, 0, 8); //Hermes
	CreateDynamicVehicle(467,2680.2460900,-1061.8291000,69.1668800,119.3390000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(467,2866.6816400,-1436.7334000,10.8369500,61.3480000,194,194,120, 0, 8); //Oceanic
	CreateDynamicVehicle(521,2707.4697300,-1108.9316400,76.2385000,182.0000000,194,194,120, 0, 8); //FCR-900
	CreateDynamicVehicle(467,2869.0500500,-1399.7880900,10.9292600,191.3430000,194,194,120, 0, 8); //Oceanic

	// Aztecas
	CreateDynamicVehicle(534,1800.9794900,-2107.6142600,13.1836000,269.8300000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(474,1736.9033200,-2107.7480500,13.2237000,269.0990000,93,93,120, 0, 8); //Hermes
	CreateDynamicVehicle(575,1745.0400400,-2128.4277300,13.1465000,0.5380000,93,93,120, 0, 8); //Broadway
	CreateDynamicVehicle(534,1793.3145000,-2149.4124000,13.3496000,1.1600000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(487,1792.8041000,-2131.6599000,17.7930000,358.6450000,93,93,120, 0, 8); //Maverick
	CreateDynamicVehicle(474,1724.9386000,-2141.5837400,13.4543500,2.3490000,93,93,120, 0, 8); //Hermes
	CreateDynamicVehicle(534,1664.5081800,-2115.7548800,13.3697500,269.8300000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(575,1667.2296100,-2111.3459500,13.2868700,112.5380000,93,93,120, 0, 8); //Broadway
	CreateDynamicVehicle(575,1681.1607700,-2112.6933600,13.2868700,0.5380000,93,93,120, 0, 8); //Broadway
	CreateDynamicVehicle(474,1772.5009800,-2098.2749000,13.4500300,179.0990000,93,93,120, 0, 8); //Hermes
	CreateDynamicVehicle(534,1762.7358400,-2117.6025400,13.2056900,269.8300000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(534,1896.6378200,-1956.2188700,13.3775400,241.8300000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(534,1947.5815400,-2110.7172900,13.3690900,267.8260000,93,93,120, 0, 8); //Remington
	CreateDynamicVehicle(521,1939.9023400,-2090.9758300,13.2197200,280.0000000,4,50,120, 0, 8); //FCR-900
	CreateDynamicVehicle(521,1808.5371100,-2123.4057600,13.2072500,279.9980000,4,50,120, 0, 8); //FCR-900
	CreateDynamicVehicle(522,1791.2104500,-2097.8537600,13.2072500,170.0000000,3,3,120, 0, 8); //NRG-500
	CreateDynamicVehicle(510,1803.5941200,-2138.2932100,13.2427200,0.0000000,3,3,120, 0, 8); //Mountain Bike
	CreateDynamicVehicle(474,1686.0002400,-1873.5397900,13.4433800,315.0990000,93,93,120, 0, 8); //Hermes
	CreateDynamicVehicle(474,1937.0777600,-1765.9403100,13.2828100,335.0990000,93,93,120, 0, 8); //Hermes
	CreateDynamicVehicle(534,1781.6716300,-1623.3884300,14.3190300,0.0000000,93,93,120, 0, 8); //Remington
//	g_ZoneCars[a++] = CreateDynamicVehicle(575,1733.3531500,-1748.9199200,13.2868200,142.5380000,93,93,120, 0, 8); //Broadway
//	g_ZoneCars[a++] = CreateDynamicVehicle(575,2109.5690900,-2027.0559100,13.2868700,284.5330000,93,93,120, 0, 8); //Broadway

	new
	    File:fGangwar = fopen("NMSS/gangwar.txt", io_read);
	// Grove
	for(new i; i != 40; i++)
	{
		fread(fGangwar, name, 24);
		g_ZoneOwner[i] = strval(name);
		//printf("%d -> %d", i, g_ZoneOwner[i]);
		g_ZoneAttacker[i] = 0xFF;

		GangZoneCreate(gZoneInfo[i][e_MinX], gZoneInfo[i][e_MinY], gZoneInfo[i][e_MaxX], gZoneInfo[i][e_MaxY]);

		CreateDynamicCP(gZoneInfo[i][e_CPX], gZoneInfo[i][e_CPY], gZoneInfo[i][e_CPZ], 5.0, 8);
		g_ZoneIconID[i] = CreateDynamicMapIcon(gZoneInfo[i][e_CPX], gZoneInfo[i][e_CPY], gZoneInfo[i][e_CPZ], GetGangwarZoneIconByTeam(i), 0, 8, .streamdistance = 500.0);
	}
	fclose(fGangwar);

	g_CTC_Auto[0] = CreateDynamicVehicle(524,-774.9037,1436.6814,14.7185,90.0339,3,3, 300, 0, 10); // Lent 1
	g_CTC_Auto[1] = CreateDynamicVehicle(524,-743.6019,1641.1852,28.1922,176.4622,162,162, 300, 0, 10); // Fönt 1

    CreateDynamic3DTextLabel("Vidd a betonkeverõt a térképen lévõ kamion ikonhoz!\nKözben vigyázz a jármû épségére!", COLOR_GREEN, 0.0, 0.0, 0.0, 30.0, .attachedvehicle = g_CTC_Auto[0]);
    CreateDynamic3DTextLabel("Vidd a betonkeverõt a térképen lévõ kamion ikonhoz!\nKözben vigyázz a jármû épségére!", COLOR_GREEN, 0.0, 0.0, 0.0, 30.0, .attachedvehicle = g_CTC_Auto[1]);

	g_CTC_Hajo[0] = CreateDynamicVehicle(454,1973.2667,-246.9051,-0.5772,339.3601,3,3, 300, 0, 10); // Hajó 1 Lent
	g_CTC_Hajo[1] = CreateDynamicVehicle(454,2296.0227,514.4452,-0.5215,174.8262,162,162, 300, 0, 10); // Fönt

    CreateDynamic3DTextLabel("Vidd a hajót a térképen lévõ vasmacska ikonhoz!\nKözben vigyázz a hajó épségére!", COLOR_GREEN, 0.0, 0.0, 0.0, 30.0, .attachedvehicle = g_CTC_Hajo[0]);
    CreateDynamic3DTextLabel("Vidd a hajót a térképen lévõ vasmacska ikonhoz!\nKözben vigyázz a hajó épségére!", COLOR_GREEN, 0.0, 0.0, 0.0, 30.0, .attachedvehicle = g_CTC_Hajo[1]);

	for(new i; i != 4; i++)
	{
		if(i < 2)
		{
			CreateDynamic3DTextLabel("Parkolj ide a másik csapat betonkeverõjével!", COLOR_GREEN, g_fLeadoHelyek[i][0], g_fLeadoHelyek[i][1], g_fLeadoHelyek[i][2], 30.0);
		}
		else
		{
			CreateDynamic3DTextLabel("Parkolj ide a másik csapat hajójával!", COLOR_GREEN, g_fLeadoHelyek[i][0], g_fLeadoHelyek[i][1], g_fLeadoHelyek[i][2], 30.0);
		}
	}
	CreateDynamicVehicle(560,-778.5714,1428.7616,13.4938,78.0395,3,3, 60, 0, 10); // Lenti Kocsik
	CreateDynamicVehicle(468,-776.6394,1442.9420,13.4606,116.6538,3,3, 60, 0, 10); //
	CreateDynamicVehicle(559,-783.6764,1450.6853,13.6015,165.3833,3,3, 60, 0, 10); // Lenti betonykeverõ
	CreateDynamicVehicle(463,-792.2819,1422.9059,13.4850,353.4960,3,3, 60, 0, 10); //
	CreateDynamicVehicle(565,-797.2496,1448.8260,13.5707,165.0655,3,3, 60, 0, 10); //
	CreateDynamicVehicle(517,-806.3405,1423.6245,13.8020,357.1451,3,3, 60, 0, 10); //
	CreateDynamicVehicle(562,-825.4294,1423.4027,13.7057,349.6567,3,3, 60, 0, 10); //
	CreateDynamicVehicle(510,-831.4283,1442.4110,13.7407,178.0941,3,3, 60, 0, 10); //
	CreateDynamicVehicle(481,-831.3124,1429.5435,13.3015,359.9654,3,3, 60, 0, 10); //
	CreateDynamicVehicle(489,-827.8491,1448.7581,14.2153,253.9467,3,3, 60, 0, 10); //

	CreateDynamicVehicle(560,-749.6100,1641.3685,26.9487,140.2763,162,162, 60, 0, 10); // Fönti BK Kocsik
	CreateDynamicVehicle(468,-737.6625,1631.8042,26.8013,111.9271,162,162, 60, 0, 10); //
	CreateDynamicVehicle(559,-757.0119,1644.6058,27.0058,172.6502,162,162, 60, 0, 10); // Fönt
	CreateDynamicVehicle(412,-763.0441,1644.3203,27.2954,208.6821,162,162, 60, 0, 10); //
	CreateDynamicVehicle(489,-768.2346,1645.1527,27.6817,165.9334,162,162, 60, 0, 10); //
	CreateDynamicVehicle(463,-785.0945,1631.2185,26.6541,180.7312,162,162, 60, 0, 10); //
	CreateDynamicVehicle(481,-740.2015,1605.2002,26.6343,181.2426,162,162, 60, 0, 10); //
	CreateDynamicVehicle(510,-740.8196,1587.8243,26.8200,123.4873,162,162, 60, 0, 10); //

	CreateDynamicVehicle(473,1982.5891,-252.1347,-0.2543,334.2219,3,3, 60, 0, 10); // Lenti
	CreateDynamicVehicle(473,1977.0829,-249.9546,-0.3036,347.6645,3,31, 60, 0, 10); //
	CreateDynamicVehicle(473,1966.8182,-244.7256,-0.2353,340.2215,3,3, 60, 0, 10); //
	CreateDynamicVehicle(473,1987.4968,-247.2012,-0.2496,2.7218,3,3, 60, 0, 10); // Újra lenti
	CreateDynamicVehicle(473,1994.1770,-247.3104,-0.2917,1.6747,3,3, 60, 0, 10); //
	CreateDynamicVehicle(473,1956.2565,-244.7204,-0.2891,13.0779,3,3, 60, 0, 10); //
	CreateDynamicVehicle(473,1947.7023,-254.4756,-0.3234,358.4181,3,3, 60, 0, 10); //

	CreateDynamicVehicle(447,2131.6504,872.9600,8.8085,186.4554,3,3, 60, 0, 10); // Kék csapat seasparrow
	CreateDynamicVehicle(468,2258.8020,643.8772,10.5407,265.4403,3,3, 60, 0, 10); // Sanchez
	CreateDynamicVehicle(476,2331.7524,711.6943,11.3775,91.2680,3,3, 60, 0, 10); // CTC Rustler kék

	CreateDynamicVehicle(473,2302.5896,517.3962,-0.2532,188.3029,162,162, 60, 0, 10); // Dinygh
	CreateDynamicVehicle(473,2288.3604,519.0930,-0.2383,170.7829,162,162, 60, 0, 10); //
	CreateDynamicVehicle(473,2284.1243,521.8778,-0.0724,137.2791,162,162, 60, 0, 10); //
	CreateDynamicVehicle(473,2284.2771,530.7166,-0.1572,175.9983,162,162, 60, 0, 10); //
	CreateDynamicVehicle(473,2303.1245,540.2493,-0.3452,183.3459,162,162, 60, 0, 10); //
	CreateDynamicVehicle(473,2304.0237,526.8027,-0.3947,184.3413,162,162, 60, 0, 10); //

	CreateDynamicVehicle(447,2152.7874,-358.8391,54.8573,89.5997,162,162, 60, 0, 10); // Piros csapatSeasparrow
    CreateDynamicVehicle(468,1877.8306,-273.5222,37.9906,0.3302,162,162, 60, 0, 10); // Sanchez
	CreateDynamicVehicle(476,1909.2075,-500.0312,18.7761,2.5821,162,162, 60, 0, 10); // CTC Piros rustler

	new
	    File:fCMD;
	// Ha létezik a parancs listát tartalmazó fájl, akkor onnan betöltsük a parancsokat
	if(fexist("/NMSS/cmdlist.txt"))
	{
		fCMD = fopen("/NMSS/cmdlist.txt", io_read);
		while(fread(fCMD, country))
		{
            StripNewLine(country);
			SetGVarString("CMD", country, g_iMaxCMD++);
			//printf("%d - %s", g_iMaxCMD, country);
		}
	}
	else // Ha nem, akkor újrageneráljuk
	{
        fCMD = fopen("/NMSS/cmdlist.txt", io_write);
		new
		    buffer[32],
		    idx;
		while(Scripting_GetPublic(idx++, buffer, "cmd_"))
		{
			if(buffer[0] == 'z' || buffer[4] == '8') continue;
			strdel(buffer, 0, 4);
			strins(buffer, "/", 0);

			SetGVarString("CMD", buffer, g_iMaxCMD++);
			printf("%d - %s", g_iMaxCMD, buffer);
			fwrite(fCMD, buffer);
			fwrite(fCMD, "\n");
		}
	}
	fclose(fCMD);

	// MySQL
	new
		bool:bOnHost,
		MapAndreasInit;
	if(fexist("/NMSS/sql.txt"))
	{
		new
		    File:fSQL = fopen("/NMSS/sql.txt", io_read);
		if(fSQL)
		{
		    fread(fSQL, name, sizeof(name));
			sscanf(name, "D(0)D(0)", bOnHost, MapAndreasInit);
			fclose(fSQL);
		}
	}

	// MySQL kapcsolódás
	mysql_log(MYSQL_DEBUG_);
	mysql_option(DUPLICATE_CONNECTIONS, 1);
//	mysql_option(LOG_TRUNCATE_DATA, 0);
 	if(!bOnHost)
	{
		print(!"<< MySQL >> Kapcsolódás a(z) " MYSQL_HOST ", " MYSQL_USER " adatbázis " MYSQL_DB "!");
		#if defined mysql_query_file
		mysql_connect(!MYSQL_HOST, !MYSQL_USER, !MYSQL_PASS, !MYSQL_DB, 3306, true);
		#else
		mysql_connect(!MYSQL_HOST, !MYSQL_USER, !MYSQL_DB, !MYSQL_PASS, 3306, true);
		#endif
	}
	else
	{
		print(!"<< MySQL >> Kapcsolódás a(z) " MYSQL_HOST_HOST ", " MYSQL_USER_HOST " adatbázis " MYSQL_DB_HOST "!");
        #if defined mysql_query_file
		mysql_connect(!MYSQL_HOST_HOST, !MYSQL_USER_HOST, !MYSQL_PASS_HOST, !MYSQL_DB_HOST, 3306, true);
		#else
		mysql_connect(!MYSQL_HOST_HOST, !MYSQL_USER_HOST, !MYSQL_DB_HOST, !MYSQL_PASS_HOST, 3306, true);
		#endif
	}

	if(mysql_errno())
	{
		print("<< MySQL >> Kapcsolódás sikertelen! A mód bezárul..");
		SendRconCommand("exit");
		return 1;
	}
	else
	{
		if(!bOnHost)
		{
			print(!"<< MySQL >> Kapcsolódás a(z) " MYSQL_HOST " sikeres!");
			print(!"<< MySQL >> Adatbázis " MYSQL_DB " kiválasztva.\n");
		}
		else
		{
			print(!"<< MySQL >> Kapcsolódás a(z) " MYSQL_HOST_HOST " sikeres!");
			print(!"<< MySQL >> Adatbázis " MYSQL_DB_HOST " kiválasztva.\n");
		}
	}

	// Fórumhoz való MySQL kapcsolódás
    print(!"<< MySQL >> Kapcsolódás a fórumhoz...");

    ForumSQLConnect = mysql_connect("188.226.147.231", "root", "mfr", "sybjuzrwrjdb");
    gForumSQL = !mysql_errno(ForumSQLConnect);
    printf("<< MySQL >> Kapcsolódás a fórumhoz %s. (handle: %d)", (gForumSQL) ? ("sikeres") : ("sikertelen"), ForumSQLConnect);

    // Map andreas initalizálása
	switch(MapAndreasInit)
	{
		case -1: { }
		case 0: MapAndreas_Init(MAP_ANDREAS_MODE_MINIMAL);
		case 1: MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
	}
	/*
	// IRC Bot felcsatlakoztatása
	gIRCBot = IRC_Connect(IRC_SERVER, IRC_PORT, "MFRBot", "MaXXiMuM FreeRoam Bot", "mfr");
	IRC_SetIntData(gIRCBot, E_IRC_CONNECT_DELAY, 1);
    groupID = IRC_CreateGroup();
    */
	// Alap dolgok betöltése
	mysql_function_query(1, "SELECT * FROM `config` WHERE `id` = 1", true, "THREAD_Settings", "");
	mysql_function_query(1, "SELECT * FROM `bans_serial`", true, "THREAD_SerialbansLoad", "");

	// NPC Respawn
	SetTimer("RespawnNPC", 2500, false);

	// RCON Beállítások
	SendRconCommand(!"weburl " #WEB_ADDRESS ""); // EGYENLÕRE marad.
	SendRconCommand(!"mapname [HuN]StuntDMDriftFalloutPK"); //  [×HuN×]  [×MaXXiMuM FreeRoam×]  [v" #SERVER_VERSION"]
    SendRconCommand(!"hostname [HuN] .:: «[MaXXiMuM FreeRoam]» ::. [EnG]"); //  ..::« Nagy Magyar $tunt $zerver v" #SERVER_VERSION" »::..
    SendRconCommand(!"rcon_password " RCON_PASSWORD "");
	SetGameModeText(!"[HuN] .::MFR v" #SERVER_VERSION "::. [EnG]"); //SetGameModeText(!"[HuN]StuntDMDriftFalloutPK");
	//
	if(!strcmp(MYSQL_HOST_HOST, "37.221.210.44", true)) mysql_function_query(1, "SELECT players.name, houses . * FROM houses LEFT JOIN players ON ( houses.prop_owner_id = players.reg_id ) ORDER BY `id` ASC", true, "THREAD_Houses", "d", 1);
	mysql_function_query(1, "SELECT players.name, biznis. * FROM biznis LEFT JOIN players ON ( biznis.owner_id = players.reg_id ) ORDER BY `id` ASC", true, "THREAD_Biznis", "d", 1);
	mysql_function_query(1, "SELECT clans.*, players.name FROM `clans` LEFT JOIN players ON ( clans.reg_id = players.reg_id ) ORDER BY `id` ASC", false, "THREAD_LoadClanInfo", "d", 1);
	mysql_function_query(1, "SELECT custom_dm.*, players.name FROM `custom_dm` LEFT JOIN players ON ( custom_dm.creator_id = players.reg_id ) ORDER BY `id` ASC", false, "THREAD_LoadCustomDMInfo", "");
	mysql_function_query(1, "SELECT players.name, racedata.* FROM `racedata` LEFT JOIN players ON ( racedata.reg_id = players.reg_id ) ORDER BY `raceid` ASC", false, "THREAD_LoadRaceInfo", "");
	mysql_function_query(1, "SELECT `id` FROM `goldpot_data`", true, "THREAD_MaxGoldpotID", "");
	mysql_function_query(1, "SELECT `id` FROM `musiclist`", true, "THREAD_MusicID", "");
	mysql_function_query(1, "SELECT COUNT(reg_id), 0 as `id` FROM players WHERE gangwar_team = 0 UNION SELECT COUNT(reg_id), 1 as `id` FROM players WHERE gangwar_team = 1 UNION SELECT COUNT(reg_id), 2 as `id` FROM players WHERE gangwar_team = 2 UNION SELECT COUNT(reg_id), 3 as `id` FROM players WHERE gangwar_team = 3", true, "THREAD_GangwarCount", "");
	mysql_function_query(1, "SELECT * FROM `szintek`", true, "THREAD_LoadSzint", "d", 1);
	mysql_function_query(1, "SELECT `reg_id`, `name`, `lang` FROM `players`", true, "THREAD_CachePlayerLanguage", "");
	mysql_function_query(1, "SELECT * FROM `holdingobjects_set`", true, "THREAD_MaxHosetID", "");
    mysql_function_query(1, "SELECT * FROM `teleports`", true, "THREAD_LoadTeleports", "");

	// Objectekkel kapcsolatos
	CreateFalloutObjects();
//	CreateGroveBabuk();

/*	#if defined YSF
    if(!LoadFilterScript("xStream"))
    {
		printf("YSF loadfs fail!");
		SendRconCommand(!"exit");
		return 0;
	}
    //UpdateObjectsRule(true);
    #else
	SendRconCommand(!"loadfs xStream");
	#endif*/
	
	SendRconCommand("loadfs xStream");
	//SendRconCommand("loadfs world");
	SendRconCommand("loadfs asd");

    // Interior fixek
	CreateObject(4867, -1854.234375, 130.650390625, 1054.1712646484, 0, 0, 0); // Los Santos Airport Interior
	CreateObject(8558, 2705.1000976563, -1432.5, 1160, 0, 0, 0); // Interior a levegõben

    // Main mall mesh, interior areas
	CreateObject(19322, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00);
	CreateObject(19323, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00);

	// Big Smoke's Crack Place
	CreateObject(17946, 2533.8203, -1290.5547, 36.9453, 0.00, 0.00, 0.00);

	// Oldgarage_sfse
	CreateObject(11389, -2048.1172, 166.7188, 30.9766, 0.00, 0.00, 0.00);
	CreateObject(11390, -2048.1797, 166.7188, 32.2266, 0.00, 0.00, 0.00);
	CreateObject(11391, -2056.2031, 158.5469, 29.0938, 0.00, 0.00, 0.00);
	CreateObject(11394, -2048.1641, 168.3125, 31.7344, 0.00, 0.00, 0.00);

	// Create Kylie's Barn repaired object
    CreateObject(19881, 286.188, 307.609, 1002.01, 0, 0, 0);

	// Create the Dillimore Gas Station exterior object
    CreateObject(19876, 666.711, -565.133, 17.3359, 0, 0, 0);

    // Create the Dillimore Gas Station interior object
    CreateObject(19877, 666.492, -571.18, 17.3125, 0, 0, 0);

	// Create the LS Wells Fargo Building object
    CreateObject(19879, 1421.38, -1477.6, 42.2031, 0, 0, 0);

	// AdamHawk +1 ház
    CreateDynamicObject(11501,-1517.00000000,1963.00000000,47.50000000,0.00000000,0.00000000,90.00000000);

	// Liftek
	LiftObject[0] = CreateDynamicObjectEx(3095, 1378.57, -1152.55, 23.05,   0.00, 0.00, 0.00);
	LiftObject[1] = CreateDynamicObjectEx(3095, 1533.41, -1237.24, 16.00,   0.00, 0.00, 0.00);
	LiftObject[2] = CreateDynamicObjectEx(3095, 1440.90, -1039.52, 23.10,   0.00, 0.00, 0.00);
	LiftObject[3] = CreateDynamicObjectEx(3095, 1533.37, -1064.65, 23.82,   0.00, 0.00, 0.00);
	LiftObject[4] = CreateDynamicObjectEx(3095, 1556.37, -1147.73, 22.58,   0.00, 0.00, 0.00);
	LiftObject[5] = CreateDynamicObjectEx(3095, 355.44, -1467.19, 34.57,   0.00, 0.00, 33.00);
	LiftObject[6] = CreateDynamicObjectEx(3095, 311.65, -1612.49, 33.22,   0.00, 0.00, 352.23);
/*
    LMGate = CreateDynamicObjectEx(3330, 837.099975, -2201.100097, 29.640007, 0, 0, 0);
	LMLift = CreateDynamicObjectEx(3095, 933.209777, -2380.161621, 11.430033,   0.00, 0.00, 0.00);
    LMBelsoKapu = CreateDynamicObjectEx(986, -3960.88, -3269.58, 1.71,   0.00, 0.00, 0.00);
*/
    g_AhouseGate = CreateDynamicObjectEx(18450,-2683.536,1934.226,42.418,85.944,0.859,0.0); // MOveobj 0
    gHeavenLift = CreateDynamicObjectEx(3095, -1167.2802734375, -2201.509765625, 19.5, 0, 0, 350.01342773438);
	gSpawnKo = CreateDynamicObjectEx(901, 2143.5, 1292, 14.800000190735, 0, 91.9775390625, 163.98193359375);
	gLuxGate = CreateDynamicObject(980, -205.687744, -2285.106933, 30.657760, 0.000000, 0.000000, 122.802856);
    //gBuzikapu = CreateDynamicObject(980 , 815.79998779297, -1700 , 15.300000190735, 0 ,0 ,89.49462890625);

	// HQ Zónák
	//gGroveZone = CreateDynamicRectangle(2393.4590,-1752.5435, 2574.3875,-1575.9226);
	gSevileZone = CreateDynamicPolygon(Float:{-2892.0, -2054.0,  -2988.0, -1944.0,  -3220.0, -2108.0,  -3146.0, -2210.0});
    gLMZone = CreateDynamicRectangle(-3790.5681, -3493.9031, -4293.0674, -3096.4333);

    // Egyéb zónák
    gCsikZone = CreateDynamicCube(3102.836914, 796.588500, 0.0, 3174.836914, 1396.588500, 230.0);
//	gDerbyZone = CreateDynamicCube(-1220.3257, -905.1346, 120, -996.7532, -1068.9683, 135);
	gJailZone = CreateDynamicRectangle(6526.7783, 556.5416, 6510.3511, 572.7823);
    gJailRange = CreateDynamicSphere(6501.4126, 592.0809, 2, 500.0);
    gPCZone = CreateDynamicCube(276.7904, -1618.9321, 114.4163, 300.6168,-1607.8058,494.6685);
    gRangeZone = CreateDynamicCube(767.6085,1592.1919,-5.3218,823.9829,1734.2974,56.2613);
    gSpawnZone = CreateDynamicCube(2082.4434,1202.9606,1.8203, 2177.2566,1362.5898,70.8203);
    gDavidHaza = CreateDynamicCube(1215.1528,-1997.2538,55.3125, 1087.5358,-2083.3423,123.0804, -1, -1 -1);
    gVidamparkZone = CreateDynamicCube(700.4087,-2154.3833, -20.0, 1082.5049,-1748.3862, 150.0);
    gQuarryZone = CreateDynamicRectangle(388.2787, 697.4569, 826.2787, 1059.7904);
    gLVAlagut = CreateDynamicRectangle(2507.4741, 1954.6013, 2776.7180,2347.2437); //Zászló miatt..
    gDamZone = CreateDynamicCube(-429.5649,2196.1409,32.4297, 1-418.1892,2207.7781,55.4297); //Dam börtön

	// Alap játék (Speciális)
	MGMGate[0] = CreateDynamicObjectEx(985, 2497.4063, 2777.0703, 11.5313, 0.0000, 0.0000, 90.0000, .worlds = { 0, 50000 });
	MGMGate[1] = CreateDynamicObjectEx(986, 2497.4063, 2769.1094, 11.5313, 0.0000, 0.0000, 90.0000, .worlds = { 0, 50000 });
//	CreateDynamicObject(985, 2497.4063, 2777.0703, 11.5313, 0.0000, 0.0000, 90.0000, DM_ZONE_MINIGUNMADNESS);
//	CreateDynamicObject(986, 2497.4063, 2769.1094, 11.5313, 0.0000, 0.0000, 90.0000, DM_ZONE_MINIGUNMADNESS);
    CreateObject(19485, -1909.55, 497.22, 25.71,   0.00, 0.00, 0.00); // SF Három felhõkarcoló
    CreateObject(19484, -1875.02, -65.33, 15.06,   0.00, 0.00, 0.00); // SF Lófasz

	// Speciális ház interiorok
	CreateObject(19510, 2527.30, -1995.86, 14.83,   0.0, 0.00, 133.33);
	CreateObject(19509, 2527.29, -1995.87, 14.83,   0.0, 0.00, 133.33);
	CreateObject(19504, 1665.14, 2567.04, 12.69,   0.00, 0.00, 180.00);
	CreateObject(19502, 1643.04, 2614.13, 12.83,   0.00, 0.00, 0.00);
	CreateObject(19503, 1665.14, 2567.04, 12.69,   0.00, 0.00, 180.00);
	CreateObject(19501, 1643.05, 2614.25, 12.83,   0.00, 0.00, 0.00);

	// Area51 fal & kapu
	CreateObject(19312, 191.14, 1870.04, 21.48,   0.00, 0.00, 0.00);
	A51Gate[0] = CreateDynamicObjectEx(19313, 135.23, 1941.32, 20.97,   0.00, 0.00, 0.00, .worlds = { 0, 50000 });
	A51Gate[1] = CreateDynamicObjectEx(19313, 285.67, 1821.17, 19.22,   0.00, 0.00, 90.00, .worlds = { 0, 50000 });
//	CreateDynamicObject(19313, 135.23, 1941.32, 20.97,   0.00, 0.00, 0.00, DM_ZONE_AREA51);

    RocketObject = CreateDynamicObjectEx(18783, -2303.08, 161.94, 43.52,   0.00, 0.00, 0.00);
	gLegbalon = CreateDynamicObjectEx(19338, -2340.97, 146.79, 34.19,   0.00, 0.00, 0.00);

    DriverSchool[0] = CreateDynamicObject(986, -2057.09, -102.41, 35.84,   0.00, 0.00, 0.00);
    DriverSchool[1] = CreateDynamicObject(985, -2041.13, -102.42, 35.84,   0.00, 0.00, 0.00);
    DriverSchool[2] = CreateDynamicObject(986, -2049.08, -102.42, 35.84,   0.00, 0.00, 0.00);
    BikeSchool =  CreateDynamicObject(8229, 1142.03, 1362.50, 12.48,   0.00, 0.00, 0.00);

	// Elevator
	ResetElevatorQueue();
	Elevator_Initialize();

	// Clan system
    gCLAN_RIGHTS[0] = CLAN_RIGHTS_1;
    gCLAN_RIGHTS[1] = CLAN_RIGHTS_2;
    gCLAN_RIGHTS[2] = CLAN_RIGHTS_3;
    gCLAN_RIGHTS[3] = CLAN_RIGHTS_4;
    gCLAN_RIGHTS[4] = ALL_CLAN_RIGHTS;

	// Checkpointok
	gCP_BANK[0] = CreateDynamicCP(-22.2549, -55.6575, 1003.5469, 2.0, -1);
	gCP_BANK[1] = CreateDynamicCP(-29.3006, -184.5071, 1003.5469, 2.0, -1);
	gCP_BANK[2] = CreateDynamicCP(1.5585, -28.7896, 1003.5494, 2.0, -1);
	gCP_BANK[3] = CreateDynamicCP(-28.3342, -89.5005, 1003.5469, 2.0, -1);
	gCP_BANK[4] = CreateDynamicCP(-22.2237, -138.5647, 1003.5469, 2.0, -1);
	gCP_BANK[5] = CreateDynamicCP(-30.8123, -28.2250, 1003.5573, 2.0, -1);
	gCP_BANK[6] = CreateDynamicCP(2316.6191, -10.0029, 26.7422, 2.0, -1);
	gCP_BANK[7] = CreateDynamicCP(2161.1289, 1286.3054, 9.2228, 2.0, -1, .streamdistance = 5.0); // Easter Egg bank a spawn helyen

	gCP_CH = CreateDynamicCP(-2323.3333, -1678.0366, 482.5710, 5.0);
	gCP_AA = CreateDynamicCP(398.3147, 2540.4092, 19.6311, 5.0);
	gCP_SFA = CreateDynamicCP(-1313.8756, -234.5322, 14.1484, 5.0);
	gCP_LSA = CreateDynamicCP(1504.8768, -2426.8367, 13.5547, 5.0);
	gCP_JIZZY = CreateDynamicCP(-2628.2717, 1403.1245, 7.0938, 5.0);
	gCP_SKTP = CreateDynamicCP(1917.8365, -1411.4904, 13.5703, 5.0);
	gCP_ARMY = CreateDynamicCP(-1371.3335, 433.6759, 30.0859, 5.0);
	gCP_LVA = CreateDynamicCP(1318.5178, 1254.2893, 10.8203, 5.0);
	gCP_LVSZ = CreateDynamicCP(2125.2090, 1682.4325, 10.5078, 5.0);

	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/sfa", COLOR_WHITE, -2323.3333, -1678.0366, 482.5710); // CH
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/lv", COLOR_WHITE, 398.3147, 2540.4092, 19.6311); // AA
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/dam", COLOR_WHITE, -1313.8756, -234.5322, 14.1484); // SFA
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/monster", COLOR_WHITE, 1504.8768, -2426.8367, 13.5547); // LSA
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/shipstunt", COLOR_WHITE, -2628.2717, 1403.1245, 7.0938); // JIZZY
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/sfst", COLOR_WHITE, -9.6801, 214.2451, 1.5422); // SKTP
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/lvsz", COLOR_WHITE, -1371.3335, 433.6759, 30.0859); // ARMY
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/sktp", COLOR_WHITE, 1318.5178, 1254.2893, 10.8203); // LVA
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/lva", COLOR_WHITE, 1519.6388, 2851.3809, 10.9031); // GOLF
	Create3DTextLabel(!"Teleport:\n{" #XCOLOR_GREEN "}/quarry", COLOR_WHITE, 2125.2090, 1682.4325, 10.5078); // QUARRY

	// Funfair - Vidámpark
	Create3DTextLabel("Go-Kart!", 0xFF0000FF, 986.437133, -1994.054687, 6.815700, 15.0, 0, 1);
	Create3DTextLabel("Quads!", 0xFF0000FF, 984.176574, -1951.035766, 5.222899, 15.0, 0, 1);
	Create3DTextLabel("Vortex-csúszda\n/csuszda\n{33FF33}NUM 6", 0xFF0000FF, 946.485351, -1883.840209, 8.478489, 15.0, 0, 1);
	Create3DTextLabel("Tehén körhinta\n/tehenkorhinta\n{33FF33}NUM 6", 0xFF0000FF, 907.819213, -1876.338989, 9.199993, 15.0, 0, 1);
	Create3DTextLabel("Körhinta\n/korhinta\n{33FF33}NUM 6", 0xFF0000FF, 877.185913, -1877.019897, 10.836444, 15.0, 0, 1);
	Create3DTextLabel("Forgó szék\n/forgoszek\n{33FF33}NUM 6", 0xFF0000FF, 810.988159, -1878.776855, 8.871276, 15.0, 0, 1);
	Create3DTextLabel("Autódrom!", 0xFF0000FF, 803.207336, -1851.824584, 9.395290, 15.0, 0, 1);
	Create3DTextLabel("Forgó\n/forgo\n{33FF33}NUM 6", 0xFF0000FF, 842.020874, -1887.778686, 16.750499, 15.0, 0, 1);
	Create3DTextLabel("Rodeo\n/cow\n{33FF33}NUM 6", 0xFF0000FF, 832.689025, -1936.544189, 13.507499, 15.0, 0, 1);
	Create3DTextLabel("Projekt 1\n/projekt\n{33FF33}NUM 6", 0xFF0000FF, 836.618164, -1974.003417, 13.505937, 15.0, 0, 1);
	Create3DTextLabel("Hidraulika\n/hidraulika\n{33FF33}NUM 6", 0xFF0000FF, 837.364562, -2005.619262, 12.867187, 15.0, 0, 1);
//	Create3DTextLabel("Rueda de la fortuna\nNoria\n/ferriswheel", 0xFF0000FF, 841.477661, -2033.506958, 12.867187, 15.0, 0, 1);
	Create3DTextLabel("Börtön\n/borton\n{33FF33}NUM 6", 0xFF0000FF, 837.787109, -2058.295898, 12.867187, 15.0, 0, 1);
	Create3DTextLabel("Viking hajó\n/viking\n{33FF33}NUM 6", 0xFF0000FF, 909.894226, -2049.239257, 14.378616, 15.0, 0, 1);

	//gCP_GATE = CreateDynamicCP(2451.2356,-1667.5651,13.4785, 5.0);
	gCP_BAR = CreateDynamicCP(252.0211,-56.2802,1.5703, 5.0);
	gCP_LC = CreateDynamicCP(-785.7438,500.0755,1371.7490, 5.0);
	gCP_ROCKET[0] = CreateDynamicCP(-772.7326,1560.5330,27.1172, 5.0);
	gCP_ROCKET[1] = CreateDynamicCP(-2303.1057,150.2498,35.7897, 5.0);
	gCP_ROCKET[2] = CreateDynamicCP(-2311.3684,150.2868,35.4497, 5.0);
	gCP_ROCKET[3] = CreateDynamicCP(-2294.7783,150.2071,35.4597, 5.0);

	gCP_TUNE[0] = CreateDynamicCP(-1935.6271,244.4315,34.4609, 5.0, -1);
	gCP_TUNE[1] = CreateDynamicCP(-2721.5955,217.5526,4.4844, 5.0, -1);
	gCP_TUNE[2] = CreateDynamicCP(2386.7935,1049.0702,10.8203, 5.0, -1);
	gCP_TUNE[3] = CreateDynamicCP(2644.7954,-2043.5905,13.6236, 5.0, -1);
	gCP_TUNE[4] = CreateDynamicCP(1041.3370,-1020.0953,32.1075, 5.0, -1);

	// Infernus Paradise ( /ip )
	g_SC_StuntScore{0} = 15;
	strpack(g_SC_StuntName[0], "Infernus DM Race", 45);

    g_SC_StuntRange[0][0] = CreateDynamicSphere(-222.0328,-7831.3745,8.7253, 20.0);
    g_SC_StuntRange[0][1] = CreateDynamicSphere(-155.6467,-7496.5815,66.9077, 20.0);
    g_SC_StuntRange[0][2] = CreateDynamicSphere(-30.4803,-6528.1846,41.0589, 20.0);
    g_SC_StuntRange[0][3] = CreateDynamicSphere(37.0038,-5935.1948,64.2232, 20.0);
    g_SC_StuntRange[0][4] = CreateDynamicSphere(-581.7703,-4148.0630,46.0008, 20.0);
    g_SC_StuntRange[0][5] = CreateDynamicSphere(226.7068,-4303.6875,68.8916, 20.0);
    g_SC_StuntRange[0][6] = CreateDynamicSphere(684.2736,-4309.8315,109.3906, 20.0);
    g_SC_StuntRange[0][7] = CreateDynamicSphere(136.8914,-4012.9980,11.5737, 20.0);
    g_SC_StuntRange[0][8] = CreateDynamicSphere(-608.4009,-3844.7466,90.9895, 20.0);
    g_SC_StuntRange[0][9] = CreateDynamicSphere(-702.0010,-3725.8027,91.0906, 10.0);

	// HopDeHop ( /hopdehop )
	g_SC_StuntScore{1} = 4;
	strpack(g_SC_StuntName[1], "HopDeHop", 45);

    g_SC_StuntRange[1][0] = CreateDynamicSphere(345.1663,-1312.9966,60.5089, 7.5);
    g_SC_StuntRange[1][1] = CreateDynamicSphere(364.1580,-1348.7604,73.2145, 7.5);
    g_SC_StuntRange[1][2] = CreateDynamicSphere(380.4782,-1378.4550,83.6543, 7.5);
    g_SC_StuntRange[1][3] = CreateDynamicSphere(400.1763,-1412.9330,93.7076, 7.5);
    g_SC_StuntRange[1][4] = CreateDynamicSphere(429.5693,-1465.6940,114.3063, 7.5);
    g_SC_StuntRange[1][5] = CreateDynamicSphere(479.3369,-1555.7777,142.8102, 7.5);
    g_SC_StuntRange[1][6] = CreateDynamicSphere(521.8322,-1632.1333,168.0515, 7.5);
    g_SC_StuntRange[1][7] = CreateDynamicSphere(544.2858,-1675.0798,180.3433, 7.5);
    g_SC_StuntRange[1][8] = CreateDynamicSphere(554.7332,-1694.3972,188.6149, 7.5);
    g_SC_StuntRange[1][9] = CreateDynamicSphere(560.7693,-1705.7108,193.7803, 7.5);

	// Freeway ( /freeway )
	g_SC_StuntScore{2} = 7;
	strpack(g_SC_StuntName[2], "Freeway", 45);

    g_SC_StuntRange[2][0] = CreateDynamicSphere(-2848.3755,2105.5989,748.8158, 15.0);
    g_SC_StuntRange[2][1] = CreateDynamicSphere(-2848.0859,1969.2753,747.5780, 15.0);
    g_SC_StuntRange[2][2] = CreateDynamicSphere(-2775.1482,1722.7356,698.6050, 15.0);
    g_SC_StuntRange[2][3] = CreateDynamicSphere(-2502.8960,1546.3872,588.4656, 15.0);
    g_SC_StuntRange[2][4] = CreateDynamicSphere(-2354.6631,1466.8770,564.7750, 15.0);
    g_SC_StuntRange[2][5] = CreateDynamicSphere(-2047.7139,1468.7601,468.1228, 15.0);
    g_SC_StuntRange[2][6] = CreateDynamicSphere(-1959.5326,1676.1206,433.3518, 15.0);
    g_SC_StuntRange[2][7] = CreateDynamicSphere(-1830.4504,1867.6316,511.7281, 15.0);
    g_SC_StuntRange[2][8] = CreateDynamicSphere(-1763.9330,1968.3596,423.2312, 15.0);
    g_SC_StuntRange[2][9] = CreateDynamicSphere(-1736.1227,2009.4846,279.7889, 15.0);

	// Las Venturas Parkour ( /lvp )
	g_SC_StuntScore{3} = 10;
	strpack(g_SC_StuntName[3], "Las Venturas Parkour", 45);

    g_SC_StuntRange[3][0] = CreateDynamicSphere(1795.8170,1078.4935,27.8394, 7.0);
    g_SC_StuntRange[3][1] = CreateDynamicSphere(1693.4633,1096.5079,20.9005, 7.0);
    g_SC_StuntRange[3][2] = CreateDynamicSphere(1611.6761,1076.9016,17.2136, 7.0);
    g_SC_StuntRange[3][3] = CreateDynamicSphere(1609.0775,955.6968,17.5296, 7.0);
    g_SC_StuntRange[3][4] = CreateDynamicSphere(1602.5404,954.1699,34.4270, 7.0);
    g_SC_StuntRange[3][5] = CreateDynamicSphere(1558.4467,976.8812,38.0449, 7.0);
    g_SC_StuntRange[3][6] = CreateDynamicSphere(1493.2983,1037.0403,57.3984, 7.0);
    g_SC_StuntRange[3][7] = CreateDynamicSphere(1433.9050,1034.7317,71.5699, 7.0);
    g_SC_StuntRange[3][8] = CreateDynamicSphere(1399.7809,1087.3279,81.5813, 7.0);
    g_SC_StuntRange[3][9] = CreateDynamicSphere(1387.3048,1116.0962,96.7708, 7.0);

	// NRG Parkour ( /nrgp )
	g_SC_StuntScore{4} = 8;
	strpack(g_SC_StuntName[4], "NRG Parkour", 45);

    g_SC_StuntRange[4][0] = CreateDynamicSphere(2682.8289,-1360.9943,70.4273, 8.0);
    g_SC_StuntRange[4][1] = CreateDynamicSphere(2589.6975,-1270.7245,80.8715, 8.0);
    g_SC_StuntRange[4][2] = CreateDynamicSphere(2510.9246,-1183.9308,125.2607, 8.0);
    g_SC_StuntRange[4][3] = CreateDynamicSphere(2333.3147,-1184.4835,169.2046, 8.0);
    g_SC_StuntRange[4][4] = CreateDynamicSphere(2231.4036,-1187.5199,188.9700, 8.0);
    g_SC_StuntRange[4][5] = CreateDynamicSphere(2040.5131,-1208.6670,230.3469, 8.0);
    g_SC_StuntRange[4][6] = CreateDynamicSphere(1977.6816,-1203.5839,247.5600, 8.0);
    g_SC_StuntRange[4][7] = CreateDynamicSphere(1904.0912,-1205.1259,247.2328, 8.0);
    g_SC_StuntRange[4][8] = CreateDynamicSphere(1740.5197,-1220.8910,258.8659, 8.0);
    g_SC_StuntRange[4][9] = CreateDynamicSphere(1653.3546,-1241.5043,232.7786, 8.0);

	// Monster Parkour ( /mp )
	g_SC_StuntScore{5} = 8;
	strpack(g_SC_StuntName[5], "Monster Parkour", 45);

    g_SC_StuntRange[5][0] = CreateDynamicSphere(495.1998,-2016.2583,21.4038, 10.0);
    g_SC_StuntRange[5][1] = CreateDynamicSphere(578.4700,-2373.8179,3.7774, 10.0);
    g_SC_StuntRange[5][2] = CreateDynamicSphere(579.3689,-2853.8557,9.6234, 10.0);
    g_SC_StuntRange[5][3] = CreateDynamicSphere(510.9368,-2978.5833,2.1599, 10.0);
    g_SC_StuntRange[5][4] = CreateDynamicSphere(481.5616,-2988.5151,13.3310, 10.0);
    g_SC_StuntRange[5][5] = CreateDynamicSphere(596.4131,-2911.3848,42.8034, 10.0);
    g_SC_StuntRange[5][6] = CreateDynamicSphere(529.3382,-2817.1008,78.2353, 10.0);
    g_SC_StuntRange[5][7] = CreateDynamicSphere(354.4095,-2781.8989,87.5058, 10.0);
    g_SC_StuntRange[5][8] = CreateDynamicSphere(224.0300,-2769.9663,78.1105, 10.0);
    g_SC_StuntRange[5][9] = CreateDynamicSphere(8.9698,-2762.1765,40.8947, 10.0);

	// Csík ( /csik )
	g_SC_StuntScore{6} = 2;
	strpack(g_SC_StuntName[6], "Csík", 45);

    g_SC_StuntRange[6][0] = CreateDynamicSphere(3126.1597,858.7725,113.9657, 10.0);
    g_SC_StuntRange[6][1] = CreateDynamicSphere(3126.1384,887.9235,113.9680, 10.0);
    g_SC_StuntRange[6][2] = CreateDynamicSphere(3126.1616,954.9458,113.9838, 10.0);
    g_SC_StuntRange[6][3] = CreateDynamicSphere(3126.1213,992.8330,113.9704, 10.0);
    g_SC_StuntRange[6][4] = CreateDynamicSphere(3126.0300,1046.0100,113.9378, 10.0);
    g_SC_StuntRange[6][5] = CreateDynamicSphere(3126.0808,1091.7832,113.8947, 10.0);
    g_SC_StuntRange[6][6] = CreateDynamicSphere(3126.1245,1137.4115,113.8949, 10.0);
    g_SC_StuntRange[6][7] = CreateDynamicSphere(3126.0840,1195.6754,114.3360, 10.0);
    g_SC_StuntRange[6][8] = CreateDynamicSphere(3126.0840,1242.2445,114.3040, 10.0);
    g_SC_StuntRange[6][9] = CreateDynamicSphere(3125.5869,1282.2998,116.9002, 10.0);

	// Quad Parkour ( /qp )
	g_SC_StuntScore{7} = 10;
	strpack(g_SC_StuntName[7], "Quad Parkour", 45);

    g_SC_StuntRange[7][0] = CreateDynamicSphere(-231.2657,-680.4419,1.9443, 5.0);
    g_SC_StuntRange[7][1] = CreateDynamicSphere(-233.3244,-627.3382,10.7948, 5.0);
    g_SC_StuntRange[7][2] = CreateDynamicSphere(-311.2224,-669.6351,1.0241, 5.0);
    g_SC_StuntRange[7][3] = CreateDynamicSphere(-304.7726,-488.0922,2.3338, 5.0);
    g_SC_StuntRange[7][4] = CreateDynamicSphere(-279.8588,-552.2593,2.2362, 5.0);
    g_SC_StuntRange[7][5] = CreateDynamicSphere(-202.5801,-624.5424,4.1416, 5.0);
    g_SC_StuntRange[7][6] = CreateDynamicSphere(-180.9352,-716.8672,6.1566, 5.0);
    g_SC_StuntRange[7][7] = CreateDynamicSphere(-166.0752,-768.8457,4.7091, 5.0);
    g_SC_StuntRange[7][8] = CreateDynamicSphere(-162.6526,-821.5259,25.8620, 5.0);
    g_SC_StuntRange[7][9] = CreateDynamicSphere(-189.7410,-816.6678,37.0560, 5.0);

	// Roller Coaster 1
	g_SC_StuntScore{8} = 2;
	strpack(g_SC_StuntName[8], "Roller Coaster 1", 45);

	g_SC_StuntRange[8][0] = CreateDynamicSphere(1474.3805,-1376.3951,312.7399, 8.2);
	g_SC_StuntRange[8][1] = CreateDynamicSphere(1533.0013,-1329.5938,263.2949, 8.2);
	g_SC_StuntRange[8][2] = CreateDynamicSphere(1595.9841,-1383.3971,211.8981, 8.2);
	g_SC_StuntRange[8][3] = CreateDynamicSphere(1524.5719,-1386.9385,164.5062, 8.2);
	g_SC_StuntRange[8][4] = CreateDynamicSphere(1527.2328,-1264.2332,98.6878, 8.2);
	g_SC_StuntRange[8][5] = CreateDynamicSphere(1552.5355,-1169.5914,90.6220, 8.2);
	g_SC_StuntRange[8][6] = CreateDynamicSphere(1604.7275,-1109.7002,64.1252, 8.2);
	g_SC_StuntRange[8][7] = CreateDynamicSphere(1721.3353,-1075.1771,37.2539, 8.2);
	g_SC_StuntRange[8][8] = CreateDynamicSphere(1774.1294,-1075.8669,46.3211, 8.2);
	g_SC_StuntRange[8][9] = CreateDynamicSphere(1832.1941,-1090.5906,54.0179, 8.2);

	// Roller Coaster 2
	g_SC_StuntScore{9} = 3;
	strpack(g_SC_StuntName[9], "Roller Coaster 2", 45);

	g_SC_StuntRange[9][0] = CreateDynamicSphere(-2681.5017,1908.9852,211.9445, 5.2);
	g_SC_StuntRange[9][1] = CreateDynamicSphere(-2681.8691,1883.9331,173.4445, 5.2);
	g_SC_StuntRange[9][2] = CreateDynamicSphere(-2682.5883,1937.9389,149.0072, 5.2);
	g_SC_StuntRange[9][3] = CreateDynamicSphere(-2757.7456,1948.4614,142.6095, 5.2);
	g_SC_StuntRange[9][4] = CreateDynamicSphere(-2740.3261,1851.2663,146.5248, 5.2);
	g_SC_StuntRange[9][5] = CreateDynamicSphere(-2736.7114,1769.5642,159.2445, 5.2);
	g_SC_StuntRange[9][6] = CreateDynamicSphere(-2725.0061,1689.7722,157.9945, 5.2);
	g_SC_StuntRange[9][7] = CreateDynamicSphere(-2688.1665,1627.9189,155.4945, 5.2);
	g_SC_StuntRange[9][8] = CreateDynamicSphere(-2638.6633,1576.3470,144.0444, 5.2);
	g_SC_StuntRange[9][9] = CreateDynamicSphere(-2574.2702,1563.3708,109.5743, 5.2);

	// Monster Challenge ( /mc )
	g_SC_StuntScore{10} = 7;
	strpack(g_SC_StuntName[10], "Monster Challenge", 45);

	g_SC_StuntRange[10][0] = CreateDynamicSphere(251.3992,331.5386,5.9265, 10.0);
	g_SC_StuntRange[10][1] = CreateDynamicSphere(153.4081,450.2385,50.2206, 10.0);
	g_SC_StuntRange[10][2] = CreateDynamicSphere(232.5008,388.3780,70.0964, 10.0);
	g_SC_StuntRange[10][3] = CreateDynamicSphere(355.9373,452.8645,108.2237, 10.0);
	g_SC_StuntRange[10][4] = CreateDynamicSphere(211.9277,464.6462,163.6565, 10.0);
	g_SC_StuntRange[10][5] = CreateDynamicSphere(155.4466,507.7944,192.1974, 10.0);
	g_SC_StuntRange[10][6] = CreateDynamicSphere(221.4640,467.9148,201.7416, 10.0);
	g_SC_StuntRange[10][7] = CreateDynamicSphere(255.8983,369.6305,219.9658, 10.0);
	g_SC_StuntRange[10][8] = CreateDynamicSphere(319.6174,469.0778,252.3215, 10.0);
	g_SC_StuntRange[10][9] = CreateDynamicSphere(315.4661,534.1740,256.1116, 10.0);

	// San Fierro Building ( /sfb )
	g_SC_StuntScore{11} = 7;
	strpack(g_SC_StuntName[11], "San Fierro Building", 45);

	g_SC_StuntRange[11][0] = CreateDynamicSphere(-2232.0989,-51.3807,58.5692, 8.0);
	g_SC_StuntRange[11][1] = CreateDynamicSphere(-2233.5940,179.6858,57.7752, 8.0);
	g_SC_StuntRange[11][2] = CreateDynamicSphere(-2215.0017,367.2200,60.7168, 8.0);
	g_SC_StuntRange[11][3] = CreateDynamicSphere(-2108.9041,519.3354,78.9369, 8.0);
	g_SC_StuntRange[11][4] = CreateDynamicSphere(-2019.7540,452.5378,139.3051, 8.0);
	g_SC_StuntRange[11][5] = CreateDynamicSphere(-1937.8632,561.5698,201.4982, 8.0);
	g_SC_StuntRange[11][6] = CreateDynamicSphere(-1973.7291,824.4178,166.6786, 8.0);
	g_SC_StuntRange[11][7] = CreateDynamicSphere(-1987.7444,1128.4374,84.1032, 8.0);
	g_SC_StuntRange[11][8] = CreateDynamicSphere(-1987.5796,1276.3865,51.9956, 8.0);
	g_SC_StuntRange[11][9] = CreateDynamicSphere(-1989.2084,1401.5386,56.4173, 8.0);

	// Drop ( /drop )
	g_SC_StuntScore{12} = 6;
	strpack(g_SC_StuntName[12], "Drop", 45);

	g_SC_StuntRange[12][0] = CreateDynamicSphere(306.1444,5346.4453,3322.6755, 20.5);
	g_SC_StuntRange[12][1] = CreateDynamicSphere(286.4116,5250.2813,3013.2690, 20.5);
	g_SC_StuntRange[12][2] = CreateDynamicSphere(283.4862,4749.6060,2505.7498, 20.5);
	g_SC_StuntRange[12][3] = CreateDynamicSphere(274.7956,4549.1602,2081.2039, 20.5);
	g_SC_StuntRange[12][4] = CreateDynamicSphere(285.3057,3793.8240,1093.2650, 20.5);
	g_SC_StuntRange[12][5] = CreateDynamicSphere(264.0222,3493.8088,574.3569, 20.5);
	g_SC_StuntRange[12][6] = CreateDynamicSphere(261.1200,3257.0952,330.4847, 20.5);
	g_SC_StuntRange[12][7] = CreateDynamicSphere(260.6310,3182.4961,253.6391, 20.5);
	g_SC_StuntRange[12][8] = CreateDynamicSphere(258.9152,3057.4705,124.871, 20.5);
	g_SC_StuntRange[12][9] = CreateDynamicSphere(259.5437,2987.0374,65.8747, 20.0);

	// Total Challange ( /tc )
	g_SC_StuntScore{13} = 20;
	strpack(g_SC_StuntName[13], "Total Challange", 45);

	g_SC_StuntRange[13][0] = CreateDynamicSphere(2806.7593,113.4901,522.1359, 10.0);
	g_SC_StuntRange[13][1] = CreateDynamicSphere(3222.2996,-488.1383,563.0684, 10.0);
	g_SC_StuntRange[13][2] = CreateDynamicSphere(3343.3418,22.4370,594.2616, 10.0);
	g_SC_StuntRange[13][3] = CreateDynamicSphere(3945.2078,-226.3795,590.5204, 15.0);
	g_SC_StuntRange[13][4] = CreateDynamicSphere(4453.6860,-347.7841,552.8697, 10.0);
	g_SC_StuntRange[13][5] = CreateDynamicSphere(4579.0732,-854.2349,526.3551, 8.5);
	g_SC_StuntRange[13][6] = CreateDynamicSphere(3697.1646,-725.1679,521.1905, 10.0);
	g_SC_StuntRange[13][7] = CreateDynamicSphere(3851.4380,-938.7880,475.7600, 30.0);
	g_SC_StuntRange[13][8] = CreateDynamicSphere(3263.3242,-1203.5322,419.1666, 45.0);
	g_SC_StuntRange[13][9] = CreateDynamicSphere(3086.3125,-1336.3584,427.8539, 45.0);

	// Turismo Paradise ( /tpa )
	g_SC_StuntScore{14} = 10;
	strpack(g_SC_StuntName[14], "Turismo DM Race", 45);

	g_SC_StuntRange[14][0] = CreateDynamicSphere(447.5753,-2340.7092,500.5956, 25.0);
	g_SC_StuntRange[14][1] = CreateDynamicSphere(234.4047,-2487.2317,507.4361, 25.0);
	g_SC_StuntRange[14][2] = CreateDynamicSphere(291.8908,-2514.4385,501.3073, 25.0);
	g_SC_StuntRange[14][3] = CreateDynamicSphere(496.5308,-2849.5278,512.0660, 25.0);
	g_SC_StuntRange[14][4] = CreateDynamicSphere(738.2357,-2877.9617,504.8969, 25.0);
	g_SC_StuntRange[14][5] = CreateDynamicSphere(887.0091,-3145.6328,502.0675, 25.0);
	g_SC_StuntRange[14][6] = CreateDynamicSphere(666.8653,-3257.8477,504.6734, 25.0);
	g_SC_StuntRange[14][7] = CreateDynamicSphere(179.7612,-3375.1145,505.4577, 25.0);
	g_SC_StuntRange[14][8] = CreateDynamicSphere(167.7339,-3396.0972,538.8779, 25.0);
	g_SC_StuntRange[14][9] = CreateDynamicSphere(85.7888,-3396.7927,538.8779, 25.0);

	// Infernus Run ( /irun )
	g_SC_StuntScore{15} = 10;
	strpack(g_SC_StuntName[15], "Infernus Run", 45);

	g_SC_StuntRange[15][0] = CreateDynamicSphere(-1032.8998,-4702.5483,3.7555, 25.0);
	g_SC_StuntRange[15][1] = CreateDynamicSphere(-1032.4780,-5127.7988,7.8468, 25.0);
	g_SC_StuntRange[15][2] = CreateDynamicSphere(-1032.8595,-5980.6636,4.7135, 25.0);
	g_SC_StuntRange[15][3] = CreateDynamicSphere(-1032.8882,-6225.7026,14.3777, 25.0);
	g_SC_StuntRange[15][4] = CreateDynamicSphere(-1033.4979,-6692.9507,45.5372, 25.0);
	g_SC_StuntRange[15][5] = CreateDynamicSphere(-1033.2999,-7282.6567,61.5555, 25.0);
	g_SC_StuntRange[15][6] = CreateDynamicSphere(-1033.3228,-7809.1045,56.9556, 25.0);
	g_SC_StuntRange[15][7] = CreateDynamicSphere(-1004.9961,-8009.4043,17.8917, 25.0);
	g_SC_StuntRange[15][8] = CreateDynamicSphere(-947.0426,-8097.9023,29.8473, 25.0);
	g_SC_StuntRange[15][9] = CreateDynamicSphere(-819.6344,-8191.2344,96.8431, 25.0);

	// Roller Coaster 3 ( /rc3 )
	g_SC_StuntScore{16} = 4;
	strpack(g_SC_StuntName[16], "Roller Coaster 3", 45);

	g_SC_StuntRange[16][0] = CreateDynamicSphere(-1831.3258,618.8873,227.7564, 25.0);
	g_SC_StuntRange[16][1] = CreateDynamicSphere(-1777.3771,653.4334,161.1819, 25.0);
	g_SC_StuntRange[16][2] = CreateDynamicSphere(-1781.4264,518.4462,135.2959, 25.0);
	g_SC_StuntRange[16][3] = CreateDynamicSphere(-1860.5084,526.9858,135.9999, 25.0);
	g_SC_StuntRange[16][4] = CreateDynamicSphere(-1880.1765,630.2411,121.9420, 25.0);
	g_SC_StuntRange[16][5] = CreateDynamicSphere(-1914.7455,731.1052,101.8316, 25.0);
	g_SC_StuntRange[16][6] = CreateDynamicSphere(-1914.3568,802.7633,101.0867, 25.0);
	g_SC_StuntRange[16][7] = CreateDynamicSphere(-1892.1759,859.5655,106.9480, 25.0);
	g_SC_StuntRange[16][8] = CreateDynamicSphere(-1859.1990,906.9001,95.8266, 25.0);
	g_SC_StuntRange[16][9] = CreateDynamicSphere(-1846.8907,924.4433,67.8317, 25.0);

	g_SC_StuntScore{17} = 5;
	strpack(g_SC_StuntName[17], "Roller Coaster 6", 45);

	g_SC_StuntRange[17][0] = CreateDynamicSphere(2429.1421,-1682.2898,687.3472, 10.0);
	g_SC_StuntRange[17][1] = CreateDynamicSphere(2359.3779,-1734.8098,688.3590, 10.0);
	g_SC_StuntRange[17][2] = CreateDynamicSphere(2253.1882,-1750.9098,658.3293, 10.0);
	g_SC_StuntRange[17][3] = CreateDynamicSphere(2133.4661,-1715.7662,643.5210, 10.0);
	g_SC_StuntRange[17][4] = CreateDynamicSphere(1991.2515,-1767.3102,634.5068, 10.0);
	g_SC_StuntRange[17][5] = CreateDynamicSphere(1995.2981,-1811.9590,610.9581, 10.0);
	g_SC_StuntRange[17][6] = CreateDynamicSphere(1991.1344,-1797.5956,523.0109, 10.0);
	g_SC_StuntRange[17][7] = CreateDynamicSphere(1939.7732,-1785.2924,460.1483, 10.0);
	g_SC_StuntRange[17][8] = CreateDynamicSphere(1878.2461,-1776.7389,430.5822, 20.0);
	g_SC_StuntRange[17][9] = CreateDynamicSphere(1845.4484,-1776.5870,449.6196, 20.0);

	// Long Paradise
	g_SC_StuntScore{18} = 15;
	strpack(g_SC_StuntName[18], "Long DM Race", 45);

	g_SC_StuntRange[18][0] = CreateDynamicSphere(3650.9763, -1210.9086, 1600.1293, 20.0);
	g_SC_StuntRange[18][1] = CreateDynamicSphere(3650.7565, -665.8295, 1566.9056, 20.0);
	g_SC_StuntRange[18][2] = CreateDynamicSphere(3341.2033, -621.0606, 1663.5797, 20.0);
	g_SC_StuntRange[18][3] = CreateDynamicSphere(3311.8208, -193.5418, 1686.5339, 20.0);
	g_SC_StuntRange[18][4] = CreateDynamicSphere(3312.5959, 280.6687, 1577.3653, 20.0);
	g_SC_StuntRange[18][5] = CreateDynamicSphere(3259.9038, 1084.0795, 1500.8509, 20.0);
	g_SC_StuntRange[18][6] = CreateDynamicSphere(3662.4060, 1650.3651, 1598.5863, 20.0);
	g_SC_StuntRange[18][7] = CreateDynamicSphere(3986.7255, 2588.9272, 1595.9156, 20.0);
	g_SC_StuntRange[18][8] = CreateDynamicSphere(4338.4638, 2653.9843, 1595.9156, 20.0);
	g_SC_StuntRange[18][9] = CreateDynamicSphere(4544.2265, 2653.8750, 1621.8920, 20.0);

	// Pyramid Paradise
	g_SC_StuntScore{19} = 15;
	strpack(g_SC_StuntName[19], "Pyramid DM Race", 45);

	g_SC_StuntRange[19][0] = CreateDynamicSphere(3470.9836, -1121.8270, 3016.7050, 20.0);
	g_SC_StuntRange[19][1] = CreateDynamicSphere(4577.3945, -1120.6722, 3009.5280, 20.0);
	g_SC_StuntRange[19][2] = CreateDynamicSphere(5228.8818, -1121.5950, 3198.6606, 20.0);
	g_SC_StuntRange[19][3] = CreateDynamicSphere(5780.3500, -857.1458, 3230.5957, 20.0);
	g_SC_StuntRange[19][4] = CreateDynamicSphere(6777.0219, -874.5807, 3156.3420, 20.0);
	g_SC_StuntRange[19][5] = CreateDynamicSphere(7930.5532, -828.4105, 3122.1054, 20.0);
	g_SC_StuntRange[19][6] = CreateDynamicSphere(7573.9541, -564.3588, 3284.3510, 20.0);
	g_SC_StuntRange[19][7] = CreateDynamicSphere(7017.2529, -566.0350, 3164.7604, 20.0);
	g_SC_StuntRange[19][8] = CreateDynamicSphere(6686.8876, -565.1290, 3009.1005, 20.0);
	g_SC_StuntRange[19][9] = CreateDynamicSphere(6574.7133, -491.4085, 3087.1882, 20.0);

	// Hard Paradise
	g_SC_StuntScore{20} = 15;
	strpack(g_SC_StuntName[20], "Hard DM Race", 45);

	g_SC_StuntRange[20][0] = CreateDynamicSphere(4378.6645, -952.2228, 267.6931, 20.0);
	g_SC_StuntRange[20][1] = CreateDynamicSphere(4168.3496, -593.3447, 254.7510, 20.0);
	g_SC_StuntRange[20][2] = CreateDynamicSphere(5012.2382, -433.0289, 254.6383, 20.0);
	g_SC_StuntRange[20][3] = CreateDynamicSphere(5066.0644, 565.3889, 308.8559, 20.0);
	g_SC_StuntRange[20][4] = CreateDynamicSphere(5652.5117, 774.2054, 250.8603, 20.0);
	g_SC_StuntRange[20][5] = CreateDynamicSphere(5749.8105, 776.0032, 250.8776, 20.0);
	g_SC_StuntRange[20][6] = CreateDynamicSphere(5830.3129, 774.2150, 250.8720, 20.0);
	g_SC_StuntRange[20][7] = CreateDynamicSphere(5814.8872, 894.6438, 276.1051, 20.0);
	g_SC_StuntRange[20][8] = CreateDynamicSphere(5815.6884, 1065.3701, 275.9664, 20.0);
	g_SC_StuntRange[20][9] = CreateDynamicSphere(5817.0205, 1150.5406, 253.2462, 25.0);

	// XTreme Paradise
	g_SC_StuntScore{21} = 30;
	strpack(g_SC_StuntName[21], "XTreme DM Race", 45);

	g_SC_StuntRange[21][0] = CreateDynamicSphere(1706.2093, 4167.6196, 1213.5139, 20.0);
	g_SC_StuntRange[21][1] = CreateDynamicSphere(1856.5552, 4277.1206, 1258.1473, 20.0);
	g_SC_StuntRange[21][2] = CreateDynamicSphere(1581.1788, 3389.2380, 1383.3399, 20.0);
	g_SC_StuntRange[21][3] = CreateDynamicSphere(1420.0357, 3806.3706, 1218.9096, 20.0);
	g_SC_StuntRange[21][4] = CreateDynamicSphere(1234.7316, 4043.1289, 1217.2265, 20.0);
	g_SC_StuntRange[21][5] = CreateDynamicSphere(328.3248, 4242.6801, 1305.1075, 20.0);
	g_SC_StuntRange[21][6] = CreateDynamicSphere(-72.9560, 4958.2480, 1288.5583, 20.0);
	g_SC_StuntRange[21][7] = CreateDynamicSphere(-73.8460, 5548.1865, 1219.5429, 10.0);
	g_SC_StuntRange[21][8] = CreateDynamicSphere(-73.6387, 6375.4995, 1261.8845, 10.0);
	g_SC_StuntRange[21][9] = CreateDynamicSphere(-72.6075, 6061.2739, 1236.9040, 13.0);

	// Parkour 1
	g_SC_StuntScore{22} = 5 | 1 << 7;
	strpack(g_SC_StuntName[22], "Parkour 1", 45);

	g_SC_StuntRange[22][0] = CreateDynamicSphere(176.8176,-27.6353,1722.2694, 7.0);
	g_SC_StuntRange[22][1] = CreateDynamicSphere(173.6828,-53.1310,1740.7134, 7.0);
	g_SC_StuntRange[22][2] = CreateDynamicSphere(199.1313,-116.6622,1762.3894, 7.0);
	g_SC_StuntRange[22][3] = CreateDynamicSphere(178.2975,-152.0797,1798.6124, 7.0);
	g_SC_StuntRange[22][4] = CreateDynamicSphere(221.9565,-232.7072,1802.5793, 7.0);
	g_SC_StuntRange[22][5] = CreateDynamicSphere(313.1747,-154.5098,1748.0693, 7.0);
	g_SC_StuntRange[22][6] = CreateDynamicSphere(350.4091,3.7760,1762.8334, 7.0);
	g_SC_StuntRange[22][7] = CreateDynamicSphere(236.1027,21.1010,1810.0894, 7.0);
	g_SC_StuntRange[22][8] = CreateDynamicSphere(187.8384,48.4124,1872.6334, 7.0);
	g_SC_StuntRange[22][9] = CreateDynamicSphere(212.1811,5.0642,1963.2094, 7.0);

	// Parkour 2
	g_SC_StuntScore{23} = 10 | 1 << 7;
	strpack(g_SC_StuntName[23], "Parkour 2", 45);

	g_SC_StuntRange[23][0] = CreateDynamicSphere(2776.9536,-2634.2344,2466.6807, 10.0);
	g_SC_StuntRange[23][1] = CreateDynamicSphere(2847.3645,-2467.4180,2556.8708, 10.0);
	g_SC_StuntRange[23][2] = CreateDynamicSphere(3004.7637,-2241.8132,2634.3254, 10.0);
	g_SC_StuntRange[23][3] = CreateDynamicSphere(3263.6060,-2329.2378,2645.2954, 10.0);
	g_SC_StuntRange[23][4] = CreateDynamicSphere(3394.7007,-2294.4028,2636.0896, 10.0);
	g_SC_StuntRange[23][5] = CreateDynamicSphere(3430.5298,-2327.8306,2649.3979, 10.0);
	g_SC_StuntRange[23][6] = CreateDynamicSphere(3387.1228,-2432.1304,2681.8782, 10.0);
	g_SC_StuntRange[23][7] = CreateDynamicSphere(3453.9507,-2562.8835,2690.1096, 10.0);
	g_SC_StuntRange[23][8] = CreateDynamicSphere(3453.3999,-2585.5369,2723.5332, 10.0);
	g_SC_StuntRange[23][9] = CreateDynamicSphere(3456.8020,-2682.8496,2770.7954, 10.0);

	// Parkour 7
	g_SC_StuntScore{24} = 11 | 1 << 7;
	strpack(g_SC_StuntName[24], "Parkour 7", 45);

	g_SC_StuntRange[24][0] = CreateDynamicSphere(1436.0144,-1459.1338,953.0024, 10.0);
	g_SC_StuntRange[24][1] = CreateDynamicSphere(1492.3843,-1325.1189,993.0792, 10.0);
	g_SC_StuntRange[24][2] = CreateDynamicSphere(1572.5300,-1264.1437,998.3641, 10.0);
	g_SC_StuntRange[24][3] = CreateDynamicSphere(1737.3354,-1205.1084,1013.5313, 10.0);
	g_SC_StuntRange[24][4] = CreateDynamicSphere(1814.4189,-1148.7748,1020.1385, 10.0);
	g_SC_StuntRange[24][5] = CreateDynamicSphere(1954.6926,-1146.2367,1027.1755, 10.0);
	g_SC_StuntRange[24][6] = CreateDynamicSphere(2054.4700,-1152.4939,1043.1121, 10.0);
	g_SC_StuntRange[24][7] = CreateDynamicSphere(2056.6802,-1234.2516,1048.0223, 10.0);
	g_SC_StuntRange[24][8] = CreateDynamicSphere(2231.1563,-1221.3865,1062.3879, 10.0);
	g_SC_StuntRange[24][9] = CreateDynamicSphere(2346.8491,-1221.2811,1062.4048, 10.0);

	// Parkour 8
	g_SC_StuntScore{25} = 9 | 1 << 7;
	strpack(g_SC_StuntName[25], "Parkour 8", 45);

	g_SC_StuntRange[25][0] = CreateDynamicSphere(-3117.0134,-1854.3990,61.5893, 10.0);
	g_SC_StuntRange[25][1] = CreateDynamicSphere(-3347.8164,-1756.8905,47.4912, 10.0);
	g_SC_StuntRange[25][2] = CreateDynamicSphere(-3362.3013,-1797.3684,2.2380, 10.0);
	g_SC_StuntRange[25][3] = CreateDynamicSphere(-3361.8108,-1708.0652,16.7734, 10.0);
	g_SC_StuntRange[25][4] = CreateDynamicSphere(-3320.3250,-1554.0372,47.4315, 10.0);
	g_SC_StuntRange[25][5] = CreateDynamicSphere(-3460.4221,-1567.5422,57.8813, 10.0);
	g_SC_StuntRange[25][6] = CreateDynamicSphere(-3536.8879,-1569.2241,67.6586, 10.0);
	g_SC_StuntRange[25][7] = CreateDynamicSphere(-3598.7224,-1556.6382,71.0857, 10.0);
	g_SC_StuntRange[25][8] = CreateDynamicSphere(-3619.4453,-1509.3856,75.0607, 10.0);
	g_SC_StuntRange[25][9] = CreateDynamicSphere(-3621.6372,-1451.3763,80.4857, 10.0);

	// Parkour 9
	g_SC_StuntScore{26} = 11 | 1 << 7;
	strpack(g_SC_StuntName[26], "Parkour 9", 45);

	g_SC_StuntRange[26][0] = CreateDynamicSphere(2557.6658,-1392.4886,256.0899, 7.0);
	g_SC_StuntRange[26][1] = CreateDynamicSphere(2508.1785,-1391.3832,258.3631, 7.0);
	g_SC_StuntRange[26][2] = CreateDynamicSphere(2500.8691,-1453.1528,258.0998, 7.0);
	g_SC_StuntRange[26][3] = CreateDynamicSphere(2529.2361,-1446.2858,278.6024, 7.0);
	g_SC_StuntRange[26][4] = CreateDynamicSphere(2529.2161,-1451.6659,308.8849, 7.0);
	g_SC_StuntRange[26][5] = CreateDynamicSphere(2546.1130,-1429.8657,313.4722, 7.0);
	g_SC_StuntRange[26][6] = CreateDynamicSphere(2564.8525,-1445.2666,325.2968, 7.0);
	g_SC_StuntRange[26][7] = CreateDynamicSphere(2562.3816,-1442.9066,338.0004, 7.0);
	g_SC_StuntRange[26][8] = CreateDynamicSphere(2560.2517,-1445.5109,347.4663, 7.0);
	g_SC_StuntRange[26][9] = CreateDynamicSphere(2551.7058,-1444.5574,356.3383, 7.0);

	// Parkour 10
	g_SC_StuntScore{27} = 11 | 1 << 7;
	strpack(g_SC_StuntName[27], "Parkour 10", 45);

	g_SC_StuntRange[27][0] = CreateDynamicSphere(-725.4837,-2741.2227,2686.5054, 10.0);
	g_SC_StuntRange[27][1] = CreateDynamicSphere(-700.0804,-2781.2305,2692.5293, 10.0);
	g_SC_StuntRange[27][2] = CreateDynamicSphere(-649.7189,-2795.8357,2705.1768, 10.0);
	g_SC_StuntRange[27][3] = CreateDynamicSphere(-594.4774,-2788.4246,2704.3770, 10.0);
	g_SC_StuntRange[27][4] = CreateDynamicSphere(-569.1418,-2775.8635,2713.4565, 10.0);
	g_SC_StuntRange[27][5] = CreateDynamicSphere(-552.9169,-2790.0042,2725.9312, 10.0);
	g_SC_StuntRange[27][6] = CreateDynamicSphere(-552.7551,-2860.8909,2736.1199, 10.0);
	g_SC_StuntRange[27][7] = CreateDynamicSphere(-564.0934,-2956.1494,2752.1965, 10.0);
	g_SC_StuntRange[27][8] = CreateDynamicSphere(-609.1731,-2962.0044,2766.0742, 10.0);
	g_SC_StuntRange[27][9] = CreateDynamicSphere(-698.5675,-2958.4802,2767.0496, 10.0);

	// Parkour 11
	g_SC_StuntScore{28} = 11 | 1 << 7;
	strpack(g_SC_StuntName[28], "Parkour 11", 45);

	g_SC_StuntRange[28][0] = CreateDynamicSphere(-988.6083,-3693.7463,229.4563, 10.0);
	g_SC_StuntRange[28][1] = CreateDynamicSphere(-988.4512,-3826.2249,269.4911, 10.0);
	g_SC_StuntRange[28][2] = CreateDynamicSphere(-954.6544,-3935.4138,325.0103, 10.0);
	g_SC_StuntRange[28][3] = CreateDynamicSphere(-703.9333,-4114.4468,414.8986, 10.0);
	g_SC_StuntRange[28][4] = CreateDynamicSphere(-415.1038,-3984.5100,463.2982, 10.0);
	g_SC_StuntRange[28][5] = CreateDynamicSphere(-456.1777,-3688.9705,520.6110, 10.0);
	g_SC_StuntRange[28][6] = CreateDynamicSphere(-428.7287,-3556.6294,546.4736, 10.0);
	g_SC_StuntRange[28][7] = CreateDynamicSphere(-366.3809,-3334.2566,598.3705, 10.0);
	g_SC_StuntRange[28][8] = CreateDynamicSphere(-400.6039,-3100.7502,607.9316, 10.0);
	g_SC_StuntRange[28][9] = CreateDynamicSphere(-451.0439,-2971.2080,629.9359, 10.0);

	// Parkour 12
	g_SC_StuntScore{29} = 6 | 1 << 7;
	strpack(g_SC_StuntName[29], "Parkour 12", 45);

	g_SC_StuntRange[29][0] = CreateDynamicSphere(2382.5613,1532.0787,78.8260, 10.0);
	g_SC_StuntRange[29][1] = CreateDynamicSphere(2391.3013,1538.7574,94.3760, 10.0);
	g_SC_StuntRange[29][2] = CreateDynamicSphere(2397.7148,1601.9492,110.8021, 10.0);
	g_SC_StuntRange[29][3] = CreateDynamicSphere(2383.6592,1688.1605,128.2662, 10.0);
	g_SC_StuntRange[29][4] = CreateDynamicSphere(2361.2390,1781.0968,152.9268, 10.0);
	g_SC_StuntRange[29][5] = CreateDynamicSphere(2433.2998,1800.6681,161.2147, 10.0);
	g_SC_StuntRange[29][6] = CreateDynamicSphere(2468.7419,1814.4650,174.3260, 10.0);
	g_SC_StuntRange[29][7] = CreateDynamicSphere(2481.4370,1826.6431,187.2360, 10.0);
	g_SC_StuntRange[29][8] = CreateDynamicSphere(2476.2332,1838.5737,199.6919, 10.0);
	g_SC_StuntRange[29][9] = CreateDynamicSphere(2470.5454,1854.2721,240.8770, 10.0);

	// Roller Coaster 5
	g_SC_StuntScore{30} = 8;
	strpack(g_SC_StuntName[30], "Roller Coaster 5", 45);

	g_SC_StuntRange[30][0] = CreateDynamicSphere(-2632.1013,-1626.9364,498.6055, 10.0);
	g_SC_StuntRange[30][1] = CreateDynamicSphere(-2624.4834,-1742.7651,358.0384, 10.0);
	g_SC_StuntRange[30][2] = CreateDynamicSphere(-2670.2126,-1850.3704,323.1161, 10.0);
	g_SC_StuntRange[30][3] = CreateDynamicSphere(-2775.1165,-2031.7635,303.9344, 10.0);
	g_SC_StuntRange[30][4] = CreateDynamicSphere(-2675.4387,-1953.7878,250.4488, 10.0);
	g_SC_StuntRange[30][5] = CreateDynamicSphere(-2887.3809,-1982.9335,216.2725, 10.0);
	g_SC_StuntRange[30][6] = CreateDynamicSphere(-2768.0813,-1847.0129,172.0798, 10.0);
	g_SC_StuntRange[30][7] = CreateDynamicSphere(-2863.6213,-1883.0582,176.0246, 10.0);
	g_SC_StuntRange[30][8] = CreateDynamicSphere(-2816.2158,-2120.9688,197.7532, 10.0);
	g_SC_StuntRange[30][9] = CreateDynamicSphere(-2620.6309,-2017.5300,143.0767, 10.0);

	// Pipe Jump
	g_SC_StuntScore{31} = 1;
	strpack(g_SC_StuntName[31], "Pipe Jump", 45);

	g_SC_StuntRange[31][0] = CreateDynamicSphere(1016.2004,-1387.3280,654.4302, 10.0);
	g_SC_StuntRange[31][1] = CreateDynamicSphere(1089.4615,-1387.1547,632.7490, 10.0);
	g_SC_StuntRange[31][2] = CreateDynamicSphere(1138.9004,-1387.3615,593.8405, 10.0);
	g_SC_StuntRange[31][3] = CreateDynamicSphere(1170.3365,-1387.1826,531.1795, 10.0);
	g_SC_StuntRange[31][4] = CreateDynamicSphere(1227.8705,-1387.2517,469.4070, 10.0);
	g_SC_StuntRange[31][5] = CreateDynamicSphere(1289.0056,-1384.4523,453.7980, 10.0);
	g_SC_StuntRange[31][6] = CreateDynamicSphere(1338.1595,-1378.4392,442.2130, 10.0);
	g_SC_StuntRange[31][7] = CreateDynamicSphere(1390.2069,-1378.4408,430.3410, 10.0);
	g_SC_StuntRange[31][8] = CreateDynamicSphere(1488.8906,-1378.8062,401.0956, 10.0);
	g_SC_StuntRange[31][9] = CreateDynamicSphere(1545.8860,-1363.8159,355.0901, 10.0);

	// Crashparadise
	g_SC_StuntScore{32} = 15;
	strpack(g_SC_StuntName[32], "Crashparadise", 45);

	g_SC_StuntRange[32][0] = CreateDynamicSphere(8754.0498, -2161.7224, 51.8559, 15.0);
	g_SC_StuntRange[32][1] = CreateDynamicSphere(8342.1562, -2287.8876, 34.4816, 15.0);
	g_SC_StuntRange[32][2] = CreateDynamicSphere(8152.1264, -2098.0170, 31.2154, 15.0);
	g_SC_StuntRange[32][3] = CreateDynamicSphere(8151.4028, -1160.8552, 39.3027, 15.0);
	g_SC_StuntRange[32][4] = CreateDynamicSphere(8410.4169, -896.1911, 16.4661, 15.0);
	g_SC_StuntRange[32][5] = CreateDynamicSphere(8460.0029, -895.9113, 93.5403, 15.0);
	g_SC_StuntRange[32][6] = CreateDynamicSphere(8850.7021, -896.8969, 9.5500, 15.0);
	g_SC_StuntRange[32][7] = CreateDynamicSphere(9150.0332, -911.4553, 275.6943, 15.0);
	g_SC_StuntRange[32][8] = CreateDynamicSphere(8879.7646, -926.7567, 217.9541, 15.0);
	g_SC_StuntRange[32][9] = CreateDynamicSphere(9187.6337, -945.1755, 138.1045, 15.0);

	// Spiral
	g_SC_StuntScore{33} = 6;
	strpack(g_SC_StuntName[33], "Spiral", 45);

	g_SC_StuntRange[33][0] = CreateDynamicSphere(130.4022, 200.6210, 1148.6691, 10.0);
	g_SC_StuntRange[33][1] = CreateDynamicSphere(247.7814, 65.2005, 1067.0313, 10.0);
	g_SC_StuntRange[33][2] = CreateDynamicSphere(201.3441, -74.6713, 1026.1811, 10.0);
	g_SC_StuntRange[33][3] = CreateDynamicSphere(250.4958, -23.9374, 919.6774, 10.0);
	g_SC_StuntRange[33][4] = CreateDynamicSphere(111.7630, 47.2900, 851.3613, 10.0);
	g_SC_StuntRange[33][5] = CreateDynamicSphere(221.1224, -62.7835, 783.9935, 10.0);
	g_SC_StuntRange[33][6] = CreateDynamicSphere(158.6324, 77.7885, 711.1582, 10.0);
	g_SC_StuntRange[33][7] = CreateDynamicSphere(170.3285, -79.1576, 642.8295, 10.0);
	g_SC_StuntRange[33][8] = CreateDynamicSphere(142.0502, 71.7862, 589.7434, 10.0);
	g_SC_StuntRange[33][9] = CreateDynamicSphere(263.2496, 9.1949, 557.2078, 10.0);

	// Quad Parkour 2 (QP2)
	g_SC_StuntScore{34} = 7;
	strpack(g_SC_StuntName[34], "Quad Parkour 2", 45);

	g_SC_StuntRange[34][0] = CreateDynamicSphere(-2992.2167, 899.5540, 7.9159, 7.0);
	g_SC_StuntRange[34][1] = CreateDynamicSphere(-3100.1125, 908.6942, 1.5333, 7.0);
	g_SC_StuntRange[34][2] = CreateDynamicSphere(-3142.3857, 908.3815, 1.7312, 7.0);
	g_SC_StuntRange[34][3] = CreateDynamicSphere(-3186.6677, 930.2503, 8.0508, 7.0);
	g_SC_StuntRange[34][4] = CreateDynamicSphere(-3258.4548, 978.5543, 13.6092, 7.0);
	g_SC_StuntRange[34][5] = CreateDynamicSphere(-3299.1513, 983.1527, 28.5216, 7.0);
	g_SC_StuntRange[34][6] = CreateDynamicSphere(-3302.5776, 1017.8433, 51.7282, 7.0);
	g_SC_StuntRange[34][7] = CreateDynamicSphere(-3295.7082, 1001.0233, 55.3954, 7.0);
	g_SC_StuntRange[34][8] = CreateDynamicSphere(-3286.1477, 987.3303, 40.6242, 7.0);
	g_SC_StuntRange[34][9] = CreateDynamicSphere(-3248.7680, 989.0261, 40.6241, 7.0);

	// Skyroad
	g_SC_StuntScore{35} = 10;
	strpack(g_SC_StuntName[35], "Skyroad", 45);

	g_SC_StuntRange[35][0] = CreateDynamicSphere(2539.0339, -1514.7291, 1217.4270, 10.0);
	g_SC_StuntRange[35][1] = CreateDynamicSphere(2299.0532, -924.5485, 1141.8638, 10.0);
	g_SC_StuntRange[35][2] = CreateDynamicSphere(2278.1252, -561.1185, 1147.5877, 10.0);
	g_SC_StuntRange[35][3] = CreateDynamicSphere(2057.1672, -418.0892, 1027.6828, 10.0);
	g_SC_StuntRange[35][4] = CreateDynamicSphere(1895.9645, -146.5173, 1036.9959, 10.0);
	g_SC_StuntRange[35][5] = CreateDynamicSphere(2248.6721, 10.9010, 956.8770, 10.0);
	g_SC_StuntRange[35][6] = CreateDynamicSphere(2669.3229, 217.0803, 711.8200, 10.0);
	g_SC_StuntRange[35][7] = CreateDynamicSphere(2208.4421, 383.5351, 574.6387, 10.0);
	g_SC_StuntRange[35][8] = CreateDynamicSphere(1374.5229, 448.1535, 219.1569, 10.0);
	g_SC_StuntRange[35][9] = CreateDynamicSphere(1438.3933, 41.9444, 105.1225, 10.0);

	// IP2
	g_SC_StuntScore{36} = 7;
	strpack(g_SC_StuntName[36], "Infernus Paradise 2", 45);

	g_SC_StuntRange[36][0] = CreateDynamicSphere(-15.4348, 3743.4873, 20.1800, 15.0);
	g_SC_StuntRange[36][1] = CreateDynamicSphere(830.1109, 3743.2365, 118.4033, 15.0);
	g_SC_StuntRange[36][2] = CreateDynamicSphere(1694.8024, 3730.6389, 24.2056, 15.0);
	g_SC_StuntRange[36][3] = CreateDynamicSphere(1693.6944, 4237.8344, 84.0464, 15.0);
	g_SC_StuntRange[36][4] = CreateDynamicSphere(1751.3913, 3609.7810, 9.7271, 15.0);
	g_SC_StuntRange[36][5] = CreateDynamicSphere(2134.0595, 3605.1801, 95.2253, 15.0);
	g_SC_StuntRange[36][6] = CreateDynamicSphere(3012.8469, 3595.1743, 82.9462, 15.0);
	g_SC_StuntRange[36][7] = CreateDynamicSphere(3275.2968, 3735.4521, 81.8811, 15.0);
	g_SC_StuntRange[36][8] = CreateDynamicSphere(3322.1733, 4251.6538, 77.6706, 15.0);
	g_SC_StuntRange[36][9] = CreateDynamicSphere(2899.3964, 4253.4814, 77.6856, 15.0);

	// IP3
	g_SC_StuntScore{37} = 15;
	strpack(g_SC_StuntName[37], "Crashparadise", 45);

	g_SC_StuntRange[37][0] = CreateDynamicSphere(-4926.4531, -2304.5676, 34.8061, 15.0);
	g_SC_StuntRange[37][1] = CreateDynamicSphere(-5180.1972, -2946.0034, 68.8223, 15.0);
	g_SC_StuntRange[37][2] = CreateDynamicSphere(-6069.3774, -2852.1550, 86.6906, 15.0);
	g_SC_StuntRange[37][3] = CreateDynamicSphere(-6077.3056, -3360.9685, 84.3518, 15.0);
	g_SC_StuntRange[37][4] = CreateDynamicSphere(-6171.5170, -3884.9626, 80.5971, 15.0);
	g_SC_StuntRange[37][5] = CreateDynamicSphere(-6628.1782, -2635.7683, 18.9356, 15.0);
	g_SC_StuntRange[37][6] = CreateDynamicSphere(-6522.1962, -1875.9301, 18.5620, 15.0);
	g_SC_StuntRange[37][7] = CreateDynamicSphere(-5975.8920, -1605.3862, 85.0375, 15.0);
	g_SC_StuntRange[37][8] = CreateDynamicSphere(-5874.4282, -1031.2542, 40.9589, 7.0);
	g_SC_StuntRange[37][9] = CreateDynamicSphere(-5788.0151, -820.4113, 2.3403, 15.0);

	// TM
	g_SC_StuntScore{38} = 20;
	strpack(g_SC_StuntName[38], "Trackmania", 45);

	g_SC_StuntRange[38][0] = CreateDynamicSphere(1172.0788, -5841.9555, 82.4909, 15.0);
	g_SC_StuntRange[38][1] = CreateDynamicSphere(874.9227, -6305.3945, 82.3013, 15.0);
	g_SC_StuntRange[38][2] = CreateDynamicSphere(532.1198, -6427.2094, 11.3059, 15.0);
	g_SC_StuntRange[38][3] = CreateDynamicSphere(177.2501, -6639.7910, 3.9314, 15.0);
	g_SC_StuntRange[38][4] = CreateDynamicSphere(315.1835, -7029.4702, 23.1578, 15.0);
	g_SC_StuntRange[38][5] = CreateDynamicSphere(549.0211, -7671.7856, 4.7730, 15.0);
	g_SC_StuntRange[38][6] = CreateDynamicSphere(735.2219, -8128.4785, 56.1907, 15.0);
	g_SC_StuntRange[38][7] = CreateDynamicSphere(1256.0617, -7847.4960, 23.3843, 15.0);
	g_SC_StuntRange[38][8] = CreateDynamicSphere(787.3319, -7876.8164, 23.3591, 15.0);
	g_SC_StuntRange[38][9] = CreateDynamicSphere(341.0911, -8037.0976, 22.2597, 15.0);

	// TM2
	g_SC_StuntScore{39} = 25;
	strpack(g_SC_StuntName[39], "Trackmania 2", 45);

	g_SC_StuntRange[39][0] = CreateDynamicSphere(-1891.8975, 5935.6127, 15.8183, 15.0);
	g_SC_StuntRange[39][1] = CreateDynamicSphere(-1922.3865, 5325.4604, 76.4735, 20.0);
	g_SC_StuntRange[39][2] = CreateDynamicSphere(-2191.3078, 5523.3974, 63.4057, 15.0);
	g_SC_StuntRange[39][3] = CreateDynamicSphere(-2444.7072, 4953.4755, 109.8245, 15.0);
	g_SC_StuntRange[39][4] = CreateDynamicSphere(-2812.1389, 6071.8437, 180.1383, 10.0);
	g_SC_StuntRange[39][5] = CreateDynamicSphere(-2905.6450, 6366.3012, 107.8514, 7.0);
	g_SC_StuntRange[39][6] = CreateDynamicSphere(-3278.5703, 7581.7939, 65.9205, 15.0);
	g_SC_StuntRange[39][7] = CreateDynamicSphere(-3760.4287, 6995.1079, 57.3428, 15.0);
	g_SC_StuntRange[39][8] = CreateDynamicSphere(-4606.3540, 6696.6894, 83.3648, 20.0);
	g_SC_StuntRange[39][9] = CreateDynamicSphere(-3726.6826, 7285.8129, 19.9708, 15.0);

	// TM3
	g_SC_StuntScore{40} = 25;
	strpack(g_SC_StuntName[40], "Trackmania 3", 45);

	g_SC_StuntRange[40][0] = CreateDynamicSphere(-5697.7421, 3392.7414, 6.4583, 15.0);
	g_SC_StuntRange[40][1] = CreateDynamicSphere(-5696.0014, 4015.1157, 51.9920, 15.0);
	g_SC_StuntRange[40][2] = CreateDynamicSphere(-5694.4736, 5078.4106, 54.1092, 15.0);
	g_SC_StuntRange[40][3] = CreateDynamicSphere(-5691.4638, 5723.4135, 7.3295, 15.0);
	g_SC_StuntRange[40][4] = CreateDynamicSphere(-5819.3349, 6626.7402, 86.8897, 15.0);
	g_SC_StuntRange[40][5] = CreateDynamicSphere(-5930.8427, 6353.5810, 81.8980, 15.0);
	g_SC_StuntRange[40][6] = CreateDynamicSphere(-4658.3388, 6304.0410, 94.3470, 15.0);
	g_SC_StuntRange[40][7] = CreateDynamicSphere(-4451.8896, 6179.4140, 77.7288, 20.0);
	g_SC_StuntRange[40][8] = CreateDynamicSphere(-3416.3088, 6324.5278, 192.5655, 15.0);
	g_SC_StuntRange[40][9] = CreateDynamicSphere(-2720.7243, 6325.8608, 172.7651, 15.0);

	g_SC_StuntScore{41} = 2 | 1 << 7;
	strpack(g_SC_StuntName[41], "Parachuting", 45);

	g_SC_StuntRange[41][0] = CreateDynamicSphere(294.4663,-1614.5375,471.2717, 7.0);
	g_SC_StuntRange[41][1] = CreateDynamicSphere(294.4639,-1614.6333,418.3205, 7.0);
	g_SC_StuntRange[41][2] = CreateDynamicSphere(294.4457,-1615.3275,371.8109, 7.0);
	g_SC_StuntRange[41][3] = CreateDynamicSphere(294.4731,-1614.4292,315.0645, 7.0);
	g_SC_StuntRange[41][4] = CreateDynamicSphere(294.4857,-1614.0416,281.0076, 7.0);
	g_SC_StuntRange[41][5] = CreateDynamicSphere(294.4676,-1614.6354,251.6109, 7.0);
	g_SC_StuntRange[41][6] = CreateDynamicSphere(294.4612,-1614.7847,214.0260, 7.0);
	g_SC_StuntRange[41][7] = CreateDynamicSphere(294.4613,-1614.7162,184.7870, 7.0);
	g_SC_StuntRange[41][8] = CreateDynamicSphere(294.4613,-1614.6393,153.6294, 7.0);
	g_SC_StuntRange[41][9] = CreateDynamicSphere(294.4613,-1614.5953,136.5412, 15.0);

	g_SC_StuntScore{42} = 11 | 1 << 7;
	strpack(g_SC_StuntName[42], "Skydive 1", 45);

	g_SC_StuntRange[42][0] = CreateDynamicSphere(3880.6694,3890.7256,1956.9705, 10.0);
	g_SC_StuntRange[42][1] = CreateDynamicSphere(3879.9614,3890.7432,1834.1620, 10.0);
	g_SC_StuntRange[42][2] = CreateDynamicSphere(3880.4724,3892.2183,1677.4052, 10.0);
	g_SC_StuntRange[42][3] = CreateDynamicSphere(3880.1833,3892.9524,1516.3289, 10.0);
	g_SC_StuntRange[42][4] = CreateDynamicSphere(3880.0618,3868.2734,1209.1044, 20.0);
	g_SC_StuntRange[42][5] = CreateDynamicSphere(3883.1501,3910.9556,1039.7437, 20.0);
	g_SC_StuntRange[42][6] = CreateDynamicSphere(3877.0022,3902.2932,876.8925, 10.0);
	g_SC_StuntRange[42][7] = CreateDynamicSphere(3895.1526,3888.7876,681.9805, 10.0);
	g_SC_StuntRange[42][8] = CreateDynamicSphere(3903.3774,3873.6970,489.7836, 10.0);
	g_SC_StuntRange[42][9] = CreateDynamicSphere(3893.5303,3885.4133,364.9318, 10.0);

	g_SC_StuntScore{43} = 12 | 1 << 7;
	strpack(g_SC_StuntName[43], "Skydive 2", 45);

	g_SC_StuntRange[43][0] = CreateDynamicSphere(-1292.5276,-44.6413,4168.2021, 10.0);
	g_SC_StuntRange[43][1] = CreateDynamicSphere(-1299.3048,-39.6379,3748.8218, 10.0);
	g_SC_StuntRange[43][2] = CreateDynamicSphere(-1273.5477,-37.0133,2925.6855, 10.0);
	g_SC_StuntRange[43][3] = CreateDynamicSphere(-1274.2308,-38.0464,2883.4563, 10.0);
	g_SC_StuntRange[43][4] = CreateDynamicSphere(-1282.8413,-37.4210,2368.2266, 10.0);
	g_SC_StuntRange[43][5] = CreateDynamicSphere(-1301.1559,-42.4446,2132.0164, 10.0);
	g_SC_StuntRange[43][6] = CreateDynamicSphere(-1313.5726,-41.4370,1887.5179, 10.0);
	g_SC_StuntRange[43][7] = CreateDynamicSphere(-1285.1228,-37.3065,1758.9752, 10.0);
	g_SC_StuntRange[43][8] = CreateDynamicSphere(-1281.3623,-37.6566,1450.4972, 20.0);
	g_SC_StuntRange[43][9] = CreateDynamicSphere(-1278.1527,-34.6053,1232.2349, 10.0);

	g_SC_StuntScore{44} = 13 | 1 << 7;
	strpack(g_SC_StuntName[44], "NRG Paradise", 45);

	g_SC_StuntRange[44][0] = CreateDynamicSphere(-904.9070,-3666.8994,27.0111, 10.0);
	g_SC_StuntRange[44][1] = CreateDynamicSphere(-799.7200,-3628.3296,59.2405, 10.0);
	g_SC_StuntRange[44][2] = CreateDynamicSphere(-1027.7419,-3607.8359,19.3285, 10.0);
	g_SC_StuntRange[44][3] = CreateDynamicSphere(-930.9575,-3768.5691,70.5493, 10.0);
	g_SC_StuntRange[44][4] = CreateDynamicSphere(-786.7739,-3971.2087,27.2543, 10.0);
	g_SC_StuntRange[44][5] = CreateDynamicSphere(-776.4783,-4136.7271,74.8041, 10.0);
	g_SC_StuntRange[44][6] = CreateDynamicSphere(-744.5543,-4131.5869,150.7285, 10.0);
	g_SC_StuntRange[44][7] = CreateDynamicSphere(-710.6553,-3809.6421,150.7285, 10.0);
	g_SC_StuntRange[44][8] = CreateDynamicSphere(-1514.7126,-3698.8330,10.9469, 10.0);
	g_SC_StuntRange[44][9] = CreateDynamicSphere(-2215.9673,-4320.3125,280.6359, 10.0);

	g_SC_StuntScore{45} = 12 | 1 << 7;
	strpack(g_SC_StuntName[45], "Skydive 5", 45);

	g_SC_StuntRange[45][0] = CreateDynamicSphere(3094.6587,404.3346,1720.4314, 15.0);
	g_SC_StuntRange[45][1] = CreateDynamicSphere(3088.8196,412.5280,1515.3320, 5.0);
	g_SC_StuntRange[45][2] = CreateDynamicSphere(3092.7617,402.4691,1396.9498, 15.0);
	g_SC_StuntRange[45][3] = CreateDynamicSphere(3096.0076,405.4539,1206.1062, 10.0);
	g_SC_StuntRange[45][4] = CreateDynamicSphere(3101.9670,412.4458,1043.9324, 5.0);
	g_SC_StuntRange[45][5] = CreateDynamicSphere(3101.9976,411.4147,861.3092, 10.0);
	g_SC_StuntRange[45][6] = CreateDynamicSphere(3105.8408,415.1339,619.9804, 20.0);
	g_SC_StuntRange[45][7] = CreateDynamicSphere(3118.4495,410.4001,430.7476, 20.0);
	g_SC_StuntRange[45][8] = CreateDynamicSphere(3112.8904,400.0089,282.8618, 15.0);
	g_SC_StuntRange[45][9] = CreateDynamicSphere(3129.7781,409.2012,90.9443, 15.0);

	g_SC_StuntScore{46} = 8;
	strpack(g_SC_StuntName[46], "Infernus Paradise 4", 45);

	g_SC_StuntRange[46][0] = CreateDynamicSphere(-1155.0153,3211.8210,571.755, 10.0);
	g_SC_StuntRange[46][1] = CreateDynamicSphere(-1157.3448,3446.0259,581.627, 10.0);
	g_SC_StuntRange[46][2] = CreateDynamicSphere(-1066.7562,3661.5652,583.684, 10.0);
	g_SC_StuntRange[46][3] = CreateDynamicSphere(-744.0582,3666.5232,498.9285, 10.0);
	g_SC_StuntRange[46][4] = CreateDynamicSphere(-389.4603,3644.0281,501.4003, 10.0);
	g_SC_StuntRange[46][5] = CreateDynamicSphere(-547.0870,3597.5420,498.2760, 10.0);
	g_SC_StuntRange[46][6] = CreateDynamicSphere(-712.7094,3190.7637,547.1534, 10.0);
	g_SC_StuntRange[46][7] = CreateDynamicSphere(-419.3138,3205.9800,477.7097, 10.0);
	g_SC_StuntRange[46][8] = CreateDynamicSphere(-287.7919,3207.0254,398.5507, 10.0);
	g_SC_StuntRange[46][9] = CreateDynamicSphere(-130.5610,3209.8645,398.5503, 10.0);

	g_SC_StuntScore{47} = 5;
	strpack(g_SC_StuntName[47], "Infernus Paradise 5", 45);

	g_SC_StuntRange[47][0] = CreateDynamicSphere(2838.6064,3777.9500,79.2267, 10.0);
	g_SC_StuntRange[47][1] = CreateDynamicSphere(2845.8633,4091.3499,79.2498, 10.0);
	g_SC_StuntRange[47][2] = CreateDynamicSphere(3014.0000,4419.8887,77.4309, 10.0);
	g_SC_StuntRange[47][3] = CreateDynamicSphere(3179.4119,4543.9585,127.933, 10.0);
	g_SC_StuntRange[47][4] = CreateDynamicSphere(3443.5903,4740.5034,156.066, 10.0);
	g_SC_StuntRange[47][5] = CreateDynamicSphere(3658.0200,4903.3438,108.655, 10.0);
	g_SC_StuntRange[47][6] = CreateDynamicSphere(3907.2754,5090.2783,74.6670, 10.0);
	g_SC_StuntRange[47][7] = CreateDynamicSphere(4167.9819,5289.5684,24.5850, 10.0);
	g_SC_StuntRange[47][8] = CreateDynamicSphere(4333.5435,5413.5234,71.1573, 10.0);
	g_SC_StuntRange[47][9] = CreateDynamicSphere(4513.5850,5543.3208,12.3684, 10.0);

	g_SC_StuntScore{48} = 8;
	strpack(g_SC_StuntName[48], "Stunt Island", 45);

	g_SC_StuntRange[48][0] = CreateDynamicSphere(270.4150,3422.1899,43.0466, 5.0);
	g_SC_StuntRange[48][1] = CreateDynamicSphere(331.5404,3361.4031,81.1790, 5.0);
	g_SC_StuntRange[48][2] = CreateDynamicSphere(300.3656,3432.9614,62.8613, 5.0);
	g_SC_StuntRange[48][3] = CreateDynamicSphere(233.8057,3698.0403,86.5052, 5.0);
	g_SC_StuntRange[48][4] = CreateDynamicSphere(122.7274,3665.6111,27.9956, 5.0);
	g_SC_StuntRange[48][5] = CreateDynamicSphere(241.2413,3400.4412,26.7792, 5.0);
	g_SC_StuntRange[48][6] = CreateDynamicSphere(159.9364,3373.2529,107.998, 5.0);
	g_SC_StuntRange[48][7] = CreateDynamicSphere(159.8730,3664.5354,78.8948, 5.0);
	g_SC_StuntRange[48][8] = CreateDynamicSphere(140.3621,3299.2810,21.2801, 5.0);
	g_SC_StuntRange[48][9] = CreateDynamicSphere(151.7740,3498.2505,11.6081, 5.0);


	//g_SC_StuntRange[43][9] = CreateDynamicSphere(-1278.1527,-34.6053,2232.2349, 10.0);
/*
[tr]\n[td]%s[/td][td]%d[/td]\n[/tr]\n
*/
/*
	for(new x; x != 43; x++)
	{
		strunpack(i_str, g_SC_StuntName[x], 45);
		printf("[tr]\n[td]%s[/td][td]%d[/td]\n[/tr]", i_str, g_SC_StuntScore{x} & 0x7F);
	}
*/
	// Single jumps - sjumps

	new
	    i,
	    id;
	for( ; i != sizeof(g_Jumps); i++)
	{
		id = CreateDynamicCube(
			g_Jumps[i][0] - g_Jumps[i][3],
			g_Jumps[i][1] - g_Jumps[i][4],
			g_Jumps[i][2] - g_Jumps[i][5],
			g_Jumps[i][0] + g_Jumps[i][3],
			g_Jumps[i][1] + g_Jumps[i][4],
			g_Jumps[i][2] + g_Jumps[i][5]);
		if(g_JumpsAreaStartID == -1) g_JumpsAreaStartID = id;

		CreateDynamicCube(
			g_Jumps[i][6] - g_Jumps[i][9],
			g_Jumps[i][7] - g_Jumps[i][10],
			g_Jumps[i][8] - g_Jumps[i][11],
			g_Jumps[i][6] + g_Jumps[i][9],
			g_Jumps[i][7] + g_Jumps[i][10],
			g_Jumps[i][8] + g_Jumps[i][11]);

        CreateDynamicPickup(1276, 1, g_Jumps[i][6], g_Jumps[i][7], g_Jumps[i][8]);
		CreateDynamic3DTextLabel("{" #XCOLOR_GREEN "}Itt {" #XCOLOR_ORANGE "}landolj{FF0000}!", -1, g_Jumps[i][6], g_Jumps[i][7], g_Jumps[i][8], 25.0, .testlos = 0, .worldid = -1);
	}

	new pickupid, pickupdata[2];
	for(i = 0; i != sizeof(HorseShoes); i++)
	{
		pickupid = CreateDynamicPickup(954, 2, HorseShoes[i][0], HorseShoes[i][1], HorseShoes[i][2]);

		pickupdata[0] = e_PICKUP_TYPE_HORSESHOE;
		pickupdata[1] = i;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);
	}
	for(i = 0; i != sizeof(Oysters); i++)
	{
		pickupid = CreateDynamicPickup(2782, 2, Oysters[i][0], Oysters[i][1], Oysters[i][2]);

		pickupdata[0] = e_PICKUP_TYPE_OYSTER;
		pickupdata[1] = i;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);
	}
	for(i = 0; i != sizeof(PhotoPos); i++)
	{
		format(i_str, sizeof(i_str), "Photo {" #XCOLOR_ORANGE "}%d\n{" #XCOLOR_LIGHTBLUE "}Fényképezd le{" #XCOLOR_RED "}!", i + 1);
		CreateDynamic3DTextLabel(i_str, COLOR_WHITE, PhotoPos[i][0], PhotoPos[i][1], PhotoPos[i][2], 25.0, .testlos = 0, .worldid = -1);
		CreateDynamicObject(19130, PhotoPos[i][0], PhotoPos[i][1], PhotoPos[i][2], 0.0, 0.0, 0.0);
	}
/*
	for(i = 0; i != sizeof(g_Tags); i++)
	{
		CreateDynamicObject(
			g_Tags[i][e_tModelID],
			g_Tags[i][e_tPos][0],
			g_Tags[i][e_tPos][1],
			g_Tags[i][e_tPos][2],
			g_Tags[i][e_tPos][3],
			g_Tags[i][e_tPos][4],
			g_Tags[i][e_tPos][5]);
	}
*/
	for(i = 0; i != sizeof(g_DerbyPos); i++)
	{
		CreateDynamicObject(5020, g_DerbyPos[i][0], g_DerbyPos[i][1], g_DerbyPos[i][2] - 2.0, 0.0, 90.0, 0.0, 11); // parkour12
	}


	// Póstás munkával kapcsolatos dolgok
	for(i = 0; i != 25; i++)
	{
        g_Posta[i] = random(sizeof(g_LevelPos));
	}
	g_PostaArea = CreateDynamicSphere(POSTAS_KEZDOHELY, 5.0);
	Create3DTextLabel(!"Levelek felvétele: {" #XCOLOR_RED "}'F'", COLOR_WHITE, POSTAS_KEZDOHELY, 5.0, 12);

    g_PostaPickup[0] = CreateDynamicPickup(1239, 1, POSTAS_KEZDOHELY, 12);
	for(i = 0; i != sizeof(g_LevelPos); i++)
	{
        g_PostaPickup[i + 1] = CreateDynamicPickup(1239, 1, g_LevelPos[i][0], g_LevelPos[i][1], g_LevelPos[i][2], 12);
		Create3DTextLabel(!"Levél leadása: {" #XCOLOR_RED "}'F'", COLOR_WHITE, g_LevelPos[i][0], g_LevelPos[i][1], g_LevelPos[i][2], 10.0, 12);
	}

	g_PostaKocsik[0] = CreateDynamicVehicle(509,-302.6857,1055.6071,19.2444,354.5350,36,47, 60, 0, 12); // Kocsik1
	g_PostaKocsik[1] = CreateDynamicVehicle(509,-303.9541,1055.5446,19.2463,4.5643,36,47, 60, 0, 12); //
	g_PostaKocsik[2] = CreateDynamicVehicle(509,-305.8473,1055.1971,19.2465,1.7184,36,47, 60, 0, 12); //
	g_PostaKocsik[3] = CreateDynamicVehicle(509,-307.2252,1055.1774,19.2493,7.8406,36,47, 60, 0, 12); //
	g_PostaKocsik[4] = CreateDynamicVehicle(509,-309.1995,1055.7336,19.2509,3.4227,36,47, 60, 0, 12); //
	g_PostaKocsik[5] = CreateDynamicVehicle(509,-311.4619,1055.3335,19.2533,3.8315,36,47, 60, 0, 12); //
	g_PostaKocsik[6] = CreateDynamicVehicle(462,-327.7113,1061.9727,19.3412,358.9214,236,66, 60, 0, 12); //
	g_PostaKocsik[7] = CreateDynamicVehicle(462,-329.5195,1062.0449,19.3422,4.3057,236,66, 60, 0, 12); //
	g_PostaKocsik[8] = CreateDynamicVehicle(462,-330.5734,1062.0127,19.3389,5.1157,236,66, 60, 0, 12); //
	g_PostaKocsik[9] = CreateDynamicVehicle(462,-332.1262,1061.8832,19.3374,0.8229,236,66, 60, 0, 12); //
	g_PostaKocsik[10] = CreateDynamicVehicle(462,-333.6976,1061.7841,19.3378,359.4278,236,66, 60, 0, 12); //
	g_PostaKocsik[11] = CreateDynamicVehicle(462,-335.2393,1061.6969,19.3386,355.4534,236,66, 60, 0, 12); //

	// Pizza
	for(i = 0; i != 23; i++)
	{
        g_Pizza[i] = random(sizeof(g_PizzaPos));
	}
	g_PizzaArea = CreateDynamicSphere(PIZZAS_KEZDOHELY, 5.0);
	Create3DTextLabel(!"Pizza felvétele: {" #XCOLOR_RED "}'F'", COLOR_WHITE, PIZZAS_KEZDOHELY, 30.0, 13);

    g_PizzaPickup[0] = CreateDynamicPickup(1239, 1, PIZZAS_KEZDOHELY, 13);
	for(i = 0; i != sizeof(g_PizzaPos); i++)
	{
        g_PizzaPickup[i + 1] = CreateDynamicPickup(1239, 1, g_PizzaPos[i][0], g_PizzaPos[i][1], g_PizzaPos[i][2], 13);
		Create3DTextLabel(!"Pizza leadása: {" #XCOLOR_RED "}'F'", COLOR_WHITE, g_PizzaPos[i][0], g_PizzaPos[i][1], g_PizzaPos[i][2], 10.0, 13);
	}

	g_PizzaKocsik[0] = CreateDynamicVehicle(481,2334.8562,69.5324,26.0002,275.9656,20,2, 60, 0, 13); // Pizzacars
	g_PizzaKocsik[1] = CreateDynamicVehicle(481,2335.4177,70.0868,25.9972,273.9602,20,2, 60, 0, 13); //
	g_PizzaKocsik[2] = CreateDynamicVehicle(481,2335.1479,70.8152,26.0012,271.1917,20,2, 60, 0, 13); //
	g_PizzaKocsik[3] = CreateDynamicVehicle(481,2334.9744,72.0555,25.9981,276.1685,20,2, 60, 0, 13); //
	g_PizzaKocsik[4] = CreateDynamicVehicle(481,2335.4263,67.5964,25.9976,264.3773,20,2, 60, 0, 13); //
	g_PizzaKocsik[5] = CreateDynamicVehicle(481,2335.3447,65.7384,25.9981,275.4322,20,2, 60, 0, 13); //
	g_PizzaKocsik[6] = CreateDynamicVehicle(448,2334.4551,77.4625,26.1507,271.2142,76,161, 60, 0, 13); //
	g_PizzaKocsik[7] = CreateDynamicVehicle(448,2334.2749,78.5504,26.1613,277.1719,76,161, 60, 0, 13); //
	g_PizzaKocsik[8] = CreateDynamicVehicle(448,2334.4458,79.2098,26.1494,267.3969,76,161, 60, 0, 13); //
	g_PizzaKocsik[9] = CreateDynamicVehicle(448,2334.2798,79.8974,26.1638,267.5001,76,161, 60, 0, 13); //
	g_PizzaKocsik[10] = CreateDynamicVehicle(448,2334.7571,80.7928,26.0814,261.5632,76,161, 60, 0, 13); //
	g_PizzaKocsik[11] = CreateDynamicVehicle(448,2333.2881,82.3270,26.0833,271.9213,76,161, 60, 0, 13); //

/*
	for(i = g_SC_StuntRange[0][0]; i != g_SC_StuntRange[sizeof(g_SC_StuntRange)-1][9]; i++)
	{
		Streamer_GetFloatData(STREAMER_TYPE_AREA, i, E_STREAMER_X, X);
		Streamer_GetFloatData(STREAMER_TYPE_AREA, i, E_STREAMER_Y, Y);

	    CreateZoneSquare(X, Y, 20.0);
	}
*/

	// Ferris Wheel
	gFerrisWheel = CreateDynamicObject(18877, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2], 0.0, 0.0, FERRIS_WHEEL_Z_ANGLE, .streamdistance = -1);
    CreateDynamicObjectEx(18878, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2], 0.0, 0.0, FERRIS_WHEEL_Z_ANGLE);

	i = 0;
	while(i != NUM_FERRIS_CAGES)
	{
        gFerrisCages[i] = CreateDynamicObject(18879, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2], 0.0, 0.0, FERRIS_WHEEL_Z_ANGLE, .streamdistance = 200.0);
        AttachDynamicObjectToObject(gFerrisCages[i], gFerrisWheel, gFerrisCageOffsets[i][0], gFerrisCageOffsets[i][1], gFerrisCageOffsets[i][2], 0.0, 0.0, FERRIS_WHEEL_Z_ANGLE, 0);

		i++;
	}
/*
	// Logo
    NMSSFelirat = TextDrawCreate(5.0, 400.0,"~n~~n~~n~~r~Nagy ~g~Magyar ~b~Stunt ~y~Szerver ");
	TextDrawUseBox(NMSSFelirat, 0);
	TextDrawFont(NMSSFelirat, 0);
	TextDrawSetShadow(NMSSFelirat,0);
	TextDrawSetOutline(NMSSFelirat,1);
	TextDrawBackgroundColor(NMSSFelirat,0x000000FF);
	TextDrawColor(NMSSFelirat,0xFFFFFFFF);

	// Szerver IP Címe textdraw
	ServerIP = TextDrawCreate(486.000000, 1.000000, "~g~~h~~h~nm~y~~h~-~g~~h~~h~ss~w~.~b~~h~~h~tarhely~w~.~p~~h~biz");
	TextDrawBackgroundColor(ServerIP, 0xFF);
	TextDrawFont(ServerIP, 2);
	TextDrawLetterSize(ServerIP, 0.379999, 1.299999);
	TextDrawColor(ServerIP, -16711681);
	TextDrawSetOutline(ServerIP, 1);
	TextDrawSetProportional(ServerIP, 1);
    */

	// Fõsõ fölirat
	FosoFolirat = TextDrawCreate(223.000000, 1.000000, "~l~Ma~r~~h~XX~l~iMuM");
	TextDrawBackgroundColor(FosoFolirat, 872363007);
	TextDrawFont(FosoFolirat, 1);
	TextDrawLetterSize(FosoFolirat, 0.629999, 1.199998);
	TextDrawColor(FosoFolirat, -65281);
	TextDrawSetOutline(FosoFolirat, 1);
	TextDrawSetProportional(FosoFolirat, 1);
	TextDrawSetSelectable(FosoFolirat, 0);

	TextDrawCreate(343.000000, 1.000000, "~l~FreeRoam");
	TextDrawBackgroundColor(FosoFolirat + Text:1, -1);
	TextDrawFont(FosoFolirat + Text:1, 1);
	TextDrawLetterSize(FosoFolirat + Text:1, 0.629998, 1.199998);
	TextDrawColor(FosoFolirat + Text:1, -65281);
	TextDrawSetOutline(FosoFolirat + Text:1, 1);
	TextDrawSetProportional(FosoFolirat + Text:1, 1);
	TextDrawSetSelectable(FosoFolirat + Text:1, 0);

	TD_CTC = TextDrawCreate(212.000000, 415.000000, "~r~Piros: 0/5 ~w~- ~b~Kk: 0/5"); // 423
	TextDrawBackgroundColor(TD_CTC, 255);
	TextDrawFont(TD_CTC, 1);
	TextDrawLetterSize(TD_CTC, 0.500000, 1.000000);
	TextDrawColor(TD_CTC, -1);
	TextDrawSetOutline(TD_CTC, 0);
	TextDrawSetProportional(TD_CTC, 1);
	TextDrawSetShadow(TD_CTC, 1);
	TextDrawSetSelectable(TD_CTC, 0);

	TD_Derby = TextDrawCreate(149.000000, 412.000000, FixGameString("Bentlévõ jatékosok: 5 - Hátralévõ idõ: 25s."));
	TextDrawBackgroundColor(TD_Derby, 255);
	TextDrawFont(TD_Derby, 1);
	TextDrawLetterSize(TD_Derby, 0.270000, 1.100000);
	TextDrawColor(TD_Derby, -1);
	TextDrawSetProportional(TD_Derby, 1);
	TextDrawSetShadow(TD_Derby, 1);
	TextDrawUseBox(TD_Derby, 1);
	TextDrawBoxColor(TD_Derby, 51);
	TextDrawTextSize(TD_Derby, 358.000000, -19.000000);

/*
    T_WhiteBox[0] = TextDrawCreate(644.000000, 1.000000, "____ _____");
	TextDrawBackgroundColor(T_WhiteBox[0], 15);
	TextDrawFont(T_WhiteBox[0], 1);
	TextDrawLetterSize(T_WhiteBox[0], 0.500000, 5.899996);
	TextDrawColor(T_WhiteBox[0], -1);
	TextDrawSetOutline(T_WhiteBox[0], 0);
	TextDrawSetProportional(T_WhiteBox[0], 1);
	TextDrawSetShadow(T_WhiteBox[0], 1);
	TextDrawUseBox(T_WhiteBox[0], 1);
	TextDrawBoxColor(T_WhiteBox[0], 100);
	TextDrawTextSize(T_WhiteBox[0], -4.000000, 3.000000);

	T_WhiteBox[1] = TextDrawCreate(644.000000, 341.000000, "____ _____");
	TextDrawBackgroundColor(T_WhiteBox[1], 15);
	TextDrawFont(T_WhiteBox[1], 1);
	TextDrawLetterSize(T_WhiteBox[1], 0.500000, 5.899996);
	TextDrawColor(T_WhiteBox[1], -1);
	TextDrawSetOutline(T_WhiteBox[1], 0);
	TextDrawSetProportional(T_WhiteBox[1], 1);
	TextDrawSetShadow(T_WhiteBox[1], 1);
	TextDrawUseBox(T_WhiteBox[1], 1);
	TextDrawBoxColor(T_WhiteBox[1], 100);
	TextDrawTextSize(T_WhiteBox[1], -4.000000, 3.000000);
*/
/*
	Tele0 = TextDrawCreate(477.000000, 97.000000, "_");
	TextDrawBackgroundColor(Tele0, 0xFF);
	TextDrawFont(Tele0, 1);
	TextDrawLetterSize(Tele0, 0.280000, 1.000000);
	TextDrawColor(Tele0, 2122972159);
	TextDrawSetOutline(Tele0, 0);
	TextDrawSetProportional(Tele0, 1);
	TextDrawSetShadow(Tele0, 1);

	Tele1 = TextDrawCreate(477.000000, 106.000000, "_");
	TextDrawBackgroundColor(Tele1, 0xFF);
	TextDrawFont(Tele1, 1);
	TextDrawLetterSize(Tele1, 0.280000, 1.000000);
	TextDrawColor(Tele1, 2122972159);
	TextDrawSetOutline(Tele1, 0);
	TextDrawSetProportional(Tele1, 1);
	TextDrawSetShadow(Tele1, 1);
*/
	TD_Weblap = TextDrawCreate(490.000000, 2.000000, WEB_ADDRESS);
	TextDrawBackgroundColor(TD_Weblap, 255);
	TextDrawFont(TD_Weblap, 1);
	TextDrawLetterSize(TD_Weblap, 0.430000, 1.000000);
	TextDrawColor(TD_Weblap, 872363007);
	TextDrawSetOutline(TD_Weblap, 1);
	TextDrawSetProportional(TD_Weblap, 1);
	TextDrawSetSelectable(TD_Weblap, 0);
/*
	TD_SzerverIP = TextDrawCreate(501.000000, 12.000000, "server2.clans.hu:7800");
	TextDrawBackgroundColor(TD_SzerverIP, 255);
	TextDrawFont(TD_SzerverIP, 1);
	TextDrawLetterSize(TD_SzerverIP, 0.340000, 1.100000);
	TextDrawColor(TD_SzerverIP, 872363007);
	TextDrawSetOutline(TD_SzerverIP, 1);
	TextDrawSetProportional(TD_SzerverIP, 1);
	TextDrawSetSelectable(TD_SzerverIP, 0);
*/
	TD_Info = TextDrawCreate(498.000000, 97.000000, "/help /rules /teles /cmds");
	TextDrawBackgroundColor(TD_Info, 255);
	TextDrawFont(TD_Info, 2);
	TextDrawLetterSize(TD_Info, 0.179998, 1.299998);
	TextDrawColor(TD_Info, -839313409);
	TextDrawSetOutline(TD_Info, 1);
	TextDrawSetProportional(TD_Info, 1);
	TextDrawSetSelectable(TD_Info, 0);

	// No Kill Zone
	NoKill = TextDrawCreate(500.0000, 0.000000, FixGameString("!>> Nem harc zóna! Öles = Warn! <<!"));
	//NoKill = TextDrawCreate(19.000000, 422.000000, FixGameString("!>> Nem harc zóna! Öles = Warn! <<!"));
	TextDrawBackgroundColor(NoKill, -16777046);
	TextDrawFont(NoKill, 1);
	TextDrawLetterSize(NoKill, 0.199999, 1.399999);
	TextDrawColor(NoKill, 0xFF);
	TextDrawSetOutline(NoKill, 1);
	TextDrawSetProportional(NoKill, 1);

	TD_StatsBox = TextDrawCreate(61.000000, 135.000000, "_");
	TextDrawBackgroundColor(TD_StatsBox, 255);
	TextDrawFont(TD_StatsBox, 1);
	TextDrawLetterSize(TD_StatsBox, 0.800000, 22.700000);
	TextDrawColor(TD_StatsBox, -1);
	TextDrawSetOutline(TD_StatsBox, 0);
	TextDrawSetProportional(TD_StatsBox, 1);
	TextDrawSetShadow(TD_StatsBox, 1);
	TextDrawUseBox(TD_StatsBox, 1);
	TextDrawBoxColor(TD_StatsBox, 85);
	TextDrawTextSize(TD_StatsBox, 525.000000, 82.000000);

/*
	// Reload TD
	ReloadTD = TextDrawCreate(503.000000, 58.000000, "Reload");
	TextDrawBackgroundColor(ReloadTD, 0xFF);
	TextDrawFont(ReloadTD, 1);
	TextDrawLetterSize(ReloadTD, 0.299999, 1.300000);
	TextDrawColor(ReloadTD, -16776961);
	TextDrawSetOutline(ReloadTD, 1);
	TextDrawSetProportional(ReloadTD, 1);
*/
	RaceRecord = TextDrawCreate(497.000000, 214.000000, "_");
	TextDrawBackgroundColor(RaceRecord, 0xFF);
	TextDrawFont(RaceRecord, 2);
	TextDrawLetterSize(RaceRecord, 0.250000, 1.100000);
	TextDrawColor(RaceRecord, -1);
	TextDrawSetOutline(RaceRecord, 1);
	TextDrawSetProportional(RaceRecord, 1);

	FalloutTextdraw = TextDrawCreate(224.000000, 416.000000, "~r~~h~Jatekosok: ~b~~h~100~w~/~b~~h~100 ~r~~h~Objectek: ~b~~h~20~w~/~b~~h~50");
	TextDrawBackgroundColor(FalloutTextdraw, 0xFF);
	TextDrawFont(FalloutTextdraw, 2);
	TextDrawLetterSize(FalloutTextdraw, 0.310000, 1.000000);
	TextDrawColor(FalloutTextdraw, -1);
	TextDrawSetOutline(FalloutTextdraw, 1);
	TextDrawSetProportional(FalloutTextdraw, 1);
	TextDrawUseBox(FalloutTextdraw, 1);
	TextDrawBoxColor(FalloutTextdraw, 51);
	TextDrawTextSize(FalloutTextdraw, 505.000000, 15.000000);
/*
	Tele0 = TextDrawCreate(477.000000, 97.000000, "_");
	TextDrawBackgroundColor(Tele0, 0xFF);
	TextDrawFont(Tele0, 1);
	TextDrawLetterSize(Tele0, 0.280000, 1.000000);
	TextDrawColor(Tele0, 2122972159);
	TextDrawSetOutline(Tele0, 0);
	TextDrawSetProportional(Tele0, 1);
	TextDrawSetShadow(Tele0, 1);
*/
	g_XPBox = TextDrawCreate(486.000000, 421.000000, "_");
	TextDrawBackgroundColor(g_XPBox, 255);
	TextDrawFont(g_XPBox, 2);
	TextDrawLetterSize(g_XPBox, 0.899999, 0.000000);
	TextDrawColor(g_XPBox, -1);
	TextDrawSetOutline(g_XPBox, 1);
	TextDrawSetProportional(g_XPBox, 1);
	TextDrawUseBox(g_XPBox, 1);
	TextDrawBoxColor(g_XPBox, 255);
	TextDrawTextSize(g_XPBox, 557.000000, -130.000000);

	// Gangwar select textdrawok
	// Grove
	TD_SelectGrove = TextDrawCreate(126.000000, 251.000000, "_");
	TextDrawBackgroundColor(TD_SelectGrove, 16711765);
	TextDrawFont(TD_SelectGrove, 5);
	TextDrawLetterSize(TD_SelectGrove, 0.500000, 1.000000);
	TextDrawColor(TD_SelectGrove, -1);
	TextDrawSetOutline(TD_SelectGrove, 0);
	TextDrawSetProportional(TD_SelectGrove, 1);
	TextDrawSetShadow(TD_SelectGrove, 1);
	TextDrawUseBox(TD_SelectGrove, 1);
	TextDrawBoxColor(TD_SelectGrove, 0);
	TextDrawTextSize(TD_SelectGrove, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectGrove, 107);
	TextDrawSetPreviewRot(TD_SelectGrove, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectGrove, 1);

	new Text:cTD = TextDrawCreate(144.000000, 237.000000, "~g~~h~~h~Grove");
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.500000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetOutline(cTD, 0);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	// Ballas
	TD_SelectBallas = TextDrawCreate(210.000000, 251.000000, "_");
	TextDrawBackgroundColor(TD_SelectBallas, -16711851);
	TextDrawFont(TD_SelectBallas, 5);
	TextDrawLetterSize(TD_SelectBallas, 0.500000, 1.000000);
	TextDrawColor(TD_SelectBallas, -1);
	TextDrawSetOutline(TD_SelectBallas, 0);
	TextDrawSetProportional(TD_SelectBallas, 1);
	TextDrawSetShadow(TD_SelectBallas, 1);
	TextDrawUseBox(TD_SelectBallas, 1);
	TextDrawBoxColor(TD_SelectBallas, 0);
	TextDrawTextSize(TD_SelectBallas, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectBallas, 104);
	TextDrawSetPreviewRot(TD_SelectBallas, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectBallas, 1);

	cTD = TextDrawCreate(225.000000, 237.000000, "~p~Ballas");
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.500000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetOutline(cTD, 0);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	// Vagos
	TD_SelectVagos = TextDrawCreate(294.000000, 251.000000, "_");
	TextDrawBackgroundColor(TD_SelectVagos, -65451);
	TextDrawFont(TD_SelectVagos, 5);
	TextDrawLetterSize(TD_SelectVagos, 0.500000, 1.000000);
	TextDrawColor(TD_SelectVagos, -1);
	TextDrawSetOutline(TD_SelectVagos, 0);
	TextDrawSetProportional(TD_SelectVagos, 1);
	TextDrawSetShadow(TD_SelectVagos, 1);
	TextDrawUseBox(TD_SelectVagos, 1);
	TextDrawBoxColor(TD_SelectVagos, 0);
	TextDrawTextSize(TD_SelectVagos, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectVagos, 108);
	TextDrawSetPreviewRot(TD_SelectVagos, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectVagos, 1);

	cTD = TextDrawCreate(308.000000, 237.000000, "~y~~h~Vagos");
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.500000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetOutline(cTD, 0);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	// Aztecas
	TD_SelectAztecas = TextDrawCreate(378.000000, 251.000000, "_");
	TextDrawBackgroundColor(TD_SelectAztecas, 16777045);
	TextDrawFont(TD_SelectAztecas, 5);
	TextDrawLetterSize(TD_SelectAztecas, 0.500000, 1.000000);
	TextDrawColor(TD_SelectAztecas, -1);
	TextDrawSetOutline(TD_SelectAztecas, 0);
	TextDrawSetProportional(TD_SelectAztecas, 1);
	TextDrawSetShadow(TD_SelectAztecas, 1);
	TextDrawUseBox(TD_SelectAztecas, 1);
	TextDrawBoxColor(TD_SelectAztecas, 0);
	TextDrawTextSize(TD_SelectAztecas, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectAztecas, 115);
	TextDrawSetPreviewRot(TD_SelectAztecas, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectAztecas, 1);

	cTD = TextDrawCreate(390.000000, 237.000000, "~b~~h~~h~Aztecas");
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.500000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetOutline(cTD, 0);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	TD_SelectMessage = TextDrawCreate(128.000000, 204.000000, FixGameString("~r~~h~Válassz bandát!"));
	TextDrawBackgroundColor(TD_SelectMessage, 255);
	TextDrawFont(TD_SelectMessage, 0);
	TextDrawLetterSize(TD_SelectMessage, 0.780000, 2.400000);
	TextDrawColor(TD_SelectMessage, -1);
	TextDrawSetOutline(TD_SelectMessage, 0);
	TextDrawSetProportional(TD_SelectMessage, 1);
	TextDrawSetShadow(TD_SelectMessage, 1);

	// CTC Select
	TD_SelectAuto = TextDrawCreate(219.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_SelectAuto, -16711851);
	TextDrawFont(TD_SelectAuto, 5);
	TextDrawLetterSize(TD_SelectAuto, 0.500000, 1.000000);
	TextDrawColor(TD_SelectAuto, -1);
	TextDrawSetProportional(TD_SelectAuto, 1);
	TextDrawSetShadow(TD_SelectAuto, 1);
	TextDrawUseBox(TD_SelectAuto, 1);
	TextDrawBoxColor(TD_SelectAuto, 0);
	TextDrawTextSize(TD_SelectAuto, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectAuto, 524);
	TextDrawSetPreviewRot(TD_SelectAuto, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectAuto, 1);

	TD_SelectHajo = TextDrawCreate(303.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_SelectHajo, -65451);
	TextDrawFont(TD_SelectHajo, 5);
	TextDrawLetterSize(TD_SelectHajo, 0.500000, 1.000000);
	TextDrawColor(TD_SelectHajo, -1);
	TextDrawSetProportional(TD_SelectHajo, 1);
	TextDrawSetShadow(TD_SelectHajo, 1);
	TextDrawUseBox(TD_SelectHajo, 1);
	TextDrawBoxColor(TD_SelectHajo, 0);
	TextDrawTextSize(TD_SelectHajo, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_SelectHajo, 446);
	TextDrawSetPreviewRot(TD_SelectHajo, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_SelectHajo, 1);

	cTD = TextDrawCreate(228.000000, 237.000000, FixGameString("Betonkeverõ"));
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.290000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetOutline(cTD, 0);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	cTD = TextDrawCreate(329.000000, 237.000000, FixGameString("Hajó"));
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 3);
	TextDrawLetterSize(cTD, 0.290000, 1.000000);
	TextDrawColor(cTD, -1);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	cTD = TextDrawCreate(228.000000, 198.000000, FixGameString("~r~~h~Válassz jarmûvet~w~!"));
	TextDrawBackgroundColor(cTD, 255);
	TextDrawFont(cTD, 0);
	TextDrawLetterSize(cTD, 0.779999, 2.400000);
	TextDrawColor(cTD, -1);
	TextDrawSetProportional(cTD, 1);
	TextDrawSetShadow(cTD, 1);

	// Weapon menü elkészítése
    BuildWeaponMenu();

	TD_Tele = TextDrawCreate(7.000000, 316.000000, "_");
	TextDrawBackgroundColor(TD_Tele, 255);
	TextDrawFont(TD_Tele, 1);
	TextDrawLetterSize(TD_Tele, 0.200000, 1.200000);
	TextDrawColor(TD_Tele, -1);
	TextDrawSetOutline(TD_Tele, 1);
	TextDrawSetProportional(TD_Tele, 1);
	TextDrawSetSelectable(TD_Tele, 0);

	new
		Text:Textdraw0,
		asd[2];

	// Házfeltörés | Kijelzõ
	Textdraw0 = TextDrawCreate(114.000000, 91.000000, "_");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 13.000005);
	TextDrawColor(Textdraw0, -175437162);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, 255);
	TextDrawTextSize(Textdraw0, 233.000000, 12.000000);

	// Teljes háttér
	Textdraw0 = TextDrawCreate(116.000000, 93.000000, "_");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 12.500003);
	TextDrawColor(Textdraw0, -175437162);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, 286331391);
	TextDrawTextSize(Textdraw0, 231.000000, 12.000000);

	// OK Gomb
	Textdraw0 = TextDrawCreate(154.000000, 129.000000, "OK");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 1.000000);
	TextDrawColor(Textdraw0, 45550847);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, -175437162);
	TextDrawTextSize(Textdraw0, 179.000000, 11.000000);
	TextDrawSetSelectable(Textdraw0, true);

	// Fehér csík
	Textdraw0 = TextDrawCreate(120.000000, 102.000000, "_");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 1.900000);
	TextDrawColor(Textdraw0, -1);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, -1);
	TextDrawTextSize(Textdraw0, 225.000000, 2.000000);

	// Fekete háttér
	Textdraw0 = TextDrawCreate(121.000000, 103.000000, "_");
	TextDrawBackgroundColor(Textdraw0, 255);
	TextDrawFont(Textdraw0, 1);
	TextDrawLetterSize(Textdraw0, 0.500000, 1.600000);
	TextDrawColor(Textdraw0, -175437162);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawSetProportional(Textdraw0, 1);
	TextDrawSetShadow(Textdraw0, 1);
	TextDrawUseBox(Textdraw0, 1);
	TextDrawBoxColor(Textdraw0, 255);
	TextDrawTextSize(Textdraw0, 224.000000, 12.000000);

	#define TEXT_COLOR 0xFAFA00FF

	for(i = 0; i != 10; i++)
	{
		format(asd, sizeof(asd), "%s", Gombok[0][i]);
		Textdraw0 = TextDrawCreate(115.000000 + Float:(i * 12.0), 150.000000, asd);
		TextDrawBackgroundColor(Textdraw0, 255);
		TextDrawFont(Textdraw0, 1);
		TextDrawLetterSize(Textdraw0, 0.3840000, 1.260000);
		TextDrawColor(Textdraw0, TEXT_COLOR); // -2686721
		TextDrawSetOutline(Textdraw0, 0);
		TextDrawSetProportional(Textdraw0, 1);
		TextDrawSetShadow(Textdraw0, 1);

		//TextDrawUseBox(Textdraw0, 1);
		//TextDrawBoxColor(Textdraw0, 255);
		TextDrawTextSize(Textdraw0, 115.000000 + Float:((i+1) * 12.0), 8.000000);

		TextDrawSetSelectable(Textdraw0, true);

		if(g_KijelzoStartTD == -1) g_KijelzoStartTD = _:Textdraw0;
	}

	for(i = 0; i != 10; i++)
	{
		format(asd, sizeof(asd), "%s", Gombok[1][i]);
		Textdraw0 = TextDrawCreate(115.000000 + Float:(i * 12.0), 165.000000, asd);
		TextDrawBackgroundColor(Textdraw0, 255);
		TextDrawFont(Textdraw0, 1);
		TextDrawLetterSize(Textdraw0, 0.3840000, 1.260000);
		TextDrawColor(Textdraw0, TEXT_COLOR);
		TextDrawSetOutline(Textdraw0, 0);
		TextDrawSetProportional(Textdraw0, 1);
		TextDrawSetShadow(Textdraw0, 1);

		//TextDrawUseBox(Textdraw0, 1);
		//TextDrawBoxColor(Textdraw0, 255);
		TextDrawTextSize(Textdraw0, 115.000000 + Float:((i+1) * 12.0), 12.000000);

		TextDrawSetSelectable(Textdraw0, true);
	}

	for(i = 0; i != 9; i++)
	{
		format(asd, sizeof(asd), "%s", Gombok[2][i]);
		Textdraw0 = TextDrawCreate(115.000000 + Float:(i * 12.0), 180.000000, asd);
		TextDrawBackgroundColor(Textdraw0, 255);
		TextDrawFont(Textdraw0, 1);
		TextDrawLetterSize(Textdraw0, 0.3840000, 1.260000);
		TextDrawColor(Textdraw0, TEXT_COLOR);
		TextDrawSetOutline(Textdraw0, 0);
		TextDrawSetProportional(Textdraw0, 1);
		TextDrawSetShadow(Textdraw0, 1);

		//TextDrawUseBox(Textdraw0, 1);
		//TextDrawBoxColor(Textdraw0, 255);
		TextDrawTextSize(Textdraw0, 115.000000 + Float:((i+1) * 12.0), 12.000000);

		TextDrawSetSelectable(Textdraw0, true);

	}

	for(i = 0; i != 7; i++)
	{
		format(asd, sizeof(asd), "%s", Gombok[3][i]);
		Textdraw0 = TextDrawCreate(115.000000 + Float:(i * 12.0), 195.000000, asd);
		TextDrawBackgroundColor(Textdraw0, 255);
		TextDrawFont(Textdraw0, 1);
		TextDrawLetterSize(Textdraw0, 0.3840000, 1.260000);
		TextDrawColor(Textdraw0, TEXT_COLOR);
		TextDrawSetOutline(Textdraw0, 0);
		TextDrawSetProportional(Textdraw0, 1);
		TextDrawSetShadow(Textdraw0, 1);

		//TextDrawUseBox(Textdraw0, 1);
		//TextDrawBoxColor(Textdraw0, 255);
		TextDrawTextSize(Textdraw0, 115.000000 + Float:((i+1) * 12.0), 12.000000);

		TextDrawSetSelectable(Textdraw0, true);
	}

	TD_DMInfo[0] = TextDrawCreate(-6.000000, 448.000000, "_");
	TextDrawBackgroundColor(TD_DMInfo[0], 255);
	TextDrawFont(TD_DMInfo[0], 1);
	TextDrawLetterSize(TD_DMInfo[0], 0.500000, -2.599999);
	TextDrawColor(TD_DMInfo[0], -1);
	TextDrawSetOutline(TD_DMInfo[0], 0);
	TextDrawSetProportional(TD_DMInfo[0], 1);
	TextDrawSetShadow(TD_DMInfo[0], 1);
	TextDrawUseBox(TD_DMInfo[0], 1);
	TextDrawBoxColor(TD_DMInfo[0], 85);
	TextDrawTextSize(TD_DMInfo[0], 640.000000, 31.000000);
	TextDrawSetSelectable(TD_DMInfo[0], 0);

	TD_DMInfo[1] = TextDrawCreate(-5.000000, 428.000000, "_");
	TextDrawBackgroundColor(TD_DMInfo[1], 255);
	TextDrawFont(TD_DMInfo[1], 1);
	TextDrawLetterSize(TD_DMInfo[1], 0.500000, -0.600000);
	TextDrawColor(TD_DMInfo[1], -205);
	TextDrawSetOutline(TD_DMInfo[1], 0);
	TextDrawSetProportional(TD_DMInfo[1], 1);
	TextDrawSetShadow(TD_DMInfo[1], 1);
	TextDrawUseBox(TD_DMInfo[1], 1);
	TextDrawBoxColor(TD_DMInfo[1], -240);
	TextDrawTextSize(TD_DMInfo[1], 636.000000, 42.000000);
	TextDrawSetSelectable(TD_DMInfo[1], 0);

	TD_DMInfo[2] = TextDrawCreate(-5.000000, 449.000000, "_");
	TextDrawBackgroundColor(TD_DMInfo[2], 255);
	TextDrawFont(TD_DMInfo[2], 1);
	TextDrawLetterSize(TD_DMInfo[2], 0.500000, -0.600000);
	TextDrawColor(TD_DMInfo[2], -205);
	TextDrawSetOutline(TD_DMInfo[2], 0);
	TextDrawSetProportional(TD_DMInfo[2], 1);
	TextDrawSetShadow(TD_DMInfo[2], 1);
	TextDrawUseBox(TD_DMInfo[2], 1);
	TextDrawBoxColor(TD_DMInfo[2], -240);
	TextDrawTextSize(TD_DMInfo[2], 636.000000, 42.000000);
	TextDrawSetSelectable(TD_DMInfo[2], 0);

	TD_DMInfo[3] = TextDrawCreate(0.000000, 431.000000, "~>~~b~~h~~h~20/60~<~");
	TextDrawBackgroundColor(TD_DMInfo[3], 255);
	TextDrawFont(TD_DMInfo[3], 1);
	TextDrawLetterSize(TD_DMInfo[3], 0.280000, 1.100000);
	TextDrawColor(TD_DMInfo[3], 869072895);
	TextDrawSetOutline(TD_DMInfo[3], 1);
	TextDrawSetProportional(TD_DMInfo[3], 1);
	TextDrawSetSelectable(TD_DMInfo[3], 0);

	TD_DMInfo[5] = TextDrawCreate(454.000000, 427.000000, "MFR - MaXXiMuM FreeRoam");
	TextDrawBackgroundColor(TD_DMInfo[5], 170);
	TextDrawFont(TD_DMInfo[5], 1);
	TextDrawLetterSize(TD_DMInfo[5], 0.379999, 1.000000);
	TextDrawColor(TD_DMInfo[5], -1717986919);
	TextDrawSetOutline(TD_DMInfo[5], 1);
	TextDrawSetProportional(TD_DMInfo[5], 1);
	TextDrawSetSelectable(TD_DMInfo[5], 0);

	for(i = 0; i != MAX_LANGUAGE; i++)
	{
		TD_DMInfoHelp[i] = TextDrawCreate(422.0, 411.0, "_");
		TextDrawBackgroundColor(TD_DMInfoHelp[i], 255);
		TextDrawFont(TD_DMInfoHelp[i], 1);
		TextDrawLetterSize(TD_DMInfoHelp[i], 0.200000, 1.000000);
		TextDrawColor(TD_DMInfoHelp[i], -1);
		TextDrawSetOutline(TD_DMInfoHelp[i], 1);
		TextDrawSetProportional(TD_DMInfoHelp[i], 1);
		TextDrawSetSelectable(TD_DMInfoHelp[i], 0);
	}

	/*TD_DMInfo[6] = TextDrawCreate(545.000000, 435.000000, WEB_ADDRESS);
	TextDrawBackgroundColor(TD_DMInfo[6], 255);
	TextDrawFont(TD_DMInfo[6], 1);
	TextDrawLetterSize(TD_DMInfo[6], 0.270000, 1.000000);
	TextDrawColor(TD_DMInfo[6], 872363007);
	TextDrawSetOutline(TD_DMInfo[6], 1);
	TextDrawSetProportional(TD_DMInfo[6], 1);
	TextDrawSetSelectable(TD_DMInfo[6], 0);
	*/
	// Black Box
	T_BlackBox[0] = TextDrawCreate(644.000000, 1.000000, "_");
	TextDrawBackgroundColor(T_BlackBox[0], 0xFF);
	TextDrawFont(T_BlackBox[0], 1);
	TextDrawLetterSize(T_BlackBox[0], 0.639999, 3.599998);
	TextDrawColor(T_BlackBox[0], -1);
	TextDrawSetOutline(T_BlackBox[0], 0);
	TextDrawSetProportional(T_BlackBox[0], 1);
	TextDrawSetShadow(T_BlackBox[0], 1);
	TextDrawUseBox(T_BlackBox[0], 1);
	TextDrawBoxColor(T_BlackBox[0], 0xFF);
	TextDrawTextSize(T_BlackBox[0], -2.000000, -45.000000);

    T_BlackBox[1] = TextDrawCreate(644.000000, 414.000000, "_");
	TextDrawBackgroundColor(T_BlackBox[1], 0xFF);
	TextDrawFont(T_BlackBox[1], 1);
	TextDrawLetterSize(T_BlackBox[1], 0.639999, 3.599998);
	TextDrawColor(T_BlackBox[1], -1);
	TextDrawSetOutline(T_BlackBox[1], 0);
	TextDrawSetProportional(T_BlackBox[1], 1);
	TextDrawSetShadow(T_BlackBox[1], 1);
	TextDrawUseBox(T_BlackBox[1], 1);
	TextDrawBoxColor(T_BlackBox[1], 0xFF);
	TextDrawTextSize(T_BlackBox[1], -2.000000, -45.000000);

	TD_Kezdes0 = TextDrawCreate(643.000000, -56.000000, "_");
	TextDrawBackgroundColor(TD_Kezdes0, 255);
	TextDrawFont(TD_Kezdes0, 1);
	TextDrawLetterSize(TD_Kezdes0, 1.769999, 12.800002);
	TextDrawColor(TD_Kezdes0, -1);
	TextDrawSetOutline(TD_Kezdes0, 0);
	TextDrawSetProportional(TD_Kezdes0, 1);
	TextDrawSetShadow(TD_Kezdes0, 1);
	TextDrawUseBox(TD_Kezdes0, 1);
	TextDrawBoxColor(TD_Kezdes0, 255);
	TextDrawTextSize(TD_Kezdes0, -10.000000, -15.000000);
	TextDrawSetSelectable(TD_Kezdes0, 0);

	TD_Kezdes1 = TextDrawCreate(643.000000, 397.000000, "_");
	TextDrawBackgroundColor(TD_Kezdes1, 255);
	TextDrawFont(TD_Kezdes1, 1);
	TextDrawLetterSize(TD_Kezdes1, 1.769999, 12.800002);
	TextDrawColor(TD_Kezdes1, -1);
	TextDrawSetOutline(TD_Kezdes1, 0);
	TextDrawSetProportional(TD_Kezdes1, 1);
	TextDrawSetShadow(TD_Kezdes1, 1);
	TextDrawUseBox(TD_Kezdes1, 1);
	TextDrawBoxColor(TD_Kezdes1, 255);
	TextDrawTextSize(TD_Kezdes1, -10.000000, -15.000000);
	TextDrawSetSelectable(TD_Kezdes1, 0);

	TD_Kezdes2 = TextDrawCreate(500.000000, 114.000000, "_");
	TextDrawBackgroundColor(TD_Kezdes2, 255);
	TextDrawFont(TD_Kezdes2, 1);
	TextDrawLetterSize(TD_Kezdes2, 0.800000, 24.699998);
	TextDrawColor(TD_Kezdes2, -1);
	TextDrawSetOutline(TD_Kezdes2, 0);
	TextDrawSetProportional(TD_Kezdes2, 1);
	TextDrawSetShadow(TD_Kezdes2, 1);
	TextDrawUseBox(TD_Kezdes2, 1);
	TextDrawBoxColor(TD_Kezdes2, 119);
	TextDrawTextSize(TD_Kezdes2, 140.000000, 0.000000);
	TextDrawSetSelectable(TD_Kezdes2, 0);

	TD_Kezdes3 = TextDrawCreate(358.000000, 264.000000, "SAMPlogo");
	TextDrawBackgroundColor(TD_Kezdes3, 0);
	TextDrawFont(TD_Kezdes3, 5);
	TextDrawLetterSize(TD_Kezdes3, 0.500000, 1.000000);
	TextDrawColor(TD_Kezdes3, -1);
	TextDrawSetOutline(TD_Kezdes3, 1);
	TextDrawSetProportional(TD_Kezdes3, 1);
	TextDrawUseBox(TD_Kezdes3, 1);
	TextDrawBoxColor(TD_Kezdes3, 119);
	TextDrawTextSize(TD_Kezdes3, 111.000000, 101.000000);
	TextDrawSetPreviewModel(TD_Kezdes3, 18749);
	TextDrawSetPreviewRot(TD_Kezdes3, 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetSelectable(TD_Kezdes3, 0);

	TD_Kezdes4 = TextDrawCreate(258.000000, 133.000000, FixGameString("Üdvözlünk a"));
	TextDrawBackgroundColor(TD_Kezdes4, 255);
	TextDrawFont(TD_Kezdes4, 1);
	TextDrawLetterSize(TD_Kezdes4, 0.569998, 1.799999);
	TextDrawColor(TD_Kezdes4, 65535);
	TextDrawSetOutline(TD_Kezdes4, 1);
	TextDrawSetProportional(TD_Kezdes4, 1);
	TextDrawSetSelectable(TD_Kezdes4, 0);

	TD_Kezdes5 = TextDrawCreate(178.000000, 167.000000, "~l~Ma~r~~h~XX~l~iMuM");
	TextDrawBackgroundColor(TD_Kezdes5, 872363007);
	TextDrawFont(TD_Kezdes5, 1);
	TextDrawLetterSize(TD_Kezdes5, 0.779999, 2.799998);
	TextDrawColor(TD_Kezdes5, -1);
	TextDrawSetOutline(TD_Kezdes5, 1);
	TextDrawSetProportional(TD_Kezdes5, 1);
	TextDrawSetSelectable(TD_Kezdes5, 0);

	TD_Kezdes6 = TextDrawCreate(151.000000, 180.000000, "kocsi");
	TextDrawBackgroundColor(TD_Kezdes6, 0);
	TextDrawFont(TD_Kezdes6, 5);
	TextDrawLetterSize(TD_Kezdes6, 0.500000, 1.000000);
	TextDrawColor(TD_Kezdes6, -1);
	TextDrawSetOutline(TD_Kezdes6, 1);
	TextDrawSetProportional(TD_Kezdes6, 1);
	TextDrawUseBox(TD_Kezdes6, 1);
	TextDrawBoxColor(TD_Kezdes6, 119);
	TextDrawTextSize(TD_Kezdes6, 111.000000, 101.000000);
	TextDrawSetPreviewModel(TD_Kezdes6, 411);
	TextDrawSetPreviewRot(TD_Kezdes6, -10.000000, 0.000000, -340.000000, 1.000000);
	TextDrawSetSelectable(TD_Kezdes6, 0);
	TextDrawSetPreviewVehCol(TD_Kezdes6, 3, 3);

	TD_Kezdes7 = TextDrawCreate(329.000000, 167.000000, "~l~FreeRoam");
	TextDrawBackgroundColor(TD_Kezdes7, -1);
	TextDrawFont(TD_Kezdes7, 1);
	TextDrawLetterSize(TD_Kezdes7, 0.749998, 2.799998);
	TextDrawColor(TD_Kezdes7, -1);
	TextDrawSetOutline(TD_Kezdes7, 1);
	TextDrawSetProportional(TD_Kezdes7, 1);
	TextDrawSetSelectable(TD_Kezdes7, 0);

	TD_Kezdes8 = TextDrawCreate(375.000000, 192.000000, "szerveren");
	TextDrawBackgroundColor(TD_Kezdes8, 255);
	TextDrawFont(TD_Kezdes8, 1);
	TextDrawLetterSize(TD_Kezdes8, 0.500000, 2.000000);
	TextDrawColor(TD_Kezdes8, -2686721);
	TextDrawSetOutline(TD_Kezdes8, 1);
	TextDrawSetProportional(TD_Kezdes8, 1);
	TextDrawSetSelectable(TD_Kezdes8, 0);

	TD_Kezdes9 = TextDrawCreate(233.000000, 257.000000, FixGameString("Jó játékot kívánunk~n~          =)"));
	TextDrawBackgroundColor(TD_Kezdes9, 255);
	TextDrawFont(TD_Kezdes9, 1);
	TextDrawLetterSize(TD_Kezdes9, 0.500000, 2.000000);
	TextDrawColor(TD_Kezdes9, 65535);
	TextDrawSetOutline(TD_Kezdes9, 1);
	TextDrawSetProportional(TD_Kezdes9, 1);
	TextDrawSetSelectable(TD_Kezdes9, 0);

	TD_Kezdes10 = TextDrawCreate(456.000000, 316.000000, "~y~" #FAKECLIENT_VERSION "");
	TextDrawBackgroundColor(TD_Kezdes10, 255);
	TextDrawFont(TD_Kezdes10, 2);
	TextDrawLetterSize(TD_Kezdes10, 0.340000, 1.000000);
	TextDrawColor(TD_Kezdes10, -1);
	TextDrawSetOutline(TD_Kezdes10, 1);
	TextDrawSetProportional(TD_Kezdes10, 1);
	TextDrawSetSelectable(TD_Kezdes10, 0);

	// 277
	TD_Kezdes11 = TextDrawCreate((strlen(#SERVER_VERSION) > 3) ? (257.000000) : (277.000000), 211.000000, "v" #SERVER_VERSION "");
	TextDrawBackgroundColor(TD_Kezdes11, 255);
	TextDrawFont(TD_Kezdes11, 2);
	TextDrawLetterSize(TD_Kezdes11, 0.910000, 3.399998);
	TextDrawColor(TD_Kezdes11, -16711681);
	TextDrawSetOutline(TD_Kezdes11, 1);
	TextDrawSetProportional(TD_Kezdes11, 1);
	TextDrawSetSelectable(TD_Kezdes11, 0);

	TD_Kezdes12 = TextDrawCreate(151.000000, 318.000000, WEB_ADDRESS);
	TextDrawBackgroundColor(TD_Kezdes12, 255);
	TextDrawFont(TD_Kezdes12, 1);
	TextDrawLetterSize(TD_Kezdes12, 0.349999, 1.100000);
	TextDrawColor(TD_Kezdes12, 16711935);
	TextDrawSetOutline(TD_Kezdes12, 1);
	TextDrawSetProportional(TD_Kezdes12, 1);
	TextDrawSetSelectable(TD_Kezdes12, 0);

	TD_Kezdes13 = TextDrawCreate(371.000000, 178.000000, "kocsi 2");
	TextDrawBackgroundColor(TD_Kezdes13, 0);
	TextDrawFont(TD_Kezdes13, 5);
	TextDrawLetterSize(TD_Kezdes13, 0.500000, 1.000000);
	TextDrawColor(TD_Kezdes13, -1);
	TextDrawSetOutline(TD_Kezdes13, 1);
	TextDrawSetProportional(TD_Kezdes13, 1);
	TextDrawUseBox(TD_Kezdes13, 1);
	TextDrawBoxColor(TD_Kezdes13, 119);
	TextDrawTextSize(TD_Kezdes13, 111.000000, 101.000000);
	TextDrawSetPreviewModel(TD_Kezdes13, 411);
	TextDrawSetPreviewRot(TD_Kezdes13, -10.000000, 0.000000, 340.000000, 1.000000);
	TextDrawSetSelectable(TD_Kezdes13, 0);
	TextDrawSetPreviewVehCol(TD_Kezdes13, 3, 3);

	TD_CLAN_Log = TextDrawCreate(126.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_CLAN_Log, 16711765);
	TextDrawFont(TD_CLAN_Log, 5);
	TextDrawLetterSize(TD_CLAN_Log, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Log, -1);
	TextDrawSetOutline(TD_CLAN_Log, 0);
	TextDrawSetProportional(TD_CLAN_Log, 1);
	TextDrawSetShadow(TD_CLAN_Log, 1);
	TextDrawUseBox(TD_CLAN_Log, 1);
	TextDrawBoxColor(TD_CLAN_Log, 0);
	TextDrawTextSize(TD_CLAN_Log, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_CLAN_Log, 1277);
	TextDrawSetPreviewRot(TD_CLAN_Log, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_CLAN_Log, true);

	TD_CLAN_Balance = TextDrawCreate(210.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_CLAN_Balance, -568802219);
	TextDrawFont(TD_CLAN_Balance, 5);
	TextDrawLetterSize(TD_CLAN_Balance, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Balance, -1);
	TextDrawSetOutline(TD_CLAN_Balance, 0);
	TextDrawSetProportional(TD_CLAN_Balance, 1);
	TextDrawSetShadow(TD_CLAN_Balance, 1);
	TextDrawUseBox(TD_CLAN_Balance, 1);
	TextDrawBoxColor(TD_CLAN_Balance, 872363007);
	TextDrawTextSize(TD_CLAN_Balance, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_CLAN_Balance, 1239);
	TextDrawSetPreviewRot(TD_CLAN_Balance, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_CLAN_Balance, true);

	TD_CLAN_Deposit = TextDrawCreate(294.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_CLAN_Deposit, 16711765);
	TextDrawFont(TD_CLAN_Deposit, 5);
	TextDrawLetterSize(TD_CLAN_Deposit, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Deposit, -1);
	TextDrawSetOutline(TD_CLAN_Deposit, 0);
	TextDrawSetProportional(TD_CLAN_Deposit, 1);
	TextDrawSetShadow(TD_CLAN_Deposit, 1);
	TextDrawUseBox(TD_CLAN_Deposit, 1);
	TextDrawBoxColor(TD_CLAN_Deposit, 0);
	TextDrawTextSize(TD_CLAN_Deposit, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_CLAN_Deposit, 1212);
	TextDrawSetPreviewRot(TD_CLAN_Deposit, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_CLAN_Deposit, true);

	TD_CLAN_Withdraw = TextDrawCreate(378.000000, 251.000000, "New Textdraw");
	TextDrawBackgroundColor(TD_CLAN_Withdraw, 16777045);
	TextDrawFont(TD_CLAN_Withdraw, 5);
	TextDrawLetterSize(TD_CLAN_Withdraw, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Withdraw, -1);
	TextDrawSetOutline(TD_CLAN_Withdraw, 0);
	TextDrawSetProportional(TD_CLAN_Withdraw, 1);
	TextDrawSetShadow(TD_CLAN_Withdraw, 1);
	TextDrawUseBox(TD_CLAN_Withdraw, 1);
	TextDrawBoxColor(TD_CLAN_Withdraw, 0);
	TextDrawTextSize(TD_CLAN_Withdraw, 84.000000, 62.000000);
	TextDrawSetPreviewModel(TD_CLAN_Withdraw, 1274);
	TextDrawSetPreviewRot(TD_CLAN_Withdraw, -35.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetSelectable(TD_CLAN_Withdraw, true);

	TD_CLAN_Font = TextDrawCreate(256.000000, 203.000000, "~r~~h~Valassz muveletet!");
	TextDrawBackgroundColor(TD_CLAN_Font, 255);
	TextDrawFont(TD_CLAN_Font, 0);
	TextDrawLetterSize(TD_CLAN_Font, 0.779999, 2.400000);
	TextDrawColor(TD_CLAN_Font, -1);
	TextDrawSetOutline(TD_CLAN_Font, 0);
	TextDrawSetProportional(TD_CLAN_Font, 1);
	TextDrawSetShadow(TD_CLAN_Font, 1);
	TextDrawSetSelectable(TD_CLAN_Font, 0);

	TextDrawCreate(144.000000, 237.000000, "~g~~h~~h~log");
	TextDrawBackgroundColor(TD_CLAN_Font + Text:1, 255);
	TextDrawFont(TD_CLAN_Font + Text:1, 3);
	TextDrawLetterSize(TD_CLAN_Font + Text:1, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Font + Text:1, -1);
	TextDrawSetOutline(TD_CLAN_Font + Text:1, 0);
	TextDrawSetProportional(TD_CLAN_Font + Text:1, 1);
	TextDrawSetShadow(TD_CLAN_Font + Text:1, 1);
	TextDrawSetSelectable(TD_CLAN_Font + Text:1, 0);

	TextDrawCreate(225.000000, 237.000000, "~b~egyenleg");
	TextDrawBackgroundColor(TD_CLAN_Font + Text:2, 255);
	TextDrawFont(TD_CLAN_Font + Text:2, 3);
	TextDrawLetterSize(TD_CLAN_Font + Text:2, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Font + Text:2, -1);
	TextDrawSetOutline(TD_CLAN_Font + Text:2, 0);
	TextDrawSetProportional(TD_CLAN_Font + Text:2, 1);
	TextDrawSetShadow(TD_CLAN_Font + Text:2, 1);
	TextDrawSetSelectable(TD_CLAN_Font + Text:2, 0);

	TextDrawCreate(308.000000, 237.000000, FixGameString("~b~~h~betétel"));
	
	
	
	
	TextDrawBackgroundColor(TD_CLAN_Font + Text:3, 255);
	TextDrawFont(TD_CLAN_Font + Text:3, 3);
	TextDrawLetterSize(TD_CLAN_Font + Text:3, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Font + Text:3, -1);
	TextDrawSetOutline(TD_CLAN_Font + Text:3, 0);
	TextDrawSetProportional(TD_CLAN_Font + Text:3, 1);
	TextDrawSetShadow(TD_CLAN_Font + Text:3, 1);
	TextDrawSetSelectable(TD_CLAN_Font + Text:3, 0);

	TextDrawCreate(390.000000, 237.000000, FixGameString("~b~~h~kivétel"));
	TextDrawBackgroundColor(TD_CLAN_Font + Text:4, 255);
	TextDrawFont(TD_CLAN_Font + Text:4, 3);
	TextDrawLetterSize(TD_CLAN_Font + Text:4, 0.500000, 1.000000);
	TextDrawColor(TD_CLAN_Font + Text:4, -1);
	TextDrawSetOutline(TD_CLAN_Font + Text:4, 0);
	TextDrawSetProportional(TD_CLAN_Font + Text:4, 1);
	TextDrawSetShadow(TD_CLAN_Font + Text:4, 1);
	TextDrawSetSelectable(TD_CLAN_Font + Text:4, 0);

	TD_CMDListAlatt[0] = TextDrawCreate(230.000000, 375.000000, "<< Vissza"); //358
	TextDrawBackgroundColor(TD_CMDListAlatt[0], 255);
	TextDrawFont(TD_CMDListAlatt[0], 1);
	TextDrawLetterSize(TD_CMDListAlatt[0], 0.439999, 1.600000);
	TextDrawColor(TD_CMDListAlatt[0], 214374655);
	TextDrawSetOutline(TD_CMDListAlatt[0], 1);
	TextDrawSetProportional(TD_CMDListAlatt[0], 1);
	TextDrawUseBox(TD_CMDListAlatt[0], 0);
	TextDrawBoxColor(TD_CMDListAlatt[0], 255);
	TextDrawTextSize(TD_CMDListAlatt[0], 311.000000, 10.000000);
	TextDrawSetSelectable(TD_CMDListAlatt[0], 1);

	TD_CMDListAlatt[1] = TextDrawCreate(336.000000, 375.000000, "Tovbb >>"); //358
	TextDrawBackgroundColor(TD_CMDListAlatt[1], 255);
	TextDrawFont(TD_CMDListAlatt[1], 1);
	TextDrawLetterSize(TD_CMDListAlatt[1], 0.439999, 1.600000);
	TextDrawColor(TD_CMDListAlatt[1], 214374655);
	TextDrawSetOutline(TD_CMDListAlatt[1], 1);
	TextDrawSetProportional(TD_CMDListAlatt[1], 1);
	TextDrawUseBox(TD_CMDListAlatt[1], 0);
	TextDrawBoxColor(TD_CMDListAlatt[1], 255);
	TextDrawTextSize(TD_CMDListAlatt[1], 420.000000, 10.000000);
	TextDrawSetSelectable(TD_CMDListAlatt[1], 1);

	TD_SpecBox = TextDrawCreate(496.000000, 149.000000, "_");
	TextDrawBackgroundColor(TD_SpecBox, 255);
	TextDrawFont(TD_SpecBox, 1);
	TextDrawLetterSize(TD_SpecBox, 0.500000, 22.100000);
	TextDrawColor(TD_SpecBox, -1);
	TextDrawSetOutline(TD_SpecBox, 0);
	TextDrawSetProportional(TD_SpecBox, 1);
	TextDrawSetShadow(TD_SpecBox, 1);
	TextDrawUseBox(TD_SpecBox, 1);
	TextDrawBoxColor(TD_SpecBox, 85);
	TextDrawTextSize(TD_SpecBox, 632.000000, 15.000000); //125
	TextDrawSetSelectable(TD_SpecBox, 0);

	// Infók Rendõrség:
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 1538.3076,-1619.0922,13.5469, 15.0, .worldid = 0); // LS
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 1544.5829,-1619.6107,13.5546, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -1576.1631,653.4169,7.1875, 15.0, .worldid = 0); // SF
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -1569.7400,653.3873,7.1875, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -1639.5602,673.9633,7.1875, 15.0, .worldid = 0); // SF 2
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 2234.3938,2461.3862,10.8203, 15.0, .worldid = 0); // LV
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 2241.2456,2461.1406,10.8203, 15.0, .worldid = 0);

	// Hill House
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -646.6502,950.5594,12.1328, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -646.5551,951.9669,12.2554, 15.0, .worldid = 0);

	// Admin Castle
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -2677.5029,1932.5062,39.4216, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, -2678.5938,1935.9351,39.5887, 15.0, .worldid = 0);

	// MyHouse
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 1000.0327,-647.0269,121.4887, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Kinyitás {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Becsukás{" #XCOLOR_WHITE "}: {" #XCOLOR_GOLD "}NUM 6", COLOR_BLUE, 998.9766,-644.5676,121.6755, 15.0, .worldid = 0);

	// Lift //
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 1384.4702,-1148.4922,23.8281, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 1538.4000,-1233.3960,17.4063, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 1446.5057,-1036.1998,23.6563, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 1527.5319,-1061.5916,25.0625, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 1550.3380,-1152.5481,24.0703, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 357.1593,-1473.9927,36.0273, 15.0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Fel {" #XCOLOR_RED "}& {" #XCOLOR_BLUE "}Le{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 6\n{" #XCOLOR_GOLD "}Megállítás{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}NUM 4\n{" #XCOLOR_SAMP "}Sebesség állítása{" #XCOLOR_WHITE "}: {" #XCOLOR_GREEN "}/liftspeed", COLOR_BLUE, 313.1021,-1607.0325,34.1046, 15.0, .worldid = 0);

	// Weaponshop //
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 314.1578,-133.6635,999.6016, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 307.9943,-141.4633,999.6016, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 313.5412,-138.4848,1004.0625, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 295.2427,-37.9942,1001.5156, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 295.5363,-80.5298,1001.5156, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 290.3167,-109.5005,1001.5156, 10.0);
    CreateDynamic3DTextLabel(!"Fegyvervásárlás:\n{" #XCOLOR_YELLOW "}/weapons", COLOR_WHITE, 312.8623,-165.5146,999.6010, 10.0);

	// Special 3D //
    CreateDynamic3DTextLabel(!"Regisztrálj a szerver weboldalán! \n{" #XCOLOR_BLUE2 "}" #WEB_ADDRESS "", COLOR_LIGHTGREEN, 420.5285,2531.2734,16.6108, .worldid = 0);
    CreateDynamic3DTextLabel(!"Ha betartod a szabályokat, \nakkor nem lesz probléma.", COLOR_LIGHTGREEN, -2629.4771,1369.7699,7.0995, .worldid = 0);

	// Rocket 3D //
    CreateDynamic3DTextLabel(!"Ide állj be a {" #XCOLOR_YELLOW "}kocsival{" #XCOLOR_DEFAULT "}!", COLOR_ORANGE, -772.6851,1558.7614,27.1172, .testlos = 0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Sebesség állítása: \n{" #XCOLOR_BLUE3 "}/rocketspeed", COLOR_GREEN, -764.1938,1565.8739,26.9882, .testlos = 0, .worldid = 0);

    // Rocket 3D <2> //
    CreateDynamic3DTextLabel(!"Ide állj be a {" #XCOLOR_YELLOW "}kocsival{" #XCOLOR_DEFAULT "}!", COLOR_ORANGE, -2294.6782,150.4095,35.4597, .testlos = 0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Ide állj be a {" #XCOLOR_YELLOW "}kocsival{" #XCOLOR_DEFAULT "}!", COLOR_ORANGE, -2303.0693,150.2667,35.7897, .testlos = 0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Ide állj be a {" #XCOLOR_YELLOW "}kocsival{" #XCOLOR_DEFAULT "}!", COLOR_ORANGE, -2310.9500,150.2207,35.4497, .testlos = 0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Sebesség állítása: \n{" #XCOLOR_BLUE3 "}/rocketspeed", COLOR_GREEN, -2303.0813,164.5364,35.3125, .testlos = 0, .worldid = 0);

	// Spawn 3D
    CreateDynamic3DTextLabel(!"Fegyvervásárlás", COLOR_PINK, 2114.2886,1277.7421,10.1537, .testlos = 0, .worldid = 0);
    CreateDynamic3DTextLabel(!"Teleportálás", COLOR_PINK, 2113.4009,1293.7059,10.4441, .testlos = 0, .worldid = 0, .drawdistance = 15.0);

	g_SpawnPickup[0] = CreateDynamicPickup(362, 19, 2114.2886,1277.7421,10.1537);
	g_SpawnPickup[1] = CreateDynamicPickup(19131, 19, 2113.4009,1293.7059,10.4441);
	g_SpawnPickup[2] = CreateDynamicPickup(1239, 19, 2114.0017,1274.4938,10.2414);
	g_SpawnPickup[3] = CreateDynamicPickup(1277, 19, 2113.6667,1297.0725,10.4121);
    CreateDynamicPickup(370, 2, 2114.5806,1301.7090,10.5504); // Jetpack

	// Stunter
	AddPlayerClass(19, 1958.3783, 1343.1572, 15.3746, 270.1425, 10, 11, 12, 13, 14, 15);
	AddPlayerClass(202, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);
	AddPlayerClass(55, 1958.3783, 1343.1572, 15.3746, 270.1425, 0, 0, 0, 0, 0, 0);

	// Drifter
	AddPlayerClass(23,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);
	AddPlayerClass(29,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);
	AddPlayerClass(18,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);

	// Jumper
	AddPlayerClass(192,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);
	AddPlayerClass(285,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);
	AddPlayerClass(93,1958.3783,1343.1572,15.3746,270.1425, 0, 0,  0, 0,  0, 0);

	// Mozgó Objectok
	CreateDynamicObjectEx(3095, -423.699341, 2201.723145, 40.926292, 0.000000, 0.000000, 0.000000); //(Cage) D
    CreateDynamicObjectEx(18367,2703.697,-1488.866,40.013,-4.297,0.0,0.0);
    RendLSGate = CreateDynamicObjectEx(987,1540.663,-1621.081,12.208,0.0,0.0,-90.000);
    RendSFGate[0] = CreateDynamicObjectEx(987,-1571.966,655.259,6.335,0.0,0.0,90.000);
    RendSFGate[1] = CreateDynamicObjectEx(987,-1640.757,676.502,4.733,0.0,0.0,90.000);
    RendLVGate = CreateDynamicObjectEx(987,2236.831,2459.097,9.584,0.0,0.0,-90.000);

	DamGate[0] = CreateDynamicObjectEx(3095, -423.692413, 2201.705811, 59.923141, 179.5182, 0.0000, 90.2409); //(Cage) U
	DamGate[1] = CreateDynamicObjectEx(3095, -423.686127, 2215.716309, 45.926369, 0.0000, 269.7591, 90.3447); //(Cage) N
	DamGate[2] = CreateDynamicObjectEx(3095, -409.680603, 2201.730713, 45.926369, 0.0000, 269.7591, 0.0000); //(Cage) O
	DamGate[3] = CreateDynamicObjectEx(3095, -423.685608, 2187.702881, 45.913692, 0.0000, 269.7591, 269.8631); //(Cage) Z
	DamGate[4] = CreateDynamicObjectEx(3095, -437.683075, 2201.718506, 45.926338, 0.0000, 269.7591, 179.6223); //(Cage) W

	ajtonyito[2] = CreateDynamicObjectEx(2395,-646.123,951.225,10.580,0.0,-91.100,0.0); // ajto 0
	MyGate = CreateDynamicObjectEx(969,999.550,-645.140,120.788,0.0,0.0,25.156);

	/////////////// Grove Strret
/*
	gGroveGate = CreateDynamicObjectEx(16773,2442.12280273,-1659.05505371,16.20638084,0.00000000,0.00000000,-90.00000000);
	gGroveLift = CreateDynamicObjectEx(16773,2534.44189453,-1637.06774902,45.93661118,90.00000000,180.00000000,270.00000000); //sarkilift 2
	CreateDynamicObjectEx(16773,2534.44531250,-1645.64550781,45.92460632,90.00000000,179.99450684,269.99450684); //sarkilift

	SetDynamicObjectMaterial(gGroveGate, 0, 18684, "MatTextures", "ab_sheetSteel");
	SetDynamicObjectMaterial(gGroveLift, 0, 18684, "MatTextures", "ab_sheetSteel");
	SetDynamicObjectMaterial(gGroveLift + 1, 0, 18684, "MatTextures", "ab_sheetSteel");

	gGroveHeli = CreateDynamicObjectEx(6959,2509.82568359,-1697.24877930,80.62731171,0.00000000,0.00000000,0.00000000); //helicoptershit
	CreateDynamicObjectEx(6959,2520.10375977,-1696.82678223,80.63930511,0.00000000,0.00000000,0.00000000);
	SetDynamicObjectMaterial(gGroveHeli, 0, 13147, "ce_ground05", "dirttracksgrass256");

	SetDynamicObjectMaterial(gGroveHeli, 1, 13147, "ce_ground05", "dirttracksgrass256");
	SetDynamicObjectMaterial(gGroveHeli + 1, 0, 13147, "ce_ground05", "dirttracksgrass256");
	SetDynamicObjectMaterial(gGroveHeli + 1, 1, 13147, "ce_ground05", "dirttracksgrass256");

	/////////////
	gGroveJobbfal = CreateDynamicObjectEx(975,2442.44555664,-1653.34533691,27.39379692,0.00000000,0.00000000,90.00000000); //object(columbiangate) (6)
	CreateDynamicObjectEx(975,2442.44531250,-1653.34472656,30.57778358,0.00000000,0.00000000,90.00000000); //object(columbiangate) (9)
	CreateDynamicObjectEx(975,2442.44433594,-1653.34375000,33.76177216,0.00000000,0.00000000,90.00000000); //object(columbiangate) (10)
	CreateDynamicObjectEx(975,2442.44482422,-1653.34350586,36.94575882,0.00000000,0.00000000,90.00000000); //object(columbiangate) (11)
	CreateDynamicObjectEx(975,2442.44458008,-1653.34289551,40.12974548,0.00000000,0.00000000,90.00000000); //object(columbiangate) (12)
	CreateDynamicObjectEx(975,2442.44433594,-1653.34228516,43.31373215,0.00000000,0.00000000,90.00000000); //object(columbiangate) (13)
	CreateDynamicObjectEx(975,2442.44409180,-1653.34167480,46.49771881,0.00000000,0.00000000,90.00000000); //object(columbiangate) (14)
	CreateDynamicObjectEx(975,2442.44384766,-1653.34106445,49.68170547,0.00000000,0.00000000,90.00000000); //object(columbiangate) (15)
	CreateDynamicObjectEx(975,2442.44360352,-1653.34045410,52.86569214,0.00000000,0.00000000,90.00000000); //object(columbiangate) (16)
	CreateDynamicObjectEx(975,2442.44335938,-1653.33984375,56.04967880,0.00000000,0.00000000,90.00000000); //object(columbiangate) (17)
	CreateDynamicObjectEx(975,2442.44311523,-1653.33923340,59.23366547,0.00000000,0.00000000,90.00000000); //object(columbiangate) (18)
	CreateDynamicObjectEx(975,2442.44238281,-1653.33789062,62.41765213,0.00000000,0.00000000,90.00000000); //object(columbiangate) (19)
	CreateDynamicObjectEx(975,2442.44262695,-1653.33801270,65.60163879,0.00000000,0.00000000,90.00000000); //object(columbiangate) (20)
	CreateDynamicObjectEx(975,2442.44238281,-1653.33740234,68.78562927,0.00000000,0.00000000,90.00000000); //object(columbiangate) (21)
	CreateDynamicObjectEx(975,2442.44213867,-1653.33679199,71.96961975,0.00000000,0.00000000,90.00000000); //object(columbiangate) (22)
	CreateDynamicObjectEx(975,2442.44189453,-1653.33618164,75.15361023,0.00000000,0.00000000,90.00000000); //object(columbiangate) (23)

	//gGroveBalfal = CreateDynamicObjectEx(975,2442.45874023,-1662.18249512,27.39379692,0.00000000,0.00000000,90.00000000); //object(columbiangate) (8)
	CreateDynamicObjectEx(975,2442.45800781,-1662.18164062,30.57778358,0.00000000,0.00000000,90.00000000); //object(columbiangate) (40)
	CreateDynamicObjectEx(975,2442.45727539,-1662.18078613,33.76177216,0.00000000,0.00000000,90.00000000); //object(columbiangate) (41)
	CreateDynamicObjectEx(975,2442.45654297,-1662.17993164,36.94575882,0.00000000,0.00000000,90.00000000); //object(columbiangate) (42)
	CreateDynamicObjectEx(975,2442.45581055,-1662.17907715,40.12974548,0.00000000,0.00000000,90.00000000); //object(columbiangate) (43)
	CreateDynamicObjectEx(975,2442.45507812,-1662.17822266,43.31373215,0.00000000,0.00000000,90.00000000); //object(columbiangate) (44)
	CreateDynamicObjectEx(975,2442.45434570,-1662.17736816,46.49771881,0.00000000,0.00000000,90.00000000); //object(columbiangate) (45)
	CreateDynamicObjectEx(975,2442.45361328,-1662.17651367,49.68170547,0.00000000,0.00000000,90.00000000); //object(columbiangate) (46)
	CreateDynamicObjectEx(975,2442.45288086,-1662.17565918,52.86569214,0.00000000,0.00000000,90.00000000); //object(columbiangate) (47)
	CreateDynamicObjectEx(975,2442.45214844,-1662.17480469,56.04967880,0.00000000,0.00000000,90.00000000); //object(columbiangate) (48)
	CreateDynamicObjectEx(975,2442.45141602,-1662.17395020,59.23366547,0.00000000,0.00000000,90.00000000); //object(columbiangate) (49)
	CreateDynamicObjectEx(975,2442.45068359,-1662.17309570,62.41765213,0.00000000,0.00000000,90.00000000); //object(columbiangate) (50)
	CreateDynamicObjectEx(975,2442.44995117,-1662.17224121,65.60163879,0.00000000,0.00000000,90.00000000); //object(columbiangate) (51)
	CreateDynamicObjectEx(975,2442.44921875,-1662.17138672,68.78562927,0.00000000,0.00000000,90.00000000); //object(columbiangate) (52)
	CreateDynamicObjectEx(975,2442.44848633,-1662.17053223,71.96961975,0.00000000,0.00000000,90.00000000); //object(columbiangate) (53)
	CreateDynamicObjectEx(975,2442.45410156,-1662.18090820,75.15361023,0.00000000,0.00000000,90.00000000); //object(columbiangate) (54)
*/
	////////////// sevile
    seajto = CreateDynamicObjectEx(987, -2956.8542, -2016.0625, 33.4331, 0.0000, 0.0000, 123.9999);
    senagyajto = CreateDynamicObjectEx(3330,-2961.2128,-2012.5002,22.88210,0,0,303.9971);
    selift = CreateDynamicObjectEx(3095,-2996.7734,-2036.8261,32.81742,0,0,33.9916);
    setoronyajto = CreateDynamicObjectEx(985,-3028.2836,-2013.9964,122.30279,0,0,123.7999);


	// Grove Street Privát kocsik
/*
    GroveCar[0] = CreateDynamicVehicle(567,2482.583,-1680.196,13.311,0.0,-1,-1, RESPAWN_TIME);
	GroveCar[1] = CreateDynamicVehicle(412,2487.277,-1680.014,13.314,0.0,-1,-1, RESPAWN_TIME);
	GroveCar[2] = CreateDynamicVehicle(534,2491.643,-1679.945,13.315,0.0,-1,-1, RESPAWN_TIME);
	GroveCar[3] = CreateDynamicVehicle(467,2482.624,-1657.276,13.305,182.0,-1,-1, RESPAWN_TIME);
	GroveCar[4] = CreateDynamicVehicle(575,2487.049,-1657.127,13.332,182.0,-1,-1, RESPAWN_TIME);
	GroveCar[5] = CreateDynamicVehicle(536,2491.858,-1657.165,13.340,182.0,-1,-1, RESPAWN_TIME);
	GroveCar[6] = CreateDynamicVehicle(492,2510.2185,-1668.5906,13.3385,177.3892,111,12, RESPAWN_TIME);
	GroveCar[7] = CreateDynamicVehicle(468,2518.2061,-1684.2880,13.0634,48.8997,255,255, RESPAWN_TIME);
	GroveCar[8] = CreateDynamicVehicle(481,2495.3228,-1647.2262,13.0599,176.6602,66,42, RESPAWN_TIME);
*/
	// Water Jump
	gWJCar[0] = CreateDynamicVehicle(473, 2330.380, -259.590, 1150.331, 259.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2330.991, -252.072, 1150.331, 259.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2333.458, -244.875, 1150.331, 259.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2352.166, -266.198, 1150.331, 349.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2347.730, -265.243, 1150.331, 349.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2344.772, -265.489, 1150.331, 349.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2340.028, -264.538, 1150.331, 349.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2335.271, -263.441, 1150.331, 349.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2349.700, -255.118, 1150.331, 112.0, -1, -1, RESPAWN_TIME);
	CreateDynamicVehicle(473, 2349.963, -249.146, 1150.331, 112.0, -1, -1, RESPAWN_TIME);
	gWJCar[1] = CreateDynamicVehicle(473, 2348.150, -243.341, 1150.331, 112.0, -1, -1, RESPAWN_TIME);

	// Tuned Cars
	gTunedCar[0] = CreateDynamicVehicle(560,2825.716,1847.542,10.590,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2828.816,1847.376,10.586,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2831.797,1847.336,10.581,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2834.860,1847.663,10.577,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2838.294,1847.500,10.572,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2841.373,1847.691,10.567,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2846.697,1847.723,10.561,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2852.599,1847.635,10.553,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2849.570,1847.547,10.557,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2855.828,1847.626,10.554,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2859.260,1847.669,10.585,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2862.631,1847.715,10.617,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2865.659,1847.713,10.625,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2868.867,1847.771,10.625,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2872.038,1847.878,10.625,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2875.098,1847.728,10.625,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2877.898,1847.742,10.625,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2844.000,1847.828,10.563,182.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2825.848,1802.125,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2828.776,1802.102,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2831.762,1801.975,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2834.934,1802.033,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2837.862,1801.998,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2840.685,1802.003,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2843.562,1801.849,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2846.383,1801.815,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2849.483,1801.843,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2852.274,1801.920,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2855.287,1801.884,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2858.526,1801.957,10.625,0.0,-1,-1, RESPAWN_TIME);
	CreateDynamicVehicle(560,2861.541,1801.759,10.625,0.0,-1,-1, RESPAWN_TIME);
	gTunedCar[1] = CreateDynamicVehicle(560,2864.592,1801.678,10.625,0.0,-1,-1, RESPAWN_TIME);

	//Trucking
	gTruck[0] = CreateDynamicVehicle(515, -66.6935, -1110.4026, 2.1073, 69.3174, -1, -1, -1,   0, 50000);
	gTruck[1] = CreateDynamicVehicle(514, -69.3596, -1118.9170, 2.1073, 69.3174, -1, -1, -1,   0, 50000);
	gTruck[2] = CreateDynamicVehicle(514, -63.6715, -1142.9825, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[3] = CreateDynamicVehicle(403, -59.1358, -1145.5737, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[4] = CreateDynamicVehicle(514, -55.0176, -1147.5068, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[5] = CreateDynamicVehicle(515, -50.1819, -1149.6602, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[6] = CreateDynamicVehicle(403, -45.7036, -1151.9728, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[7] = CreateDynamicVehicle(514, -40.9015, -1153.2983, 2.1073, 334.6328, -1, -1, -1,  0, 50000);
	gTruck[8] = CreateDynamicVehicle(584, -66.3682, -1157.1183, 2.5700, 63.4638, -1, -1, -1,   0, 50000);
	gTruck[9] = CreateDynamicVehicle(450, -69.0427, -1160.8462, 2.4669, 63.4638, -1, -1, -1,   0, 50000);
	gTruck[10] = CreateDynamicVehicle(591, -80.3914, -1190.7285, 2.4658, 63.4638, -1, -1, -1,  0, 50000);
	gTruck[11] = CreateDynamicVehicle(435, -82.2501, -1194.5687, 2.4419, 63.4638, -1, -1, -1,  0, 50000);
	gTruck[12] = CreateDynamicVehicle(584, -83.5552, -1198.6763, 3.3820, 63.4638, -1, -1, -1,  0, 50000);
	gTruck[13] = CreateDynamicVehicle(450, -95.0778, -1156.4100, 2.4658, 63.4638, -1, -1, -1,  0, 50000);
	gTruck[14] = CreateDynamicVehicle(435, -100.7732, -1176.9536, 2.3628, 63.4638, -1, -1, -1, 0, 55000);
	gTruck[15] = CreateDynamicVehicle(584, -101.4289, -1181.8040, 2.8687, 63.4638, -1, -1, -1, 0, 50000);

	//Taxi
	//LS
	g_TaxiVehicle[0] = CreateDynamicVehicle(420,2160.9631,-1197.3223,23.6681,90.6968, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[1] = CreateDynamicVehicle(420,2161.1780,-1192.5571,23.6006,89.5319, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[2] = CreateDynamicVehicle(420,2161.1680,-1187.6490,23.5970,89.7875, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[3] = CreateDynamicVehicle(420,2161.1716,-1182.6881,23.5953,89.7219, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[4] = CreateDynamicVehicle(420,2161.2659,-1177.8575,23.5975,90.0018, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[5] = CreateDynamicVehicle(420,2161.4041,-1173.0927,23.5977,90.3254, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[5] = CreateDynamicVehicle(420,2161.3853,-1168.0638,23.5990,89.9694, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[7] = CreateDynamicVehicle(420,2161.6101,-1163.2307,23.5947,90.4469, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[6] = CreateDynamicVehicle(420,2161.4553,-1158.1309,23.6188,90.1007, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[9] = CreateDynamicVehicle(420,2161.5398,-1152.9283,23.7120,89.9821, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[10] = CreateDynamicVehicle(420,2161.4668,-1148.3064,24.1600,89.7020, 6, -1, -1, 0, 50010);
	g_TaxiVehicle[11] = CreateDynamicVehicle(420,2161.5859,-1143.8196,24.6160,91.0663, 6, -1, -1, 0, 50010);
    
    //LV
    /*gTaxiVehicle[12] = CreateDynamicVehicle(420,2569.5752,1502.8752,10.5210,15.2041,6, -1, -1, 0, 50000);
	gTaxiVehicle[13] = CreateDynamicVehicle(420,2302.8042,2132.0249,10.5206,269.4193,6, -1, -1, 0, 50000);
	gTaxiVehicle[14] = CreateDynamicVehicle(420,2293.3203,2131.9221,10.5210,269.3815,6, -1, -1, 0, 50000);
	gTaxiVehicle[15] = CreateDynamicVehicle(420,2285.5115,2131.8740,10.5222,268.1259,6, -1, -1, 0, 50000);
	gTaxiVehicle[16] = CreateDynamicVehicle(420,2277.5315,2131.9404,10.5235,269.6054,6, -1, -1, 0, 50000);
	gTaxiVehicle[17] = CreateDynamicVehicle(420,2270.4006,2132.0486,10.5253,270.5601,6, -1, -1, 0, 50000);
    */
    
    
	NMSS_vehicles();

	// Pickups
	CreateDynamicPickup(341,2,2351.6501,-653.5566,128.0546);  // leatherface motorfûrész
	CreateDynamicPickup(1242,2,2638.2275,2735.8183,23.8222); // MinigunMadness
	CreateDynamicPickup(1240,2,2622.5812,2704.7607,25.8222);
	CreateDynamicPickup(1240,2,2599.5524,2820.7338,27.8203);
	CreateDynamicPickup(1242,2,2602.5136,2818.1948,27.8203);
	CreateDynamicPickup(1240,2,2650.3127,2812.2871,36.3222);

	// LS Tower para
	CreateDynamicPickup(371, 2, 1537.4671, -1338.2454, 330.0000);
	CreateDynamicPickup(371, 2, 1551.5510, -1338.3969, 330.0000);
	CreateDynamicPickup(371, 2, 1562.7689, -1346.4368, 330.0497);
	CreateDynamicPickup(371, 2, 1564.9881, -1358.9125, 329.9926);
	CreateDynamicPickup(371, 2, 1558.2315, -1370.0762, 330.0550);
	CreateDynamicPickup(371, 2, 1544.5809, -1374.6647, 330.0568);
	CreateDynamicPickup(371, 2, 1523.7979, -1359.0582, 330.0494);
	CreateDynamicPickup(371, 2, 1526.4211, -1346.3936, 330.0494);

	// Parkour 1 Para
	CreateDynamicPickup(371, 2, 212.087, 5.1583, 1963.21);

	// RC 2 Para
	CreateDynamicPickup(371, 2, -2666.5212, 1928.7435, 217.3493); //
	CreateDynamicPickup(371, 2, -2672.9038, 1929.1214, 217.3493); //
	CreateDynamicPickup(371, 2, -2677.9770, 1928.8421, 217.3553); //
	CreateDynamicPickup(371, 2, -2685.0227, 1928.8850, 217.3763); //
	CreateDynamicPickup(371, 2, -2691.1062, 1928.9758, 217.3763); //
	CreateDynamicPickup(371, 2, -2697.2331, 1929.1097, 217.3753); //

	// RC 3 Para
	CreateDynamicPickup(371, 2, -1837.5357, 582.0803, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1824.3553, 582.2006, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1820.7421, 582.3468, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1817.0504, 582.3593, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1813.0900, 582.3471, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1809.6822, 582.3306, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1806.2980, 582.3059, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1802.9980, 582.3026, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1800.0151, 582.3047, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1796.3413, 582.2746, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1792.7556, 582.3215, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1787.8903, 582.3142, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1784.1322, 582.3568, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1780.5692, 582.4188, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1777.0273, 582.4227, 234.8906); // kurta999
	CreateDynamicPickup(371, 2, -1773.3574, 582.4556, 234.8906); // kurta999

	// RC 4 Para
	CreateDynamicPickup(371, 2, -2881.7626, 2626.5910, 274.9431); // kurta999
	CreateDynamicPickup(371, 2, -2881.7365, 2622.9934, 274.9431); // kurta999
	CreateDynamicPickup(371, 2, -2881.7082, 2619.2939, 274.9431); // kurta999
	CreateDynamicPickup(371, 2, -2881.7216, 2615.7446, 274.9431); // kurta999
	CreateDynamicPickup(371, 2, -2881.7387, 2612.4792, 274.9431); // kurta999
	CreateDynamicPickup(371, 2, -2881.7663, 2608.0314, 274.9431); // kurta999

	// RC 5 Para
	CreateDynamicPickup(371, 2, -2443.6774, -1611.9478, 526.8647); // kurta999
	CreateDynamicPickup(371, 2, -2443.8088, -1631.5563, 526.8647); // kurta999

	// RC 6 Para
	CreateDynamicPickup(371, 2, 2505.5949, -1672.7026, 687.6669); // kurta999
	CreateDynamicPickup(371, 2, 2505.8210, -1691.6578, 687.6669); // kurta999
	CreateDynamicPickup(371, 2, 2486.8645, -1691.5869, 687.6669); // kurta999
	CreateDynamicPickup(371, 2, 2486.6647, -1672.6187, 687.6669); // kurta999

	// Area 51
//	CreateDynamicPickup(1242,2,378.6148,1963.3847,18.0992, DM_ZONE_AREA51);
//	CreateDynamicPickup(1240,2,345.8293,1943.5122,17.6406, DM_ZONE_AREA51);
//	CreateDynamicPickup(1240,2,339.5571,1855.2327,17.9585, DM_ZONE_AREA51);
//	CreateDynamicPickup(1240,2,331.7833,1790.7460,34.0339, DM_ZONE_AREA51);
//	CreateDynamicPickup(1242,2,329.8419,1789.9160,34.0339, DM_ZONE_AREA51);
	// CreateDynamicPickup(362,2,328.6167,1791.5080,34.0339);
//	CreateDynamicPickup(1242,2,218.6735,2016.6550,17.6406, DM_ZONE_AREA51);
	/*
	// Hajó DM
	CreateDynamicPickup(1240,2,-2389.8142,1539.0207,3.7506);
	CreateDynamicPickup(1242,2,-2426.1162,1534.0955,3.7506);
	CreateDynamicPickup(1242,2,-2417.2587,1555.9128,10.8281);
	CreateDynamicPickup(1240,2,-2370.1621,1545.9438,10.8936);
	CreateDynamicPickup(1242,2,-2390.6621,1549.2514,3.7506);
	*/
	/*
	// RC War
	CreateDynamicPickup(1240,2,-1084.0069,1096.7528,1343.5971, DM_ZONE_RCWAR);
	CreateDynamicPickup(1242,2,-1059.8588,1089.3798,1342.6984, DM_ZONE_RCWAR);
	CreateDynamicPickup(1242,2,-1007.1164,1021.5953,1341.0078, DM_ZONE_RCWAR);
	CreateDynamicPickup(1242,2,-975.0663,1061.0313,1345.6718, DM_ZONE_RCWAR);
	CreateDynamicPickup(1240,2,-973.6556,1093.4183,1344.9812, DM_ZONE_RCWAR);
	CreateDynamicPickup(1240,2,-1114.6436,1039.3131,1342.9746, DM_ZONE_RCWAR);
	CreateDynamicPickup(1242,2,-1114.6347,1042.1687,1342.9167, DM_ZONE_RCWAR);

	// Team DM
	CreateDynamicPickup(1242,2,97.8999,2213.4968,53.1397, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1240,2,98.3735,2214.1223,53.1397, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1242,2,387.7450,2192.4140,36.9074, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1240,2,305.0757,2192.9091,32.1940, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1242,2,231.1350,2220.9257,33.8637, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1240,2,202.0205,2217.0087,35.2417, DM_ZONE_TEAMDM);
	CreateDynamicPickup(1242,2,142.0003,2237.2204,34.7997, DM_ZONE_TEAMDM);

	// Army DM
	CreateDynamicPickup(1240,2,-520.1138,-505.7361,24.5740, DM_ZONE_ARMYDM);
	CreateDynamicPickup(1242,2,-558.7259,-506.1304,24.5411, DM_ZONE_ARMYDM);
	CreateDynamicPickup(1240,2,-583.2821,-523.4256,36.3156, DM_ZONE_ARMYDM);
	CreateDynamicPickup(1242,2,-518.6826,-527.4442,35.9072, DM_ZONE_ARMYDM);
	CreateDynamicPickup(1242,2,-489.4724,-543.9008,25.5234, DM_ZONE_ARMYDM);
	*/
	// PC
	CreateDynamicPickup(371,2,289.783783, -1618.061523, 495.168488, 0);
	CreateDynamicPickup(371,2,289.720825, -1612.754150, 495.168488, 0);

	// Tokyo City
	CreateDynamicPickup(1240,2,1272.1135,-3645.2751,318.2923, 0);
	CreateDynamicPickup(1242,2,1270.9539,-3647.2353,318.2948, 0);
	CreateDynamicPickup(371,2,1307.8050,-3642.2597,317.5172, 0);

	// Hillhouse
	CreateDynamicPickup(341,2,-674.3353,980.8543,12.1261, 0);
	CreateDynamicPickup(339,2,-668.1147,971.2366,12.1328, 0);
/*
	// Island
	CreateDynamicPickup(1274,2,3561.3503,5712.8730,-7.9968);
	CreateDynamicPickup(360,2,3552.0207,5712.6508,-7.9968);
	CreateDynamicPickup(385,2,3546.3256,5696.5878,-7.9968);
	CreateDynamicPickup(352,2,3577.8310,5694.3071,-7.9968);
	CreateDynamicPickup(370,2,3588.9987,5694.8896,-7.9968);
	CreateDynamicPickup(351,2,3585.6760,5703.1455,-7.9968);
	CreateDynamicPickup(346,2,3522.2893,5706.1655,1.7689);
*/
	// Tehénypornó
	CreateDynamicPickup(321,2,2838.9565,2354.3391,12.3168, 0);
	CreateDynamicPickup(322,2,2836.5461,2354.3059,12.3168, 0);
	CreateDynamicPickup(323,2,2834.1575,2354.3525,12.3168, 0);
	CreateDynamicPickup(324,2,2831.0798,2354.2214,12.3168, 0);

    ZaszloPickup = CreateDynamicPickup(2914, 1, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], 0);
/*
	// Grove Street HQ
	GrovePickup[0] = CreateDynamicPickup(358, 1, 2450.3073, -1660.4699, 21.9883); // Sniper
	GrovePickup[1] = CreateDynamicPickup(358, 1, 2457.3334, -1661.8070, 31.2778);
	GrovePickup[2] = CreateDynamicPickup(358, 1, 2456.3156, -1663.6524, 38.7668);
	GrovePickup[3] = CreateDynamicPickup(358, 1, 2457.1240, -1661.4368, 48.2298);
	GrovePickup[4] = CreateDynamicPickup(358, 1, 2457.2875, -1662.3118, 55.0645);
	GrovePickup[5] = CreateDynamicPickup(358, 1, 2456.7568, -1662.6978, 65.3096);
	GrovePickup[6] = CreateDynamicPickup(358, 1, 2456.7539, -1662.2220, 72.3675);
	GrovePickup[7] = CreateDynamicPickup(359, 1, 2443.7651, -1651.3544, 71.7305);
	GrovePickup[8] = CreateDynamicPickup(351, 1, 2444.6894, -1664.9440, 71.3239);
	GrovePickup[9] = CreateDynamicPickup(350, 1, 2501.2551, -1650.1456, 73.1077);
	GrovePickup[10] = CreateDynamicPickup(1240, 1, 2469.9794, -1679.7425, 13.5078); // Health
	GrovePickup[11] = CreateDynamicPickup(1242, 1, 2467.6188, -1672.0773, 13.4899); // Armour
	GrovePickup[12] = CreateDynamicPickup(335, 1, 2470.3017, -1678.8582, 13.5078); // AK47
	GrovePickup[13] = CreateDynamicPickup(355, 1, 2498.5021, -1707.2316, 1014.7421);
	GrovePickup[14] = CreateDynamicPickup(350, 1, 2498.9228, -1710.4499, 1014.7421); // Sawn of
	GrovePickup[15] = CreateDynamicPickup(344, 1, 2492.8967, -1707.9880, 1015.6315); // Molotov Cocktail
	GrovePickup[16] = CreateDynamicPickup(352, 1, 2493.4169, -1710.8955, 1014.7421); // Micro Uzi
	GrovePickup[17] = CreateDynamicPickup(359, 1, 2477.1691, -1694.1174, 13.5139); // Rocket Launcher
	GrovePickup[18] = CreateDynamicPickup(348, 1, 2452.9687, -1689.6820, 13.5477); // Desert Eagle
	GrovePickup[19] = CreateDynamicPickup(1242, 1, 2468.0231, -1674.7973, 13.5033); // Armour
	GrovePickup[20] = CreateDynamicPickup(1240, 1, 2468.6904, -1677.4277, 13.5078); // Health
*/
    pwnt = CreateDynamicPickup(1318,  2, -423.699341, 2201.723145, 42.926292, 0);
    gDive[0] = CreateDynamicPickup(371, 2, 396.5077,2534.2165,16.5439, 0);
    gDive[1] = CreateDynamicPickup(371, 2, -654.4580,929.6720,12.1310, 0);
	molotov = CreateDynamicPickup(344, 1, -1076.0743,-1153.1538,129.2187);
	fire[0] = CreateDynamicPickup(361, 1, -1066.6785,-1157.4298,129.2187);
	fire[1] = CreateDynamicPickup(361, 1, -1069.2237,-1157.2503,129.2187);
    fire[2]= CreateDynamicPickup(361, 1, -1072.4831,-1157.4160,129.2187);
	fire[3] = CreateDynamicPickup(361, 1, -1075.6165,-1157.5417,129.2187);

    ajtonyito[0] = CreateDynamicPickup(1254,23,-646.938,950.519,12.660, 0);
    ajtonyito[1] = CreateDynamicPickup(1254,23,-646.824,951.498,12.583, 0);
	gBistroEnter[0] = CreateDynamicPickup(1239,1,-777.3019,505.1419,1376.5890,-1);
	gBistroEnter[1] = CreateDynamicPickup(1239,1,-794.9230,489.9005,1376.1953,-1);

	// Fegyverboltok
	gLVFBPickup[0] = CreateDynamicPickup(1239, 23, 301.6802, -76.5416, 1001.5156);
	gLVFBPickup[1] = CreateDynamicPickup(1239, 23, 301.8358, -75.6944, 1001.5156);
	gLVFBPickup[2] = CreateDynamicPickup(1239, 23, 303.2656, -57.7041, 1001.5156);
	gLVFBPickup[3] = CreateDynamicPickup(1239, 23, 304.0499, -57.6737, 1001.5156);

	gLVFBBigPickup[0] = CreateDynamicPickup(1239, 23, 305.3509, -141.9356, 1004.0625);
	gLVFBBigPickup[1] = CreateDynamicPickup(1239, 23, 304.5818, -141.6984, 1004.0625);
	gLVFBBigPickup[2] = CreateDynamicPickup(1239, 23, 299.9485, -141.9655, 1004.0625);
	gLVFBBigPickup[3] = CreateDynamicPickup(1239, 23, 299.2079, -141.9809, 1004.0547);

	gLVFBGreenPickup[0] = CreateDynamicPickup(1239, 23, 306.3994, -159.2641, 999.5938);
	gLVFBGreenPickup[1] = CreateDynamicPickup(1239, 23, 305.6980, -159.1807, 999.5938);
	gLVFBGreenPickup[2] = CreateDynamicPickup(1239, 23, 298.9919, -169.0414, 999.5938);
	gLVFBGreenPickup[3] = CreateDynamicPickup(1239, 23, 298.2903, -168.9512, 999.5938);

	gLVFBOtherPickup[0] = CreateDynamicPickup(1239, 23, 286.1481, -29.8190, 1001.5156);
	gLVFBOtherPickup[1] = CreateDynamicPickup(1239, 23, 286.2459, -28.2868, 1001.5156);
	gLVFBOtherPickup[2] = CreateDynamicPickup(1239, 23, 286.1884, -24.9837, 1001.5156);
	gLVFBOtherPickup[3] = CreateDynamicPickup(1239, 23,  286.2451, -23.4029, 1001.5229);

	gCaligulaCasino[0] = CreateDynamicPickup(1239, 23, 2270.9697, 1637.9532, 1008.3594);
	gCaligulaCasino[1] = CreateDynamicPickup(1239, 23, 2187.1282, 1628.8478, 1043.3508);

	gDragonsCasino[0] = CreateDynamicPickup(1239, 23, 1963.7988, 1063.1947, 994.4688);
	gDragonsCasino[1] = CreateDynamicPickup(1239, 23, 884.4557, 1017.8088, 31.8358);

	gFegyverBoltAru[0] = CreateDynamicPickup(356, 8, 314.1578,-133.6635,999.6016, -1);
	gFegyverBoltAru[1] = CreateDynamicPickup(356, 8, 307.9943,-141.4633,999.6016, -1);
	gFegyverBoltAru[2] = CreateDynamicPickup(356, 8, 313.5412,-138.4848,1004.0625, -1);
	gFegyverBoltAru[3] = CreateDynamicPickup(356, 8, 295.2427,-37.9942,1001.5156, -1);
	gFegyverBoltAru[4] = CreateDynamicPickup(356, 8, 295.5363,-80.5298,1001.5156, -1);
	gFegyverBoltAru[5] = CreateDynamicPickup(356, 8, 290.3167,-109.5005,1001.5156, -1);
	gFegyverBoltAru[6] = CreateDynamicPickup(356, 8, 312.8623,-165.5146,999.6010, -1);

	for(i = 0; i != sizeof(Pickup_Pos) - 2; i++)
	{
		RangePickup[i]  = CreateDynamicPickup(1318, 2, Pickup_Pos[i][0], Pickup_Pos[i][1], Pickup_Pos[i][2]);
	}

	RangePickup[6] = CreateDynamicPickup(1239, 2, Pickup_Pos[6][0], Pickup_Pos[6][1], Pickup_Pos[6][2]);
	RangePickup[7] = CreateDynamicPickup(1239, 2, Pickup_Pos[7][0], Pickup_Pos[7][1], Pickup_Pos[7][2]);

	// Timers
	SetTimer("NitroReset", 3000, true); // 3 másodperc
	SetTimer("DMUpdate", 2700, true); // 5 másodperc
	SetTimer("Reklam_Mutat", 7 * 60 * 1000 + random(2975), true); // 5 perc
	SetTimer("PropertyPayout", 15 * 60 * 1002, true); // 22 perc
	SetTimerEx("ReactionTest", 322319 + random(8945), true, "b", false); // 5,2 perc
	SetTimer("TeleTest", 252000 + random(8529), true); // 4,2 perc
	SetTimerEx("Feladat", 210000 + random(7418), true, "d", 0xFF); // 3,3 perc
    SetTimer("Fly", 70, true); // 70ms
	SetTimer("CheckStatus", 150, true); // 0,150 millimásodperc
	SetTimer("CallGoldpotTimer", 264000 + random(6728), true); // 4,4 perc
//	SetTimer("CallFlag", 10 * 60 * 1000 + random(7531), true); // 10 perc
	SetTimer("RaceRotation", 372000 + random(2571), true); // 6,2 perc
	SetTimer("MoveKJObjectUP", 45000, false); // 45 másodperc
	SetTimer("OneMinute", 60000, true); // 1 perc
	FalloutMajStartTimer = SetTimer("f_mscountdown", 10000, true);
	SetTimer("GetRealTime", 1000, true); // 1 másodperc
    SetGVarInt("BotAction", BOT_ACTION_TIME + randomex(4,25), 0);
    for(i = 0; i != MAX_PLAYERS; i++)
    {
		for(new x; x != MAX_VEH_OBJECT; x++)
		{
		    gPlayerVehicleObject[i][x] = INVALID_OBJECT_ID;
	        gPlayerVehicleObjectID[i][x] = 0;
		}
    }
	for(i = 0; i != MAX_VEHICLES; i++)
	{
		for(new x; x != MAX_VEH_OBJECT; x++)
		{
		    gVehicleObject[i][x] = INVALID_OBJECT_ID;
		}
		if(!IsValidDynamicVehicle(i)) continue;

		RandomNumberPlate(i);
        SetDynamicVehicleToRespawn(i);
	}

	// Speciális
    gCP_TRUCKMISSION = CreateDynamicCP(-77.1130, -1136.6222, 1.0781, 5.0);
    CreateDynamic3DTextLabel("Minigame:\n{" #XCOLOR_BLUE2 "}Kamionozás", COLOR_WHITE, -77.1130, -1136.6222, 1.0781, .worldid = 0);
	return 1;
}

stock BuildWeaponMenu()
{
	new
	    Text:TD_ID;
	TD_ID = TextDrawCreate(156.000000, 94.000000, "_");
	TextDrawBackgroundColor(TD_ID, -16777182);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.500000, 25.900003);
	TextDrawColor(TD_ID, -1);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);
	TextDrawUseBox(TD_ID, 1);
	TextDrawBoxColor(TD_ID, 869072742);
	TextDrawTextSize(TD_ID, 497.000000, 81.000000);

	TD_ID = TextDrawCreate(390.000000, 211.000000, FixGameString("Törlés (Katt a fegyverre)"));
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.189999, 0.899999);
	TextDrawColor(TD_ID, -1);
	TextDrawSetOutline(TD_ID, 1);
	TextDrawSetProportional(TD_ID, 1);
	//TextDrawUseBox(TD_ID, 1);
	TextDrawBoxColor(TD_ID, 255);
	TextDrawTextSize(TD_ID, 480.000000, 7.000000);
	TextDrawSetSelectable(TD_ID, 1);

	TD_ID = TextDrawCreate(390.000000, 229.000000, FixGameString("Kezd. Áll. (Katt a fegyverre)"));
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.189999, 0.899999);
	TextDrawColor(TD_ID, -1);
	TextDrawSetOutline(TD_ID, 1);
	TextDrawSetProportional(TD_ID, 1);
	//TextDrawUseBox(TD_ID, 1);
	TextDrawBoxColor(TD_ID, 255);
	TextDrawTextSize(TD_ID, 480.000000, 7.000000);
	TextDrawSetSelectable(TD_ID, 1);

	TD_WMenu_WStart = TextDrawCreate(156.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_WMenu_WStart, 331);
	TextDrawSetPreviewRot(TD_WMenu_WStart, 0.000000, -20.000000, 0.000000, 0.550000);

	TD_ID = TextDrawCreate(194.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 333);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 3.000000);

	TD_ID = TextDrawCreate(232.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 334);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(273.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 335);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 90.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(310.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 336);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(349.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 337);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(388.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 338);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 0.800000);

	TD_ID = TextDrawCreate(426.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 339);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(464.000000, 94.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 341);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(156.000000, 123.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 321);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 1.500000);

	TD_ID = TextDrawCreate(193.000000, 123.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 322);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 0.600000);

	TD_ID = TextDrawCreate(232.000000, 123.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 323);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(272.000000, 123.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 324);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 0.699998);

	TD_ID = TextDrawCreate(311.000000, 123.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 325);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 1.399999);

	TD_ID = TextDrawCreate(350.000000, 124.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 326);
	TextDrawSetPreviewRot(TD_ID, 0.000000, 30.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(156.000000, 154.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 342);
	TextDrawSetPreviewRot(TD_ID, 15.000000, 10.000000, 20.000000, 0.400000);

	TD_ID = TextDrawCreate(193.000000, 154.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 343);
	TextDrawSetPreviewRot(TD_ID, 15.000000, 10.000000, 20.000000, 0.500000);

	TD_ID = TextDrawCreate(231.000000, 154.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 344);
	TextDrawSetPreviewRot(TD_ID, 15.000000, 10.000000, 20.000000, 0.699998);

	TD_ID = TextDrawCreate(156.000000, 183.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 346);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 0.699998);

	TD_ID = TextDrawCreate(193.000000, 183.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 347);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(230.000000, 183.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 348);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(157.000000, 212.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 349);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.600000);

	TD_ID = TextDrawCreate(193.000000, 212.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 350);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(231.000000, 212.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 351);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.500000);

	TD_ID = TextDrawCreate(157.000000, 242.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 352);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 0.699998);

	TD_ID = TextDrawCreate(193.000000, 242.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 372);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(231.000000, 242.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 353);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(310.000000, 211.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 355);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.600000);

	TD_ID = TextDrawCreate(347.000000, 211.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 356);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.600000);

	TD_ID = TextDrawCreate(311.000000, 244.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 357);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.600000);

	TD_ID = TextDrawCreate(347.000000, 244.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 358);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(157.000000, 273.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 359);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(193.000000, 273.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 360);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 1.399999);

	TD_ID = TextDrawCreate(230.000000, 273.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 361);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 3.000000);

	TD_ID = TextDrawCreate(267.000000, 273.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 362);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 3.000000);

	TD_ID = TextDrawCreate(348.000000, 275.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 363);
	TextDrawSetPreviewRot(TD_ID, -30.000000, 30.000000, 0.000000, 1.000000);

	TD_ID = TextDrawCreate(157.000000, 303.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 365);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -20.000000, 0.000000, 0.500000);

	TD_ID = TextDrawCreate(193.000000, 303.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 366);
	TextDrawSetPreviewRot(TD_ID, -20.000000, 0.000000, 0.000000, 2.000000);

	TD_ID = TextDrawCreate(230.000000, 303.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 367);
	TextDrawSetPreviewRot(TD_ID, -50.000000, 50.000000, -10.000000, 0.800000);

	TD_ID = TextDrawCreate(312.000000, 303.000000, "A");
	TextDrawSetPreviewModel(TD_ID, 368);
	TextDrawSetPreviewRot(TD_ID, 0.000000, -90.000000, 35.000000, 0.400000);

	TD_WMenu_WEnd = TextDrawCreate(348.000000, 303.000000, "A");
	TextDrawSetPreviewModel(TD_WMenu_WEnd, 369);
	TextDrawSetPreviewRot(TD_WMenu_WEnd, 0.000000, -90.000000, 35.000000, 0.400000);


	for(new i = _:TD_WMenu_WStart; i != _:TD_WMenu_WEnd+1; i++)
	{
	    TextDrawAlignment(Text:i, 3);
	    TextDrawBackgroundColor(Text:i, COLOR_YELLOW);
	    TextDrawFont(Text:i, 5);
	    TextDrawLetterSize(Text:i, 0.319999, 2.000000);
	    //TextDrawColor(Text:i, -1);
	    //TextDrawSetOutline(Text:i, 0);
	    //TextDrawUseBox(Text:i, 1);
	    //TextDrawBoxColor(Text:i, 255);
	    TextDrawTextSize(Text:i, 33.000000, 25.000000);

        TextDrawSetSelectable(Text:i, 1);
	}

	// Price
	TD_WMenu_PStart = TextDrawCreate(161.000000, 109.000000, "$500");
	TextDrawBackgroundColor(TD_WMenu_PStart, 255);
	TextDrawFont(TD_WMenu_PStart, 1);
	TextDrawLetterSize(TD_WMenu_PStart, 0.230000, 0.899999);
	TextDrawColor(TD_WMenu_PStart, -16776961);
	TextDrawSetOutline(TD_WMenu_PStart, 0);
	TextDrawSetProportional(TD_WMenu_PStart, 1);
	TextDrawSetShadow(TD_WMenu_PStart, 1);

	TD_ID = TextDrawCreate(196.000000, 109.000000, "$1.200");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);

	TD_ID = TextDrawCreate(234.000000, 109.000000, "$1.500");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);

	TD_ID = TextDrawCreate(275.000000, 109.000000, "$4.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);

	TD_ID = TextDrawCreate(312.000000, 109.000000, "$4.200");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);

	TD_ID = TextDrawCreate(351.000000, 109.000000, "$4.500");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(390.000000, 109.000000, "$5.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(429.000000, 109.000000, "$6.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(464.000000, 110.000000, "$7.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(156.000000, 138.000000, "$12.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(194.000000, 138.000000, "$12.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(233.000000, 138.000000, "$12.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(273.000000, 138.000000, "$12.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(313.000000, 138.000000, "$3.600");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(353.000000, 138.000000, "$3.500");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(156.000000, 169.000000, "$13.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(195.000000, 169.000000, "$8.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(231.000000, 169.000000, "$15.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(156.000000, 198.000000, "$13.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(194.000000, 198.000000, "$8.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(231.000000, 198.000000, "$15.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(157.000000, 228.000000, "$18.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(194.000000, 228.000000, "$18.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(231.000000, 228.000000, "$25.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(156.000000, 257.000000, "$10.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(193.000000, 257.000000, "$12.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(231.000000, 257.000000, "$15.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(310.000000, 226.000000, "$23.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(347.000000, 226.000000, "$25.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(311.000000, 259.000000, "$27.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(347.000000, 259.000000, "$33.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(156.000000, 289.000000, "$70.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(193.000000, 289.000000, "$85.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(230.000000, 289.000000, "$50.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(264.000000, 289.000000, "$100.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(348.000000, 291.000000, "$30.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(160.000000, 319.000000, "$1.500");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(196.000000, 319.000000, "$6.500");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(231.000000, 319.000000, "$19.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_ID = TextDrawCreate(313.000000, 319.000000, "$10.000");
	TextDrawBackgroundColor(TD_ID, 255);
	TextDrawFont(TD_ID, 1);
	TextDrawLetterSize(TD_ID, 0.230000, 0.899999);
	TextDrawColor(TD_ID, -16776961);
	TextDrawSetOutline(TD_ID, 0);
	TextDrawSetProportional(TD_ID, 1);
	TextDrawSetShadow(TD_ID, 1);


	TD_WMenu_PEnd = TextDrawCreate(348.000000, 319.000000, "$10.000");
	TextDrawBackgroundColor(TD_WMenu_PEnd, 255);
	TextDrawFont(TD_WMenu_PEnd, 1);
	TextDrawLetterSize(TD_WMenu_PEnd, 0.230000, 0.899999);
	TextDrawColor(TD_WMenu_PEnd, -16776961);
	TextDrawSetOutline(TD_WMenu_PEnd, 0);
	TextDrawSetProportional(TD_WMenu_PEnd, 1);
	TextDrawSetShadow(TD_WMenu_PEnd, 1);
	//
	SetGVarString("LastRaceName","N/A",0);
}

public OnGameModeExit()
{
	print(!"\n----------------------------------");
	print(!"    Nagy Magyar Stunt Szerver v" #SERVER_VERSION "");
	print(!"         Sikeresen Kikapcsolva!");
	print(!"             Scriptelte:");
	print(!"            kurta999");
	print(!"----------------------------------\n");

    mysql_close();
/*
	SendRconCommand(!"exit");
	print(!"----------------------------------\n");
	print(!"----------------------------------\n");
	print(!"----------------------------------\n");
	print(!"a GMX NEM MÛKÖDIK, EZÉRT A SZERVER LEÁLL!");
	print(!"----------------------------------\n");
	print(!"----------------------------------\n");
	print(!"----------------------------------\n");
*/
    return 1;
}

forward OnServerMessage(const msg[]);
public OnServerMessage(const msg[])
{
	if(g_ConsolePlayer != -1)
	{
		SendClientMessage(g_ConsolePlayer, -1, msg);
	}
	return 1;
}

public Streamer_OnPluginError(error[])
{
	print(error);

	dline[0] = EOS;
	GetAmxBacktrace(dline);
	print(dline);
}

public OnPlayerObjectMoved(playerid, objectid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;

    // printf("OnPlayerObjectMoved(playerid = %d, objectid = %d)", playerid, objectid);
    for(new i; i != 20; i++)
	{
		if(objectid == A_Objects[i][playerid])
	    {
	    	if(IsValidPlayerObject(playerid, A_Objects[i][playerid]))
	    	{
          		DestroyPlayerObject(playerid, A_Objects[i][playerid]);

	    	    PlayerObjects{playerid}--;
				if(PlayerObjects{playerid} == 0 && Objects_Hit2{playerid} != 20)
	    	  	{
	      			Objects_Missed{playerid} = 20 - Objects_Hit2{playerid};
	    	   	 	MoveObjectsForPlayerAgain(playerid);
				}
			}
		}
	}
	return 1;
}

public OnDynamicObjectMoved(objectid)
{
	if(objectid == Vikingo_Base)
	{
		new Float:pos[3];
		GetDynamicObjectPos(Vikingo_Base, pos[0], pos[1], pos[2]);
		new Float:rot[3];
		GetDynamicObjectRot(Vikingo_Base, rot[0], rot[1], rot[2]);
		if(rot[1] == 20.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 23.00, 0.00);
		else if(rot[1] == 23.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -23.00, 0.00);
		else if(rot[1] == -23.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -26.00, 0.00);
		else if(rot[1] == -26.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 26.00, 0.00);
		else if(rot[1] == 26.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 29.00, 0.00);
		else if(rot[1] == 29.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -29.00, 0.00);
		else if(rot[1] == -29.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -32.00, 0.00);
		else if(rot[1] == -32.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 32.00, 0.00);
		else if(rot[1] == 32.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.103, 0.00, 35.00, 0.00);
		else if(rot[1] == 35.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -35.00, 0.00);
		else if(rot[1] == -35.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -38.00, 0.00);
		else if(rot[1] == -38.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 38.00, 0.00);
		else if(rot[1] == 38.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 41.00, 0.00);
		else if(rot[1] == 41.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -41.00, 0.00);
		else if(rot[1] == -41.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -44.00, 0.00);
		else if(rot[1] == -44.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 42.00, 0.00);
		else if(rot[1] == 42.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 45.00, 0.00);
		else if(rot[1] == 45.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -40.00, 0.00);
		else if(rot[1] == -40.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -43.00, 0.00);
		else if(rot[1] == -43.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 34.00, 0.00);
		else if(rot[1] == 34.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 37.00, 0.00);
		else if(rot[1] == 37.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -28.00, 0.00);
		else if(rot[1] == -28.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -31.00, 0.00);
		else if(rot[1] == -31.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 22.00, 0.00);
		else if(rot[1] == 22.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 25.00, 0.00);
		else if(rot[1] == 25.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -15.00, 0.00);
		else if(rot[1] == -15.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, -18.00, 0.00);
		else if(rot[1] == -18.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, 5.00, 0.00);
		else if(rot[1] == 5.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 7.00, 0.00);
		else if(rot[1] == 7.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]+0.1, 0.103, 0.00, -2.00, 0.00);
		else if(rot[1] == -2.00) MoveDynamicObject(Vikingo_Base, pos[0], pos[1], pos[2]-0.1, 0.1, 0.00, 0.00, 0.00);
	}

	if(objectid == Carousel_Base)
	{
		new Float:pos[3];
	    GetDynamicObjectPos(Carousel_Base, pos[0], pos[1], pos[2]);

	    new Float:rot[3];
	    GetDynamicObjectRot(Carousel_Base, rot[0], rot[1], rot[2]);

	    if(rot[2] == 180) MoveDynamicObject(Carousel_Base, pos[0], pos[1], pos[2]-0.1005, 0.01, 0.00, 0.00, 360.00);
	    else if(rot[2] == 360) MoveDynamicObject(Carousel_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, 0.00, 0.00, 0.00);
	}

	if(objectid == Revolution_Base)
	{
 		new Float:pos[3];
	    GetDynamicObjectPos(Revolution_Base, pos[0], pos[1], pos[2]);

	    new Float:rot[3];
	    GetDynamicObjectRot(Revolution_Base, rot[0], rot[1], rot[2]);

		if(rot[2] == 180) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]-0.1005, 0.02, 0.00, 0.00, 360.00);
		else if(rot[2] == 360) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]+0.1005, 0.033, 0.00, 0.00, -170.00);
		else if(rot[2] == -170) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]-0.1005, 0.03, 0.00, 0.00, -350.00);
		else if(rot[2] == -350) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]+0.1005, 0.02, 0.00, 0.00, -150.00);
		else if(rot[2] == -150) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]-0.1005, 0.1, 0.00, 0.00, -180.00);
		else if(rot[2] == -180) MoveDynamicObject(Revolution_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, 0.00, 0.00, 0.00);
	}

	if(objectid == Topgun_Base)
	{
	    new Float:pos[3];
	    GetDynamicObjectPos(Topgun_Base, pos[0], pos[1], pos[2]);
	    new Float:rot[3];
	    GetDynamicObjectRot(Topgun_Base, rot[0], rot[1], rot[2]);
	    if(rot[0] == -180.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]-0.1005, 0.02, -360.00, 90.00, 90.00);
	    else if(rot[0] == -360.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]+0.1005, 0.03, -181.00, 90.00, 90.00);
	    else if(rot[0] == -181.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]+0.1005, 0.05, -361.00, 90.00, 90.00);
	    else if(rot[0] == -361.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]-0.1005, 0.04, -182.00, 90.00, 90.00);
	    else if(rot[0] == -182.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]-0.1005, 0.02, -5.0, 90.00, 90.00);
	    else if(rot[0] == -5.0) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]+0.1005, 0.1, 0.00, 90.00, 90.00);
	    else if(rot[0] == 0.0)
	    {
		    new Float:posa[6];
		    GetDynamicObjectPos(Topgun_Stairs[0], posa[0], posa[1], posa[2]);
		    GetDynamicObjectPos(Topgun_Stairs[1], posa[3], posa[4], posa[5]);
		    MoveDynamicObject(Topgun_Stairs[0], posa[0], posa[1], posa[2]+3.5, 1.5);
		    MoveDynamicObject(Topgun_Stairs[1], posa[3], posa[4], posa[5]+3.5, 1.5);
	        stair = false;
	    }
	}

	if(objectid == Jail_Doors[0])
	{
	    if(!door)
	    {
			if(IsObjectMoving(Jail_Base)) return 1;
			if(IsObjectMoving(Jail_Doors[0])) return 1;
			new Float:pos[3];
			GetObjectPos(Jail_Base, pos[0], pos[1], pos[2]);
			new Float:rot[3];
			GetObjectRot(Jail_Base, rot[0], rot[1], rot[2]);
			AttachObjectToObject(Jail_Doors[0], Jail_BasePlatform, 0.894, 3.5, -0.6093, 0, 0, 0, 1);
			AttachObjectToObject(Jail_Doors[1], Jail_BasePlatform, -0.894, 3.5, -0.6093, 0, 0, 0, 1);
			if(rot[1] == 0.00) MoveObject(Jail_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, 0.0, 180.0, 0);
	    }
	}

	if(objectid == Jail_Base)
	{
	    new Float:t[3];
		GetObjectRot(Jail_Base, t[0], t[1], t[2]);
		if(t[0] == 0.0 && t[1] == 180.0 && t[2] == 0.0)
		{
			new Float:pos[3];
			GetObjectPos(Jail_Base, pos[0], pos[1], pos[2]);
			MoveObject(Jail_Base, pos[0], pos[1], pos[2]-0.1005, 0.01, 0.0, -359.0, 0);
		}
		else if(t[0] == 0.0 && t[1] == -359.0 && t[2] == 0.0)
		{
			new Float:pos[3];
			GetObjectPos(Jail_Base, pos[0], pos[1], pos[2]);
			MoveObject(Jail_Base, pos[0], pos[1], pos[2]-0.005, 0.1, 0.0, 0.0, 0);
		}
		else if(t[0] == 0.0 && t[1] == 0.0 && t[2] == 0.0)
		{
		    new Float:pos[6];
		    GetObjectPos(Jail_Doors[0], pos[0], pos[1], pos[2]);
		    GetObjectPos(Jail_Doors[1], pos[3], pos[4], pos[5]);
		    DestroyObject(Jail_Doors[0]);
		    DestroyObject(Jail_Doors[1]);
		    Jail_Doors[0] = CreateObject(19303, pos[0], pos[1], pos[2],   0.00, 0.00, 0.00);
			Jail_Doors[1] = CreateObject(19302, pos[3], pos[4], pos[5],   0.00, 0.00, 0.00);
			new Float:pos2[3];
			GetObjectPos(Jail_Doors[0], pos2[0], pos2[1], pos2[2]);
			MoveObject(Jail_Doors[0], pos2[0]+1.5, pos2[1], pos2[2], 1.5);
			new Float:pos3[3];
			GetObjectPos(Jail_Doors[1], pos3[0], pos3[1], pos3[2]);
			MoveObject(Jail_Doors[1], pos3[0]-1.5, pos3[1], pos3[2], 1.5);
			door = true;
		}
	}

	if(objectid == Projekt_Base[0])
	{
		new Float:pos[3];
		GetDynamicObjectPos(Projekt_Base[0], pos[0], pos[1], pos[2]);
		new Float:rot[3];
		GetDynamicObjectRot(Projekt_Base[0], rot[0], rot[1], rot[2]);
	    if(rot[0] == 10.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.3, 12.00, 90.00, 0.00);
	    else if(rot[0] == 12.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.11, -20.00, 90.00, 0.00);
	    else if(rot[0] == -20.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.33, -22.00, 90.00, 0.00);
	    else if(rot[0] == -22.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, 30.00, 90.00, 0.00);
	    else if(rot[0] == 30.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 32.00, 90.00, 0.00);
	    else if(rot[0] == 32.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, -50.00, 90.00, 0.00);
	    else if(rot[0] == -50.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, -52.00, 90.00, 0.00);
	    else if(rot[0] == -52.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, 70.00, 90.00, 0.00);
	    else if(rot[0] == 70.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 73.00, 90.00, 0.00);
	    else if(rot[0] == 73.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, -1.00, 90.00, 0.00);
	    else if(rot[0] == -1.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.12, -95, 90.00, 0.00);
	    else if(rot[0] == -95.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.333, -98.00, 90.00, 0.00);
	    else if(rot[0] == -98.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.12, 5.00, 90.00, 0.00);
	    else if(rot[0] == 5.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, 100.00, 90.00, 0.00);
	    else if(rot[0] == 100.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 103.00, 90.00, 0.00);
	    else if(rot[0] == 103.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, -5.00, 90.00, 0.00);
	    else if(rot[0] == -5.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.12, -150.00, 90.00, 0.00);
	    else if(rot[0] == -150.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.333, -153.00, 90.00, 0.00);
	    else if(rot[0] == -153.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.12, 6.00, 90.00, 0.00);
	    else if(rot[0] == 6.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, 90.00, 90.00, 0.00);
	    else if(rot[0] == 90.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 93.00, 90.00, 0.00);
	    else if(rot[0] == 93.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.12, -60.00, 90.00, 0.00);
	    else if(rot[0] == -60.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, -63.00, 90.00, 0.00);
	    else if(rot[0] == -63.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.11, 40.00, 90.00, 0.00);
	    else if(rot[0] == 40.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 43.00, 90.00, 0.00);
	    else if(rot[0] == 43.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.11, -21.00, 90.00, 0.00);
	    else if(rot[0] == -21.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, -23.00, 90.00, 0.00);
	    else if(rot[0] == -23.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.11, 9.00, 90.00, 0.00);
	    else if(rot[0] == 9.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.333, 11.00, 90.00, 0.00);
	    else if(rot[0] == 11.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]+0.1005, 0.10, -3.00, 90.00, 0.00);
	    else if(rot[0] == -3.00) MoveDynamicObject(Projekt_Base[0], pos[0], pos[1], pos[2]-0.1005, 0.10, 0.00, 90.00, 0.00);
	}

	if(objectid == Observer_Base)
	{
	    new Float:rot[3];
        GetDynamicObjectRot(Observer_Base, rot[0], rot[1], rot[2]);
		if(rot[2] == 180) SetTimer("DownObserver_Base", 5000, 0);
		else if(rot[2] == 360) SetObjectRot(Observer_Base, 0, 0, 0);
	}
/*
	if(objectid == FerrisWheel_Base)
	{
        new Float:pos[3];
		GetDynamicObjectPos(FerrisWheel_Base, pos[0], pos[1], pos[2]);
		new Float:rot[3];
		GetDynamicObjectRot(FerrisWheel_Base, rot[0], rot[1], rot[2]);
		if(rot[1] == 180.00) MoveDynamicObject(FerrisWheel_Base, pos[0], pos[1], pos[2]-0.05, 0.01, 0.00, 360.00, 90.00);
		else if(rot[1] == 360.00) MoveDynamicObject(FerrisWheel_Base, pos[0], pos[1], pos[2]+0.05, 0.01, 0.00, 0.00, 90.00);
	}
*/
	if(objectid == Caida_Base[0])
	{
	    new Float:pos[3];
	    GetDynamicObjectPos(Caida_Base[0], pos[0], pos[1], pos[2]);
	    if(pos[2] == 19.0200) MoveDynamicObject(Caida_Base[0], pos[0], pos[1], pos[2]+34.5, 2.5);
	    else if(pos[2] == 53.52) MoveDynamicObject(Caida_Base[0], pos[0], pos[1], pos[2]+2.5993, 1.5);
	    else if(pos[2] == 56.1193) SetTimer("DownCaida_Base", 3000, 0);
	    else if(pos[2] == 18.52) MoveDynamicObject(Caida_Base[0], pos[0], pos[1], pos[2]-5, 1.5);
	}

	new
		Float:x,
		Float:y,
		Float:z;
	for(new i; i != sizeof(Obj_FloorDoors); i++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetDynamicObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetDynamicObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("Lift használata: 'F'", 0xFFFFDD, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, false);
	}

	if(objectid == gLegbalon && !(g_ServerFlags & e_LEGBALON_WAIT))
	{
	    if(++gLegbalonPos[0] >= sizeof(g_fLegbalonPos))
	    {
	        gLegbalonPos[0] = 0;
	        g_ServerFlags |= e_LEGBALON_WAIT;
		}

		MoveDynamicObject(gLegbalon, g_fLegbalonPos[gLegbalonPos[0]][0], g_fLegbalonPos[gLegbalonPos[0]][1], g_fLegbalonPos[gLegbalonPos[0]][2], 7.5);
	}
	if(objectid == Roller_Platform)
	{
	    new Float:pos[3];
	    GetDynamicObjectPos(Roller_Platform, pos[0], pos[1], pos[2]);
	    if(pos[2] == 25.5624) SetTimer("DownRollerBase", 5000, 0);
	}

	if(objectid == Topgun_Stairs[0])
	{
	    if(stair)
	    {
		    new Float:pos[3];
		    GetDynamicObjectPos(Topgun_Base, pos[0], pos[1], pos[2]);
		    new Float:rot[3];
		    GetDynamicObjectRot(Topgun_Base, rot[0], rot[1], rot[2]);
		    if(rot[0] == 0.00) MoveDynamicObject(Topgun_Base, pos[0], pos[1], pos[2]+0.1005, 0.01, -180.00, 90.00, 90.00);
	    }
	}

	if(objectid == Cow_Seats[0])
	{
		new Float:pos[12];
		GetDynamicObjectPos(Cow_Seats[0], pos[0], pos[1], pos[2]);
		GetDynamicObjectPos(Cow_Seats[1], pos[3], pos[4], pos[5]);
		GetDynamicObjectPos(Cow_Seats[2], pos[6], pos[7], pos[8]);
		GetDynamicObjectPos(Cow_Seats[3], pos[9], pos[10], pos[11]);


		if(F_ret == -1) return 1;
	 	else if(F_ret == 0)
	 	{
		 	MoveDynamicObject(Cow_Seats[0], pos[0], pos[1], pos[2]-0.05, 0.5, -random(10), -random(10), -random(5));
			MoveDynamicObject(Cow_Seats[1], pos[3], pos[4], pos[5]-0.05, 0.5, -random(10), -random(10), -random(5));
			MoveDynamicObject(Cow_Seats[2], pos[6], pos[7], pos[8]-0.05, 0.5, -random(10), -random(10), -random(5));
			MoveDynamicObject(Cow_Seats[3], pos[9], pos[10], pos[11]-0.05, 0.5, -random(10), -random(10), -random(5));
			F_ret = 1;
		}
	 	else if(F_ret == 1)
		{
	 		MoveDynamicObject(Cow_Seats[0], pos[0], pos[1], pos[2]+0.05, 0.5, random(10), random(10), random(5));
			MoveDynamicObject(Cow_Seats[1], pos[3], pos[4], pos[5]+0.05, 0.5, random(10), random(10), random(5));
			MoveDynamicObject(Cow_Seats[2], pos[6], pos[7], pos[8]+0.05, 0.5, random(10), random(10), random(5));
			MoveDynamicObject(Cow_Seats[3], pos[9], pos[10], pos[11]+0.05, 0.5, random(10), random(10), random(5));
			F_ret = 0;
		}
	}

	return 1;
}

forward DownRollerBase();
public DownRollerBase()
{
	new Float:pos[3];
	GetDynamicObjectPos(Roller_Platform, pos[0], pos[1], pos[2]);
	MoveDynamicObject(Roller_Platform, pos[0], pos[1], 5.97849, 2.5);
	return 1;
}

forward DownObserver_Base();
public DownObserver_Base()
{
	new Float:pos[3];
    GetDynamicObjectPos(Observer_Base, pos[0], pos[1], pos[2]);
	MoveDynamicObject(Observer_Base, pos[0], pos[1], pos[2]-95.61682, 15.5, 0, 0, 360);
	return 1;
}

forward DownCaida_Base();
public DownCaida_Base()
{
	new Float:pos[3];
    GetDynamicObjectPos(Caida_Base[0], pos[0], pos[1], pos[2]);
    MoveDynamicObject(Caida_Base[0], pos[0], pos[1], pos[2]-37.5993, 15.5);
	return 1;
}

forward StopBull();
public StopBull()
{
    new Float:pos[12];
	GetDynamicObjectPos(Cow_Seats[0], pos[0], pos[1], pos[2]);
	GetDynamicObjectPos(Cow_Seats[1], pos[3], pos[4], pos[5]);
	GetDynamicObjectPos(Cow_Seats[2], pos[6], pos[7], pos[8]);
	GetDynamicObjectPos(Cow_Seats[3], pos[9], pos[10], pos[11]);
    if(F_ret == 0)
	{
		MoveDynamicObject(Cow_Seats[0], pos[0], pos[1], pos[2]-0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[1], pos[3], pos[4], pos[5]-0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[2], pos[6], pos[7], pos[8]-0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[3], pos[9], pos[10], pos[11]-0.05, 0.5, 0.00, 0.00, 0.00);
		F_ret = -1;
	}
    else if(F_ret == 1)
	{
		MoveDynamicObject(Cow_Seats[0], pos[0], pos[1], pos[2]+0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[1], pos[3], pos[4], pos[5]+0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[2], pos[6], pos[7], pos[8]+0.05, 0.5, 0.00, 0.00, 0.00);
		MoveDynamicObject(Cow_Seats[3], pos[9], pos[10], pos[11]+0.05, 0.5, 0.00, 0.00, 0.00);
		F_ret = -1;
	}
	return 1;
}

forward ResetHouseVariable(playerid);
public ResetHouseVariable(playerid)
{
	DeletePVar(playerid, "OnHouseTimer");
	DeletePVar(playerid, "OnHouse");
	return 1;
}

forward ResetHouseVariable_Exit(playerid);
public ResetHouseVariable_Exit(playerid)
{
	DeletePVar(playerid, "OnHouseTimerE");
	DeletePVar(playerid, "OnHouseE");
	return 1;
}

forward ResetBiznisVariable(playerid);
public ResetBiznisVariable(playerid)
{
	DeletePVar(playerid, "OnBiznisTimer");
	DeletePVar(playerid, "OnBiznis");
	return 1;
}

forward ResetBiznisVariable_Exit(playerid);
public ResetBiznisVariable_Exit(playerid)
{
	DeletePVar(playerid, "OnBiznisTimerE");
	DeletePVar(playerid, "OnBiznisE");
	return 1;
}

// pickuppickup
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;


    new pickupid_ = GetPickUpID(playerid);

	if(pickupid_ != -1)
	{
	    InfoTD_MSG(playerid, 500, LANG(playerid, "MSG_VERSENY_ELINDITASA"));
	    return 1;
	}



/*
	#if defined YSF
	GetPickupPos(pickupid, X, Y, Z);
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, X, Y, Z))
	{
        AntiCheatLog(playerid, "FAKE PICKUP RPC %d (%.2f)", pickupid, GetPlayerDistanceFromPoint(playerid, X, Y, Z));
	}
	#endif
*/
	if(g_pDebug{playerid} == 12) SendClientMessagef(playerid, -1, "OnPlayerPickUpPickup(playerid = %d, pickupid = %d)", playerid, pickupid);

	new pickupdata[2];
	Streamer_GetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);
	switch(pickupdata[0])
	{
		case e_PICKUP_TYPE_DEFAULT:
		{
			/*if(g_arena_created)
			{
				for(new blockid; blockid < ARENA_SIZE; blockid++)
				{
					if(pickupid == b_pickupid[blockid])
					{
						OnPlayerCaptureBlock(playerid, blockid);
						break;
					}
				}
			}*/

			if(!(g_pGamesData[playerid] & e_IN_RANGE))
			{
				for(new p; p < 6; p++)
				{
					if(pickupid == RangePickup[p])
					{
						//if(g_PlayerFlags[playerid] & e_GOD) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_GOD_MODBAN_NEM_LOVOLDOZHETED"));
		                SetGoodAllowed(playerid, false);

					    ShowPlayerDialogEx(playerid, 9457, DIALOG_STYLE_LIST, "{FFFFFF}Válassz fegyvert:", "{FFBF00}AK47\n{FFBF00}M4\n{FFBF00}Country Rifle\n{FFBF00}Sniper", "Ok", "Mégse");
						return 1;
					}
				}
			}
		    if(pickupid == RangePickup[6])
			{
			    //format(dline, 1024, "%s\n\n{FFBF00}[{FFFFFF} Készítõk {FFBF00}]\n{FFBF00}Zh3r0 \t\t{FFFFFF}- A script készítõje\n{FFBF00}DeatheR \t{FFFFFF}- Funkciók ( Szinte mind )\n{FFBF00}niCe \t\t{FFFFFF}- {FFBF00}IsPlayerAimingAt{FFFFFF} funkció\n\nJó játékot!\n",Info());
			    //ShowPlayerDialogEx(playerid, 2593, DIALOG_STYLE_MSGBOX, "{FFBF00}Shooting Range: {FFFFFF}Információ", dline, "Ok");
			}
		    if(pickupid == RangePickup[7])
			{
				date(Range[e_rTime], day, month, year, hour, minute, second);

				format(dline, sizeof(dline), "Hallövölde rekord:\n\n \t{FFBF00}Idõ: {" #XCOLOR_GREEN "}%d:%02d.%03d\n\t{FFBF00}By: {" #XCOLOR_WHITE "}%s {" #XCOLOR_DEFAULT "}( %02d.%02d.%02d %02d:%02d:%02d )", Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2], Range[Player], year, month, day, hour, minute, second);
			    ShowPlayerDialogEx(playerid, 2593, DIALOG_STYLE_MSGBOX, "{FFBF00}Shooting Range: {FFFFFF}Rekordok", dline, "Ok");
			}

		    else if(pickupid == pwnt)
		    {
				GameTextForPlayer(playerid, "~g~Info:~n~~w~Fuck ~r~You~w~!",5000,3);
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OK_EZTET_KURVARA_MEGSZIVTAD"));
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG____1_VALASZTAS_OLD_MEG_MAGAD"));
				SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG____2_VALASZTAS_NINCS_MASODIK"));
		    }
		    else if(pickupid == gDive[0])
			{
				cmd_dive(playerid, "500");
				GivePlayerWeapon(playerid, 46, 1);
			}
		    else if(pickupid == gDive[1])
			{
				cmd_dive(playerid, "750");
				GivePlayerWeapon(playerid, 46, 1);
			}

		    else if(pickupid == fire[0]) return GivePlayerWeapon(playerid, 37, 1000);
		    else if(pickupid == fire[1]) return GivePlayerWeapon(playerid, 37, 1000);
		    else if(pickupid == fire[2]) return GivePlayerWeapon(playerid, 37, 1000);
		    else if(pickupid == fire[3]) return GivePlayerWeapon(playerid, 37, 1000);
		    else if(pickupid == molotov) return GivePlayerWeapon(playerid, 18, 50);
		    else if(pickupid == ajtonyito[0]) return GameTextForPlayer(playerid, "~g~~h~ /open ~b~~h~/close", 3000, 3);
		    else if(pickupid == ajtonyito[1]) return GameTextForPlayer(playerid, "~g~~h~ /open ~b~~h~/close", 3000, 3);
			else if(pickupid == gBistroEnter[0]) return SimpleTele(playerid, -794.8170, 494.4794, 1376.1953, 359);
			else if(pickupid == gBistroEnter[1]) return SimpleTele(playerid, -772.2888, 505.2762, 1376.5594, 271);

			// Fegyverboltok
			else if(pickupid == gLVFBPickup[0]) return SimpleTele(playerid, 301.2847, -72.8864, 1001.5156, 0.9400);
			else if(pickupid == gLVFBPickup[1]) return SimpleTele(playerid, 301.7725, -78.9724, 1001.5156, 166.8847);
			else if(pickupid == gLVFBPickup[2]) return SimpleTele(playerid, 305.8257, -57.9540, 1001.5156, 92.2657);
			else if(pickupid == gLVFBPickup[3]) return SimpleTele(playerid, 301.1194, -57.5626, 1001.5156, 83.6374);

			else if(pickupid == gLVFBBigPickup[0]) return SimpleTele(playerid, 302.4416, -141.7866, 1004.0625, 81.8042);
			else if(pickupid == gLVFBBigPickup[1]) return SimpleTele(playerid, 307.5916, -142.2664, 1004.0625, 262.9131);
			else if(pickupid == gLVFBBigPickup[2]) return SimpleTele(playerid, 296.8401, -141.9846, 1004.0625, 95.3992);
			else if(pickupid == gLVFBBigPickup[3]) return SimpleTele(playerid, 301.3773, -141.7941, 1004.0625, 270.0725);

			else if(pickupid == gLVFBGreenPickup[0]) return SimpleTele(playerid, 303.3697, -159.4055, 999.5938, 121.1653);
			else if(pickupid == gLVFBGreenPickup[1]) return SimpleTele(playerid, 307.6604, -160.4936, 999.5938, 233.0851);
			else if(pickupid == gLVFBGreenPickup[2]) return SimpleTele(playerid, 295.9954, -168.6806, 999.5938, 86.9392);
			else if(pickupid == gLVFBGreenPickup[3]) return SimpleTele(playerid, 300.5925, -168.8836, 999.5938, 291.8307);

			else if(pickupid == gLVFBOtherPickup[0]) return SimpleTele(playerid, 287.4692, -26.5633, 1001.5156, 284.1960);
			else if(pickupid == gLVFBOtherPickup[1]) return SimpleTele(playerid, 286.2506, -32.2335, 1001.5156, 214.2564);
			else if(pickupid == gLVFBOtherPickup[2]) return SimpleTele(playerid, 286.4081, -21.1528, 1001.5229, 338.6931);
			else if(pickupid == gLVFBOtherPickup[3]) return SimpleTele(playerid, 287.0690, -25.9498, 1001.5156, 231.8687);

			else if(pickupid == gCaligulaCasino[0]) return SimpleTele(playerid, 2184.8057, 1625.9515, 1043.3508, 142.1393);
			else if(pickupid == gCaligulaCasino[1]) return SimpleTele(playerid, 2271.3545, 1634.7396, 1008.3594, 175.8449);

			else if(pickupid == gDragonsCasino[0]) return SimpleTele(playerid, 1886.0386, 1017.7661, 31.8358, 267.3578);
			else if(pickupid == gDragonsCasino[1]) return SimpleTele(playerid, 1962.6788, 1061.0486, 994.4688, 147.9437);

			else if(pickupid == gFegyverBoltAru[0]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[1]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[2]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[3]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[4]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[5]) return cmd_weapons(playerid, "");
			else if(pickupid == gFegyverBoltAru[6]) return cmd_weapons(playerid, "");

			else if(pickupid == g_SpawnPickup[0]) return cmd_weapons(playerid, "");
			else if(pickupid == g_SpawnPickup[1]) return cmd_t(playerid, "");
			else if(pickupid == g_SpawnPickup[2]) return cmd_help(playerid, "");
			else if(pickupid == g_SpawnPickup[3]) return cmd_cmds(playerid, "");

			else if(pickupid == ZaszloPickup)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]))
				{
					if(g_PlayerData[playerid] & e_CLEARWORLD || g_pGamesData[playerid] & e_GHOSTMODE)
					{
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_CLEARWORLDBEN_NEM_VEHETED_FEL"));
						SendClientMessage(playerid, COLOR_DEFAULT, "Ghost Mode-ban sem!");
						return 1;
					}
		/*
					if(g_PlayerFlags[playerid] & e_GOD)
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_GOD_MODBAN_NEM_LEHET_NALAD"));
						return 1;
					}
		*/
					if(g_pGamesData[playerid] & e_GRAV)
					{
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_AT_VAN_ALLITVA_A_GRAVITACIOD_1"));
						SendClientMessage(playerid, COLOR_DEFAULT, LANG(playerid, "MSG_ALLITSD_VISSZA_ALAPRA_MYGRAV"));
						return 1;
					}

					if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG))
					{
						SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NEM_VEHETED_FEL_A_ZASZLOT"));
						return 1;
					}

					if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
					{
		                ClearAnimations(playerid);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					}

					SetPlayerAttachedObject(playerid, 9, 2914, 5, 0, 0, 0, 50, -90, 0);
				    ZaszloOwner = playerid;
		            ZaszloRespawn = 0;
		            g_pGamesData[playerid] |= e_FLAG_OWNER;
		         
					if(g_pChatMSGFlags[playerid] & e_Flag_MSG) InfoTD_MSG(playerid, 5000, LANG(playerid, "MSG_BHMEGSZEREZTED_A_GHHZASZLO"));
			        foreach(Player, i)
					{
					    if(g_pChatMSGFlags[i] & e_Flag_MSG) continue;
					 	SendClientMessagef(i, 0x132CD5AA, LANG(i, "MSG__FLAG___MEGSZEREZTE_A_ZASZ"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, GetClosestZaszloPos());
					}
			        DestroyDynamicPickup(ZaszloPickup);
					ZaszloPickup = -1;
				}
			}
		/*

			switch(GetPVarInt(playerid, "HQ"))
			{
				case 1:
				{
					printf("Case 1");
					for(new i; i != sizeof(GrovePickup); i++)
					{
		                printf("Case 2");
						if(pickupid != GrovePickup[i]) continue;
						datez = GetGVarInt("PickupModel", pickupid);

						if(datez == 1240)
						{
							SetPlayerHealth(playerid, 100);
						}
						else if(datez == 1242)
						{
							SetPlayerArmour(playerid, 100);
						}
						else
						{
		                	GivePlayerWeapon(playerid, GetWeaponIDFromModel(datez), 120);
						}
					}
				}
			}
		*/

		}
		case e_PICKUP_TYPE_HOUSE:
		{
			houseid = pickupdata[1] & 2147483647; // elõjel van használva a belsõ/külsõ megkülönböztetésére
			datez = pickupdata[1] >> 31 & 1;
			//printf("houseid: %d, datez: %d, pickupdata: %b", houseid, datez, pickupdata[1]);

			// Kint
			if(!datez)
			{
				if(GetPVarInt(playerid, "PlayerProp") == houseid || !GetGVarType("PropLocked", houseid))
				{
					InfoTD_MSG(playerid, 2000, LANG(playerid, "MSG_YHBELEPESHEZ_GHRFGH_"));
				}
				else
				{
					InfoTD_MSG(playerid, 2000, LANG(playerid, "MSG_YHBELEPESHEZ_GHRFGH__1"));
				}
				SetPVarInt(playerid, "OnHouse", houseid);

				if(GetPVarType(playerid, "OnHouseTimer"))
				{
					KillTimer(GetPVarInt(playerid, "OnHouseTimer"));
				}
				SetPVarInt(playerid, "OnHouseTimer", SetTimerEx("ResetHouseVariable", 2500, false, "d", playerid));
			}
			else
			{
		        InfoTD_MSG(playerid, 1300, LANG(playerid, "MSG_YHKIJOVES_GHRFGH_Y"));
				SetPVarInt(playerid, "OnHouseE", houseid);

				if(GetPVarType(playerid, "OnHouseTimerE"))
				{
					KillTimer(GetPVarInt(playerid, "OnHouseTimerE"));
				}
				SetPVarInt(playerid, "OnHouseTimerE", SetTimerEx("ResetHouseVariable_Exit", 2500, false, "d", playerid));
			}
		}
		case e_PICKUP_TYPE_BIZNIS:
		{
			houseid = pickupdata[1] & 2147483647; // elõjel van használva a belsõ/külsõ megkülönböztetésére
			datez = pickupdata[1] >> 31 & 1;

			// Kint
			if(!datez)
			{
				new BizPrice;
				if(!(BizPrice = GetGVarInt("BizEnterValue", houseid)))
				{
					InfoTD_MSG(playerid, 2000, LANG(playerid, "MSG_YHBELEPESHEZ_GHRFGH_"));
				}
				else
				{
					InfoTD_MSGf(playerid, 2000, LANG(playerid, "MSG_BELEPESHEZ_BIZNIS"), FormatNumber(BizPrice));
				}
				SetPVarInt(playerid, "OnBiznis", houseid);

				if(GetPVarType(playerid, "OnBiznisTimer"))
				{
					KillTimer(GetPVarInt(playerid, "OnBiznisTimer"));
				}
				SetPVarInt(playerid, "OnBiznisTimer", SetTimerEx("ResetBiznisVariable", 2500, false, "d", playerid));
			}
			else
			{
		        InfoTD_MSG(playerid, 2000, LANG(playerid, "MSG_YHKIJOVES_GHRFGH_Y"));
				SetPVarInt(playerid, "OnBiznisE", houseid);

				if(GetPVarType(playerid, "OnBiznisTimerE"))
				{
					KillTimer(GetPVarInt(playerid, "OnBiznisTimerE"));
				}
				SetPVarInt(playerid, "OnBiznisTimerE", SetTimerEx("ResetBiznisVariable_Exit", 2500, false, "d", playerid));
			}
		}
		case e_PICKUP_TYPE_HORSESHOE:
		{
			new i = pickupdata[1];
			if(IsPlayerInRangeOfPoint(playerid, 5.0, HorseShoes[i][0], HorseShoes[i][1], HorseShoes[i][2]))
			{
                if(Bit_Get(g_pHorseshoes[playerid], i)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZT_A_PATKOT_MAR_MEGTALALTAD"));

				Bit_Set(g_pHorseshoes[playerid], i, true);

				new
				    Curr = UpdatePlayerHorseShoes(playerid);
				if(Curr == 50)
				{
					GivePlayerMoneyEx(playerid, 500000, "Patko_All");
					GivePlayerXP(playerid, 500);
					ShowWelcome(playerid, LANG(playerid, "MSG_MINDEN_PATKO_MEGTALALVA_JUTALOM"));
				}
				else
				{
                    GivePlayerXP(playerid, XP_PATKO);
					GivePlayerMoneyEx(playerid, 500, "Patko");
					ShowWelcomef(playerid, LANG(playerid, "MSG_PATKO_MEGTALALVANBWR50"), Curr);
				}
                return 1;
			}
		}
		case e_PICKUP_TYPE_OYSTER:
		{
			new i = pickupdata[1];
			if(IsPlayerInRangeOfPoint(playerid, 5.0, Oysters[i][0], Oysters[i][1], Oysters[i][2]))
			{
 				if(Bit_Get(g_pOysters[playerid], i)) return ShowWelcome(playerid, LANG(playerid, "MSG_REZT_AZ_OSZTRIGAT_MEGTALALTAD"));

                Bit_Set(g_pOysters[playerid], i, true);

				new
				    Curr = UpdatePlayerOysters(playerid);
                GivePlayerXP(playerid, XP_OSZTRIGA);
				if(Curr == 50)
				{
                    GivePlayerXP(playerid, 500);
					GivePlayerMoneyEx(playerid, 500000, "Osztriga_All");
					ShowWelcome(playerid, LANG(playerid, "MSG_MINDEN_OSZTRIGA_MEGTALALVA"));
				}
				else
				{
                    GivePlayerXP(playerid, 2);
					GivePlayerMoneyEx(playerid, 500, "Osztriga");
					ShowWelcomef(playerid, LANG(playerid, "MSG_OSZTRIGA_MEGTALALVANBWR5"), Curr);
				}
                return 1;
			}
		}
		case e_PICKUP_TYPE_DEATH_MONEY:
		{
			GivePlayerMoneyEx(playerid, randomex(700, 1000), "DeathMoney");
			DestroyDynamicPickup(pickupid);
		}
	}

	if(IsValidDynamicPickup(pickupid))
	{
		datez = Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_MODEL_ID);
		switch(datez)
		{
			case 370:
			{
	            g_pOtherFlags[playerid] |= e_JETPACK;
			}
			case 1240:
			{
				return /*SetPlayerHealth(playerid, 100.0);*/ SetPlayerHealth(playerid, (IsClient(playerid)) ? (176.0) : (100.0));
			}
			case 1242:
			{
				return SetPlayerArmour(playerid, 100.0);
			}
		}

		Bit_Set(g_baAllowedWeapon[playerid], GetWeaponIDFromModel(datez), true);
	}
    return 1;
}
/*
public Audio_OnClientConnect(playerid)
{
	Audio_SendMessage(playerid, "Connected to MFR!");
	return 1;
}
*/
stock crossp(Float:v1x, Float:v1y, Float:v1z, Float:v2x, Float:v2y, Float:v2z, &Float:output_)
{
	new
		Float:c1 = (v1y * v2z) - (v1z * v2y),
		Float:c2 = (v1z * v2x) - (v1x * v2z),
        Float:c3 = (v1x * v2y) - (v1y * v2x);
    output_ = floatsqroot ((c1 * c1) + (c2 * c2) + (c3 * c3));
    return 0;
}

stock GetDistanceFromPointToLine(&Float:distance, Float:line_vector_x, Float:line_vector_y, Float:line_vector_z, Float:line_x, Float:line_y, Float:line_z, Float:point_x, Float:point_y, Float:point_z)
{
	//A line is defined by a point (which is on the line (line_x/y/z)) and a vector which defines the direction (line_vector_x/y/z).
	new
		Float:output;
    crossp(line_vector_x, line_vector_y, line_vector_z, point_x - line_x, point_y - line_y, point_z - line_z, output);//Cross product of 2 vectors.
    distance = output / floatsqroot ((line_vector_x * line_vector_x) + (line_vector_y * line_vector_y) + (line_vector_z * line_vector_z));
	return 0;
}

public OnPlayerUpdate(playerid)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	// Anti crash védelem
	new Float:fPosition[3];
	GetPlayerPos(playerid, fPosition[0], fPosition[1], fPosition[2]);
	/*
	if(
		((fPosition[0] > WB_MAX_X || fPosition[0] < WB_MIN_X) || (fPosition[0] != fPosition[0])) ||
		((fPosition[1] > WB_MAX_Y || fPosition[1] < WB_MIN_Y) || (fPosition[1] != fPosition[1])) ||
		((fPosition[2] > 99999.0 || fPosition[2] < -99999.0) || (fPosition[2] != fPosition[2]))
	)
		return 0;
	*/

	new
		drunknew = GetPlayerDrunkLevel(playerid);
    if(drunknew < 100)
	{
        SetPlayerDrunkLevel(playerid, 2000);
    }
	else
	{
	 	if(g_pDrunkLevelLast[playerid] != GetPlayerDrunkLevel(playerid))
		{
	 		new
				wfps = g_pDrunkLevelLast[playerid] - GetPlayerDrunkLevel(playerid);
			if(0 <= wfps <= 400)
			{
	     		g_pFPS[playerid] = wfps;
			}
	  		g_pDrunkLevelLast[playerid] = GetPlayerDrunkLevel(playerid);
	    }
	}
	PlayerInfo[playerid][pLastActive] = GetTickCount();

	new
		pState = GetPlayerState(playerid),
		pCam = GetPlayerCameraMode(playerid),
		pWeap = GetPlayerWeapon(playerid);

	if(((g_PlayerFlags[playerid] & e_GOD) && g_pOtherFlags[playerid] & e_GOD_ALLOWED) || ((e_IN_DERBY | e_IN_FALLOUT | e_IN_TRUCKING | e_IN_RACE | e_POSTAS | e_PIZZAS | e_IN_TAXI) & g_pGamesData[playerid]))
	{
		if(pWeap != WEAPON_CAMERA && pWeap != WEAPON_PARACHUTE)
		{
			SetPlayerArmedWeapon(playerid, 0); //Amikor godba akar fegyverre váltani
		}
	}
    //SetPVarInt(playerid, "HoldenWeapon", pWeap);

    if(GetPVarType(playerid, "SpawnKill"))
        SetPlayerArmedWeapon(playerid, 0);

	switch(pCam)
	{
		case 7, 8, 16, 46, 51:
		{
			if(!(g_PlayerData[playerid] & e_NO_SYNC))
			{
				for(new index; index != MAX_PLAYER_ATTACHED_OBJECTS; index++)
				{
			        RemovePlayerAttachedObject(playerid, index, false);
				}
                g_PlayerData[playerid] |= e_NO_SYNC;
			}
		}
		default:
		{
			if(g_PlayerData[playerid] & e_NO_SYNC)
			{
				ReloadAttachedObjects(playerid);
				g_PlayerData[playerid] &= ~e_NO_SYNC;
			}
		}
	}

	if(g_pDebug{playerid})
	{
		switch(g_pDebug{playerid})
		{
			case 2:
			{
			    if(pState == PLAYER_STATE_ONFOOT)
			    {
					new
						aIndex = GetPlayerAnimationIndex(playerid);
					GetAnimationName(aIndex, i_str, 32, country, 32);
					SendClientMessagef(playerid, COLOR_WHITE, "AnimID: %d, Lib/Name: %s {" #XCOLOR_RED "}%s", aIndex, i_str, country);
				}
			}
			case 3:
			{
		        switch((datez = GetPlayerWeaponState(playerid)))
				{
					case -1: i_str = "WEAPONSTATE_UNKNOWN";
					case 0: i_str = "WEAPONSTATE_NO_BULLETS";
					case 1: i_str = "WEAPONSTATE_LAST_BULLET";
					case 2: i_str = "WEAPONSTATE_MORE_BULLETS";
					case 3: i_str = "WEAPONSTATE_RELOADING";
				}
				SendClientMessagef(playerid, COLOR_WHITE, "WeaponState: {" #XCOLOR_RED "}%s {" #XCOLOR_WHITE "}| %d", i_str, datez);
			}
			case 4:
			{
		        switch((datez = GetPlayerSpecialAction(playerid)))
				{
					case 0: i_str = "SPECIAL_ACTION_NONE";
					case 1: i_str = "SPECIAL_ACTION_DUCK";
					case 2: i_str = "SPECIAL_ACTION_USEJETPACK";
					case 3: i_str = "SPECIAL_ACTION_ENTER_VEHICLE";
					case 4: i_str = "SPECIAL_ACTION_EXIT_VEHICLE";
					case 5: i_str = "SPECIAL_ACTION_DANCE1";
					case 6: i_str = "SPECIAL_ACTION_DANCE2";
					case 7: i_str = "SPECIAL_ACTION_DANCE3";
					case 8: i_str = "SPECIAL_ACTION_DANCE4";
					case 10: i_str = "SPECIAL_ACTION_HANDSUP";
					case 11: i_str = "SPECIAL_ACTION_USECELLPHONE";
					case 12: i_str = "SPECIAL_ACTION_SITTING";
					case 13: i_str = "SPECIAL_ACTION_STOPUSECELLPHONE";
					case 14: i_str = "SPECIAL_ACTION_NIGHTVISION";
					case 15: i_str = "SPECIAL_ACTION_THERMALVISION";
					case 20: i_str = "SPECIAL_ACTION_DRINK_BEER";
					case 21: i_str = "SPECIAL_ACTION_SMOKE_CIGGY";
					case 22: i_str = "SPECIAL_ACTION_DRINK_WINE";
					case 23: i_str = "SPECIAL_ACTION_DRINK_SPRUNK";
					case 24: i_str = "SPECIAL_ACTION_CUFFED";
					case 25: i_str = "SPECIAL_ACTION_CARRY";
					case 68: i_str = "SPECIAL_ACTION_PISS";
				}
				SendClientMessagef(playerid, COLOR_WHITE, "SpecialAction: {" #XCOLOR_RED "}%s {" #XCOLOR_WHITE "}| %d", i_str, datez);
			}
			case 6:
			{
		        switch((datez = GetPlayerState(playerid)))
				{
					case 0: i_str = "PLAYER_STATE_NONE";
					case 1: i_str = "PLAYER_STATE_ONFOOT";
					case 2: i_str = "PLAYER_STATE_DRIVER";
					case 3: i_str = "PLAYER_STATE_PASSENGER";
					case 4: i_str = "PLAYER_STATE_EXIT_VEHICLE";
					case 5: i_str = "PLAYER_STATE_ENTER_VEHICLE_DRIVER";
					case 6: i_str = "PLAYER_STATE_ENTER_VEHICLE_PASSENGER";
					case 7: i_str = "PLAYER_STATE_WASTED";
					case 8: i_str = "PLAYER_STATE_SPAWNED";
					case 10: i_str = "PLAYER_STATE_SPECTATING";
				}
				SendClientMessagef(playerid, COLOR_WHITE, "PlayerState: {" #XCOLOR_RED "}%s {" #XCOLOR_WHITE "}| %d", i_str, datez);
			}
			case 7:
			{
				#if defined YSF
				GetPlayerRotationQuat(playerid, X, Y, Z, Angle);
				#else
				X = Y = Z = Angle = 0.0;// Y = 0.0; Z = 0.0; Angle = 0.0;
				#endif

				SendClientMessagef(playerid, COLOR_WHITE, "Cameramode: %d | Target: %d, %d | Ratio: %.4f | Zoom: %.4f - Quat: %.4f, %.4f, %.4f, %.4f", GetPlayerCameraMode(playerid), GetPlayerTargetPlayer(playerid), GetPlayerTargetActor(playerid), GetPlayerCameraAspectRatio(playerid), GetPlayerCameraZoom(playerid), X, Y, Z, Angle);
			}
			case 14:
			{
				#if defined YSF
				SendClientMessagef(playerid, COLOR_WHITE, "Last synced vehicle: %d (vID: %d) | Trailer: %d | Seat: %d | ZAim: %.2f", GetPlayerLastSyncedVehicleID(playerid), GetPlayerDynamicVehicleID(playerid), GetPlayerLastSyncedVehicleID(playerid), GetPlayerVehicleSeat(playerid), GetPlayerZAim(playerid));
				#endif
			}
			case 15:
			{
				SendClientMessagef(playerid, COLOR_WHITE, "Camera target player: %d, actor: %d, vehicle: %d, object: %d", GetPlayerCameraTargetPlayer(playerid), GetPlayerCameraTargetActor(playerid), GetPlayerCameraTargetVehicle(playerid), GetPlayerCameraTargetObject(playerid));
			}
		}
	}

	static
		key,
		ud,
		lr;
	GetPlayerKeys(playerid, key, ud, lr);

	// Ha lenyomott egy gombot
	if(key != 0 || ud != 0 || lr != 0)
	{
		// Utolsó tevékenység idejének frissítése
	    g_pLastActiveTick[playerid] = GetTickCount();
	}

	if(pState == PLAYER_STATE_ONFOOT)
    {
		if(GetPlayerAnimationIndex(playerid) == 0 && !(g_pOtherFlags[playerid] & e_RAKSAMP) && PlayerInfo[playerid][pRegID] == -1)
		{
			g_pOtherFlags[playerid] |= e_RAKSAMP;

			// Raksamposoknak minden streamer fasságot kikapcsolni
			for(new x; x != 5; x++)
			{
				Streamer_ToggleItemUpdate(playerid, x, false);
				Streamer_DestroyAllVisibleItems(playerid, x);
			}
//			ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_MSGBOX, "Bye Bye", "Más szerverre húzzál a raksampoddal.", "Buzivagyok");
//			KickEx(playerid, "raksamp");
			//SendClientMessageToAdmins(COLOR_DEFAULT, 5, "MSG_ANTICHEAT_RAKSAMP", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);


			foreach(new i: Player)
			{
				if(IsFOOwner(i)) SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG_ANTICHEAT_RAKSAMP"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);
				//return 1;
			}
			AntiCheatLog(playerid, "RakSAMP");


			mysql_format(1, query, sizeof(query),"SELECT `xp`, `ip`, `szint` FROM `players` WHERE `name` = '%s'", pName(playerid));
		 	mysql_function_query(1, query, true, "THREAD_SelectBotInfo", "dd", playerid, g_pQueryQueue[playerid]);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `laston` = %d WHERE `name` = '%s'", CurrentTimestamp(), pName(playerid));
		 	mysql_function_query(1, query, false, "", "");
	        return 0;
		}
/*
        pWeap = GetPlayerWeapon(playerid);
		if(pWeap == WEAPON_NIGHTVISION || pWeap == WEAPON_INFRARED)
		{f
	        if((key & KEY_FIRE))
	        {
	            return 0;
	        }
		}
*/
	    if(g_PlayerData[playerid] & e_ON_STYLE)
		{
			UpdateLeftRightForStyle(playerid);
		}
	}
/*
	else if(pState == PLAYER_STATE_DRIVER)
	{
		vID = GetPlayerDynamicVehicleID(playerid);
		if(g_pLastVehicle[playerid] != vID)
		{
			OnPlayerVehicleChange(playerid, g_pLastVehicle[playerid], vID);
			g_pLastVehicle[playerid] = vID;
		}
	}
*/
/*
    if(!(g_PlayerData[playerid] & e_BEBASZVA))
    {
		if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
		{
		    TextDrawShowForPlayer(playerid, ReloadTD);
		}
		else
	    {
			TextDrawHideForPlayer(playerid, ReloadTD);
	    }
	}
*/
	return !(g_PlayerData[playerid] & e_INVIS);
}

forward THREAD_SelectBotInfo(playerid, queue);
public THREAD_SelectBotInfo(playerid, queue)
{
	new
	    szIP[16];
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_SelectBotInfo);
    cache_get_row_int(0, 0, vID), SetPlayerScore(playerid, vID); //XP
    cache_get_row(0, 1, szIP), SetPVarString(playerid,"FakeIP", szIP); //FakeIP.. buzi adminok miatt
	cache_get_row_int(0, 2, vID), g_pSzint{playerid} = vID; //Szint
	return 1;
}

forward THREAD_MaxGoldpotID();
public THREAD_MaxGoldpotID()
{
	goldpot[max_goldpot_id] = cache_get_row_count();
	printf("<< MySQL >> %d aranytojás betöltve", goldpot[max_goldpot_id]);
	return 1;
}

forward THREAD_MusicID();
public THREAD_MusicID()
{
    g_Musics = cache_get_row_count();
	return 1;
}

forward THREAD_MaxHosetID();
public THREAD_MaxHosetID()
{
	g_Hosets = cache_get_row_count();
	return 1;
}

forward THREAD_GangwarCount();
public THREAD_GangwarCount()
{
	g_GangwarPlayerCount[0] = cache_get_row_int_ex(0, 0);
	g_GangwarPlayerCount[1] = cache_get_row_int_ex(1, 0);
	g_GangwarPlayerCount[2] = cache_get_row_int_ex(2, 0);
	g_GangwarPlayerCount[3] = cache_get_row_int_ex(3, 0);

//	printf("%d, %d, %d, %d", g_GangwarPlayerCount[0], g_GangwarPlayerCount[1], g_GangwarPlayerCount[2], g_GangwarPlayerCount[3]);
	return 1;
}

// LoadHouses
forward THREAD_Houses(print_message);
public THREAD_Houses(print_message)
{
	new
	    t1,
	    t2;
	t1 = GetTickCount();
	new
	    earning,
	    hname[129],
		defName[129],
	    PropPassword[35],
	    szObjects[1024],
		RablasokSzama,
	    CarModel,
	    VirtualW,
	    PropValu,
	    PropOwnerID,
	    Int,
	    CarColor[2],
	    Paintjob,
		CarComp[14],
		i,
		iRiaszto,
		iOutInt,
	    Float:Kulso[3],
        Float:CarPos[3],
//        flags,
        pickupid,
        pickupdata[2];
        //model,
        //Float:rX,
        //Float:rY,
        //Float:rZ,
        //slot;
        
	new
        rows = cache_get_row_count();
	for(new x; x != rows; x++)
	{
		cache_get_row(x, 0, tmp);
		cache_get_row_int(x, 1, houseid);
		cache_get_row(x, 2, hname);
		cache_get_row(x, 3, defName);
		cache_get_row_int(x, 4, PropOwnerID);
		cache_get_row_int(x, 5, PropValu);
		cache_get_row_int(x, 6, earning);
		cache_get_row(x, 7, PropPassword);
		cache_get_row_int(x, 8, RablasokSzama);

		cache_get_row_float(x, 9, Kulso[0]);
		cache_get_row_float(x, 10, Kulso[1]);
		cache_get_row_float(x, 11, Kulso[2]);
		cache_get_row_float(x, 12, Angle);

		cache_get_row_float(x, 13, V[0]);
		cache_get_row_float(x, 14, V[1]);
		cache_get_row_float(x, 15, V[2]);

		cache_get_row_float(x, 16, Health);
		cache_get_row_int(x, 17, Int);
		cache_get_row_int(x, 18, VirtualW);
		cache_get_row_int(x, 19, CarModel);

		cache_get_row_float(x, 20, CarPos[0]);
		cache_get_row_float(x, 21, CarPos[1]);
		cache_get_row_float(x, 22, CarPos[2]);
		cache_get_row_float(x, 23, Armour);

		cache_get_row_int(x, 24, CarColor[0]);
		cache_get_row_int(x, 25, CarColor[1]);
		cache_get_row_int(x, 26, Paintjob);

		cache_get_row_int(x, 27, CarComp[0]);
		cache_get_row_int(x, 28, CarComp[1]);
		cache_get_row_int(x, 29, CarComp[2]);
		cache_get_row_int(x, 30, CarComp[3]);
		cache_get_row_int(x, 31, CarComp[4]);
		cache_get_row_int(x, 32, CarComp[5]);
		cache_get_row_int(x, 33, CarComp[6]);
		cache_get_row_int(x, 34, CarComp[7]);
		cache_get_row_int(x, 35, CarComp[8]);
		cache_get_row_int(x, 36, CarComp[9]);
		cache_get_row_int(x, 37, CarComp[10]);
		cache_get_row_int(x, 38, CarComp[11]);
		cache_get_row_int(x, 39, CarComp[12]);
		cache_get_row_int(x, 40, CarComp[13]);

		g_HouseFlags[houseid] = e_HouseFlags:cache_get_row_int_ex(x, 41);
		cache_get_row_int(x, 42, g_HouseElements[houseid]);
		cache_get_row_int(x, 43, iRiaszto);
		cache_get_row_int(x, 44, iOutInt);
		cache_get_row(x, 45, szObjects);
		cache_get_row_int(x, 46, name[0]); if(name[0]) SetGVarInt("Hackdetector", 1, houseid);
		cache_get_row_int(x, 47, g_HouseType[houseid]);

		Itter_Add(houses, houseid);

		//if(earning > 10000) printf("Rossz jövedelem! HázID: %d", houseid);
		// if(CarPos[0] == 0.0 && CarModel != -1) printf("Hülye fasz! <%d>", houseid);
		// printf("X: %.4f, Y: %.4f, Z: %.4f || houseid = %d", Kulso[0], Kulso[1], Kulso[2], houseid);
        SetGVarInt("PropOwnerRegID", PropOwnerID, houseid);
		SetGVarInt("HouseKirabolva", RablasokSzama, houseid);
		SetGVarInt("HouseRiaszto", iRiaszto, houseid);

		SetGVarFloat("PropX", Kulso[0], houseid);
		SetGVarFloat("PropY", Kulso[1], houseid);
		SetGVarFloat("PropZ", Kulso[2], houseid);
		SetGVarFloat("PropA", Angle, houseid);
		if(iOutInt) SetGVarInt("OutInt", iOutInt, houseid);

        // printf("X: %.4f, Y: %.4f, Z: %.4f || houseid = %d", GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid), houseid);

		SetGVarFloat("InX", V[0], houseid);
		SetGVarFloat("InY", V[1], houseid);
		SetGVarFloat("InZ", V[2], houseid);
		SetGVarFloat("InA", Health, houseid);

		SetGVarInt("Interior", Int, houseid);
		SetGVarInt("VirtualWorld", VirtualW, houseid);

        if(PropPassword[0] != '*')
        {
			SetGVarString("PropLocked", PropPassword, houseid);
		}

		// Kategirizálás óta ..
		PropValu = GetHousePriceByType(houseid);
		earning = PropValu / 1000;

		SetGVarInt("PropValue", PropValu, houseid);

		SetGVarInt("CarModel", CarModel, houseid);
	    SetGVarFloat("CarX", CarPos[0], houseid);
        SetGVarFloat("CarY", CarPos[1], houseid);
        SetGVarFloat("CarZ", CarPos[2], houseid);
        SetGVarFloat("CarA", Armour, houseid);
		// printf("CarModel: %d | CarX: %.4f, CarY: %.4f, CarZ: %.4f || houseid = %d", CarModel, CarPos[0], CarPos[1], CarPos[2], houseid);

        SetGVarInt("CarColor1", CarColor[0], houseid);
        SetGVarInt("CarColor2", CarColor[1], houseid);
        SetGVarInt("Paintjob", Paintjob, houseid);

		SetGVarInt("PropEarning", earning, houseid);

		SetGVarString("PropName", hname, houseid);
		SetGVarString("PropDefName", defName, houseid);
		SetGVarString("PropOwner", tmp, houseid);

		if(PropOwnerID == -1)
		{
			format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", defName, houseid, FormatNumber(PropValu));
			SetGVarInt("Label", _:CreateDynamic3DTextLabel(tmp, COLOR_DARKBLUE, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), houseid);

			SetGVarInt("PickupNr", (pickupid = CreateDynamicPickup(1273, 1, Kulso[0], Kulso[1], Kulso[2])), houseid);
            SetGVarInt("MapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], 31, 0, 0, -1, -1, MAX_MAPICON_DISTANCE), houseid);
		}
		else
		{
			format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", hname, houseid, tmp);
			SetGVarInt("Label", _:CreateDynamic3DTextLabel(tmp, COLOR_RED, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), houseid);

			SetGVarInt("PickupNr", (pickupid = CreateDynamicPickup(1272, 1, Kulso[0], Kulso[1], Kulso[2])), houseid);
            SetGVarInt("MapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], 32, 0, 0, -1, -1, MAX_MAPICON_DISTANCE), houseid);
		}
		pickupdata[0] = e_PICKUP_TYPE_HOUSE;
		pickupdata[1] = houseid;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

    	SetGVarInt("InPickup", (pickupid = CreateDynamicPickup(1239, 1, V[0], V[1], V[2], VirtualW)), houseid);

		pickupdata[0] = e_PICKUP_TYPE_HOUSE;
		pickupdata[1] = houseid | 1 << 31;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

		if(CarModel == -1 || GetVehicleType(CarModel) == VEHICLE_TRAIN)
		{
	        SetGVarInt("HouseCar", INVALID_VEHICLE_ID, houseid);
			continue;
		}
		else
		{
			SetGVarInt("HouseCar", (vID = CreateDynamicVehicle(CarModel, CarPos[0], CarPos[1], CarPos[2], Armour, CarColor[0], CarColor[1], -1, !!(g_HouseFlags[houseid] & e_CAR_SIREN))), houseid);
            Bit_Set(gIsHouseCar, vID, true);


			SetDynamicVehicleToRespawn(vID);

			//if(houseid != 456) continue;

            //sscanf(szObjects, "p<,>A<i>[" #MAX_VEH_OBJECT "]", g_HouseVehicleObjects[houseid]);
			//printf("objects %s",szObjects);
            sscanf(szObjects, "p<,>A<i>(0)[120]", g_HouseVehicleObjects[houseid]);

		/*	for(new x; x != MAX_VEH_OBJECT; x++)
			{
				if(!g_HouseVehicleObjects[houseid][x]) continue;*/
	            mysql_format(1, query, sizeof(query), "SELECT * FROM `holdingobjects_v` WHERE `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d OR `id` = %d",
					g_HouseVehicleObjects[houseid][0], g_HouseVehicleObjects[houseid][1], g_HouseVehicleObjects[houseid][2], g_HouseVehicleObjects[houseid][3], g_HouseVehicleObjects[houseid][4], g_HouseVehicleObjects[houseid][5], g_HouseVehicleObjects[houseid][6], g_HouseVehicleObjects[houseid][7], g_HouseVehicleObjects[houseid][8], g_HouseVehicleObjects[houseid][9],
					g_HouseVehicleObjects[houseid][10], g_HouseVehicleObjects[houseid][11], g_HouseVehicleObjects[houseid][12], g_HouseVehicleObjects[houseid][13], g_HouseVehicleObjects[houseid][14], g_HouseVehicleObjects[houseid][15], g_HouseVehicleObjects[houseid][16], g_HouseVehicleObjects[houseid][17], g_HouseVehicleObjects[houseid][18],
					g_HouseVehicleObjects[houseid][19], g_HouseVehicleObjects[houseid][20], g_HouseVehicleObjects[houseid][21], g_HouseVehicleObjects[houseid][22], g_HouseVehicleObjects[houseid][23], g_HouseVehicleObjects[houseid][24], g_HouseVehicleObjects[houseid][25], g_HouseVehicleObjects[houseid][26], g_HouseVehicleObjects[houseid][27],
					g_HouseVehicleObjects[houseid][28], g_HouseVehicleObjects[houseid][29], g_HouseVehicleObjects[houseid][30], g_HouseVehicleObjects[houseid][31], g_HouseVehicleObjects[houseid][32], g_HouseVehicleObjects[houseid][33], g_HouseVehicleObjects[houseid][34], g_HouseVehicleObjects[houseid][35], g_HouseVehicleObjects[houseid][36],
					g_HouseVehicleObjects[houseid][37], g_HouseVehicleObjects[houseid][38], g_HouseVehicleObjects[houseid][39], g_HouseVehicleObjects[houseid][40], g_HouseVehicleObjects[houseid][41], g_HouseVehicleObjects[houseid][42], g_HouseVehicleObjects[houseid][43], g_HouseVehicleObjects[houseid][44], g_HouseVehicleObjects[houseid][45],
					g_HouseVehicleObjects[houseid][46], g_HouseVehicleObjects[houseid][47], g_HouseVehicleObjects[houseid][48], g_HouseVehicleObjects[houseid][49], g_HouseVehicleObjects[houseid][50], g_HouseVehicleObjects[houseid][51], g_HouseVehicleObjects[houseid][52], g_HouseVehicleObjects[houseid][53], g_HouseVehicleObjects[houseid][54],
					g_HouseVehicleObjects[houseid][55], g_HouseVehicleObjects[houseid][56], g_HouseVehicleObjects[houseid][57], g_HouseVehicleObjects[houseid][58], g_HouseVehicleObjects[houseid][59], g_HouseVehicleObjects[houseid][60], g_HouseVehicleObjects[houseid][61], g_HouseVehicleObjects[houseid][62], g_HouseVehicleObjects[houseid][63],
					g_HouseVehicleObjects[houseid][64], g_HouseVehicleObjects[houseid][65], g_HouseVehicleObjects[houseid][66], g_HouseVehicleObjects[houseid][67], g_HouseVehicleObjects[houseid][68], g_HouseVehicleObjects[houseid][69], g_HouseVehicleObjects[houseid][70], g_HouseVehicleObjects[houseid][71], g_HouseVehicleObjects[houseid][72],
				 	g_HouseVehicleObjects[houseid][73], g_HouseVehicleObjects[houseid][74], g_HouseVehicleObjects[houseid][75], g_HouseVehicleObjects[houseid][76], g_HouseVehicleObjects[houseid][77], g_HouseVehicleObjects[houseid][78], g_HouseVehicleObjects[houseid][79], g_HouseVehicleObjects[houseid][80], g_HouseVehicleObjects[houseid][81],
					g_HouseVehicleObjects[houseid][82], g_HouseVehicleObjects[houseid][83], g_HouseVehicleObjects[houseid][84], g_HouseVehicleObjects[houseid][85], g_HouseVehicleObjects[houseid][86], g_HouseVehicleObjects[houseid][87], g_HouseVehicleObjects[houseid][88], g_HouseVehicleObjects[houseid][89], g_HouseVehicleObjects[houseid][90],
					g_HouseVehicleObjects[houseid][91], g_HouseVehicleObjects[houseid][92], g_HouseVehicleObjects[houseid][93], g_HouseVehicleObjects[houseid][94], g_HouseVehicleObjects[houseid][95], g_HouseVehicleObjects[houseid][96], g_HouseVehicleObjects[houseid][97], g_HouseVehicleObjects[houseid][98], g_HouseVehicleObjects[houseid][99],
				 	g_HouseVehicleObjects[houseid][100], g_HouseVehicleObjects[houseid][101], g_HouseVehicleObjects[houseid][102], g_HouseVehicleObjects[houseid][103], g_HouseVehicleObjects[houseid][104], g_HouseVehicleObjects[houseid][105], g_HouseVehicleObjects[houseid][106], g_HouseVehicleObjects[houseid][107], g_HouseVehicleObjects[houseid][108],
					g_HouseVehicleObjects[houseid][109], g_HouseVehicleObjects[houseid][110], g_HouseVehicleObjects[houseid][111], g_HouseVehicleObjects[houseid][112], g_HouseVehicleObjects[houseid][113], g_HouseVehicleObjects[houseid][114], g_HouseVehicleObjects[houseid][115], g_HouseVehicleObjects[houseid][116], g_HouseVehicleObjects[houseid][117],
					g_HouseVehicleObjects[houseid][118], g_HouseVehicleObjects[houseid][119]);
		        mysql_function_query(1, query, true, "THREAD_Houses_LoadObjects", "dd", houseid, vID);
			//	break;
			//}
			
			SetGVarInt("HousecarNoTele", vID, g_HouseFlags[houseid] & e_NO_TELE_CAR);
			
		/*	if(g_HouseFlags[houseid] & e_NO_TELE_CAR)
			{
        		flags = GetVehicleFlags(vID);
				flags &= ~e_NO_TELE;
				SetVehicleFlags(vID, flags);
			}*/
			RandomNumberPlate(vID);

	    	for(i = 0; i != 14; i++)
			{
				if(!CarComp[i]) continue;

				format(name, sizeof(name), "CarComponent_%d", i);
				SetGVarInt(name, CarComp[i], houseid);
			}
		}
		//Bútorok betöltése
		/*for(i = 48; i != MAX_HOUSE_OBJECTS + 48; i++) //+ érték kell mert nem az elsõ sorbol kell kiválasztani az értéket
		{
			cache_get_row(x, i, i_str);
			
			if(i_str[0] == '*') continue;
			sscanf(i_str, "p<,>dffffff", model, X, Y, Z, rX, rY, rZ);
			
			slot = i-48;
			g_HouseObjects[houseid][slot] = CreateDynamicObject(model, X, Y, Z, rX, rY, rZ, VirtualW, Int);
		}*/
	}

	t2 = GetTickCount();
	if(print_message) printf("<< MySQL >> %d ház betöltve\t\t <%d ms>", Iter_Count(houses), t2 - t1);
	return 1;
}

CMD:butorok_(playerid, params[], 0, 0)
{
    if(!GetPVarType(playerid, "PlayerProp")) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NINCS_HAZAD"));
    
    mysql_format(1, dline, sizeof(dline), "SELECT `obj_0`, `obj_1`, `obj_2`, `obj_3`, `obj_4` FROM `houses` WHERE `id` = %d",GetPVarInt(playerid,"PlayerProp"));
			
	mysql_function_query(1, dline, true, "THREAD_HouseIttems", "dd", playerid, g_pQueryQueue[playerid]);
	return 1;
}






forward THREAD_HouseIttems(playerid, queue);
public THREAD_HouseIttems(playerid, queue)
{
	if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_HoldingObjectList);

	new
	    rows = cache_get_row_count(), model;
    dline[0] = EOS;
    if(!rows)
	{
		SendClientMessage(playerid, -1, "Nincs egy se");
		return 1;
	}
	dline[0] = EOS;
	for(new i = 0; i != MAX_HOUSE_OBJECTS; i++)
	{
		cache_get_row(0, i, tmp);
		
		
		if(tmp[0] == '*')
		{
		    format(i_str, sizeof(i_str), "slot: %d | Üres\n", i);
		    strcat(dline, i_str);
		}
		else
		{
		    sscanf(tmp, "p<,>d", model);
			format(i_str, sizeof(i_str), "slot: %d | modelid: %d\n",i, model);
		    strcat(dline, i_str);
		}

        
        
		
		
  
	}
	printf(dline);
	ShowPlayerDialogEx(playerid, 5000, DIALOG_STYLE_LIST, "asd", dline, !"Ok", !"Mégse");
	
	
	return 1;
}


stock UpdateHouse(id)
{
	new Float:Kulso[3], Float:Belso[3], szName[MAX_PROP_NAME], owner[MAX_PLAYER_NAME], str[256], pickupid, pickupdata[2];

	GetGVarString("PropOwner", owner, sizeof(owner), id);
	Kulso[0] = GetGVarFloat("PropX", id); Kulso[1] = GetGVarFloat("PropY", id); Kulso[2] = GetGVarFloat("PropZ", id);
	Belso[0] = GetGVarFloat("InX", id); Belso[1] = GetGVarFloat("InY", id); Belso[2] = GetGVarFloat("InZ", id);

	// Elemek törlése
	DestroyDynamicPickup(GetGVarInt("PickupNr", id));
	DestroyDynamicMapIcon(GetGVarInt("MapIcon", id));
	DestroyDynamic3DTextLabel(Text3D:GetGVarInt("Label", id));
	if(GetGVarInt("InPickup", id)) DestroyDynamicPickup(GetGVarInt("InPickup", id));

	// Elemek újra létrehozása
	if(GetGVarInt("PropOwnerRegID", id) == -1)
	{
		GetGVarString("PropDefName", szName, sizeof(szName), id);

		format(str, sizeof(str), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", szName, id, FormatNumber(GetGVarInt("PropValue", id)));
		SetGVarInt("Label", _:CreateDynamic3DTextLabel(str, COLOR_DARKBLUE, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), id);

		SetGVarInt("PickupNr", (pickupid = CreateDynamicPickup(1273, 1, Kulso[0], Kulso[1], Kulso[2])), id);
        SetGVarInt("MapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], 31, 0, 0, -1, -1, MAX_MAPICON_DISTANCE), id);
	}
	else
	{
		GetGVarString("PropName", szName, sizeof(szName), id);

		format(str, sizeof(str), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", szName, id, owner);
		SetGVarInt("Label", _:CreateDynamic3DTextLabel(str, COLOR_RED, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), id);

		SetGVarInt("PickupNr", (pickupid = CreateDynamicPickup(1272, 1, Kulso[0], Kulso[1], Kulso[2])), id);
        SetGVarInt("MapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], 32, 0, 0, -1, -1, MAX_MAPICON_DISTANCE), id);
	}

	// Pickup data tárolása
	pickupdata[0] = e_PICKUP_TYPE_HOUSE;
	pickupdata[1] = id;
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

	SetGVarInt("InPickup", (pickupid = CreateDynamicPickup(1239, 1, Belso[0], Belso[1], Belso[2], GetGVarInt("VirtualWorld", houseid))), id);

	pickupdata[0] = e_PICKUP_TYPE_HOUSE;
	pickupdata[1] = id | 1 << 31;
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

	foreach(new i: Player)
	{
        if(IsPlayerNPC(i)) continue;
        if(!IsPlayerConnected(i)) continue;
        if(!(g_PlayerFlags2[i] & e_HOUSE_ICONS)) ToggleHouseIcons(i, false);
	}
}

forward THREAD_Houses_LoadObjects(hazid, vehicleid);
public THREAD_Houses_LoadObjects(hazid, vehicleid)
{
	houseid = hazid;
	//if(hazid == 456) printf("THREAD_Houses_LoadObjects(hazid = %d, vehicleid = %d)", hazid, vehicleid);

	new
	    ModelID,
	    rows = cache_get_row_count();

 	static modelid, txdname[64], texturename[64], materialcolor, text[512], materialsize, fontface[64], fontsize, bold, fontcolor, backcolor, textalignment;
	for(new i; i < MAX_VEH_OBJECT; i++)
	{
		for(new x; x < rows; x++)
		{
			if(g_HouseVehicleObjects[houseid][i] == cache_get_row_int_ex(x, 0))
			{
				cache_get_row_int(x, 4, ModelID);
				cache_get_row_float(x, 5, X);
				cache_get_row_float(x, 6, Y);
				cache_get_row_float(x, 7, Z);
				cache_get_row_float(x, 8, V[0]);
				cache_get_row_float(x, 9, V[1]);
				cache_get_row_float(x, 10, V[2]);

				gVehicleObject[vehicleid][i] = CreateDynamicObjectEx(ModelID, 0.0, 0.0, -1000.0, 0.0, 0.0, 0.0, .worlds = { 0, 50000 });
				AttachDynamicObjectToVehicle(gVehicleObject[vehicleid][i], vehicleid, X, Y, Z, V[0], V[1], V[2]);
				
				// Material beállítás
				for(new materialindex = 0; materialindex != 16; materialindex++)
				{
					cache_get_row(x, 12 +  materialindex, dline);
					///printf("%d - %s", materialindex, dline);

					// Ha üres, akkor továbbmegyünk
					if(dline[0] == '*') continue;
					if(strval(dline[0]) == 1)
					{
						sscanf(dline, "p<,>{d}ds[64]ddddds[512]", materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment, text);
						SetDynamicObjectMaterialText(gVehicleObject[vehicleid][i], materialindex, text, materialsize, fontface, fontsize, bold, fontcolor, backcolor, textalignment);
					}
					else
					{
						sscanf(dline, "p<,>{d}ds[64]s[64]d", modelid, txdname, texturename, materialcolor);
						SetDynamicObjectMaterial(gVehicleObject[vehicleid][i], materialindex, modelid, txdname, texturename, materialcolor);
                        //printf("222222");
						//printf("%d - %d, %s, %s, %x", materialindex, ModelID, txdname, texturename, materialcolor);
					}
				}
				break;
			}
		}
	}
	return 1;
}

forward THREAD_Biznis(print_message);
public THREAD_Biznis(print_message)
{
// SELECT id, name, bits >> 31 & 0x1 as isicondisabled, bits >> 25 & 0x3F as icon, bits >> 21 & 0xF as inttype, bits >> 16 & 0x1F as interior, bits & 0xFFFF as entervalue FROM biznis
	new
	    t1,
	    t2;
	t1 = GetTickCount();

	new
	    earning,
	    hname[129],
	    VirtualW,
	    BizLock[24],
	    RablasokSzama,
	    PropValu,
	    PropOwnerID,
	    szType[24],
	    MapIcon,
	    BizIType,
	    Int[2],
	    balance,
	    pickupid,
		pickupdata[2];

	new
	    rows = cache_get_row_count();
	for(new x; x != rows; x++)
	{
		cache_get_row(x, 0, i_str);
		cache_get_row_int(x, 1, houseid);
		cache_get_row(x, 2, hname);

		cache_get_row_int(x, 3, PropOwnerID);
		cache_get_row_int(x, 4, PropValu);
		cache_get_row_int(x, 5, earning);
		cache_get_row_int(x, 6, datez);
		cache_get_row(x, 7, BizLock);
		cache_get_row_int(x, 8, RablasokSzama);
		cache_get_row_int(x, 9, BizIType);
		cache_get_row_int(x, 10, MapIcon);
		cache_get_row_int(x, 11, Int[1]);

		cache_get_row_float(x, 12, X);
		cache_get_row_float(x, 13, Y);
		cache_get_row_float(x, 14, Z);
		cache_get_row_float(x, 15, Angle);

		cache_get_row_float(x, 16, V[0]);
		cache_get_row_float(x, 17, V[1]);
		cache_get_row_float(x, 18, V[2]);
		cache_get_row_float(x, 19, Health);

		cache_get_row_int(x, 20, Int[0]);
		cache_get_row_int(x, 21, VirtualW);
//    	cache_get_row_int(x, 22, g_iBiznisFlags[houseid]);
        cache_get_row(x, 23, szType);
		cache_get_row_int(x, 24, balance);

        g_BiznisType[houseid] = GetBiznisTypeByName(szType);
        //printf("g_BiznisType[houseid]: %d, %s", g_BiznisType[houseid], szType);

       	Itter_Add(biznis, houseid);
       // if(earning > 100000) printf("Rossz jövedelem! BiznisID: %d", houseid);

        SetGVarInt("BizOwnerRegID", PropOwnerID, houseid);
		SetGVarInt("BiznisKirabolva", RablasokSzama, houseid);

		SetGVarFloat("BizX", X, houseid);
		SetGVarFloat("BizY", Y, houseid);
		SetGVarFloat("BizZ", Z, houseid);
		SetGVarFloat("BizA", Angle, houseid);

		SetGVarFloat("BizInX", V[0], houseid);
		SetGVarFloat("BizInY", V[1], houseid);
		SetGVarFloat("BizInZ", V[2], houseid);
		SetGVarFloat("BizInA", Health, houseid);

		SetGVarInt("BizInterior", Int[0], houseid);
		SetGVarInt("BizVirtualWorld", VirtualW, houseid);

        if(BizLock[0] != '*')
        {
			SetGVarString("BizLocked", BizLock, houseid);
		}

		if(g_BiznisType[houseid] != -1)
		{
			PropValu = GetBiznisPriceByType(houseid);
			//printf("value: %d, type: %d, asd: %d", PropValu, g_BiznisType[houseid], g_szBiznisTypes[g_BiznisType[houseid]][e_iPrice]);
			earning = PropValu / 1000;
		}

		SetGVarInt("BizValue", PropValu, houseid);
		SetGVarInt("BizEnterValue", datez, houseid);
		SetGVarInt("BizEarning", earning, houseid);

		if(Int[1] != -1)
			SetGVarInt("BizInteriorType", Int[1], houseid);

		SetGVarInt("BizMapIconType", MapIcon, houseid);

		if(BizIType)
			SetGVarInt("BizNotAllowIcon", true, houseid);

        SetGVarInt("BizBalance", balance, houseid);

		SetGVarString("BizName", hname, houseid);
		SetGVarString("BizOwner", i_str, houseid);

		if(PropOwnerID == -1)
		{
			format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", hname, houseid, FormatNumber(PropValu));
            SetGVarInt("BizLabel", _:CreateDynamic3DTextLabel(tmp, COLOR_DARKBLUE, X, Y, Z, MAX_TEXT_DISTANCE), houseid);

			SetGVarInt("BizPickupNr", (pickupid = CreateDynamicPickup(19524, 1, X, Y, Z)), houseid);
            SetGVarInt("BizMapIcon", CreateDynamicMapIcon(X, Y, Z, MapIcon, 0, 0, -1, -1, 250.0), houseid);
		}
		else
		{
			format(tmp, sizeof(tmp), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", hname, houseid, i_str);
            SetGVarInt("BizLabel", _:CreateDynamic3DTextLabel(tmp, COLOR_RED, X, Y, Z, MAX_TEXT_DISTANCE), houseid);

			SetGVarInt("BizPickupNr", (pickupid = CreateDynamicPickup(19522, 1, X, Y, Z)), houseid);
            SetGVarInt("BizMapIcon", CreateDynamicMapIcon(X, Y, Z, MapIcon, 0, 0, -1, -1, 250.0), houseid);
		}
		pickupdata[0] = e_PICKUP_TYPE_BIZNIS;
		pickupdata[1] = houseid;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

		// Belsõ pickup
        SetGVarInt("BizInPickup", (pickupid = CreateDynamicPickup(1239, 1, V[0], V[1], V[2], VirtualW)), houseid);

		pickupdata[0] = e_PICKUP_TYPE_BIZNIS;
		pickupdata[1] = houseid | 1 << 31;
		Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);
/*
		mysql_format(1, query, sizeof(query), "UPDATE biznis SET b_mapicon = %d, mapicon = %d, interiortype = %d, interior = %d WHERE id = %d", Biznis_IsIconDisabled(houseid), Biznis_GetIcon(houseid), Biznis_GetInteriorType(houseid), Biznis_GetInterior(houseid), houseid);
		mysql_function_query(1, query, false, "", "");
*/
	}
	t2 = GetTickCount();

	if(print_message) printf("<< MySQL >> %d biznisz betöltve\t <%d ms>", Iter_Count(biznis), t2 - t1);
	return 1;
}

stock UpdateBiznis(id)
{
	new Float:Kulso[3], Float:Belso[3], szName[MAX_PROP_NAME], owner[MAX_PLAYER_NAME], str[256], pickupid, pickupdata[2];

	GetGVarString("BizOwner", owner, sizeof(owner), id);
	Kulso[0] = GetGVarFloat("BizX", id); Kulso[1] = GetGVarFloat("BizY", id); Kulso[2] = GetGVarFloat("BizZ", id);
	Belso[0] = GetGVarFloat("BizInX", id); Belso[1] = GetGVarFloat("BizInY", id); Belso[2] = GetGVarFloat("BizInZ", id);

	// Elemek törlése
	DestroyDynamicPickup(GetGVarInt("BizPickupNr", id));
	DestroyDynamicMapIcon(GetGVarInt("BizMapIcon", id));
	DestroyDynamic3DTextLabel(Text3D:GetGVarInt("BizLabel", id));
	if(GetGVarInt("BizInPickup", id)) DestroyDynamicPickup(GetGVarInt("BizInPickup", id));

	// Elemek újra létrehozása
	GetGVarString("BizName", szName, sizeof(szName), id);
	if(GetGVarInt("BizOwnerRegID", id) == -1)
	{
		format(str, sizeof(str), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}Senki\n{4361EF}Ár: {33FF33}%s", szName, id, FormatNumber(GetGVarInt("BizValue", id)));
        SetGVarInt("BizLabel", _:CreateDynamic3DTextLabel(str, COLOR_DARKBLUE, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), id);

		SetGVarInt("BizPickupNr", (pickupid = CreateDynamicPickup(19524, 1, Kulso[0], Kulso[1], Kulso[2])), id);
        SetGVarInt("BizMapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], GetGVarInt("BizMapIconType", id), 0, 0, -1, -1, 250.0), id);
	}
	else
	{
		format(str, sizeof(str), "{4361EF}Név: {33FF33}%s  {4361EF}[%d]\n{4361EF}Tulajdonos: {33FF33}%s", szName, id, owner);
        SetGVarInt("BizLabel", _:CreateDynamic3DTextLabel(str, COLOR_RED, Kulso[0], Kulso[1], Kulso[2], MAX_TEXT_DISTANCE), id);

		SetGVarInt("BizPickupNr", (pickupid = CreateDynamicPickup(19522, 1, Kulso[0], Kulso[1], Kulso[2])), id);
        SetGVarInt("BizMapIcon", CreateDynamicMapIcon(Kulso[0], Kulso[1], Kulso[2], GetGVarInt("BizMapIconType", id), 0, 0, -1, -1, 250.0), id);
	}

	// Pickup data tárolása
	pickupdata[0] = e_PICKUP_TYPE_BIZNIS;
	pickupdata[1] = id;
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

	SetGVarInt("BizInPickup", (pickupid = CreateDynamicPickup(1239, 1, Belso[0], Belso[1], Belso[2], GetGVarInt("BizVirtualWorld", houseid))), id);

	pickupdata[0] = e_PICKUP_TYPE_BIZNIS;
	pickupdata[1] = id | 1 << 31;
	Streamer_SetArrayData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, pickupdata);

	foreach(new i: Player)
	{
        if(IsPlayerNPC(i)) continue;
        if(!IsPlayerConnected(i)) continue;
        if(!(g_PlayerFlags2[i] & e_BIZNIS_ICONS)) ToggleBiznisIcons(i, false);
	}
}

forward THREAD_LoadClanInfo(print_message);
public THREAD_LoadClanInfo(print_message)
{
	new
	    t1,
	    t2;
	t1 = GetTickCount();

	new
		rows = cache_get_row_count(),
	    clanid,
	    fetch[512],
		players[MAX_CLAN_PLAYERS * 2],
		clan_str[64];
	format(clan_str, sizeof(clan_str), "p<,>A<i>(-1)[%d]", MAX_CLAN_PLAYERS * 2);
	for(new i; i != rows; i++)
	{
		Iter_Add(clans, g_ClanCount);

		cache_get_row_int(i, 0, clanid);
		g_Clan_SQL_ID[g_ClanCount] = clanid;
		g_Clan_ID_SQL{clanid} = g_ClanCount;

		if(cache_get_row_int_ex(i, 1)) g_ClanFlags{g_ClanCount} |= e_CLAN_ACTIVE;

		cache_get_row(i, 2, gClanName[g_ClanCount], 1, sizeof(gClanName[]));

		cache_get_row(i, 3, i_str);
		strpack(gClanLeiras[g_ClanCount], i_str, sizeof(gClanLeiras[]));

		cache_get_row_int(i, 4, gClanColor[g_ClanCount]);
		cache_get_row_int(i, 5, gClanCreator[g_ClanCount]);

		cache_get_row_float(i, 6, gClanSpawnPos[g_ClanCount][0]);
		cache_get_row_float(i, 7, gClanSpawnPos[g_ClanCount][1]);
		cache_get_row_float(i, 8, gClanSpawnPos[g_ClanCount][2]);
		cache_get_row_float(i, 9, gClanSpawnPos[g_ClanCount][3]);

		cache_get_row_int(i, 10, gClanSpawnInterior[g_ClanCount]);
		cache_get_row_int(i, 11, gClanSpawnWorld[g_ClanCount]);

		cache_get_row_float(i, 12, gClanArena[g_ClanCount][0]);
		cache_get_row_float(i, 13, gClanArena[g_ClanCount][1]);
		cache_get_row_float(i, 14, gClanArena[g_ClanCount][2]);
		cache_get_row_float(i, 15, gClanArena[g_ClanCount][3]);
		cache_get_row_float(i, 16, gClanArena[g_ClanCount][4]);
		cache_get_row_float(i, 17, gClanArena[g_ClanCount][5]);

		//if(cache_get_row_int_ex(i, 18)) g_ClanFlags{i} |= e_CLAN_HAVE_BANK;

		cache_get_row_int(i, 19, gClanBankMoney[g_ClanCount]);

		cache_get_row_float(i, 20, gClanBankPos[g_ClanCount][0]);
		cache_get_row_float(i, 21, gClanBankPos[g_ClanCount][1]);
		cache_get_row_float(i, 22, gClanBankPos[g_ClanCount][2]);

		for(new x; x != 10; x++)
		{
			cache_get_row(i, 23 + x, i_str);
			sscanf(i_str, "p<,>ds[24]", gClanRankFlags[g_ClanCount][x], gClanRankName[g_ClanCount][x]);

			//printf("%d - %s (%d)", gClanRankFlags[g_ClanCount][x], gClanRankName[g_ClanCount][x], x);
		}

		cache_get_row(i, 33, fetch);
		sscanf(fetch, clan_str, players);
		//if(clanid != 1) continue; //EZ CSAK TESZTELNI KELL

		for(new x; x != (MAX_CLAN_PLAYERS * 2); x++)
		{
			new
			    parotlan = (x & 1);
			gClanPlayers[g_ClanCount][parotlan][x / 2] = players[x]; //ha a "parotlan" 1 akkor az a rangja
   			//printf("anyad: %d, %d - %d", parotlan, x, gClanPlayers[g_ClanCount][parotlan][x / 2]);
		}

		cache_get_row_int(i, 34, gClanCreateTime[g_ClanCount]);
		cache_get_row(i, 35, gClanCreatorName[g_ClanCount], 1, MAX_PLAYER_NAME);

		// Csak akkor hozzuk létre a picsaságokat, hamár a klán megvan erõsítve
		if(g_ClanFlags{g_ClanCount} & e_CLAN_ACTIVE)
		{
			// Ha van bank
			if(gClanBankPos[g_ClanCount][0])
			{
				gClanBankCP[g_ClanCount] = CreateDynamicCP(gClanBankPos[g_ClanCount][0], gClanBankPos[g_ClanCount][1], gClanBankPos[g_ClanCount][2], 5.0);
                gClanBankText[g_ClanCount] = CreateDynamic3DTextLabel("{" #XCOLOR_BLUE3 "}Klánbank!\n{" #XCOLOR_PROPGREEN "}Bank használata: 'N'", -1, gClanBankPos[g_ClanCount][0], gClanBankPos[g_ClanCount][1], gClanBankPos[g_ClanCount][2]);
			}
			gClanZone[g_ClanCount] = CreateDynamicCube(gClanArena[g_ClanCount][0], gClanArena[g_ClanCount][1], gClanArena[g_ClanCount][2], gClanArena[g_ClanCount][3], gClanArena[g_ClanCount][4], gClanArena[g_ClanCount][5]);
	        gClanGangZone[g_ClanCount] = GangZoneCreate(gClanArena[g_ClanCount][0], gClanArena[g_ClanCount][1], gClanArena[g_ClanCount][3], gClanArena[g_ClanCount][4]);
		 }

		g_ClanCount++;
	}
/*
	foreach(clans, i)
	{
		printf("update: %d", i);
		format(query, sizeof(query), "UPDATE clans SET players = '%d,%d,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0' WHERE id = %d", gClanCreator[i], 4, CLAN_SQL(i));
		mysql_function_query(1, query, false, "", "");
	}
*/
	t2 = GetTickCount();
	if(print_message) printf("<< MySQL >> %d klán betöltve\t\t <%d ms>", Iter_Count(clans), t2 - t1);
}

forward THREAD_LoadSzint(print_message);
public THREAD_LoadSzint(print_message)
{
	new
	    t1,
	    t2;
	t1 = GetTickCount();

	new
		rows = cache_get_row_count(),
	    level,
	    description[128];
	for(new i; i != rows; i++)
	{
		cache_get_row(i, 1, name);
		cache_get_row_int(i, 2, level);
		cache_get_row(i, 3, description);

		format(country, sizeof(country), "SZINT_%s", name);
		SetGVarInt(country, level, 0);
	}
	t2 = GetTickCount();
	if(print_message) printf("<< MySQL >> %d szint betöltve\t\t <%d ms>", rows, t2 - t1);
}

forward THREAD_CachePlayerLanguage();
public THREAD_CachePlayerLanguage()
{
	new
		rows = cache_get_row_count(),
	    lang,
	    id;

	for(new i; i != rows; i++)
	{
	    cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, name);
		cache_get_row_int(i, 2, lang);

		SetGVarInt(name, lang, 0);

		/*if(!strcmp(name, "David", true))
		{
		    printf("reg_id: %d | lang: %d", id, lang);
		}*/
	}
}

stock CreateDMTextdraw(dmid)
{
	format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[dmid][0]));
	g_DMTextdraw[dmid][0] = TextDrawCreate(49.000000, 301.000000, name);
	TextDrawBackgroundColor(g_DMTextdraw[dmid][0], 255);
	TextDrawFont(g_DMTextdraw[dmid][0], 3);
	TextDrawLetterSize(g_DMTextdraw[dmid][0], 0.239999, 1.100000);
	TextDrawColor(g_DMTextdraw[dmid][0], g_DMTeamColor[dmid][0]); // 872362922
	TextDrawSetOutline(g_DMTextdraw[dmid][0], 1);
	TextDrawSetProportional(g_DMTextdraw[dmid][0], 1);
	TextDrawSetSelectable(g_DMTextdraw[dmid][0], 0);

	format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[dmid][1]));
	g_DMTextdraw[dmid][1] = TextDrawCreate(49.000000, 314.000000, name);
	TextDrawBackgroundColor(g_DMTextdraw[dmid][1], 255);
	TextDrawFont(g_DMTextdraw[dmid][1], 3);
	TextDrawLetterSize(g_DMTextdraw[dmid][1], 0.239998, 1.100000);
	TextDrawColor(g_DMTextdraw[dmid][1], g_DMTeamColor[dmid][1]); // -16777046
	TextDrawSetOutline(g_DMTextdraw[dmid][1], 1);
	TextDrawSetProportional(g_DMTextdraw[dmid][1], 1);
	TextDrawSetSelectable(g_DMTextdraw[dmid][1], 0);
}

stock DeleteDMTextdraw(dmid)
{
	if(g_DMTextdraw[dmid][0] != Text:-1)
	{
		TextDrawHideForAll(g_DMTextdraw[dmid][0]);
		TextDrawHideForAll(g_DMTextdraw[dmid][1]);

        TextDrawDestroy(g_DMTextdraw[dmid][0]);
        TextDrawDestroy(g_DMTextdraw[dmid][1]);

        g_DMTextdraw[dmid][0] = Text:-1;
        g_DMTextdraw[dmid][1] = Text:-1;
	}
}

forward THREAD_LoadCustomDMInfo();
public THREAD_LoadCustomDMInfo()
{
	new
	    t1,
	    t2;
	t1 = GetTickCount();

	new
		rows = cache_get_row_count(),
	    activated,
	    type,
	    completed,
	    inclearworld,
	    instagib,
	    headshot,
		weapons_buy,
		place_bomb,
		no_nametags,
		explosive_ammo,
		jetpack,
		hud,
		weapons[26],
		team[64],
		mode;
		
	for(new i; i != rows; i++)
	{
		Iter_Add(DeathMatches, i);
		cache_get_row_int(i, 0, g_DM_SQL_ID[i]); // DM id tömb
		g_DM_ID_SQL{g_DM_SQL_ID[i]} = i; // SQL id tömb (dminfo miatt)
		cache_get_row_int(i, 1, type);
		cache_get_row_int(i, 2, activated);
		cache_get_row_int(i, 3, completed);
		cache_get_row_int(i, 4, g_DMCreator[i]);
		cache_get_row(i, 5, g_szDMName[i], 1, sizeof(g_szDMName[]));
		cache_get_row(i, 6, g_szDMCommand[i], 1, sizeof(g_szDMCommand[]));

		cache_get_row(i, 7, team);
		if(team[0] != '*') sscanf(team, "p<,>ds[12]", g_DMTeamColor[i][0], g_szDMTeams[i][0]);

		cache_get_row(i, 8, team);
		if(team[0] != '*') sscanf(team, "p<,>ds[12]", g_DMTeamColor[i][1], g_szDMTeams[i][1]);

		//printf("%s, %s - %d, %d", g_szDMTeams[i][0], g_szDMTeams[i][1], g_DMTeamColor[i][0], g_DMTeamColor[i][1]);

		cache_get_row_int(i, 9, inclearworld);
		cache_get_row_int(i, 10, instagib);
		cache_get_row_int(i, 11, headshot);

		cache_get_row_int(i, 12, g_DMMaxKills[i]);
		cache_get_row_int(i, 13, g_DMMaxPlayers[i]);

		cache_get_row_int(i, 14, weapons_buy);
		cache_get_row_int(i, 15, place_bomb);
		cache_get_row_int(i, 16, no_nametags);
		cache_get_row_int(i, 17, explosive_ammo);

		cache_get_row_int(i, 18, g_DMInterior[i]);
		cache_get_row_float(i, 19, g_DMHealth[i]);
		cache_get_row_float(i, 20, g_DMArmour[i]);

		//printf("%d - %f, %f", g_DMInterior[i], g_DMHealth[i], g_DMArmour[i]);

		cache_get_row_float(i, 21, g_DMZone[i][0]);
		cache_get_row_float(i, 22, g_DMZone[i][1]);
		cache_get_row_float(i, 23, g_DMZone[i][2]);
		cache_get_row_float(i, 24, g_DMZone[i][3]);
		cache_get_row_int(i, 25, g_DMZoneColor[i]);

//		printf("%f, %f, %f, %f", g_DMZone[i][0], g_DMZone[i][1], g_DMZone[i][2], g_DMZone[i][3]);
		// Tölcsük az adatokat
		for(new x; x != 30; x++)
		{
			cache_get_row(i, 26 + x, i_str);
			sscanf(i_str, "p<,>ffff", g_DMSpawns[i][x][0], g_DMSpawns[i][x][1], g_DMSpawns[i][x][2], g_DMSpawns[i][x][3]);
			//printf("dmspawn: %f, %f, %f, %f, %s", g_DMSpawns[i][x][0], g_DMSpawns[i][x][1], g_DMSpawns[i][x][2], g_DMSpawns[i][x][3], i_str);

			if(type) // Ha TDM
			{
				//printf("tdm");
				if(g_DMSpawns[i][x][0] == 0.0 && g_DMSpawns[i][x][1] == 0.0)
				{
					// Ha még az elsõ csapat adatai vannak és nincs még meg a maximum ID, akkor beállítjuk a jelenlegire
					if(x < 15 && !g_DMUpperSpawnID{i}) // Elsõ csapat - alapbõ itt 16 vót
					{
						//printf("elsõ csapat max spawn: %d", x);
						g_DMUpperSpawnID{i} = x;
						x = 14;
						continue;
					}
					else
					{
						//printf("második csapat max spawnhely: %d", x);
						g_DMUpperSpawnID_2{i} = x;
						break;
					}
					//break;
				}
			}
			else
			{
				// Ha sima DM, akkor az elsõ 0.0-s kordinátánál befejezzük és beállítjuk arra a Max ID-t
				if(g_DMSpawns[i][x][0] == 0.0 && g_DMSpawns[i][x][1] == 0.0)
				{
	                g_DMUpperSpawnID{i} = x;
	                g_DMUpperSpawnID_2{i} = x;
	                break;
				}
			}
			//printf("DMID: %d - %f, %f, %f, %f - upperspawn: %d, %d", i, g_DMSpawns[i][x][0], g_DMSpawns[i][x][1], g_DMSpawns[i][x][2], g_DMSpawns[i][x][3], g_DMUpperSpawnID{i}, g_DMUpperSpawnID_2{i});
		}

		cache_get_row(i, 56, tmp);
		sscanf(tmp, "p<,>A<i>(0)[26]", weapons);
		//printf("weapondata: %s", tmp);

		for(new x; x != 26; x++)
		{
//			printf("weapons: %d", weapons[x]);
			if(x < 13)
			{
                g_DMWeapons[i][x][0] = weapons[x];
			}
			else
			{
                g_DMWeapons[i][x - 13][1] = weapons[x];
			}
		}
		g_DMArmedWeapon{i} = cache_get_row_int_ex(i, 57);
		cache_get_row_int(i, 58, g_DMCreateTime[i]);
		cache_get_row_float(i, 59, g_DMGravity[i]);
		cache_get_row_int(i, 60, jetpack);
		cache_get_row_int(i, 61, g_DM_Weather[i]);
		cache_get_row_int(i, 62, g_DM_Time[i]);
		cache_get_row_int(i, 63, g_DM_MaxKillstreak[i]);
		cache_get_row(i, 64, g_DM_MaxKillstreakPlayer[i], 1, sizeof(g_DM_MaxKillstreakPlayer[]));
		cache_get_row_int(i, 65, g_DM_MaxKillstreakPlayerID[i]);
        cache_get_row_int(i, 66, hud);
        cache_get_row_int(i, 67, mode);
        
		cache_get_row(i, 68, g_DMCreatorName[i], 1, sizeof(g_DMCreatorName[])); //Ennek kell minig a végén lennie


		//printf("creator: %s", g_DMCreatorName[i]);

		if(activated) g_DMFlags[i] |= e_DM_ACTIVE;
		if(completed) g_DMFlags[i] |= e_COMPLETED;

		// Ha TDM
		if(type)
		{
			g_DMFlags[i] |= e_IS_TDM;

			// Csapatkill számláló textdraw létrehozása
            CreateDMTextdraw(i);

			// Ha valamilyen oknál fogva nincsenek beállítva a max ID-k akkor alapból a maximumra tesszük õket
			if(!g_DMUpperSpawnID{i})
				g_DMUpperSpawnID{i} = 15;

			if(!g_DMUpperSpawnID_2{i})
				g_DMUpperSpawnID_2{i} = 30; // asszem így, -1
		}

		if(inclearworld) g_DMFlags[i] |= e_IN_CLEARWORLD;
		if(instagib) g_DMFlags[i] |= e_ONE_HIT_KILL;
		if(headshot) g_DMFlags[i] |= e_HEADSHOT;
		if(weapons_buy) g_DMFlags[i] |= e_WEAPONS_BUY;
		if(place_bomb) g_DMFlags[i] |= e_PLACE_BOMB;
		if(no_nametags) g_DMFlags[i] |= e_NO_NAMETAGS;
		if(explosive_ammo) g_DMFlags[i] |= e_EXPLOSIVE_AMMO;
		if(jetpack) g_DMFlags[i] |= e_JETPACK_MODE;
		if(hud) g_DMFlags[i] |= e_NO_HUD;
		if(mode) g_DMFlags[i] |= e_DM_MODE;

		// DM gangzóna létrehozása
        UpdateDMZone(i);

        // Számláló megemelése
		g_CustomDMCount++;
	}

	t2 = GetTickCount();
	printf("<< MySQL >> %d DM betöltve\t\t <%d ms>", g_CustomDMCount, t2 - t1);
}

#if defined _inc_crashdetect
public OnRuntimeError(code, &bool:suppress)
{
	new
	    szStr[64];
	format(szStr, sizeof(szStr), "OnRuntimeError(code: %d, suppress: %d)", code, suppress);
	foreach(Player, i)
	{
		if(GetPVarInt(i, "Level") != 0) continue;
		SendClientMessage(i, COLOR_WHITE, szStr);
    }
}
#endif

#if defined mysql_query_file
public OnQueryError(errorid, const error[], const callback[], const sql_query[], handle)
#else
public OnQueryError(errorid, error[], callback[], sql_query[], connectionHandle)
#endif
{
	printf("OnQueryError(errorid = %d, error = %s, sql_query = %s)", errorid, error, sql_query);
	dline[0] = EOS;
	GetAmxBacktrace(dline);
	print(dline);

	dline[0] = EOS;
	strcat(dline, error);

	// Ha túl hosszú a hiba üzenet, akkor töröljük a végit, külömben nem küldi el a hiba üzenetet a chatbe
	new
	    len;
	if((len = strlen(dline)) > 127)
	{
		strdel(dline, 127, len);
	}

	format(i_str, sizeof(i_str), "OnQueryError(errorid: %d) %s", errorid, dline);
	foreach(Player, i)
	{
		if(GetPVarInt(i, "Level") == 0) continue;
		SendClientMessage(i, COLOR_WHITE, i_str);
    }

	session[fqueries]++;
	return 1;
}

stock UpdateWeaponShots()
{
	if(!(g_ServerFlags & e_DATA_LOADED)) return;

	// Weaponshotok frissítése
	mysql_format(1, query, sizeof(query), "UPDATE `config` SET `weaponshots` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `id` = 1", gWeaponShots[0], gWeaponShots[1], gWeaponShots[2], gWeaponShots[3], gWeaponShots[4], gWeaponShots[5], gWeaponShots[6], gWeaponShots[7], gWeaponShots[8], gWeaponShots[9], gWeaponShots[10], gWeaponShots[10], gWeaponShots[12], gWeaponShots[13]);
	mysql_function_query(1, query, false, "", "");
}

forward MoveKJObjectUP();
public MoveKJObjectUP()
{
	if(g_ServerFlags & e_LEGBALON_WAIT)
	{
		gLegbalonPos[0] = 1;
		MoveDynamicObject(gLegbalon, g_fLegbalonPos[gLegbalonPos[0]][0], g_fLegbalonPos[gLegbalonPos[0]][1], g_fLegbalonPos[gLegbalonPos[0]][2], 7.5);
		g_ServerFlags &= ~e_LEGBALON_WAIT;
	}

	foreach(Player, playerid)
	{
		if(!IsClient(playerid))
		{
		    switch(random(40))
		    {
				case 6, 15:
				{
					SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG__MFR__RAKD_FEL_AZ_MFR_KLIENSET"));
					SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG__MFR__BOVEBB_INFOMACIOERT_LATOGA"));
					SendClientMessage(playerid, COLOR_GREEN, LANG(playerid, "MSG__MFR__HA_LUSTA_VAGY_A_WEBLAPRA"));
				}
			}
		}
	}

	// Fegyver statisztika frissítése
    UpdateWeaponShots();
	return SetTimer("MoveKJObjectDOWN", 25000, false);
}

forward MoveKJObjectDOWN();
public MoveKJObjectDOWN()
{
	return SetTimer("MoveKJObjectUP", 25000, false);
}

forward OneMinute();
public OneMinute()
{
	if(!Itter_Count(Player)) return 0;
	// Gangwarban lévõ játékosok frissítése, bugok elkerülése végett
	mysql_function_query(1, "SELECT COUNT(reg_id), 0 as `id` FROM players WHERE gangwar_team = 0 UNION SELECT COUNT(reg_id), 1 as `id` FROM players WHERE gangwar_team = 1 UNION SELECT COUNT(reg_id), 2 as `id` FROM players WHERE gangwar_team = 2 UNION SELECT COUNT(reg_id), 3 as `id` FROM players WHERE gangwar_team = 3", true, "THREAD_GangwarCount", "");

	#if defined YSF
	//UpdateObjectsRule(false);
	#endif

	new
		maxhozzaadas = random(15),
		minhozzaadas = 10 + random(20),
		count,
		added;
	for(new i; i != sizeof(g_Posta); i++)
	{
        if(g_Posta[i] == -1) continue;
		count++;
	}

	if(count < minhozzaadas)
	{
		for(new i; i != sizeof(g_Posta); i++)
		{
			if(g_Posta[i] != -1) continue;

			g_Posta[i] = random(sizeof(g_LevelPos));
			if(++added > maxhozzaadas) break;
		}

		foreach(new i: Player)
		{
			if(!(g_pGamesData[i] & e_POSTAS)) continue;
			SendClientMessagef(i, COLOR_BLUE, LANG(i, "MSG_POSTA__LEVELET_ADTAK_FEL_AMI"), maxhozzaadas, 50 - (count - maxhozzaadas));
		}
	}

	// Pizza
	count = 0;
	added = 0;
	for(new i; i != sizeof(g_Pizza); i++)
	{
        if(g_Pizza[i] == -1) continue;
		count++;
	}

	if(count < minhozzaadas)
	{
		for(new i; i != sizeof(g_Pizza); i++)
		{
			if(g_Pizza[i] != -1) continue;

			g_Pizza[i] = random(sizeof(g_LevelPos));
			if(++added > maxhozzaadas) break;
		}

		foreach(new i: Player)
		{
			if(!(g_pGamesData[i] & e_PIZZAS)) continue;
			SendClientMessagef(i, COLOR_BLUE, LANG(i, "MSG_PIZZERIA__PIZZA_RENDELEST_ADTAK"), maxhozzaadas, 50 - (count - maxhozzaadas));
		}
	}

    // printf("OneMinute()");
	foreach(new i: Player)
	{
        g_FakeKillKick{i} = 0;

		// Leghosszabb AFK szarság firssítése
		new
		    afk = GetPVarInt(i, "AFKTime"),
		    longestafk = GetPVarInt(i, "LongestAFK");

		if(afk > longestafk && longestafk > 1000)
		{
			SetPVarInt(i, "LongestAFK", afk);

			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `longest_afk` = %d WHERE `reg_id` = %d", afk, PlayerInfo[i][pRegID]);
		    mysql_function_query(1, query, false, "", "");
		}

		if(!GetPVarType(i, "LastRabolt")) continue;

        new
			iLastRabolt = GetPVarInt(i, "LastRabolt") - 1;
		if(iLastRabolt <= 0)
		{
			DeletePVar(i, "LastRabolt");
            SetPlayerWantedLevel(i, 0);
		}
		else
		{
			SetPVarInt(i, "LastRabolt", iLastRabolt);
		}
	}
	foreach(new i: Player)
	{
		SavePlayer(i);
	}
	return 1;
}

// fcheck
forward FalloutCheck();
public FalloutCheck()
{
	static
	    szFormat[90];
	if(g_ServerFlags & e_FALLOUT_STARTED)
	{
		if(FalloutOSelected == -1)
		{
			do
			{
				FalloutOSelected = FalloutObject[random(sizeof(FalloutObject))] - FALLOUT_OFFSET;
/*
				if(!(0 <= FalloutOSelected < sizeof(FalloutObject)))
				{
					print(!"Fallout ERROR");
					return FalloutCheck();
				}
*/
			}
			while(FalloutOState{FalloutOSelected} == 0xFF);
		}
		// printf("FalloutOSelected = %d | FalloutOState[FalloutOSelected - FALLOUT_OFFSET] = %d", FalloutOSelected, FalloutOState[FalloutOSelected]);

		switch(FalloutOState{FalloutOSelected}++)
		{
			case 0: SetDynamicObjectRot(FalloutOSelected + FALLOUT_OFFSET, 40, 0, 0);
			case 1: SetDynamicObjectRot(FalloutOSelected + FALLOUT_OFFSET, 31, 0, 0);
			case 2: SetDynamicObjectRot(FalloutOSelected + FALLOUT_OFFSET, 40, 0, 0);
			case 3:
			{
				GetDynamicObjectPos(FalloutOSelected + FALLOUT_OFFSET, X, Y, Z);
                SetDynamicObjectRot(FalloutOSelected + FALLOUT_OFFSET, 31.80, 0, 0);
				MoveDynamicObject(FalloutOSelected + FALLOUT_OFFSET, X, Y, 0.0, 15);
   				// printf("MoveDown: %d | FalloutOState[FalloutOSelected - FALLOUT_OFFSET] = %d", FalloutOSelected, FalloutOState[FalloutOSelected]);

	            FalloutOState{FalloutOSelected} = 0xFF;
                FalloutOSelected = -1;

                if(--FalloutOCount <= 0)
                {
					new
					    iWinnerCount,
					    iWinnerID = INVALID_PLAYER_ID;
					foreach(new i: Player)
					{
						if(GetPVarInt(i, "FalloutState") != FALLOUT_STATE_PLAYING) continue;
						iWinnerCount++;
						iWinnerID = i;

						ShowWelcome(i, LANG(i, "MSG_PNYERTELWNGH6200NY"));
					}

                    g_FalloutEndTick = GetTickCount();
					new
						TotalTime = g_FalloutEndTick - g_FalloutStartTick,
						TempTime[3];

					ConvertTime(var1, TotalTime, TempTime[0], TempTime[1], TempTime[2]);
					switch(iWinnerCount)
					{
						case 0: SendClientMessageToAllf(COLOR_WHITE, "MSG_FALLOUT_LEJART_30_MASODPERC", TempTime[0], TempTime[1], TempTime[2]);
						case 1: SendClientMessageToAllf(COLOR_WHITE, "MSG_FALLOUT_LEJART_30_MASODPERC_1", GetPlayerColor(iWinnerID) >>> 8, pName(iWinnerID), iWinnerID, TempTime[0], TempTime[1], TempTime[2]);
						default: SendClientMessageToAllf(COLOR_WHITE, "MSG_FALLOUT_LEJART_30_MASODPERC_2", iWinnerID, TempTime[0], TempTime[1], TempTime[2]);
					}
					EndFallout();
				}
			}
		}

		format(szFormat, sizeof(szFormat), FixGameString("~r~~h~Játékosok: ~b~~h~%d~w~/~b~~h~%d ~r~~h~Objectek: ~b~~h~%d~w~/~b~~h~%d"), FalloutPlayers, (GetMaxPlayers() - Iter_Count(Bot)), FalloutOCount, sizeof(FalloutObject));
       	TextDrawSetString(FalloutTextdraw, szFormat);
	}
	return 1;
}

stock EndFallout()
{
	new
	    i = FALLOUT_OFFSET;
	for( ; i != sizeof(FalloutObject) + FALLOUT_OFFSET; i++)
	{
		DestroyDynamicObject(i);
	}
	for(i = 0; i != sizeof(FalloutObject); i++)
	{
        FalloutOState{i} = 0;
	}
	CreateFalloutObjects();

	g_ServerFlags &= ~e_FALLOUT_STARTED;
	FalloutOCount = 56;
	fmcd = 30;
	g_FalloutStartTick = 0;
	g_FalloutEndTick = 0;

	if(FalloutCheckTimer != -1)
	{
		KillTimer(FalloutCheckTimer);
		FalloutCheckTimer = -1;
	}

    if(StartFalloutCheckTimer != -1)
	{
		KillTimer(StartFalloutCheckTimer);
		StartFalloutCheckTimer = -1;
	}

    if(FalloutMajStartTimer != -1)
	{
		KillTimer(FalloutMajStartTimer);
	}
	FalloutMajStartTimer = SetTimer("f_mscountdown", 10000, true);

	FalloutPlayers = 0;
	//printf("FalloutPlayers -- EndFallout %d", FalloutPlayers);

	foreach(new index: Player)
	{
		if(!GetPVarType(index, "FalloutState")) continue;

        FalloutPlayers ++;

		Streamer_Update(index);
		SetPVarInt(index, "FalloutState", FALLOUT_STATE_WAITING);
        TogglePlayerControllable(index, false);
        InfoTD_MSG(index, MESSAGE_TIME, LANG(index, "MSG_RHFALLOUT_HBEFEJEZODOTTWN"));
		PlayerTele(index, 2054.5508, 652.8755, 75, .worldid = 6);
		SetPlayerCameraPos(index, 2081.3545, 671.5437, 76.3614);
		SetPlayerCameraLookAt(index, 2080.4712, 671.0813, 75.3713);
        SetPlayerHealth(index, HEALTH_GOD);
	}
    FalloutRanking = FalloutPlayers;

	//printf("FalloutActivePlayers -- EndFallout after count %d", FalloutPlayers);
	format(tmp, sizeof(tmp), FixGameString("~r~~h~Játékosok: ~b~~h~%d~w~/~b~~h~%d ~r~~h~Objectek: ~b~~h~%d~w~/~b~~h~%d"), FalloutPlayers, (GetMaxPlayers() - Iter_Count(Bot)), FalloutOCount, sizeof(FalloutObject));
   	TextDrawSetString(FalloutTextdraw, tmp);
}

forward f_mscountdown();
public f_mscountdown()
{
	fmcd -= 10;
	if(fmcd <= 0)
	{
		if(FalloutPlayers == 0)
		{
	    	//SendClientMessageToAll(COLOR_GREEN, "MSG_FALLOUT_NEM_KEZDODOTT_EL_NEM");

            fmcd = 30;
            if(FalloutMajStartTimer != -1) KillTimer(FalloutMajStartTimer);
			FalloutMajStartTimer = SetTimer("f_mscountdown", 10000, true);
			return 1;
		}
		else if(FalloutPlayers < 2)
		{
	    	SendClientMessageToAll(COLOR_GREEN, "MSG_FALLOUT_NEM_KEZDODOTT_EL_LEGALABB");

            fmcd = 30;
            if(FalloutMajStartTimer != -1) KillTimer(FalloutMajStartTimer);
			FalloutMajStartTimer = SetTimer("f_mscountdown", 10000, true);
			return 1;
		}

        SendClientMessageToAllf(COLOR_PROPGREEN, "MSG_FALLOUT_ELKEZDODOTT__JATEKOSSAL", FalloutPlayers);
        g_FalloutStartTick = GetTickCount();
		foreach(new i: Player)
		{
            if(!GetPVarType(i, "FalloutState")) continue;
			PlayerTele(i, 2054.5508 + random(12), 652.8755 + random(12), 52, .worldid = 6);
            SetPVarInt(i, "FalloutState", FALLOUT_STATE_PLAYING);
            TogglePlayerControllable(i, true);
            SetPlayerHealth(i, HEALTH_GOD);
			InfoTD_MSG(i, 5000, LANG(i, "MSG_RHFALLOUT_HELKEZDODOTTW"));
		}

        FalloutRanking = FalloutPlayers;
		fmcd = 30;
        g_ServerFlags |= e_FALLOUT_STARTED;

		if(FalloutMajStartTimer != -1) KillTimer(FalloutMajStartTimer);
		FalloutMajStartTimer = -1;

		if(StartFalloutCheckTimer != -1)
		{
			KillTimer(StartFalloutCheckTimer);
		}
		StartFalloutCheckTimer = SetTimer("StartFalloutCheck", 1500, false);
	}
	else
	{
		format(i_str, sizeof(i_str), "~y~Fallout ~h~elindul ~w~%d~b~ ~h~másodperc ~h~múlva~w~!", fmcd);
		foreach(new i: Player)
		{
		   	if(!GetPVarType(i, "FalloutState")) continue;
			InfoTD_MSG(i, 5000, i_str);
            TogglePlayerControllable(i, false);
		}
	}
	return 1;
}

forward StartFalloutCheck();
public StartFalloutCheck()
{
	if(FalloutCheckTimer != -1)
	{
		KillTimer(FalloutCheckTimer);
	}
    FalloutCheckTimer = SetTimer("FalloutCheck", 250, true);
    StartFalloutCheckTimer = -1;
	return 1;
}

stock CreateFalloutObjects()
{
	new
	    i;
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.61, 640.74, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.14, 640.75, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.70, 640.74, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.23, 640.73, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.81, 640.71, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.38, 640.70, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.36, 645.97, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.79, 645.98, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.28, 645.97, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.74, 646.00, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.16, 646.02, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.62, 645.99, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.34, 651.32, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.79, 651.30, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.22, 651.32, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.70, 651.29, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.15, 651.30, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.61, 651.33, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.32, 656.65, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.75, 656.62, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.17, 656.61, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.63, 656.62, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.11, 656.64, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.58, 656.64, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.32, 661.96, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.74, 661.97, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.21, 661.96, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.67, 661.95, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.14, 662.00, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.61, 661.99, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.30, 667.29, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.78, 667.30, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.20, 667.26, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.63, 667.27, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.09, 667.28, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.56, 667.31, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2044.30, 672.60, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2048.76, 672.60, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2053.21, 672.59, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2057.64, 672.59, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2062.09, 672.59, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2066.53, 672.60, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.92, 640.70, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.89, 645.98, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.89, 651.32, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.88, 656.65, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.85, 662.00, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.85, 667.31, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2039.84, 672.66, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2071.08, 640.75, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2071.08, 645.97, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2071.03, 651.29, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2071.04, 656.64, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2071.02, 662.03, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i++] = CreateDynamicObject(1697, 2070.98, 667.26, 46.68,   31.80, 0.00, 0.00, 6);
	FalloutObject[i] = CreateDynamicObject(1697, 2070.97, 672.59, 46.68,   31.80, 0.00, 0.00, 6);
//    FALLOUT_OFFSET = FalloutObject[0];
}
/*
stock CreateGroveBabuk(destroyobjects = false)
{
	new
	    i;
	if(destroyobjects)
	{
		for( ; i != sizeof(gGroveBabu); i++)
		{
			DestroyDynamicObject(gGroveBabu[i]);
		}
	}
	i = 0;
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2468.56958008,-1713.59313965,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(1)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2461.61328125,-1707.01611328,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(2)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2469.36987305,-1701.61547852,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(3)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2453.08789062,-1704.81713867,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(4)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2453.85595703,-1712.41552734,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(5)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2452.79565430,-1697.34936523,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(6)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2463.61743164,-1690.58764648,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(7)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2451.90429688,-1684.04199219,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(8)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2470.04467773,-1686.87768555,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(9)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2472.38964844,-1695.74462891,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(10)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2460.05102539,-1691.92358398,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(11)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2462.99829102,-1699.00939941,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(1)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2462.71923828,-1712.51757812,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(2)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2454.96484375,-1708.06640625,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(3)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2471.55175781,-1711.73901367,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(4)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2473.48486328,-1706.60339355,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(5)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2451.34033203,-1692.69494629,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(6)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2459.52319336,-1686.64575195,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(7)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2467.37036133,-1696.79370117,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(8)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2464.90209961,-1686.40161133,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(9)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2472.42724609,-1684.51025391,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(10)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2461.07910156,-1703.34692383,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(11)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2466.86132812,-1706.28771973,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(12)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2451.48144531,-1700.77380371,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(13)
	gGroveBabu[i++] = CreateDynamicObjectEx(1584,2453.16259766,-1689.33544922,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(12)
	gGroveBabu[i++] = CreateDynamicObjectEx(1583,2456.48730469,-1695.17529297,66.01470947,0.00000000,0.00000000,90.00000000); //object(tar_gun2)(14)
	gGroveBabu[i] = CreateDynamicObjectEx(1584,2471.50048828,-1691.16918945,66.01451874,0.00000000,0.00000000,90.00000000); //object(tar_gun1)(13)
	return 1;
}
*/
stock UpdateHouseRaktarIcon(playerid)
{
	SetPlayerMapIcon(playerid, 85, g_fGarazsPos[0][0], g_fGarazsPos[0][1], g_fGarazsPos[0][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
	SetPlayerMapIcon(playerid, 86, g_fGarazsPos[1][0], g_fGarazsPos[1][1], g_fGarazsPos[1][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
	SetPlayerMapIcon(playerid, 87, g_fGarazsPos[2][0], g_fGarazsPos[2][1], g_fGarazsPos[2][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
	SetPlayerMapIcon(playerid, 88, g_fGarazsPos[3][0], g_fGarazsPos[3][1], g_fGarazsPos[3][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
	SetPlayerMapIcon(playerid, 89, g_fGarazsPos[4][0], g_fGarazsPos[4][1], g_fGarazsPos[4][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
	SetPlayerMapIcon(playerid, 90, g_fGarazsPos[5][0], g_fGarazsPos[5][1], g_fGarazsPos[5][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
}

stock RemoveHouseRaktarIcon(playerid)
{
	RemovePlayerMapIcon(playerid, 85);
	RemovePlayerMapIcon(playerid, 86);
	RemovePlayerMapIcon(playerid, 87);
	RemovePlayerMapIcon(playerid, 88);
	RemovePlayerMapIcon(playerid, 89);
	RemovePlayerMapIcon(playerid, 90);
    g_pGamesData[playerid] &= ~e_RABOL;
}

stock Kocsileadofos(playerid)
{
   // for(new i; i != 5; i++)
    for(new x; x != sizeof(g_fGarazsPos); x++)
    //for(new i; i != 5; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 500, g_fGarazsPos[x][0], g_fGarazsPos[x][1], g_fGarazsPos[x][2]))
		{
		    SetPlayerMapIcon(playerid, 85+x, g_fGarazsPos[x][0], g_fGarazsPos[x][1], g_fGarazsPos[x][2], 36, 0, MAPICON_GLOBAL_CHECKPOINT);
		    leadofos[playerid][x] = 1;
		}
		else leadofos[playerid][x] = 0;
	}
}

stock Kocsileadofosdelete(playerid)
{
    RemovePlayerMapIcon(playerid, 85);
	RemovePlayerMapIcon(playerid, 86);
	RemovePlayerMapIcon(playerid, 87);
	RemovePlayerMapIcon(playerid, 88);
	RemovePlayerMapIcon(playerid, 89);
	RemovePlayerMapIcon(playerid, 90);
}

// Gangwar
stock EndGangwar(id)
{
    g_ZoneIsAttacked[id] = 0;
    g_ZoneAttackTime[id] = 0;
    g_ZoneAttacker[id] = 0xFF;
	g_ZoneKillsAttacker[id] = 0;
	g_ZoneKillsDefender[id] = 0;
	g_ZoneLastKill[id] = 0;
    g_ZoneAttackRahuzas[id] = false;
}

stock GangwarElfoglalta(id)
{
	printf("GangwarElfoglalta called");
	GangZoneHideForAll(id);
	GangZoneShowForAll(id, GetGangwarZoneColorByTeam(g_ZoneAttacker[id]));

    format(i_str, sizeof(i_str), "~y~Támadás befejezve!~n~A terület mostanától a %s csapaté!", GetGangwarTeamName(g_ZoneAttacker[id]));
	//SendClientMessageToAll(-1, "MSG_NYER_A_TAMADO");
	foreach(new i: Player)
	{
        if(!(g_pGamesData[i] & e_IN_GANGWAR)) continue;

		if(GetPlayerTeam(i) == g_ZoneOwner[id] || GetPlayerTeam(i) == g_ZoneAttacker[id])
		{
			SendClientMessagef(i, GetGangwarZoneColorByTeam(g_ZoneAttacker[id]), LANG(i, "MSG__BANDA_ELFOGLALTA_A__BANDA"), GetGangwarTeamName(g_ZoneAttacker[id]), GetGangwarZoneColorByTeam(g_ZoneOwner[id]) >>> 8, GetGangwarTeamName(g_ZoneOwner[id]), GetGangwarZones(g_ZoneOwner[id]));
		}

		GetPlayerPos(i, X, Y, Z);
        if(X >= gZoneInfo[id][e_MinX] && X <= gZoneInfo[id][e_MaxX] && Y >= gZoneInfo[id][e_MinY] && Y <= gZoneInfo[id][e_MaxY] && GetPlayerTeam(i) == g_ZoneOwner[id])
        {
			GivePlayerXP(i, 10); // 7 + g_ZoneKillsAttacker[id]
			GivePlayerMoneyEx(i, 10000, "GangWar"); // 2500 * g_ZoneKillsAttacker[id]
        }
	}

	if(g_ZoneAttacker[id] != 0xFF)
	{
		g_ZoneOwner[id] = g_ZoneAttacker[id];
	}
	else
	{
		printf("GANGWAR g_ZoneAttacker ERROR!!!");
	}
	SaveGangwarZones();
}

stock GangwarMegvedte(id, bool:lejartido = false)
{
	printf("GangwarMegvedte called");

	// Nyer a védõ
	foreach(new i: Player)
	{
        if(!(g_pGamesData[i] & e_IN_GANGWAR)) continue;

		if(GetPlayerTeam(i) == g_ZoneOwner[id] || GetPlayerTeam(i) == g_ZoneAttacker[id])
		{
			SendClientMessagef(i, GetGangwarZoneColorByTeam(g_ZoneOwner[id]),
				"%s {FFFFFF}banda területét nem sikerült elfoglalni a {%06x}%s {FFFFFF}csapatnak%s! (Zónák száma: %d)",
				GetGangwarTeamName(g_ZoneOwner[id]), GetGangwarZoneColorByTeam(g_ZoneAttacker[id]) >>> 8, GetGangwarTeamName(g_ZoneAttacker[id]), (lejartido) ? (" - Lejárt az idõ") : (""), GetGangwarZones(g_ZoneOwner[id]));
		}

		GetPlayerPos(i, X, Y, Z);
        if(X >= gZoneInfo[id][e_MinX] && X <= gZoneInfo[id][e_MaxX] && Y >= gZoneInfo[id][e_MinY] && Y <= gZoneInfo[id][e_MaxY] && GetPlayerTeam(i) == g_ZoneOwner[id])
        {
			GivePlayerXP(i, 8); // 5 + g_ZoneKillsDefender[id]
			GivePlayerMoneyEx(i, 8000, "GangWar"); // 1500 * g_ZoneKillsDefender[id]
        }
	}

    GangZoneStopFlashForAll(id);
    format(i_str, sizeof(i_str), "~y~Támadás befejezve!~n~A területet nem foglalta el a %s csapat!", GetGangwarTeamName(g_ZoneAttacker[id]));
}

stock ShowDerbyDialog(playerid)
{
	new
		szFormat[144],
		szUnpack[24];

	 // Ha még nincs kész a lista, akkor elkészítjük véletlenszerûen
	if(!g_bDerbyMapIsListed)
	{
		new
			curr;
		for(new i; i != MAX_DERBY_AVIABLE_MAPS; i++)
		{
			do
			{
				curr = random(sizeof(g_DerbyNames));
			}
			while(g_bDerbyMapIsListed & (1 << curr));

			g_bDerbyMapIsListed |= 1 << curr;
	        g_DerbyAviableMaps{i} = curr;

	        strunpack(szUnpack, g_DerbyNames[curr], 20);
	        strcat(szFormat, szUnpack);
	        strcat(szFormat, "\n");
	  	}
	}
	else
	{
		for(new i; i != MAX_DERBY_AVIABLE_MAPS; i++)
		{
	        strunpack(szUnpack, g_DerbyNames[g_DerbyAviableMaps{i}], 20);
	        strcat(szFormat, szUnpack);
	        strcat(szFormat, "\n");
	  	}
	}
	ShowPlayerDialogEx(playerid, DIALOG_DERBYMAP, DIALOG_STYLE_LIST, "Szavazz!", szFormat, "Szavazok!");
}

forward GetRealTime();
public GetRealTime()
{
	new
	    iCurrDMZone,
	    pState,
	    AFKTime,
	    iCurrTick = GetTickCount();

	// Racemode interiorja mindig egy másodpercenként változik
    g_iRacemodeInterior = random(18) + 1;

	// Idõeltolódás javítása a hoston
	getdate(year, month, day),
	gettime(hour, minute, second);

	
 	SetGVarInt("BotAction", GetGVarInt("BotAction", 0) - 1, 0);

	if(GetGVarInt("BotAction", 0) <= 1)
	{
		SetGVarInt("BotAction", BOT_ACTION_TIME + randomex(60000,120000), 0);
		RakSAMP(1); //  /random parancs lefuttatása
	}
	
	foreach(Player, i)
	{
	    //AntiDB(i);
	    VehicleRepair(i);
		if(IsPlayerInHouseZone(i) != -1 && g_pDeathMatchID[i] == -1) //Ha házba van
		{
		    //if(GetPVarInt(i, "PlayerProp") != GetPlayerHouseID_ByZone(i))
		    {
			    g_pOtherFlags[i] |= e_IN_HOUSE;
		    	// Ha a god bevan kapcsolva
				if(g_PlayerFlags[i] & e_GOD)
				{
				     g_pOtherFlags[i] &= ~e_GOD_ALLOWED;
				}

				// Ha nincs letiltva - örökélet
				if(g_pOtherFlags[i] & e_GOD_ALLOWED)
				{
	   				//printf("2");
					// Ha örökélet újra engedélyezve és már beállítttuk neki a régi életét a letiltás után
					if(g_pOtherFlags[i] & e_GOD_SETTED)
					{
						// Jelenlegi élet eltárolása és a tiltás levevése
						GetPlayerHealth(i, Health);
						GetPlayerArmour(i, Armour);

						//printf("3 %f, %f", Health, Armour);
						SetPVarFloat(i, "GOD_Health", Health);
						SetPVarFloat(i, "GOD_Armour", Armour);

						g_pOtherFlags[i] &= ~e_GOD_SETTED;
					}
					SetPlayerHealth(i, HEALTH_GOD);
				}
				// Ha levan tiltva
				else
				{
	   				//printf("4");
					// Hamég nem állítottuk át az életit rendesre, akkor átálítjuk
					if(!(g_pOtherFlags[i] & e_GOD_SETTED))
					{
	    				//printf("5");
						if(GetPVarFloat(i, "GOD_Health") != 0.0)
						{
							SetPlayerHealth(i, GetPVarFloat(i, "GOD_Health"));
	      					SetPlayerArmour(i, GetPVarFloat(i, "GOD_Armour"));
							//printf("5 - %f, %f", GetPVarFloat(i, "GOD_Health"), GetPVarFloat(i, "GOD_Armour"));
						}
						else
						{
							SetPlayerHealth(i, 70.0);
	     					SetPlayerArmour(i, 0.0);
						}
						g_pOtherFlags[i] |= e_GOD_SETTED;
					}
				}
			}
		}
		else g_pOtherFlags[i] &= ~e_IN_HOUSE; //Ha nincs házba
	}
	foreach(Player, i)
	{
	    if(IsPlayerTextDrawVisible(i, TD_Datum[i]))
	    {
			if(g_pLang{i} == LANGUAGE_HU)
			{
				format(name, sizeof(name), "%02d.%02d.%02d", year, month, day);
			}
			else
			{
                format(name, sizeof(name), "%02d.%02d.%02d", day, month, year);
			}
			PlayerTextDrawSetString(i, TD_Datum[i], name);

			datez = hour + (g_pGMT{i} - SERVER_GMT);
/*
			// Téli idõszámításba -1 óra
			if(month > 10 && month < 5)
				datez--;
*/
			format(name, sizeof(name), "%02d:%02d:%02d", datez, minute, second);
			PlayerTextDrawSetString(i, TD_Ido[i], name);
		}
	}

	// Duel
	for(new i; i != (MAX_PLAYERS / 2); i++)
	{
		// Ha a duel nem aktív, akkor továbbmegyünk
		if(!Bit_Get(g_bDuelActive, i)) continue;

		// Ha túl messze vannak egymástól
		GetPlayerPos(g_DuelPlayer[i][0], X, Y, Z);
		if(!IsPlayerInRangeOfPoint(g_DuelPlayer[i][1], 150.0, X, Y, Z))
		{
			//printf("messzi 1");
			// Amikor messzire kerültek egymástól, lekérjük a tickeket
			if(!g_DuelMessziVannak[i]) g_DuelMessziVannak[i] = GetTickCount();

			// Ha már 3.5 másodperce nem voltak egymáshoz 150m-en bévû, akkor befjezõdik a jelenlegi menet
			if((GetTickCount() - g_DuelMessziVannak[i]) > 3500)
			{
                //printf("messzi 2");
				SetPlayerHealth(i, 0.0);
				SendClientMessage(i, COLOR_PINK, LANG(i, "MSG_DUEL__TUL_MESSZIRE_MENTETEK"));
				ExitDuel(i);
				//SendClientMessageToAllf(-1, "MSG_ANYAD_PICSAJO_", pName(i), i);
			}
		}
		else
		{
            //printf("messzi 3");
			// Ha újra közel vannak egymáshoz, akkor nullázzuk a változót
			if(g_DuelMessziVannak[i]) g_DuelMessziVannak[i] = 0;
		}
	}

	// Gangwar
	for(new id; id != 40; id++)
	{
		if(g_ZoneIsAttacked[id] != 2) continue;

        g_ZoneAttackTime[id]++;
		if(g_ZoneAttackTime[id] >= 100) // && !g_ZoneAttackRahuzas[id]
		{
			new
			    bool:doDefault,
			    oldowner = g_ZoneOwner[id];
			if(g_ZoneKillsAttacker[id] > g_ZoneKillsDefender[id])
			{
				// Nyer a támadó
                doDefault = true;
                GangwarElfoglalta(id);
			}
			else if(g_ZoneKillsAttacker[id] < g_ZoneKillsDefender[id])
			{
                doDefault = true;
				GangwarMegvedte(id);
			}
			else
			{
				// Ha döntetlen
				//SendClientMessageToAllf(-1, "MSG_EGYENLO_ERROR_ATTACKER__DEFENDE", g_ZoneKillsAttacker[id], g_ZoneKillsDefender[id]);
                g_ZoneAttackRahuzas[id] = true;
                g_ZoneLastKill[id]++;
				format(i_str, sizeof(i_str), "~y~Támadás elhúzva!~n~A következõ ölést leadó csapat nyer!~n~Támadó: %s vs Védõ: %s~n~~y~~h~Hátrelévõ Idõ: %d", GetGangwarTeamName(g_ZoneAttacker[id]), GetGangwarTeamName(oldowner), 60 - g_ZoneLastKill[id]);

				// Ha már 1 perce nem ölt senki a zónán, akkor megállítjuk h ne villogjon tovább
				if(g_ZoneLastKill[id] > 60)
				{
					new
					    attackers,
					    defenders;
					foreach(new i: Player)
					{
						if(!(g_pGamesData[i] & e_IN_GANGWAR)) continue;

			    		GetPlayerPos(i, X, Y, Z);
				        if(X >= gZoneInfo[id][e_MinX] && X <= gZoneInfo[id][e_MaxX] && Y >= gZoneInfo[id][e_MinY] && Y <= gZoneInfo[id][e_MaxY])
				        {
							if((datez = GetPlayerTeam(i)) == g_ZoneAttacker[id]) attackers++;
							else if(datez == g_ZoneOwner[id]) defenders++;
				        }
					}

					// Ha a területen több a támadó, mind a védõ, akkor elfoglalták a támadók a területet
					if(attackers >= defenders)
					{
		                doDefault = true;
		                GangwarElfoglalta(id);
					}
					else
					{
						GangwarMegvedte(id, true);
                        EndGangwar(id);
					}
				}
				// Csak egyszer fusson le
				if(!g_ZoneAttackRahuzas[id])
				{
					// Támadónak nullázzuk a "ZoneAttacked" változót, hogy tudjon új zónát is megtámodni
					foreach(new i: Player)
					{
						if(GetPVarInt(i, "ZoneAttacked") == id)
						{
		                    SetPVarInt(i, "ZoneAttacked", INVALID_GANG_ZONE);
		                    break;
						}
					}
				}
			}
			if(doDefault)
			{
				GangZoneStopFlashForAll(id);

				DestroyDynamicMapIcon(g_ZoneIconID[id]);
                g_ZoneIconID[id] = CreateDynamicMapIcon(gZoneInfo[id][e_CPX], gZoneInfo[id][e_CPY], gZoneInfo[id][e_CPZ], GetGangwarZoneIconByTeam(id), 0, 8, .streamdistance = 500.0);

				new
					fozona = oldowner * 10;
				if(id == fozona && oldowner != g_ZoneOwner[id]) // Ha a fõ zónát foglalta el
				{
					SendClientMessageToAllf(-1, "MSG_GANGWAR__BANDA_TELJESEN_ELFOGLALT", GetGangwarZoneColorByTeam(g_ZoneAttacker[id]) >>> 8, GetGangwarTeamName(g_ZoneAttacker[id]), GetGangwarZoneColorByTeam(oldowner) >>> 8, GetGangwarTeamName(oldowner));

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `gangwar_team` = 15 WHERE `gangwar_team` = %d", oldowner);
				    mysql_function_query(1, query, false, "", "");

					foreach(Player, x)
					{
						if(GetPlayerTeam(x) == oldowner && g_pGamesData[x] & e_IN_GANGWAR)
						{
							SetPlayerTeam(x, NO_TEAM);
							g_pGamesData[x] &= ~e_IN_GANGWAR;
                            g_pGangwarTeam[x] = 0xF;

                            HideGangwarZones(x);
					        UpdatePlayerSpawnInfo(x);
					        SpawnPlayer(x);

							SendClientMessage(x, COLOR_ORANGE, LANG(x, "MSG_VESZTETT_A_CSAPATOD_A_GANGWARBA"));
						}
					}

					new
					    bool:bCancel;
					for(new x; x < 40; x++)
					{
						if(g_ZoneOwner[x] != g_ZoneOwner[id])
						{
                            bCancel = true;
                            break;
						}
					}

					// Ha az összes zóna az övé
					if(!bCancel)
					{
						SendClientMessageToAllf(COLOR_YELLOW, "MSG__GANGWARNAK_VEGE_A_NYERTES", GetGangwarTeamName(g_ZoneAttacker[id]), GetGangwarZoneColorByTeam(g_ZoneAttacker[id]) >>> 8);

						foreach(Player, x)
						{
							g_pGangwarTeam[x] = 0xF;
							if(!(g_pGamesData[x] & e_IN_GANGWAR)) continue;

                            SetPlayerTeam(x, NO_TEAM);
                            g_pGamesData[x] &= ~e_IN_GANGWAR;

                            HideGangwarZones(x);
					        UpdatePlayerSpawnInfo(x);
					        SpawnPlayer(x);

							SendClientMessage(x, COLOR_ORANGE, LANG(x, "MSG_NYERTETEK_A_GANGWARBAN_A_MENETNEK"));
							GivePlayerMoneyEx(x, 1500000, "GangWar_Win");
							GivePlayerXP(x, 40);
						}

				        new
							File:fGangwar = fopen("NMSS/gangwar.txt", io_write);
						fwrite(fGangwar, "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3");
						fclose(fGangwar);

						mysql_function_query(1, "UPDATE `players` SET `gangwar_team` = 15", false, "", "");

						for(new i; i != 40; i++)
						{
                            g_ZoneOwner[i] = GetGangwarZoneID(i);
                            g_ZoneAttacker[i] = 0xFF;

                            GangZoneDestroy(i);
                            GangZoneCreate(gZoneInfo[i][e_MinX], gZoneInfo[i][e_MinY], gZoneInfo[i][e_MaxX], gZoneInfo[i][e_MaxY]);
                            GangZoneShowForAll(i, GetGangwarZoneColorByTeam(g_ZoneOwner[i]));

                            DestroyDynamicMapIcon(g_ZoneIconID[i]);
							g_ZoneIconID[i] = CreateDynamicMapIcon(gZoneInfo[i][e_CPX], gZoneInfo[i][e_CPY], gZoneInfo[i][e_CPZ], GetGangwarZoneIconByTeam(i), 0, 8, .streamdistance = 500.0);
						}
					}
				}

				EndGangwar(id);

				// Támadónak nullázzuk a "ZoneAttacked" változót, hogy tudjon új zónát is megtámodni
				foreach(new i: Player)
				{
					if(GetPVarInt(i, "ZoneAttacked") == id)
					{
	                    SetPVarInt(i, "ZoneAttacked", INVALID_GANG_ZONE);
	                    break;
					}
				}
			}
		}
		else
		{
			format(i_str, 128, "~y~~h~Hátrelévõ Idõ~w~: ~b~~h~%d ~r~~h~~h~Támadók~y~~h~: ~w~%d~y~~h~, ~g~~h~~h~Védõk~y~~h~: ~w~%d~n~Támadó: %s vs Védõ: %s", 100 - g_ZoneAttackTime[id], g_ZoneKillsAttacker[id], g_ZoneKillsDefender[id], GetGangwarTeamName(g_ZoneAttacker[id]), GetGangwarTeamName(g_ZoneOwner[id]));
		}

		foreach(new i: Player)
		{
    		GetPlayerPos(i, X, Y, Z);
	        if(X >= gZoneInfo[id][e_MinX] && X <= gZoneInfo[id][e_MaxX] && Y >= gZoneInfo[id][e_MinY] && Y <= gZoneInfo[id][e_MaxY] && GetPlayerVirtualWorld(i) == 8)
	        {
				InfoTD_MSG(i, 1100, i_str);
	        }
		}
	}

	if(++uptimeCount == 60)
	{
	    uptimeCount = 0;
	    if(++up_minutes == 60)
	    {
            up_minutes = 0;
		    if(++up_hours == 24)
	        {
	            up_days++;
                up_hours = 0;
			}
			foreach(Player, i)
			{
				switch(up_days)
				{
				    case 0:
				    {
				        switch(up_hours)
				        {
				            case 0:
				            {
				                switch(up_minutes)
				                {
				                    case 0: format(i_str, 64, LANG(i, "MSG_UPTIME_1"), uptimeCount);
				                    default: format(i_str, 64, LANG(i, "MSG_UPTIME_2"), up_minutes);
								}
							}
							case 1: format(i_str, 64, LANG(i, "MSG_UPTIME_3"), uptimeCount);
							default: format(i_str, 64, LANG(i, "MSG_UPTIME_4"), up_hours);
						}
					}
					case 1:
					{
					    switch(up_hours)
					    {
					        case 0: format(i_str, 64, LANG(i, "MSG_UPTIME_5"));
					        case 1: format(i_str, 64, LANG(i, "MSG_UPTIME_6"));
							default: format(i_str, 64, LANG(i, "MSG_UPTIME_7"),up_hours);
						}
					}
					default:
					{
					    switch(up_hours)
					    {
							case 0: format(i_str, 64, LANG(i, "MSG_UPTIME_8"),up_days);
							case 1: format(i_str, 64, LANG(i, "MSG_UPTIME_9"),up_days);
							default: format(i_str, 64, LANG(i, "MSG_UPTIME_10"),up_days,up_hours);
						}
					}
				}
				SendClientMessagef(i, COLOR_BLUE, LANG(i, "MSG_MFR_A_SZERVER_AZ_UTOLSO_RESTARTTOL"), i_str);
			}
		}
	}

	if((g_ServerFlags & e_RACE_ACTIVE) && (g_ServerFlags & e_RACE_START))
	{
	    if(VersenyCount == VersenyIdo && VersenyIdo != 0)
	    {
	        endrace();
	        SendClientMessageToAllf(COLOR_YELLOW, "MSG_VERSENY__BEJEJEZODOTT_MIVEL", g_szRaceName_);
		}
	}

	if(g_BonusCarOwner == INVALID_PLAYER_ID)
	{
		if(++g_BonusCarCount > g_BonusCarRespawn)
		{
			BonusCar();
		}
	}

	if(ZaszloOwner == INVALID_PLAYER_ID)
	{
        ZaszloRespawn++;
		if(ZaszloRespawn > 600)
		{
			CallFlag();
		}
	}

	// derbystart_

	// Ha van visszaszámlálás és még nem kezdõdött el a derby
	if(g_ServerFlags & e_DERBY_CAN_START)
	{
		if(g_DerbyStartTime > 0)
		{
			// Amikor a visszaszámláló idõ lejár és elkezdõdik a derby
			if(!--g_DerbyStartTime)
			{
				new
				    File:fDerbyFile,
				    buffer[128];

				strunpack(buffer, g_DerbyNames[g_DerbyMode], 20);
				format(buffer, 64, "/NMSS/derby/%s.txt", buffer);

				g_DerbyTime = 121;
				g_DerbySlotUsed = 0;
				g_bDerbyMapIsListed = 0;
				g_ServerFlags &= ~e_DERBY_CAN_START;
				for(new x; x != MAX_DERBY_AVIABLE_MAPS; x++)
				{
					g_DerbyAviableMaps{x} = 0xFF;
				}

                g_DerbyPlayers = 0;
				foreach(Player, i)
				{
					if(g_pGamesData[i] & e_IN_DERBY) g_DerbyPlayers++;
				}

				format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %d", g_DerbyPlayers, g_DerbyTime - 1);
				TextDrawSetString(TD_Derby, FixGameString(i_str));

				//printf("starderby pcount: %d", g_DerbyPlayers);

				if(!(fDerbyFile = fopen(buffer, io_read))) printf("lófasz a füledbe - file: %s", buffer);
				else
				{
	                g_DerbyUpperPos = -1;
					while(fread(fDerbyFile, buffer))
					{
	                    if(!++g_DerbyUpperPos)
						{
							sscanf(buffer, "p<,>df", g_DerbyVehicleModel, g_DerbyMinZ);
							//printf("---> %d, %f", g_DerbyVehicleModel, g_DerbyMinZ);
							/*format(i_str, sizeof(i_str),"---> %d, %f", g_DerbyVehicleModel, g_DerbyMinZ);
							foreach(Player, i)
							{
								SendClientMessage(i,-1,i_str);
							}*/
						}
						else
						{
							sscanf(buffer, "p<,>ffff", X, Y, Z, Angle);
							//printf("%.4f, %.4f, %.4f, %.4f", X, Y, Z, Angle);

							SetGVarFloat("DPosX", X, g_DerbyUpperPos - 1);
							SetGVarFloat("DPosY", Y, g_DerbyUpperPos - 1);
							SetGVarFloat("DPosZ", Z, g_DerbyUpperPos - 1);
							SetGVarFloat("DPosA", Angle, g_DerbyUpperPos - 1);
						}
					}
				    
					switch(random(5))
					{
					    case 0: g_DerbyVehicleModel = 480; //comet
					    case 1: g_DerbyVehicleModel = 415; //cheetah
				      	case 2: g_DerbyVehicleModel = 424; //bf-Injection
					    case 3: g_DerbyVehicleModel = 541; //bullet
					    case 4: g_DerbyVehicleModel = 500; //mesa
					}
	 				//printf("derby vehicle: %d",g_DerbyVehicleModel);
				}

				for(new i; i != sizeof(g_DerbyVotes); i++)
				{
					g_DerbyVotes[i] = 0;
				}

				format(i_str, 64, "Derby elkezdve!");
			}
			else
			{
				format(i_str, 64, "Kezdésig maradó idõ: %d", g_DerbyStartTime);
			}

            foreach(Player, x) 
            {
                if(!(g_pGamesData[x] & e_IN_DERBY)) continue;
				InfoTD_MSG(x, 1100, i_str);

				if(!g_DerbyStartTime) //Derby játékosok spawnolása
				{
				    if(GetPVarInt(x,"AFKTime") > 2) cmd_leave(x,"");
				    if(g_DerbyPlayers == 1)
				    {
				        foreach(Player, xx)
						{
							if(!(g_pGamesData[xx] & e_IN_DERBY)) continue;

							RemovePlayerFromVehicleEx(xx);
							SetDerbyCamera(xx);

							if(g_DerbyPlayerVehicle[xx] != INVALID_VEHICLE_ID) DestroyDynamicVehicle(g_DerbyPlayerVehicle[xx]);
							g_DerbyPlayerVehicle[xx] = INVALID_VEHICLE_ID;

							TogglePlayerControllable(xx, false);
							SendClientMessage(xx, -1, LANG(xx, "MSG_DERBY_IDEJE_LEJART_NINCS_NYERTES"));
							ShowDerbyDialog(xx);
						}
			            g_DerbyVote = 10;
				    }
				    else
				    {
						//print("lófasafgertzh");
						new calls = 0;
						do
						{
	                        rand = random(g_DerbyUpperPos);

	                        if(++calls > 5000) break; // Bad idea, but better than nothing
						}
						while(g_DerbySlotUsed & (1 << rand));
	                    g_DerbySlotUsed |= 1 << rand;

						//printf("random: %d (%d), mode: %d", rand, g_DerbyUpperPos, g_DerbyMode);

						// Akik freecam-ba vannak, azoknak a freecam kikapcsolása
						if(g_pNoClipObject[x] != INVALID_PLAYER_ID)
						{
						    DestroyPlayerObject(x, g_pNoClipObject[x]);
						    g_pNoClipObject[x] = INVALID_OBJECT_ID;
						}

						X = GetGVarFloat("DPosX", rand);
						Y = GetGVarFloat("DPosY", rand);
						Z = GetGVarFloat("DPosZ", rand);
						Angle = GetGVarFloat("DPosA", rand);

						PlayerTeleToDM(x, X, Y, Z, 0, Angle, 11);
						TogglePlayerControllable(x, true);
						SetCameraBehindPlayer(x);

						//DestroyDynamicVehicle(g_DerbyPlayerVehicle[x]);

						g_DerbyPlayerVehicle[x] = CreateDynamicVehicle(g_DerbyVehicleModel, X, Y, Z, Angle, -1, -1, -1, 0, 11);
						PutPlayerInDynamicVehicle(x, g_DerbyPlayerVehicle[x], 0);
					}
				}
			}
		}
	}

	// Ha már megy a derby és nem nulla az ideje
	if(g_DerbyTime != 0 && !g_DerbyStartTime)
	{
		format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %d", g_DerbyPlayers, --g_DerbyTime);
		TextDrawSetString(TD_Derby, FixGameString(i_str));

		// Ha lejért a derby ideje
		if(!g_DerbyTime)
		{
			printf("derby time out, players: %d", g_DerbyPlayers);
			format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: -", g_DerbyPlayers);
			TextDrawSetString(TD_Derby, FixGameString(i_str));

			foreach(Player, x)
			{
				if(!(g_pGamesData[x] & e_IN_DERBY)) continue;

				RemovePlayerFromVehicleEx(x);
				SetDerbyCamera(x);

				if(g_DerbyPlayerVehicle[x] != INVALID_VEHICLE_ID) DestroyDynamicVehicle(g_DerbyPlayerVehicle[x]);
				g_DerbyPlayerVehicle[x] = INVALID_VEHICLE_ID;

				TogglePlayerControllable(x, false);
				SendClientMessage(x, -1, LANG(x, "MSG_DERBY_IDEJE_LEJART_NINCS_NYERTES"));
				ShowDerbyDialog(x);
			}
            g_DerbyVote = 10;
		}

		if(g_DerbyPlayers <= 1)
		{
			//printf("<if(g_DerbyPlayers <= 1)> count: %d", g_DerbyPlayers);
			new
			    winner = -1;
			foreach(Player, x)
			{
				if(g_pGamesData[x] & e_IN_DERBY)
				{
			    	if(g_DerbyPlayerVehicle[x] != INVALID_VEHICLE_ID)
					{
						winner = x;
						RemovePlayerFromVehicleEx(x);
                	    DestroyDynamicVehicle(g_DerbyPlayerVehicle[x]);
                	    g_DerbyPlayerVehicle[x] = INVALID_VEHICLE_ID;
                	    SetDerbyCamera(x);
					}
					TogglePlayerControllable(x, false);
					ShowDerbyDialog(x);
				}
			}

			if(winner != -1)
			{
				format(tmp, 128, "Derby befejezõdött! Nyertes: {%06x}%s(%d)", GetPlayerColor(winner) >>> 8, pName(winner), winner);

				new
				    count;
				foreach(Player, x)
				{
					if(!(g_pGamesData[x] & e_IN_DERBY)) continue;
				    count++;
				}

				GivePlayerXP(winner, count);
				GivePlayerMoneyEx(winner, count * 2500, "DerbyWin");

				PVarIntFel(winner, "Derby");
				mysql_format(1, query, sizeof(query), "UPDATE `players` SET `derby` = `derby` + 1 WHERE `reg_id` = %d", PlayerInfo[winner][pRegID]);
				mysql_function_query(1, query, false, "", "");
			}
			else
			{
				format(tmp, 128, "Derby befejezõdött! Mindenki kiesett, nincs nyertes!");
			}
            g_DerbyVote = 10;
            g_DerbyTime = 0;

			foreach(Player, x)
			{
				if(!(g_pGamesData[x] & e_IN_DERBY)) continue;
	        	SendClientMessage(x, -1, tmp);
			}
		}
	}

	if(g_DerbyVote > 0)
	{
		if(!--g_DerbyVote)
		{
			format(i_str, 64, "Szavazás befejezve!");
			new
			    maxval,
			    id,
			    bool:isequal;
			// max érték megkeresése
			for(new i; i != sizeof(g_DerbyVotes); i++)
			{
				if(g_DerbyVotes[i] > maxval)
				{
		            maxval = g_DerbyVotes[i];
					id = i;
				}
			}

			// megnézzük, hogy a két legnagyobb egyenlõ-e
			for(new i; i != sizeof(g_DerbyVotes); i++)
			{
				for(new x; x != sizeof(g_DerbyVotes); x++)
				{
					// Az összes szavazot összehasonlítjuk az összessel, kivéve önmagával és azzal, ami nem 0 és ami egyenlõ a max értékkel.
					if(g_DerbyVotes[i] == g_DerbyVotes[x] && g_DerbyVotes[x] != 0 && i != x && g_DerbyVotes[i] == maxval)
					{
		                isequal = true;
					}
				}
			}

			// ha egyenlõ a legnagyobb szavazat, vagy nincs szavazat semmire, akkor véletlen szerû map
			if(isequal || !maxval) id = random(sizeof(g_DerbyNames));

			new
			    count;
			foreach(Player, x)
			{
				if(g_pGamesData[x] & e_IN_DERBY) count++; continue;
			}

			if(count > 1)
			{
				g_DerbyStartTime = 3;
				g_ServerFlags |= e_DERBY_CAN_START;
			}

			if(isequal || !maxval)
			{
				g_DerbyMode = id;
			}
			else
			{
                g_DerbyMode = (g_DerbyAviableMaps{id} == 0xFF) ? (random(sizeof(g_DerbyNames))) : (g_DerbyAviableMaps{id});
			}
			strunpack(name, g_DerbyNames[g_DerbyMode], sizeof(name));
			//SendClientMessageToAllf(-1, "MSG_G_DERBYMODE____EQUAL___", id, id2, equal[0], equal[1], equal[2], isequal);

			if(!isequal && maxval)
			{
				format(tmp, 128, "Következõ map: {" #XCOLOR_GREEN "}%s {" #XCOLOR_WHITE "}({" #XCOLOR_RED "}%d {" #XCOLOR_WHITE "}szavazattal nyert)", name, g_DerbyVotes[id]);
			}
			else
			{
				format(tmp, 128, "Következõ map: {" #XCOLOR_GREEN "}%s {" #XCOLOR_WHITE "}(random)", name);
			}

			foreach(Player, x)
			{
				if(!(g_pGamesData[x] & e_IN_DERBY)) continue;

				SetDerbyCamera(x);
	        	SendClientMessage(x, -1, tmp);
	        	ShowPlayerDialogEx(x, -1, 0, "a", "a", "a");

                g_PlayerData[x] &= ~e_CTC_VOTED;
			}
		}
		else
		{
			format(i_str, 64, "Szavazásból hátra van ~r~%d ~w~másodperc!", g_DerbyVote);
		}

		foreach(Player, x)
		{
			if(!(g_pGamesData[x] & e_IN_DERBY)) continue;
			InfoTD_MSG(x, 1100, i_str);
		}
	}

	////////////////////////////////////////////////////////////////////////////
	// CTC
	if(g_VoteCount > 0)
	{
        if(!--g_VoteCount)
        {
			if(g_CTC_Votes[0] > g_CTC_Votes[1]) // A betonykeverõ nyert
			{
	            g_RoundType = 0;
	            g_LastVote = -1;
			}
			else if(g_CTC_Votes[0] < g_CTC_Votes[1]) // A hajó nyert
			{
	            g_RoundType = 1;
	            g_LastVote = -1;
			}
			else
			{
	            g_RoundType = g_LastVote;
			}
            g_CTC_Votes[0] = 0;
            g_CTC_Votes[1] = 0;

			for(new i; i != 43; i++)
			{
				SetDynamicVehicleVirtualWorld(g_CTC_Auto[0] + i, 10);
				SetDynamicVehicleToRespawn(g_CTC_Auto[0] + i);
			}
			format(i_str, 64, "Szavazás befejezve! Következõ map: %s", (!g_RoundType) ? ("Betonkeverõ") : ("Hajó"));
		}
		else
		{
			format(i_str, 64, "Szavazásig lévõ idõ: %d", g_VoteCount);
		}

		foreach(Player, x)
		{
			if(g_pGamesData[x] & e_IN_CTC)
			{
				InfoTD_MSG(x, 1100, i_str);

				if(!g_VoteCount)
				{
                    g_PlayerData[x] &= ~e_CTC_VOTED;
					for(new j; j != 5; j++)
					{
						TextDrawHideForPlayer(x, TD_SelectAuto + Text:j);
					}
					CancelSelectTextDraw(x);
					cmd_ctc(x, "");
				}
			}
		}
	}

    if(!Iter_Count(Player)) return 1;
	foreach(new i: Player)
	{
		if(!(g_PlayerData[i] & e_LOGGED_IN)) continue;
        pState = GetPlayerState(i);

		if((iCurrTick - g_pLastDamgeTick[i]) > 2300)
		{
            //printf("iTick: %d, %d, osszeg: %d", iCurrTick, g_pLastDamgeTick[i], (iCurrTick - g_pLastDamgeTick[i]));
		    g_pShots[i] = 0;
		}

		if(!(g_pTDFlags[i] & e_NOTD_FPS))
		{
			new fps[32];
	        switch(g_pFPS[i])
			{
			    case 1..30: format(fps,sizeof(fps),"~w~fps: ~r~~h~%d",g_pFPS[i]); //Piros
			    case 31..60: format(fps,sizeof(fps),"~w~fps: ~y~~h~%d",g_pFPS[i]); //Sárga
			    case 61..100: format(fps,sizeof(fps),"~w~fps: ~b~~h~~h~%d",g_pFPS[i]); //kék
			    case 101..500: format(fps,sizeof(fps),"~w~fps: ~g~~h~~h~%d",g_pFPS[i]); //zöld
			    default: format(fps,sizeof(fps),"~w~fps: ~g~~b~~h~~h~~h~%d",g_pFPS[i]);
			}
			format(i_str, sizeof(i_str), "~w~speedboost: %s ~w~jump: %s %s~n~~w~carfly: %s ~w~fly: %s",

				(GetPVarType(i, "VehicleboostValue")) ? ("~g~~h~on") : ("~r~~h~off"),
				(GetPVarType(i, "VehicleHopping")) ? ("~g~~h~on") : ("~r~~h~off"),
				fps,
				(g_PlayerFlags[i] & e_CARFLY) ? ("~g~~h~on") : ("~r~~h~off"),
				(g_PlayerFlags[i] & e_FLY) ? ("~g~~h~on") : ("~r~~h~off"));
			PlayerTextDrawSetString(i, TD_DMInfoSettings[i], i_str);
		}
		else
		{
            format(i_str, sizeof(i_str), "~w~speedboost: %s ~w~jump: %s~n~~w~carfly: %s ~w~fly: %s",

				(GetPVarType(i, "VehicleboostValue")) ? ("~g~~h~on") : ("~r~~h~off"),
				(GetPVarType(i, "VehicleHopping")) ? ("~g~~h~on") : ("~r~~h~off"),
				(g_PlayerFlags[i] & e_CARFLY) ? ("~g~~h~on") : ("~r~~h~off"),
				(g_PlayerFlags[i] & e_FLY) ? ("~g~~h~on") : ("~r~~h~off"));
			PlayerTextDrawSetString(i, TD_DMInfoSettings[i], i_str);
		}

		if(pState != PLAYER_STATE_NONE && pState != PLAYER_STATE_WASTED/* && g_DerbyPlayerVehicle[i] == INVALID_VEHICLE_ID*/)
		{
			if((iCurrTick - PlayerInfo[i][pLastActive] > 1500) || (iCurrTick - g_pLastActiveTick[i] > 30000))
			{
   				AFKTime = GetPVarInt(i, "AFKTime");
				SetPVarInt(i, "AFKTime", ++AFKTime);
                PlayerInfo[i][pAFKTime]++;

                // Speciális dolgok törlése, ha afk-ban van..
				if(AFKTime > 2)
				{
					if(g_pGamesData[i] & e_IN_DERBY)
					{
					//	if(!g_DerbyStartTime && !g_DerbyVote)
					//	{
						    if(g_DerbyPlayerVehicle[i] != INVALID_VEHICLE_ID)
						    {
								cmd_leave(i, "");
			    				//printf("11111111111111111");
							}
						//}
					}
					if(g_pGamesData[i] & e_IN_FALLOUT)
			        {
						cmd_leave(i, "");
					}
				}

                if(AFKTime > 30)
                {
					if(g_BonusCarOwner == i)
					{
						g_BonusCarOwner = INVALID_PLAYER_ID;
						g_pGamesData[i] &= ~e_BCAR_OWNER;
						//g_BonusCarCount = 0;
						//g_BonusCarRespawn = 0;

						GetPlayerPos(i, X, Y, Z);
						SimpleTele(i, X, Y, Z + 2.0);
					}

					if(ZaszloOwner == i)
					{
						cmd_dropflag(i, "255");
					}

					if((e_IN_DUEL | e_IN_RACE | e_IN_GANGWAR | e_IN_CTC | e_IN_TAXI) & g_pGamesData[i])
					{
						cmd_leave(i, "");
					}

					if(g_pDeathMatchID[i] != -1) //Ne töröld ki
					{
						cmd_leave(i, "");
					}
				}

				SetPlayerChatBubble(i, COLOR_PROPGREEN, 20.0, 1500, "MSG_CHATBUBBLE_AFK", AFKTime);
				SetPlayerColor(i, COLOR_BLACK);
			}
			else if((iCurrTick - PlayerInfo[i][pLastActive] < 1500 || iCurrTick - g_pLastActiveTick[i] < 30000) && GetPVarType(i, "AFKTime"))
			{
				new
				    afk = GetPVarInt(i, "AFKTime"),
				    longestafk = GetPVarInt(i, "LongestAFK");
				if(afk > 10)
				{
					ShowWelcomeExf(i, false, 10000, LANG(i, "MSG_AFK_BACK"), afk);
				}

				if(afk > longestafk)
				{
					SetPVarInt(i, "LongestAFK", afk);

					mysql_format(1, query, sizeof(query), "UPDATE `players` SET `longest_afk` = %d WHERE `reg_id` = %d", afk, PlayerInfo[i][pRegID]);
				    mysql_function_query(1, query, false, "", "");

                    if(afk > 300)
                    {
						SendClientMessagef(i, COLOR_YELLOW, LANG(i, "MSG__UJ_AFK_REKORDOT_DONTOTTEL"), afk, longestafk, afk - longestafk);
					}
				}

				DeletePVar(i, "AFKTime");
				if(g_pDeathMatchTeam[i] != -1)
				{
					SetPlayerColor(i, g_DMTeamColor[g_pDeathMatchID[i]][g_pDeathMatchTeam[i]]);
				}
				else
				{
					if(!GetPVarInt(i, "Color"))
					{
						SetPlayerColor(i, (random(0xFFFFFF) << 8) | 0xFF);
					}
					else
					{
				        SetPlayerColor(i, GetPVarInt(i, "Color"));
					}
				}

				if(g_pGamesData[i] & e_IN_CTC)
                {
					SetPlayerColor(i, (!GetPlayerTeam(i)) ? (COLOR_RED) : (COLOR_BLUE));
				}
				else if(g_pGamesData[i] & e_IN_GANGWAR)
				{
                    SetPlayerColor(i, GetGangwarZoneColorByTeam(GetPlayerTeam(i)));
				}
                UpdateNametagsForPlayer(i);
				SetPlayerChatBubble(i, COLOR_PROPGREEN, 20.0, 1500, "MSG_CHATBUBBLE_BACK");
			}
			else if((g_PlayerData[i] & e_AFK) && iCurrTick - PlayerInfo[i][pLastActive] < 150)
			{
				AFKTime = GetPVarInt(i, "AFKTime");
				SetPVarInt(i, "AFKTime", ++AFKTime);
			}
		}

		// Kamionozás trailer leszakadás ellenõrzése
		if(GetPVarType(i, "Trucking"))
		{
			new
			    iTrucking = GetPVarInt(i, "Trucking");
			if(iTrucking > 1)
			{
			    //if(!IsPlayerInDynamicVehicle(i, GetPVarInt(i, "TruckingVehicle")))
				if(!IsPlayerInVehicle(i, GetPVarInt(i, "TruckingVehicle")))
				{
					new
					    iCount = GetPVarInt(i, "TruckKiszalt") + 1;
					SetPVarInt(i, "TruckKiszalt", iCount);

					InfoTD_MSGf(i, 1000, LANG(i, "MSG_SZALJ_VISSZA_A_KAMIONBA_VAN"), 50 - iCount);

					if(iCount > 50)
					{
						FinishTrucking(i);
						InfoTD_MSG(i, 10000, LANG(i, "MSG_RELBASZTAD_A_FUVART_MIVEL_YKISZ"));
					}
				}
			}

			if(iTrucking == 3)
			{
				rand = GetPVarInt(i, "TruckID");
				SetPlayerCheckpoint(i, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2], 5.0);
				SetPlayerMapIcon(i, 96, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2], 51, 0, MAPICON_GLOBAL);

				if(GetPVarType(i, "TruckLeszakadt"))
				{
					// print("Leszakadt!");
					new
					    iCount = GetPVarInt(i, "TruckLeszakadt") + 1;
					SetPVarInt(i, "TruckLeszakadt", iCount);

					InfoTD_MSGf(i, 1000, LANG(i, "MSG_VEDD_FEL_A_TRAILERT_VAN__MASODPER"), 50 - iCount);

					if(iCount > 50)
					{
						FinishTrucking(i);
						InfoTD_MSG(i, 10000, LANG(i, "MSG_RELBASZTAD_A_FUVART_MIVEL_YLESZ"));
					}
				}
			}
		}

		// God ellenõrzése
		//CheckGodMoney(i);

		// Ház rablás
		if(g_pRobCount{i})
		{
			if(g_pRobCount{i} == 0xFF)
			{
				g_pRobCount{i} = 0;
			}

			ShowWelcomef(i, LANG(i, "MSG_YRHHH"), 30 - g_pRobCount{i});

			if(++g_pRobCount{i} > 29)
			{
				ShowWelcome(i, LANG(i, "MSG_VIDD_A_CUCCOT_A_RAKTARBA"));
                DisableRemoteVehicleCollisions(i, false);

				new
					iID = GetPVarInt(i, "LofaszEllopott");
				houseid = GetPVarInt(i, "LofaszHouseID");

				strunpack(country, g_HouseElementStruct[iID][e_ElementName]);
				SendClientMessagef(i, COLOR_KICK, LANG(i, "MSG_SIKERSEN_ELLOPTAD_AZ__NEVU"), country);
				SendClientMessagef(i, COLOR_KICK, LANG(i, "MSG_VIDD_A_RAKTARBA_VAN_6_PIROS"), country);

				g_pRobCount{i} = 0;
				g_pGamesData[i] |= e_RABOL;

				SetPlayerWantedLevel(i, 6);
                UpdateHouseRaktarIcon(i);
			}
		}

		// Gangwar CP Capture
		if(g_pInCPCount{i})
		{
            if(g_pInCPCount{i} == 0xFF)
            {
                g_pInCPCount{i} = 0;
			}

			if(++g_pInCPCount{i} >= 20)
			{
				new
					id = GetPlayerVisibleDynamicCP(i) - 1;
                g_pInCPCount{i} = 0;
                g_ZoneIsAttacked[id] = 2;
                g_ZoneAttacker[id] = GetPlayerTeam(i);
                g_ZoneAttackTime[id] = 0;

				SendClientMessage(i, COLOR_WHITE, LANG(i, "MSG_ZONA_FOGLALAS_ELKEZDVE"));
				GangZoneFlashForAll(id, GetGangwarZoneColorByTeam(g_ZoneAttacker[id]));
			}
			ShowWelcomef(i, LANG(i, "MSG_YRHHH"), 20 - g_pInCPCount{i});
		}

		if((e_POSTAS | e_PIZZAS) & g_pGamesData[i])
		{
			if(g_pPostasTime[i] > 1)
			{
				format(i_str, 32, "~p~Eltelt id§: %d mp", g_pPostasTime[i] - 2);
				PlayerTextDrawSetString(i, TD_pPostasTime[i], i_str);

				g_pPostasTime[i]++;
			}

            if(g_pGamesData[i] & e_POSTAS)
            {
				if(g_pOnLevel{i} != 0xFF && g_pLevelHelyek[i]{g_pOnLevel{i}} != 0xFF)
				{
					if(!IsPlayerInRangeOfPoint(i, 3.0, g_LevelPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][0], g_LevelPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][1], g_LevelPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][2]) && g_pOnLevel{i} != 0xFF)
					{
		                g_pOnLevel{i} = 0xFF;
					}
				}

				for(new x; x != 5; x++)
				{
	                if(g_pLevelHelyek[i]{x} == 0xFF) continue;

					SetPlayerMapIcon(i, 86 + x, g_LevelPos[g_pLevelHelyek[i]{x}][0], g_LevelPos[g_pLevelHelyek[i]{x}][1], g_LevelPos[g_pLevelHelyek[i]{x}][2], 53, 0, MAPICON_GLOBAL_CHECKPOINT);

					if(IsPlayerInRangeOfPoint(i, 3.0, g_LevelPos[g_pLevelHelyek[i]{x}][0], g_LevelPos[g_pLevelHelyek[i]{x}][1], g_LevelPos[g_pLevelHelyek[i]{x}][2]))
					{
						g_pOnLevel{i} = x;
					}
				}
			}
			else
			{
				if(g_pOnLevel{i} != 0xFF && g_pLevelHelyek[i]{g_pOnLevel{i}} != 0xFF)
				{
					if(!IsPlayerInRangeOfPoint(i, 3.0, g_PizzaPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][0], g_PizzaPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][1], g_PizzaPos[g_pLevelHelyek[i]{g_pOnLevel{i}}][2]) && g_pOnLevel{i} != 0xFF)
					{
		                g_pOnLevel{i} = 0xFF;
					}
				}

				for(new x; x != 5; x++)
				{
	                if(g_pLevelHelyek[i]{x} == 0xFF) continue;

					SetPlayerMapIcon(i, 86 + x, g_PizzaPos[g_pLevelHelyek[i]{x}][0], g_PizzaPos[g_pLevelHelyek[i]{x}][1], g_PizzaPos[g_pLevelHelyek[i]{x}][2], 53, 0, MAPICON_GLOBAL_CHECKPOINT);

					if(GetPlayerVirtualWorld(i) != 13) SetPlayerVirtualWorld(i, 13);
					if(IsPlayerInRangeOfPoint(i, 3.0, g_PizzaPos[g_pLevelHelyek[i]{x}][0], g_PizzaPos[g_pLevelHelyek[i]{x}][1], g_PizzaPos[g_pLevelHelyek[i]{x}][2]))
					{
						g_pOnLevel{i} = x;
					}
				}
			}
		}

		// Lezárt autóból ha kiszált, akkor kinyissuk a kocsit
		if(GetPVarType(i, "LockedCar"))
		{
			if(!IsPlayerInDynamicVehicle(i, (vID = GetPVarInt(i, "LockedCar"))))
			{
			   	new
					engine,
					alarm,
					bonnet,
					boot,
					objective;
				GetDynamicVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
				if(doors == VEHICLE_PARAMS_ON)
				{
	                SetDynamicVehicleParamsEx(vID, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
					DeletePVar(i, "LockedCar");
				}
			}
		}

		// Némítás idõ csökkentése
        if(GetPVarType(i, "Muted"))
		{
			new
			    MuteTime = GetPVarInt(i, "Muted") - 1;
		    if(!MuteTime)
		    {
				DeletePVar(i, "Muted");
				ShowWelcome(i, LANG(i, "MSG_NEMITAS_FELOLDVA_MOST_MAR_BESZELHET"));
                StopAudioStreamForPlayer(i);
			}
			else
			{
				SetPVarInt(i, "Muted", MuteTime);
			}
		}

        // Fagyasztás idõ csökkentése
        if(GetPVarType(i, "FreezeTime"))
		{
			new
			    FreezeTime = GetPVarInt(i, "FreezeTime") - 1;
		    if(!FreezeTime)
		    {
                DeletePVar(i, "FreezeTime");
				TogglePlayerControllable(i, true);
				ShowWelcome(i, LANG(i, "MSG_FAGYASZTAS_FELOLDVA_MOST_MAR"));
			}
			else
			{
				SetPVarInt(i, "FreezeTime", FreezeTime);
	            TogglePlayerControllable(i, false);
			}
		}

        // Börtön idõ csökkentése
        if(GetPVarType(i, "JailTime"))
		{
			new
			    JailTime = GetPVarInt(i, "JailTime") - 1;

			// Ha valamilyen módon nem a bilincs animáció van beállítva, akkor beállítjuk újra
			if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_CUFFED && pState == PLAYER_STATE_ONFOOT)
			{
				SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
			}

			// Ha már 2perce AFK-zik, akkor nem telik az idõ
			if(GetPVarInt(i, "AFKTime") < 120)
			{
				if(!JailTime)
			    {
					if(GetPVarType(i, "PlayerWeather"))
					{
						if(g_pDeathMatchID[i] != -1 && g_DM_Weather[g_pDeathMatchID[i]] == -1) SetPlayerWeather(i, GetPVarInt(i, "PlayerWeather"));
					}
					else
					{
						if(g_pDeathMatchID[i] != -1 && g_DM_Weather[g_pDeathMatchID[i]] == -1) SetPlayerWeather(i, GetServerVarAsInt("weather"));
					}

					if(GetPVarType(i, "PlayerTime_Hour"))
				 	{
					 	SetPlayerTime(i, GetPVarInt(i, "PlayerTime_Hour"), GetPVarInt(i, "PlayerTime_Minute"));
					}
					else if(!GetPVarInt(i, "SpawnLocation"))
					{
						SetPlayerTime(i, 23, 59);
					}
					else
					{
						SetPlayerTime(i, up_minutes, uptimeCount);
					}

			        DeletePVar(i, "JailTime");
			        UpdatePlayerSpawnInfo(i);
	  				SpawnPlayer(i);
				    SendClientMessage(i, COLOR_PINK, LANG(i, "MSG_LETOLTOTTED_A_BUNTETESED_SZABAD"));
			        GameTextForPlayer(i, LANG(i, "MSG_GAMETEXT_LEAVE_JAIL"), 3000, 3);
			        PlayerPlaySound(i, 1057);
	                StopAudioStreamForPlayer(i);
				}
				else
				{
	                SetPVarInt(i, "JailTime", JailTime);
				}
			}
		}

		// CWorld - Clearworld
		if((iCurrDMZone = g_pDeathMatchID[i]) == -1)
		{
			if((g_PlayerData[i] & e_CLEARWORLD) && GetPlayerVirtualWorld(i) != 50000 && !(g_PlayerData[i] & e_CLEARWORLD_NOOBJECTS)&& !(g_pGamesData[i] & e_IN_GANGWAR))
			{
				if(GetPlayerInterior(i) == 0)
				{
					SetPlayerVirtualWorld(i, 50000);
					if((vID = GetPlayerDynamicVehicleID(i)))
					{
						SetDynamicVehicleVirtualWorld(vID, 50000);
					}
				}
			}
		}
		else
		{
			if(GetPlayerVirtualWorld(i) != (DM_WORLD_START + floatround(iCurrDMZone / DM_ZONE_WORLD_DIVIDE, floatround_floor)))
			{
				SetPlayerVirtualWorld(i, DM_WORLD_START + floatround(iCurrDMZone / DM_ZONE_WORLD_DIVIDE, floatround_floor));
				if((vID = GetPlayerDynamicVehicleID(i)))
				{
					SetDynamicVehicleVirtualWorld(vID, DM_WORLD_START + floatround(iCurrDMZone / DM_ZONE_WORLD_DIVIDE, floatround_floor));
				}
			}
		}
/*
		if(g_pGamesData[i] & e_WORLDEDIT)
		{
			SetPlayerVirtualWorld(i, 200);
			if((vID = GetPlayerDynamicVehicleID(i)))
			{
				SetDynamicVehicleVirtualWorld(vID, 200);
			}
		}
*/
		if(g_PlayerData[i] & e_RACEMODE)
		{
            if((vID = GetPlayerDynamicVehicleID(i)))
            {
				SetPlayerInterior(i, g_iRacemodeInterior);
				LinkDynamicVehicleToInterior(vID, g_iRacemodeInterior);

				foreach(Player, x)
				{
					if(x == i) continue;
					if(IsPlayerInDynamicVehicle(x, vID))
					{
                        SetPlayerInterior(x, g_iRacemodeInterior);
					}
				}
			}
			else
			{
				SetPlayerInterior(i, g_iRacemodeInterior);
			}
		}

		#if defined YSF
		// Anti MOP
		if((g_ServerFlags & e_ANTIMOP) && (IN_MINIGAME_AND_SHITS & g_pGamesData[i]))
		{
            if(pState == PLAYER_STATE_ONFOOT && (GetTickCount() - g_pLastVehicleEnterTick[i]) > 5000 && GetPlayerWeapon(i) != 46)
			{
                GetPlayerRotationQuat(i, X, Y, Z, Angle);
				if(Y != 0.0 || Z != 0.0)
				{
					GetPlayerVelocity(i, V[0], V[1], V[2]);
					if(VectorSize(V[0], V[1], V[2]) > 0.1)
					{
						PlayerPlaySound(i, 1058);
					    SendClientMessageToAdmins(COLOR_PROPGREEN, 1, "MSG_ANTICHEAT_MOP", GetPlayerColor(i) >>> 8, pName(i), i);
						SendClientMessagef(i, COLOR_ORANGERED, LANG(i, "MSG_MEG_LETTEL_OLVE_MOP_MIATT_HA"));
						SetPlayerHealth(i, 0);

						AntiCheatLog(i, "MOP");
					}
				}
			}
		}
		#endif

		// Anti jetpack hack
		
		
		
		
		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !(g_pOtherFlags[i] & e_JETPACK))
		{
		    new
  				dmid = g_pDMID[i];
			

			
			
			if(IN_MINIGAME_AND_SHITS & g_pGamesData[i] && !(g_DMFlags[dmid] & e_JETPACK_MODE)) // Csak speciális minigamekban/helyzetekben
			{
				ClearAnimations(i);

			    SendClientMessageToAdmins(COLOR_PROPGREEN, 1, "MSG_ANTICHEAT_JETPACK", GetPlayerColor(i) >>> 8, pName(i), i);
				AntiCheatLog(i, "JETPACK");
			}
		}

		if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_USEJETPACK && (g_pOtherFlags[i] & e_JETPACK))
		{
            g_pOtherFlags[i] &= ~e_JETPACK;
		}

		// Zászló idõzítõ & pénzadás
		if(ZaszloOwner == i)
		{
		    GivePlayerMoneyEx(i, 50, "Flag");
			PVarIntFel(i, "FlagTime");

			GetPlayerPos(i, X, Y, Z);

			// Ha víz alatt van a zászlóval
			if(Z < 0.0 && !IsPlayerInDynamicArea(i, gQuarryZone) && !IsPlayerInDynamicArea(i, gLVAlagut))
			{
                ZaszloUnderwater++;
				InfoTD_MSGf(i, MESSAGE_TIME, LANG(i, "MSG_RMENJ_A_GHZASZLOVAL_RA_VIZ"), 10 - ZaszloUnderwater);

				if(ZaszloUnderwater == 10)
				{
	                SendClientMessage(i, COLOR_RED, LANG(i, "MSG_ZASZLO_UJRASPAWNOLVA__TOBB"));
					CallFlag();
				}
			}
			else
			{
			    ZaszloUnderwater = 0;
			}

           	if(pState == PLAYER_STATE_DRIVER || pState == PLAYER_STATE_PASSENGER)
           	{
				new
				    modelid = GetDynamicVehicleModel(GetPlayerDynamicVehicleID(i)),
				    bool:bPina;
				if(modelid == 432)
				{
					bPina = true;
				}
				else
				{
					switch(GetVehicleType(modelid))
					{
						case VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_BOAT, VEHICLE_TRAIN, VEHICLE_TRAM:
						{
                            bPina = true;
						}
					}
				}

				if(bPina)
				{
					RemovePlayerFromVehicleEx(i);
					InfoTD_MSG(i, MESSAGE_TIME, LANG(i, "MSG_YHZASZLOVAL_RNEM_YHSZALHAT"));
				}
			}

			switch(++ZaszloCount)
            {
				case 60, 120, 180, 240, 300, 360, 420, 480, 540:
				{
					GivePlayerXP(i, XP_ZASZLO);
					ShowWelcomef(i, LANG(i, "MSG_FLAG_GH10GXP"), XP_ZASZLO);
				}
				case 570:
				{
	                SendClientMessage(i, COLOR_RED, LANG(i, "MSG_A_ZASZLO_MAR_10_PERCE_NALAD"));
					CallFlag();
				}
 			}
		}
		// Szerveren eltöltitt idõ
  		PVarIntFel(i, "CurrSeconds");
		if(++PlayerInfo[i][pTotalSeconds] >= 60)
		{
 			PVarIntFel(i, "TotalMinutes");
   			PVarIntFel(i, "CurrMinutes");

			PlayerInfo[i][pTotalSeconds] = 0;
			SetPVarInt(i, "CurrSeconds", 0);

			switch(GetPVarInt(i, "TotalMinutes"))
			{
   				case 5, 10, 20, 30, 40, 50:
       			{
					if(g_pVIP[i])
					{
						GivePlayerMoneyEx(i, 2000, "TotalMinute");
		    			GivePlayerXP(i, 2);
					}

					// Ha már legalább 10mp-e a szerveren van, csak akkor mentjük a statját.. Nemtudom mennyire hatásos, ez csak próba jellegû
					if((GetTickCount() - GetPVarInt(i, "ConTick")) > 10000)
						SavePlayer(i);

					if(GetPVarInt(i, "TotalHours") != 0)
	   				{
				   		InfoTD_MSGf(i, 10000, LANG(i, "MSG_ONLINE_1"), GetPVarInt(i, "TotalHours"), GetPVarInt(i, "TotalMinutes"));
						SendClientMessagef(i, COLOR_GREENYELLOW, LANG(i, "MSG_SZERVEREN_ELTOLTOTT_IDOD__ORA"), GetPVarInt(i, "TotalHours"), GetPVarInt(i, "TotalMinutes"));
					}
					else
					{
     					InfoTD_MSGf(i, 10000, LANG(i, "MSG_ONLINE_2"), GetPVarInt(i, "TotalMinutes"));
						SendClientMessagef(i, COLOR_GREENYELLOW, LANG(i, "MSG_SZERVEREN_ELTOLTOTT_IDOD__PERC"), GetPVarInt(i, "TotalMinutes"));
					}
					PlayerPlaySound(i, 1138);
				}
 			}
			if(GetPVarInt(i, "TotalMinutes") >= 60)
			{
				GivePlayerMoneyEx(i, 4000, "TotalMinute");
				GivePlayerXP(i, 5);

				PVarIntFel(i, "TotalHours");
				SetPVarInt(i, "TotalMinutes", 0);

				PlayerPlaySound(i, 1139);

				if(GetPVarInt(i, "TotalHours") != 1)
				{
					InfoTD_MSGf(i, 10000, LANG(i, "MSG_ONLINE_3"), GetPVarInt(i, "TotalHours"));
					SendClientMessagef(i, COLOR_GREENYELLOW, LANG(i, "MSG_SZERVEREN_ELTOLTOTT_IDOD__ORA_1"), GetPVarInt(i, "TotalHours"));
				}
				else
				{
    				InfoTD_MSG(i, 10000, LANG(i, "MSG_ONLINE_4"));
				    SendClientMessagef(i, COLOR_GREENYELLOW, LANG(i, "MSG_SZERVEREN_ELTOLTOTT_IDOD_EGY"));
				}
			}
			if(GetPVarInt(i, "CurrMinutes") == 60)
			{
   				SetPVarInt(i, "CurrMinutes", 0);
			    PVarIntFel(i, "CurrHours");
			}
  		}
        vID = GetPlayerDynamicVehicleID(i);
		// Bónuszautó idõzítõ & pénzadás
		if(g_BonusCarOwner == i)
		{
			if(vID != g_BonusCarID)
			{
				g_BonusCarOwner = INVALID_PLAYER_ID;
				g_pGamesData[i] &= ~e_BCAR_OWNER;
				//g_BonusCarCount = 0;
				//g_BonusCarRespawn = 0;
				
				foreach(Player, ii)
				{
					if(g_pChatMSGFlags[ii] & e_BonusCar_MSG) continue;
					SendClientMessagef(ii, COLOR_ORANGE, LANG(ii, "MSG__BONUSZAUTO___ELHAGYTA_A_B"), GetPlayerColor(i) >>> 8, pName(i), i, i_str);
				}
			}
			else
			{
				GivePlayerMoneyEx(i, 50, "BonusCar");
				PVarIntFel(i, "bCarTime");

	            switch(++g_BonusCarCount)
	            {
					case 60, 120, 180, 240, 300, 360, 420, 480, 540:
					{
						GivePlayerXP(i, XP_BONUSCAR);
						ShowWelcomef(i, LANG(i, "MSG_BONUSCAR_GH10GXP"), XP_BONUSCAR);
					}
					case 570:
					{
					    //SendClientMessage(i, COLOR_GREEN2, LANG(i, "MSG_A_BONUSZAUTO_MAR_10_PERCE_NALAD"));
		                BonusCar();
					}
	 			}
			}
		}

		GetPlayerCameraFrontVector(i, X, Y, Z);
        if(X != g_pLastCamVector[i][0] && Y != g_pLastCamVector[i][1] && Z != g_pLastCamVector[i][2])
        {
            g_pLastCamVector[i][0] = X;
            g_pLastCamVector[i][1] = Y;
            g_pLastCamVector[i][2] = Z;

			g_pLastActiveTick[i] = GetTickCount();
		}
		if(pState != PLAYER_STATE_DRIVER) continue;
		if(vID == g_BonusCarID || ((DERBY | FALLOUT | DM | DUEL | TRUCKING | RANGE | LOP | KOCSILOP | GANGWAR | CTC | FLAG | BCAR | e_NOTELE) & g_pGamesData[i])) continue;

		if(GetPVarInt(i, "ColorChanger") == 1)
		{
			ChangeDynamicVehicleColor(vID, RandomColor, RandomColor);
		}
	}
    return 1;
}

stock PositionChecks(i)
{
	if(IsPlayerInRangeOfPoint(i, 5, 315.7728, 1033.9340, 1945.9673) && GetPlayerInterior(i) == 9)
	{
		SetPlayerInterior(i, 0);
        SetPlayerVirtualWorld(i, 0);

		if((vID = GetPlayerDynamicVehicleID(i)))
		{
			LinkDynamicVehicleToInterior(vID, 0);
			SetDynamicVehicleVirtualWorld(vID, 0);
		}
	}

	if(IsPlayerInRangeOfPoint(i, 7.0, -423.699341, 2201.723145, 40.926292) && !GetPVarInt(i, "OpenGateCage")) //close --> open
	{
	  	MoveDynamicObject(DamGate[0], -423.692413, 2201.705811, 50.923096, 10.0);
	  	MoveDynamicObject(DamGate[1], -423.686127, 2206.743164, 45.926369, 10.0);
	  	MoveDynamicObject(DamGate[2], -418.655365, 2201.730713, 45.926369, 10.0);
	  	MoveDynamicObject(DamGate[3], -423.685608, 2196.700928, 45.913692, 10.0);
	  	MoveDynamicObject(DamGate[4], -428.733124, 2201.718506, 45.926338, 10.0);
		SetPVarInt(i, "OpenGateCage", 1);
	}
	if(!IsPlayerInRangeOfPoint(i, 7, -423.699341, 2201.723145, 40.926292) && GetPVarInt(i, "OpenGateCage")) //open --> close
	{
		MoveDynamicObject(DamGate[0], -423.692413, 2201.705811, 59.923141, 1.5);
		MoveDynamicObject(DamGate[1], -423.686127, 2215.716309, 45.926369, 1.5);
		MoveDynamicObject(DamGate[2], -409.680603, 2201.730713, 45.926369, 1.5);
		MoveDynamicObject(DamGate[3], -423.685608, 2187.702881, 45.913692, 1.5);
		MoveDynamicObject(DamGate[4], -437.683075, 2201.718506, 45.926338, 1.5);
		SetPVarInt(i, "OpenGateCage", 0);
	}

	// CTCG
	if(g_pGamesData[i] & e_IN_CTC)
	{
		if((vID = GetPlayerDynamicVehicleID(i)) && GetDynamicVehicleVirtualWorld(vID) == 10)
		{
			new
				row,
				team = GetPlayerTeam(i);

			if(!g_RoundType)
			{
				if(!team) row = 1;
				if(team) row = 0;
			}
			else
			{
				if(!team) row = 3;
				if(team) row = 2;
			}

			//printf("row: %d", row);

			if(IsPlayerInRangeOfPoint(i, 6.0, g_fLeadoHelyek[row][0], g_fLeadoHelyek[row][1], g_fLeadoHelyek[row][2]) && !g_VoteCount)
			{
				new
				    bool:bNemAz;
				if(!g_RoundType)
				{
					if(vID != g_CTC_Auto[row]) bNemAz = true;
				}
				else
				{
					if(vID != g_CTC_Hajo[row - 2]) bNemAz = true;
				}

				if(!bNemAz)
				{
					new
					    won = -1,
					    count;
					if(!team)
					{
						if(++g_RedSteals == 5) won = 0;
					}
					else
					{
						if(++g_BlueSteals == 5) won = 1;
					}

					format(i_str, 64, "~r~Piros: %d/5 ~w~- ~b~Kk: %d/5", g_RedSteals, g_BlueSteals);
					TextDrawSetString(TD_CTC, i_str);
					if(!(g_pTDFlags[i] & e_NOTD_CTC)) TextDrawShowForPlayer(i, TD_CTC);

					RemovePlayerFromVehicleEx(i);
					SetDynamicVehicleToRespawn(vID);

					if(!g_RoundType)
					{
						PVarIntFel(i, "CTC_Auto");
						mysql_format(1, query, sizeof(query), "UPDATE `players` SET `ctc_auto` = `ctc_auto` + 1 WHERE `reg_id` = %d", PlayerInfo[i][pRegID]);
					}
					else
					{
						PVarIntFel(i, "CTC_Hajo");
						mysql_format(1, query, sizeof(query), "UPDATE `players` SET `ctc_hajo` = `ctc_hajo` + 1 WHERE `reg_id` = %d", PlayerInfo[i][pRegID]);
					}
					mysql_function_query(1, query, false, "", "");

					ShowWelcome(i, (!g_RoundType) ? ("Kocsi sikeresen leadva!") : ("Hajó sikeresen leadva!"));
                    GivePlayerXP(i, XP_CTC_LEADVA);
                    GivePlayerMoneyEx(i, 5000, "CTC_Leadva");

					foreach(Player, x)
					{
						if(g_pGamesData[x] & e_IN_CTC)
						{
							if(GetPlayerTeam(x) == GetPlayerTeam(i)) GivePlayerMoneyEx(i, 2000, "CTC_Leadva");

							count++;
							SendClientMessagef(x, -1, "%s csapat leadta a %s csapat jármûvét! %d/5", (!team) ? ("Piros") : ("Kék"), (team) ? ("Piros") : ("Kék"),
							    (!team) ? (g_RedSteals) : (g_BlueSteals));
						}
					}

					if(won != -1)
					{
						//printf("g_RedSteals = 0;");
						g_RedSteals = 0;
                        g_BlueSteals = 0;
                        g_VoteCount = 7;
						TextDrawSetString(TD_CTC, "~r~Piros: 0/5 ~w~- ~b~Kk: 0/5");

						foreach(Player, x)
						{
							if(g_pGamesData[x] & e_IN_CTC)
							{
								SendClientMessagef(x, COLOR_GOLD, "%s csapat nyerte meg a menetet!", (!won) ? ("Piros") : ("Kék"));
								if(GetPlayerTeam(x) == won)
								{
									//printf("CTC_Givescore");
									GivePlayerXP(x, 5 + count);
									GivePlayerMoneyEx(x, count * 2800, "CTC_WIN");
								}

								for(new j; j != 5; j++)
								{
									TextDrawShowForPlayer(x, TD_SelectAuto + Text:j);
								}
                                SelectTextDraw(x, 0x33FF33AA);
							}
						}
					}
				}
			}
		}
	}

	// derbycheck
 	if(g_pGamesData[i] & e_IN_DERBY)
	{
		if(!g_DerbyStartTime && !g_DerbyVote && g_DerbyTime < 121)
		{
			// Ha van neki derby kocsija, csak akkor nézzük, hogy le-e esett
			if(g_DerbyPlayerVehicle[i] != INVALID_VEHICLE_ID)
			{
				GetPlayerPos(i, X, Y, Z);
				if(Z < g_DerbyMinZ)
				{
					//printf("g_DerbyMinZ player: %s(%d), g_DerbyPlayers: %d", pName(i), i, g_DerbyPlayers);
					RemovePlayerFromVehicleEx(i);
					SetDerbyCamera(i);

					DestroyDynamicVehicle(g_DerbyPlayerVehicle[i]);
					g_DerbyPlayerVehicle[i] = INVALID_VEHICLE_ID;
					g_DerbyPlayers--;

					format(i_str, sizeof(i_str), "Bentlévõ jatékosok: %d - Hátralévõ idõ: %d", g_DerbyPlayers, g_DerbyTime);
					TextDrawSetString(TD_Derby, FixGameString(i_str));

                    TogglePlayerControllable(i, false);
					SendClientMessage(i, -1, LANG(i, "MSG_LEESTEL__KIESTEL_A_JELENLEGI"));
				}
			}
		}
	}

	// Házautó ellopás
	if(GetPVarType(i, "ElloptaKocsit"))
	{
		if(!IsPlayerInDynamicVehicle(i, (vID = GetPVarInt(i, "ElloptaKocsit"))))
		{
			if(!(g_PlayerData[i] & e_KOCSI_RESPAWN))
			{
				SetDynamicVehicleToRespawn(vID);
				DeletePVar(i, "ElloptaKocsit");
				DeletePVar(i, "EllopottID");
				g_pGamesData[i] &= ~e_KOCSIT_LOP,

                Kocsileadofosdelete(i);
                SendClientMessage(i, COLOR_RED, LANG(i, "MSG_KISZALTAL_A_KOCSIBOL_ELBASZTAD"));
			}
			else
			{
                g_PlayerData[i] &= ~e_KOCSI_RESPAWN;
			}
			SetGoodAllowed(i, true);
			DisableRemoteVehicleCollisions(i, !!(g_pGamesData[i] & e_GHOSTMODE));
		}
 		for(new x; x != sizeof(g_fGarazsPos); x++)
		{
			if(IsPlayerInRangeOfPoint(i, 5.0, g_fGarazsPos[x][0], g_fGarazsPos[x][1], g_fGarazsPos[x][2]) && leadofos[i][x])
			{
				datez = (1000 + random(9876)) + 10000;

				Kocsileadofosdelete(i);
				GivePlayerMoneyEx(i, datez, "KocsiLopas");

				InfoTD_MSGf(i, MESSAGE_TIME, LANG(i, "MSG_BHSIKERESEN_HLEADTAD_A_HKOCS"), datez);

			    getdate(year, month, day);
				gettime(hour, minute, second);

				mysql_format(1, query, sizeof(query), "INSERT INTO `rablasok`(id, reg_id, name, prop_id, type, iscar, earning, time) VALUES(0, %d, '%s', %d, 0, 1, %d, '%02d.%02d.%02d %02d:%02d:%02d')", PlayerInfo[i][pRegID], pName(i), GetPVarInt(i, "EllopottID"), datez, year, month, day, hour, minute, second);
				mysql_function_query(1, query, false, "", "");

				GetPlayerPos(i, X, Y, Z);
				SimpleTele(i, X, Y, Z + 2);
	            SetDynamicVehicleToRespawn(vID);
				DeletePVar(i, "ElloptaKocsit");
				DeletePVar(i, "EllopottID");
				g_pGamesData[i] &= ~e_KOCSIT_LOP;
	            //SetGoodAllowed(i, true);
	            DisableRemoteVehicleCollisions(i, !!(g_pGamesData[i] & e_GHOSTMODE));

				SetPVarInt(i, "LastRabolt", 10);
				GivePlayerXP(i, XP_KOCSI_LEADVA);
	            PVarIntFel(i,"RablasokSzama");
			}
		}
	}

	if(g_pGamesData[i] & e_NOTELE)
	{
		GetPlayerPos(i, X, Y, Z);
		if(!IsPlayerInRangeOfPoint(ZaszloOwner, 5.0, X, Y, Z))
		{
            g_pGamesData[i] &= ~e_NOTELE;
		}
	}

	// Rablás CP ellenõrzése
	if(g_pGamesData[i] & e_RABOL)
	{
        UpdateHouseRaktarIcon(i);
		for(new x; x != sizeof(g_fGarazsPos); x++)
		{
			if(IsPlayerInRangeOfPoint(i, 5.0, g_fGarazsPos[x][0], g_fGarazsPos[x][1], g_fGarazsPos[x][2]))
			{
				new
					iID = GetPVarInt(i, "LofaszEllopott");
				houseid = GetPVarInt(i, "LofaszHouseID");

				strunpack(country, g_HouseElementStruct[iID][e_ElementName]);
				SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG_LEADTAD_A__NEVU_TARGYAT_MIT"), country);

                SetGoodAllowed(i, true);
                DisableRemoteVehicleCollisions(i, !!(g_pGamesData[i] & e_GHOSTMODE));
				RemoveHouseRaktarIcon(i);
				GivePlayerXP(i, XP_RABOL);

                datez = 5000 + random(5000);
				GivePlayerMoneyEx(i, datez, "Rablas");

				ShowPlayerDialogEx(i, DIALOG_HOUSEELEMENTS + 31, DIALOG_STYLE_LIST, "Mit szeretnél a tárgyal csinálni?", "Berakás a házba\nBerakás a raktárba\nEladás", "Ok", "Mégse");
				break;
			}
		}
	}

	// TextDraw-ok elrejtése, ha be van baszva
	if(GetPlayerDrunkLevel(i) > 5000 && !(g_PlayerData[i] & e_BEBASZVA))
	{
        g_PlayerData[i] |= e_BEBASZVA;
		HideDefaultTextdraws(i);

		ShowWelcome(i, LANG(i, "MSG_RHA_KI_AKARSZ_YJOZANODNIW_N"));
	}
	else if(GetPlayerDrunkLevel(i) < 5000 && (g_PlayerData[i] & e_BEBASZVA))
	{
        g_PlayerData[i] &= ~e_BEBASZVA;
		ShowDefaultTextdraws(i);
	}

	if(g_pGamesData[i] & e_IN_RANGE)
	{
	    if(!IsPlayerInRangeOfPoint(i, 1.4, OnArrow[0][i], OnArrow[1][i], OnArrow[2][i]))
	    {
	        ResetPlayerWeapons(i);
            LoadPlayerWeaponInfo(i);
			FinishShootingRange(i);
	        SendClientMessage(i, 0xFFBF00FF, LANG(i, "MSG_SHOOTING_RANGE_KILEPTEL_A_HALLOVOLD"));
	        SetGoodAllowed(i, true);
		}
	}

	if(g_pRobCount{i})
	{
        if(!IsPlayerInRangeOfPoint(i, 5.0, g_pRobPos[i][0], g_pRobPos[i][1], g_pRobPos[i][2]))
        {
            g_pRobCount{i} = 0;
			GivePlayerXP(i, XP_FAIL_HAZFELTORES);

            ShowWelcome(i, LANG(i, "MSG_ELBASZVA"));
            DeletePVar(i, "LofaszEllopott");
            DeletePVar(i, "LofaszHouseID");
            SetGoodAllowed(i, true);
		}
	}

	// getrcheck
	if(GetPVarType(i, "KijelzoHouseID"))
	{
		houseid = GetPVarInt(i, "KijelzoHouseID");
	    if(!IsPlayerInRangeOfPoint(i, 5.0, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid)))
	    {
            HideKijelzo(i);
            SetGoodAllowed(i, true);
            GivePlayerXP(i, XP_FAIL_HAZFELTORES);

	        SendClientMessage(i, 0xFFBF00FF, LANG(i, "MSG_TUL_MESSZE_MENTEL_A_HAZ_BEJARATTOL"));
		}
	}
    if(GetPVarType(i, "KijelzoBizID"))
	{
		houseid = GetPVarInt(i, "KijelzoBizID");
	    if(!IsPlayerInRangeOfPoint(i, 5.0, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid)))
	    {
            HideKijelzo(i);
            SetGoodAllowed(i, true);
            GivePlayerXP(i, XP_FAIL_HAZFELTORES);

	        SendClientMessage(i, 0xFFBF00FF, LANG(i, "MSG_TUL_MESSZE_MENTEL_A_BIZ_BEJARATTOL"));
		}
	}
    if(g_PlayerData[i] & e_ON_STYLE)
	{
		if(!IsPlayerInRangeOfPoint(i, 1.4, -2704.4009, 373.1788, 5.9795))
		{
			g_PlayerData[i] &= ~e_ON_STYLE;
			PlayerTextDrawSetString(i, StyleTD[i], " ");
			TogglePlayerControllable(i, true);
			PlayerTextDrawHide(i, StyleTD[i]);
			PlayerTele(i, GetPVarFloat(i, "AfterClothesX"), GetPVarFloat(i, "AfterClothesY"), GetPVarFloat(i, "AfterClothesZ"), 0, GetPVarFloat(i, "AfterClothesA"));

			DeletePVar(i, "AfterClothesX");
			DeletePVar(i, "AfterClothesY");
			DeletePVar(i, "AfterClothesZ");
			DeletePVar(i, "AfterClothesA");
		}
	}

	//VC interior teleport
	if(!GetPVarType(i, "RaceParticipant") && g_pDeathMatchID[i] == -1)
	{
		if (IsPlayerInRangeOfPoint(i, 2.0, 4542.6191,-3317.7664,17.8382)) NormalTele(i, 4545.9854,-3312.0215,92.4700, 0, 90, 0); //iroda le-fel
		else if(IsPlayerInRangeOfPoint(i, 2.0, 4548.4180,-3312.0503,92.4700)) NormalTele(i, 4540.1147,-3317.6851,17.8382, 0, 90, 0); //iroda fel-le
		else if(IsPlayerInRangeOfPoint(i, 2.0, 4212.9980,-2940.4434,8.9585))  NormalTele(i, 4221.2690,-2939.4348,12.7709, 9, 90, 0); //stúdió ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 4223.5864,-2939.5425,12.7723)) NormalTele(i, 4216.5269,-2940.5288,6.1968, 0, 270, 0); //stúdió in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5550.0332,-3104.0642,13.3238)) NormalTele(i, 5548.7046,-3093.8494,14.1485, 4, 0, 0); //mall-1 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5548.6606,-3096.3875,14.1460)) NormalTele(i, 5550.0420,-3105.9639,13.2743, 0, 180, 0); //mall-1 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5479.0708,-3105.2842,13.3135)) NormalTele(i, 5479.8374,-3094.9419,14.1756, 4, 0, 0); //mall-2 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5479.7168,-3097.2764,14.1523)) NormalTele(i, 5479.0703,-3107.3323,13.2743, 0, 180, 0); //mall-2 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5578.1787,-2975.6003,12.5868)) NormalTele(i, 5568.1221,-2976.1150,13.3049, 4, 90, 0); //mall-3 ex-it
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5571.0054,-2976.2844,13.2774)) NormalTele(i, 5581.1919,-2975.9023,11.9919, 0, 270, 0); //mall-3 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5449.9136,-2976.1016,13.3032)) NormalTele(i, 5459.2017,-2975.5105,13.9412, 4, 270, 0); //mall-4 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5456.9995,-2975.3855,13.9794)) NormalTele(i, 5446.9570,-2976.1016,13.2666, 0, 90, 0); //mall-4 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5478.8745,-2842.9417,13.4714)) NormalTele(i, 5479.8091,-2852.2544,14.1237, 4, 180, 0); //mall-5 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5479.7490,-2850.0215,14.1169)) NormalTele(i, 5478.8745,-2839.9932,13.1682, 0, 0, 0); //mall-5 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5549.5449,-2843.6169,13.3801)) NormalTele(i, 5548.3110,-2852.9614,14.0237, 4, 180, 0); //mall-6 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5548.3110,-2850.4602,13.9810)) NormalTele(i, 5549.4414,-2840.6443,13.1162, 0, 0, 0); //mall-6 in-ex
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5465.0757,-2889.9231,20.2390)) NormalTele(i, 5472.4399,-2889.8796,20.6246, 4, 270, 0); //mall-7 ex-in
		else if(IsPlayerInRangeOfPoint(i, 2.0, 5470.4209,-2889.9612,20.6480)) NormalTele(i, 5462.6333,-2889.6941,20.1948, 0, 90, 0); //mall-7 in-ex
	}
}

stock ShowKijelzo(playerid)
{
	for(new i = g_KijelzoStartTD-5; i != g_KijelzoStartTD + 36; i++)
	{
		TextDrawShowForPlayer(playerid, Text:i);
	}
	PlayerTextDrawShow(playerid, TD_pKijelzo[playerid]);

	if(g_pKijelzoTimer[playerid] != -1)
	{
		EndFlash(playerid, false);
	}

	if(GetPVarType(playerid, "StartFeltores"))
	{
		KillTimer(GetPVarInt(playerid, "StartFeltores"));
	}
	SetPVarInt(playerid, "StartFeltores", SetTimerEx("@Flash", 1000, false, "d", playerid));

	SelectTextDraw(playerid, 0x33CCFFFF);
    ShowWelcome(playerid, LANG(playerid, "MSG_GVHAHRHJR"));

	g_pKijelzoText[playerid] = "~b~~h~";
	strcat(g_pKijelzoText[playerid], "NULL", sizeof(g_pKijelzoText[]));
	PlayerTextDrawSetString(playerid, TD_pKijelzo[playerid], g_pKijelzoText[playerid]);
}

stock HideKijelzo(playerid)
{
	for(new i = g_KijelzoStartTD-5; i != g_KijelzoStartTD + 36; i++)
	{
		TextDrawHideForPlayer(playerid, Text:i);
	}
	PlayerTextDrawHide(playerid, TD_pKijelzo[playerid]);

	EndFlash(playerid);
	CancelSelectTextDraw(playerid);

	// Változók nullázása
	for(new i; i != 4; i++)
	{
		g_pKijelzoCount[playerid][i] = 0;
	}
}

forward @Flash(playerid);
public @Flash(playerid)
{
	new
		time = 1200 + (g_pSzint{playerid} * 4),
		bits = CountSetBits(g_HouseElements[houseid]) / 2,
		len = strlen(name) / 4,
		minclicks;

	houseid = GetPVarInt(playerid, "KijelzoHouseID");
	if(GetGVarType("PropLocked", houseid))
	{
		GetGVarString("PropLocked", name, sizeof(name), houseid);
	}
	else
	{
		name = "a"; // Szorzatban nem lehet 0!
	}

	if(len <= 0) len = 1;
	time -= (len * ((bits < 10) ? (10) : (bits)));

	switch(GetGVarInt("HouseRiaszto", houseid))
	{
		case 1: time -= 100;
		case 2: time -= 220;
	}

	if(GetPVarType(playerid,"OnHouse")) //Ha házba akar betõrni
	{
		switch(GetGVarInt("HouseRiaszto", houseid))
		{
			case 0: minclicks = 7;
			case 1: minclicks = 9;
			case 2: minclicks = 10;
 		}
 		printf("OnHouse... Lefutott ez a szar feltörés");
	}

	g_pKijelzoTimer[playerid] = SetTimerEx("Flash", time, true, "ddd", playerid, time, minclicks);
    SetPVarInt(playerid, "KijelzoTick", GetTickCount());
    DeletePVar(playerid, "StartFeltores");

	ShowWelcomef(playerid, LANG(playerid, "MSG_RFELTORES_ELKEZDVEWNBFRISSI"), time, minclicks);
}

stock EndFlash(playerid, deletehousevar = true)
{
	if(g_pKijelzoTimer[playerid] != -1)
	{
		KillTimer(g_pKijelzoTimer[playerid]);
		g_pKijelzoTimer[playerid] = -1;
	}

	if(GetPVarType(playerid, "KijelzoFlash"))
	{
		new
			PlayerText:TD_ID = PlayerText:GetPVarInt(playerid, "KijelzoFlash");
	    PlayerTextDrawHide(playerid, TD_ID);
		PlayerTextDrawDestroy(playerid, TD_ID);
	}
	DeletePVar(playerid, "KijelzoFlash");
	DeletePVar(playerid, "KijelzoChar");
	DeletePVar(playerid, "KijelzoLastChar");
	DeletePVar(playerid, "KijelzoTick");
	if(deletehousevar) DeletePVar(playerid, "KijelzoHouseID"), DeletePVar(playerid, "KijelzoBizID");
}

forward Flash(playerid, calltime, minclicks);
public Flash(playerid, calltime, minclicks)
{
    if(++g_pKijelzoCount[playerid][0] >= 11 || g_pKijelzoCount[playerid][1] >= minclicks)
    {
        EndFlash(playerid, false);
		SendClientMessage(playerid, -1, LANG(playerid, "MSG_HAZFELTORESNEK_VEGE_KATTINS"));
		return 1;
	}

	new
		PlayerText:TD_ID,
		honnan = random(4),
		maxval = strlen(Gombok[honnan]),
		mit = random(maxval),
		oldchar = GetPVarInt(playerid, "KijelzoChar"),
		Float:fX,
		Float:fY;

	while(oldchar == Gombok[honnan][mit])
	{
		honnan = random(4);
		maxval = strlen(Gombok[honnan]);
		mit = random(maxval);
	}

	if(oldchar != (maxval = GetPVarInt(playerid, "KijelzoLastChar")) && GetTickCount() - GetPVarInt(playerid, "KijelzoTick") > (calltime + 20))
	{
		SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_KIHAGYTAL_EGY_GOMBOT_"), maxval);
        ApplyAnimation(playerid, "PED", "KO_skid_front", 10.0, 0, 0, 0, 0, 0);
	}

    fX = 115.0 + Float:(mit * 12.0);
    fY = Float:(150 + (honnan * 15.0));

	if(GetPVarType(playerid, "KijelzoFlash"))
	{
		TD_ID = PlayerText:GetPVarInt(playerid, "KijelzoFlash");
	    PlayerTextDrawHide(playerid, TD_ID);
		PlayerTextDrawDestroy(playerid, TD_ID);
	}

	//printf("%d -> honnan: %d, mit: %d, maxval: %d, fX: %.4f, fY: %.4f", playerid, honnan, mit, maxval, fX, fY);

	//SendClientMessagef(playerid, -1, "%d %c", g_pKijelzoCount[playerid][0], Gombok[honnan][mit]);

	format(name, 5, "~r~%s", Gombok[honnan][mit]);
	TD_ID = CreatePlayerTextDraw(playerid, fX, fY, name);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 255);
	PlayerTextDrawFont(playerid, TD_ID, 1);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.3840000, 1.260000);
	PlayerTextDrawColor(playerid, TD_ID, TEXT_COLOR); // -2686721
	PlayerTextDrawSetOutline(playerid, TD_ID, 0);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);
	PlayerTextDrawSetShadow(playerid, TD_ID, 1);
	PlayerTextDrawShow(playerid, TD_ID);

	SetPVarInt(playerid, "KijelzoFlash", _:TD_ID);
	SetPVarInt(playerid, "KijelzoChar", Gombok[honnan][mit]);
	return 1;
}

forward CallGoldpotTimer();
public CallGoldpotTimer()
{
	foreach(Player, i)
	{
        g_pOtherFlags[i] &= ~e_BEMENT_BIZNISZBE;
	}

	return CallGoldpot();
}

stock CallGoldpot(honnan = 9999)
{
    if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG)) return 0;

	if(goldpot[gPickup])
	{
		DestroyDynamicPickup(goldpot[gPickup]);
        goldpot[gPickup] = 0;

        DestroyDynamicCP(gCP_GOLDPOT);
        gCP_GOLDPOT = -1;
		DestroyDynamic3DTextLabel(goldpot[gText]);

		goldpot[gLocX] = 0.0;
	    goldpot[gLocY] = 0.0;
	    goldpot[gLocZ] = 0.0;
	    goldpot[gMoney] = 0;
	}

	if(honnan == 9999) honnan = random(goldpot[max_goldpot_id]) + 1;

	mysql_format(1, query, sizeof(query), "SELECT `X`, `Y`, `Z`, `hint`, `hint_en`, `reward` FROM `goldpot_data` WHERE `id` = %d", honnan);
    mysql_function_query(1, query, true, "THREAD_Goldpot", "");
    
    
    new
		count;
    foreach(Player, i) if(g_pOtherFlags[i] & e_RAKSAMP) count++;
    if(count != 0) SetTimerEx("RakSAMP", 46247 + randomex(1532,25632), false, "d", 2); //40 másodperc + random...
	return 1;
}

forward THREAD_Goldpot();
public THREAD_Goldpot()
{
	if(!cache_get_row_count())
	{
	    print(!"GOLDPOT: CallGoldpot() Rossz SQL Sor!");
		return 0;
	}

	new szNameHU[45], szNameEN[45];
	cache_get_row_float(0, 0, goldpot[gLocX]);
	cache_get_row_float(0, 1, goldpot[gLocY]);
	cache_get_row_float(0, 2, goldpot[gLocZ]);
	cache_get_row(0, 3, szNameHU);
	cache_get_row(0, 4, szNameEN);
	cache_get_row_int(0, 5, goldpot[gMoney]);
	strpack(gHint[0], szNameHU, 45);
	strpack(gHint[1], szNameEN, 45);

	goldpot[gPickup] = CreateDynamicPickup(1274, 23, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ], -1);
    gCP_GOLDPOT = CreateDynamicCP(goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ], 5.0, -1);
	format(i_str, sizeof(i_str), "Aranytojás - Goldpot:\n{" #XCOLOR_WHITE "}%s\n%s", szNameHU, szNameEN);
	goldpot[gText] = CreateDynamic3DTextLabel(i_str, COLOR_YELLOW, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]);

	foreach(Player, i)
	{
	    if(g_pChatMSGFlags[i] & e_Goldpot_MSG) continue;
		switch(g_pLang{i})
		{
			case 0: SendClientMessagef(i, 0xFF00FFAA, LANG(i, "MSG__ARANYTOJAS__A_MEGTALALOJA"), goldpot[gMoney], szNameHU);
			case 1: SendClientMessagef(i, 0xFF00FFAA, LANG(i, "MSG__ARANYTOJAS__A_MEGTALALOJA"), goldpot[gMoney], szNameEN);
		}
	}
	goldpot[gTick] = GetTickCount();
	return 1;
}

forward CallFlag();
public CallFlag()
{
	new
	    iRand = random(sizeof(g_fZaszloPos));
	ZaszloPos[0] = g_fZaszloPos[iRand][0];
	ZaszloPos[1] = g_fZaszloPos[iRand][1];
	ZaszloPos[2] = g_fZaszloPos[iRand][2];

	if(ZaszloPickup != -1) DestroyDynamicPickup(ZaszloPickup);
	ZaszloPickup = CreateDynamicPickup(2914, 1, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], 0);
	
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_Flag_MSG) continue;
		SendClientMessagef(i, 0x132CD5AA, LANG(i, "MSG__FLAG___A_ZASZLO_UJRA_EL_VAN"));
	}
	foreach(new i: Player)
	{
		if(IsPlayerInRangeOfPoint(i, 100, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]))
		{
			SetPlayerMapIcon(i, 30, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], 19, 0);
		}
		else
		{
			RemovePlayerMapIcon(i, 30);
		}

		if(ZaszloOwner == i)
		{
			RemovePlayerAttachedObject(i, 9);
			g_pGamesData[i] &= ~e_FLAG_OWNER;
		}
	}

    ZaszloOwner = INVALID_PLAYER_ID;
    ZaszloCount = 0;
    ZaszloRespawn = 0;
    ZaszloUnderwater = 0;
	return 1;
}

#if defined YSF
/*
stock UpdateObjectsRule(bool:createrule)
{
	new
		objects = CountDynamicObjects() + sizeof(g_iPlayerObjects[]);
	for(new i; i != MAX_OBJECTS; i++)
	{
		if(IsValidObject(i)) objects++;
	}

	valstr(name, objects);
	if(createrule) AddServerRule("objects", name);
	else SetServerRule("objects", name);
}
*/
#endif

forward BonusCar();
public BonusCar()
{
	new ModelID,cID[10] = -1;
	foreach(new i: Player)
	{
		if(!IsPlayerInDynamicVehicle(i, g_BonusCarID) && g_BonusCarOwner != i) continue;

        g_pGamesData[i] &= ~e_BCAR_OWNER;
		RemovePlayerFromVehicleEx(i);
	}

	if(g_BonusCarID != INVALID_VEHICLE_ID) DestroyDynamicVehicle(g_BonusCarID);

	rand = random(sizeof(g_fBonusCarPos));
	strunpack(name, g_fBonusCarPos[rand][Neve], 24);

	g_BonusCarOwner = INVALID_PLAYER_ID;
    g_BonusCarCount = 0;

	switch(random(7))
	{
	    case 0:
		{
	 		ModelID = 560,cID[0] = 1139,cID[1] = 1033,cID[2] = 1026,cID[3] = 1010,cID[4] = 1028,cID[5] = 1086,cID[6] = 1087,cID[7] = 1169,cID[8] = 1141;
		}
	    case 1:
		{
	 		ModelID = 565,cID[0] = 1049,cID[1] = 1053,cID[2] = 1010,cID[3] = 4064,cID[4] = 1073,cID[5] = 1153,cID[6] = 1151;
		}
	    case 2:
		{
		 	ModelID = 535;cID[0] = 1109,cID[1] = 1115,cID[2] = 1117,cID[3] = 1010,cID[4] = 1114,cID[5] = 1119,cID[6] = 1121;
	    }
	    case 3:
		{
	 		ModelID = 540,cID[0] = 1001,cID[1] = 1004,cID[2] = 1006,cID[3] = 1007,cID[4] = 1024,cID[5] = 1010,cID[6] = 1018,cID[7] = 1080,cID[8] = 1086,cID[9] = 1145;
		}
		case 4:
		{
	  		ModelID = 401,cID[0] = 1005,cID[0] = 1006,cID[1] = 1007,cID[2] = 1013,cID[3] = 1010,cID[4] = 1019,cID[5] = 1097,cID[6] = 1086,cID[7] = 1143;
		}
		case 5:
		{
		    ModelID = 534,cID[0] = 1122,cID[1] = 1010,cID[2] = 1127,cID[3] = 1084,cID[4] = 1100,cID[5] = 1180,cID[6] = 1163,cID[7] = 1091;
		}
		case 6:
		{
		    ModelID = 561,cID[0] = 1060,cID[1] = 1061,cID[2] = 1057,cID[3] = 1010,cID[4] = 1064,cID[5] = 1073,cID[6] = 1155,cID[7] = 1156;
		}
	}
	g_BonusCarID = CreateDynamicVehicle(ModelID, g_fBonusCarPos[rand][Kordinatak][0], g_fBonusCarPos[rand][Kordinatak][1], g_fBonusCarPos[rand][Kordinatak][2], g_fBonusCarPos[rand][Kordinatak][3], 130, 130, -1);
 	SetDynamicVehicleNumberPlate(g_BonusCarID, "{" #XCOLOR_RED "}Bonus{" #XCOLOR_GREEN "}Car");
	SetDynamicVehicleParamsEx(g_BonusCarID, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_ON);

    ChangeDynamicVehicleColor(g_BonusCarID, 130, 130);
	ChangeDynamicVehiclePaintjob(g_BonusCarID, random(3));
	AddDynamicVehicleComponent(g_BonusCarID, wheels[8]);

	for(new i; i != sizeof(cID); i++)
	{
		if(cID[i] != -1)
			AddDynamicVehicleComponent(g_BonusCarID, cID[i]);
	}

    rand = random(4);
	gVehicleObject[g_BonusCarID][0] = CreateDynamicObject(18647 + rand, 0.0, 0.0, -1000.0,   0.00, 0.00, 0.00, 0);
    gVehicleObject[g_BonusCarID][1] = CreateDynamicObject(18647 + rand, 0.0, 0.0, -1000.0,   0.00, 0.00, 0.00, 0);
	AttachDynamicObjectToVehicle(gVehicleObject[g_BonusCarID][0], g_BonusCarID, -0.8, 0.04, -0.50, 0.00, 0.00, 0.00);
    AttachDynamicObjectToVehicle(gVehicleObject[g_BonusCarID][1], g_BonusCarID, 0.8, -0.04, -0.50, 0.00, 0.00, 0.00);

    foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_BonusCar_MSG) continue;
		SendClientMessagef(i, COLOR_GOLD, LANG(i, "MSG__BONUSZAUTO__A_BONUSZAUTO_UJRA"), name);
	}
	return 1;
}

stock CarSpawner(playerid, model, ...)
{
    // printf("CarSpawner(playerid = %d, model = %d)", playerid, model);
    if(!IsValidModel(model)) return 0;
    
     // Ha nem admin, akkor spam ellenõrzés
	/*if(GetPVarInt(playerid, "Level") < 1 && !IsPlayerAdmin(playerid) && !GetPVarInt(playerid, "RaceParticipant"))
	{
		 SPAM_CHECK(CarSpawner, 5000) //5mp
	}*/
    if(IsPlayerInDynamicArea(playerid, gRangeZone)) return SendClientMessage(playerid,COLOR_RED, LANG(playerid, "MSG_A_RANGE_ZONABAN_NEM_RAKHATSZ_1")), 0;
  	if(model == 432) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_TANKOT_NEM_SPAWNOLHATSZ")), 0;
    if(IsPlayerInHouseZone(playerid) != -1) return ShowWelcome(playerid, LANG(playerid, "MSG_HAZBAN_NEM_SPAWNOLHATSZ_JARMUVET"));
    
    if(GetPVarInt(playerid, "RaceParticipant"))
	{
        if(RaceVehicle != -1 && model != RaceVehicle)
        {
            return SendClientMessage(playerid, COLOR_RED, "HIBA: Ebben a versenybe nem spawnolhatsz jármûvet!");
        }
		if(RaceType == 0 && strfind(g_szRaceName_, "Drag", true) != -1 && model == 522)
		{
			SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NRG_NEM"));
	  		return 1;
		}
	}
   
    //if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
    if((vID = GetPlayerDynamicVehicleID(playerid)))
	{
		GetDynamicVehicleZAngle(vID, Angle);
	}
	else
	{
		GetPlayerFacingAngle(playerid, Angle);
	}

    if(GetPVarType(playerid, "RaceParticipant"))
    {
		switch(RaceType)
		{
			case 0:
			{
				switch(GetVehicleType(model))
				{
					case VEHICLE_TRAIN, VEHICLE_TRAM, VEHICLE_HELI, VEHICLE_PLANE, VEHICLE_TRAILER: return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_NEM_LEHET"));
				}
			}
			case 1:
			{
				if(GetVehicleType(model) != VEHICLE_BOAT) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK"));
			}
			case 2:
			{
				new
				    iType = GetVehicleType(model);
				if(iType != VEHICLE_HELI && iType != VEHICLE_PLANE)
				{
                    SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EBBE_A_VERSENYBE_CSAK_1"));
					return 1;
				}
			}
			case 3: return SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EBBE_A_VERSENYBE_CSAK_GYALOG"));
		}
	}

	new
		pCar = GetPVarInt(playerid, "pCar");
	if(pCar != INVALID_VEHICLE_ID)
	{
		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(IsPlayerInDynamicVehicle(i, pCar))
			{
				//print("Másik kocsi more");
				SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG__EZT_A_JARMUVET__HOZTA_LETRE_2"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

				g_PlayerData[i] &= ~(e_FALLED | e_NOCARMSG);
				DeletePVar(i, "GetCarID");
			}
		}
		DestroyDynamicVehicle(pCar);
	}

 	GetPlayerPos(playerid, X, Y, Z);
 //	GetPlayerFacingAngle(playerid, Angle);

	vID = CreateDynamicVehicle(model, X, Y, Z, Angle, -1, -1, -1);
	if(vID == INVALID_VEHICLE_ID)
	{
		SetPVarInt(playerid, "pCar", INVALID_VEHICLE_ID);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_VEHICLE_LIMIT_REACHED"));
		return 0;
	}

	new
	    pWheel = GetPVarInt(playerid, "FavWheel");
	if(pWheel == -1)
    {
		AddDynamicVehicleComponent(vID, wheels[random(sizeof(wheels))]);
	}
	else if(pWheel > 1)
	{
		AddDynamicVehicleComponent(vID, pWheel);
	}

	switch(GetPVarInt(playerid, "HydType"))
	{
		case 1: AddDynamicVehicleComponent(vID, 1087);
		case 2: RemoveDynamicVehicleComponent(vID, 1087);
	}

	RandomNumberPlate(vID);
	SetPVarInt(playerid, "pCar", vID);

	if((g_PlayerData[playerid] & e_CLEARWORLD) && !(g_PlayerData[playerid] & e_CLEARWORLD_NOOBJECTS))
	{
		SetDynamicVehicleVirtualWorld(vID, 50000);
	}
	else
	{
		SetDynamicVehicleVirtualWorld(vID, GetPlayerVirtualWorld(playerid));
	}

	LinkDynamicVehicleToInterior(vID, GetPlayerInterior(playerid));

    if(g_PlayerFlags[playerid] & e_SPEEDO)
    	g_PlayerData[playerid] |= e_NOCARMSG;

	PutPlayerInDynamicVehicle(playerid, vID, 0);

	ChangeDynamicVehicleColor(vID, RandomColor, RandomColor);

	for(new i = 0, j = numargs(); i != j; i++)
	{
		AddDynamicVehicleComponent(vID, getarg(i));
	}

	SetPVarInt(playerid, "GetCarID", vID);
    g_PlayerData[playerid] &= ~e_FALLED;
    if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, CARSPAWN_PRICE, "CarSpawn");
    AntiDB(playerid, true);
	return 1;
}

stock CarDeleter(playerid)
{
	new
		pCar = GetPVarInt(playerid, "pCar"),
		pCar2 = GetPVarInt(playerid, "pCar2");
	if(pCar != INVALID_VEHICLE_ID || pCar2 != INVALID_VEHICLE_ID)
	{
		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(IsPlayerInDynamicVehicle(i, pCar) || IsPlayerInDynamicVehicle(i, pCar2))
			{
				//print("Másik kocsi more");
				SendClientMessagef(i, COLOR_DEFAULT, LANG(i, "MSG__EZT_A_JARMUVET__HOZTA_LETRE_2"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid);

				g_PlayerData[i] &= ~(e_FALLED | e_NOCARMSG);
				DeletePVar(i, "GetCarID");
			}
		}
		if(pCar != INVALID_VEHICLE_ID) DestroyDynamicVehicle(pCar);
		if(pCar2 != INVALID_VEHICLE_ID) DestroyDynamicVehicle(pCar2);
	}

	SetPVarInt(playerid, "pCar", INVALID_VEHICLE_ID);
	SetPVarInt(playerid, "pCar2", INVALID_VEHICLE_ID);
}

RemovePlayerFromVehicleEx(playerid)
{
	new
	    Float:CurrPos[3];
    g_PlayerData[playerid] &= ~e_FALLED;
	GetPlayerPos(playerid, CurrPos[0], CurrPos[1], CurrPos[2]);
	return SetPlayerPos(playerid, CurrPos[0], CurrPos[1], CurrPos[2] + 2.5);
}

forward countdown();
public countdown()
{
    // printf("countdown()");
	if(CountDown == 6)
	{
		foreach(new i: Player)
		{
            if(GetPVarType(i, "RaceParticipant")) continue;
			GameTextForPlayer(i, LANG(i, "MSG_GAMETEXT_STARTING"), 1000, 6);
			PlayerPlaySound(i, 1057);
		}
    }

	if(!--CountDown)
	{
		CountDown = -1;
		foreach(new i: Player)
		{
            if(GetPVarType(i, "RaceParticipant")) continue;
			switch(random(5))
			{
			    case 0: GameTextForPlayer(i, "~g~~h~]~h~]~h~]~r~~h~ GO ~g~~h~~h~~h~]~g~~h~~h~]~g~~h~]", 1000, 3);
			    case 1: GameTextForPlayer(i, "~r~~h~]~h~]~h~]~r~~h~ GO ~r~~h~~h~~h~]~r~~h~~h~]~r~~h~]", 1000, 3);
			    case 2: GameTextForPlayer(i, "~b~~h~]~h~]~h~]~r~~h~ GO ~b~~h~~h~~h~]~b~~h~~h~]~b~~h~]", 1000, 3);
			    case 3: GameTextForPlayer(i, "~y~~h~]~h~]~h~]~r~~h~ GO ~y~~h~~h~~h~]~y~~h~~h~]~y~~h~]", 1000, 3);
			    case 4: GameTextForPlayer(i, "~p~~h~]~h~]~h~]~r~~h~ GO ~p~~h~~h~~h~]~p~~h~~h~]~p~~h~]", 1000, 3);
			}
			PlayerPlaySound(i, 1057);
        }
		return 0;
	}
	else
	{
		switch(random(5))
		{
			case 0: format(i_str, 8, "~g~%d", CountDown);
			case 1: format(i_str, 8, "~r~%d", CountDown);
			case 2: format(i_str, 8, "~b~%d", CountDown);
			case 3: format(i_str, 8, "~y~%d", CountDown);
			case 4: format(i_str, 8, "~p~%d", CountDown);
		}

		foreach(new i: Player)
		{
            if(GetPVarType(i, "RaceParticipant")) continue;
			GameTextForPlayer(i, i_str, 1000, 3);
			PlayerPlaySound(i, 1056);
        }
	}

	SetTimer("countdown", 1000, false);
	return 0;
}

//==========================[ Server Info  ]====================================
InVehCount()
{
	new
		InVeh;
	foreach(new i: Player) if(IsPlayerInAnyDynamicVehicle(i)) InVeh++;
	return InVeh;
}

OnBikeCount()
{
	new
		BikeCount,
		vehicleid;
	foreach(new i: Player)
	{
		if((vehicleid = GetPlayerDynamicVehicleID(i)))
		{
			switch(GetDynamicVehicleModel(vehicleid))
			{
				case 448,461,462,463,468,471,509,510,521,522,523,581,586: BikeCount++;
			}
		}
    }
	return BikeCount;
}

InCarCount()
{
	new
		PInCarCount,
		vehicleid;
	foreach(new i: Player)
	{
		if((vehicleid = GetPlayerDynamicVehicleID(i)))
		{
			switch(GetDynamicVehicleModel(vehicleid))
			{
				case 448,461,462,463,468,471,509,510,521,522,523,581,586: continue;
				default: PInCarCount++;
			}
		}
	}
	return PInCarCount;
}

AdminCount(bool:hided = false)
{
	new
		LAdminCount;
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "Level") > 0)
		{
			if(!hided && (g_PlayerData[i] & e_REJTETT)) continue;
			LAdminCount++;
		}
	}
	return LAdminCount;
}

stock ShowInDMKills(playerid)
{
    format(i_str, sizeof(i_str), LANG(playerid, "MSG_TD_KILLDEATH_STAT"), 0, 0, 0.0, 0);
	PlayerTextDrawSetString(playerid, InDMKills[playerid], i_str);
	if(!(g_pTDFlags[playerid] & e_NOTD_DMKILLS)) PlayerTextDrawShow(playerid, InDMKills[playerid]);
}

forward DMUpdate();
public DMUpdate()
{
    if(!Itter_Count(Player)) return 0;

	new
	    i,
		Sum,
		x;
	// DM-ben lévõ játékosok számát tároló változó nullázása
	for(i = 0; i != 512; i++)
	{
        g_InDMPlayerCount{i} = 0;
	}
    g_iRCONFails = 0;

	// DM csapatkill nullázása, ha a DM-ben nincs semilyen játékos
	foreachex(DeathMatches, i)
	{
		// Ha TDM - csak akkor
		if(g_DMFlags[i] & e_IS_TDM)
		{
			g_DMTeamPlayers[i][0] = 0;
			g_DMTeamPlayers[i][1] = 0;

			// Minden játékost megnézünk, aki ebben a DM-ben van és frissítsük azszerint a csapat számot
			foreachex(Player, x)
			{
				// Ha ebben a DM-ben van
				if(g_pDeathMatchID[x] == i)
				{
					// Hibák elkerülése végett
					if(g_pDeathMatchTeam[x] == -1)
                    {
						printf("assertation failed! dm check g_pDeathMatchTeam[playerid] == -1");
						break;
					}

					// Csapattársok frissítése
					g_DMTeamPlayers[i][g_pDeathMatchTeam[x]]++;
				}
			}

			// Ha a DM-ben nincs senki, akkor nullázzuk a csapat ölések számát
			if(g_DMTeamPlayers[i][0] == 0 && g_DMTeamPlayers[i][1] == 0)
			{
                g_DMTeamKills[i][0] = 0;
                g_DMTeamKills[i][1] = 0;

				format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[i][0]), 0);
				TextDrawSetString(g_DMTextdraw[i][0], name);

				format(name, sizeof(name), "%s: 0", FixGameString(g_szDMTeams[i][1]), 0);
				TextDrawSetString(g_DMTextdraw[i][1], name);
			}
		}
	}

	if(++g_iDMReklamLastUpdate >= 5)
	{
		// Reklám szöveg frissítése
		static index;
	    if(!index)
	    {
		    new j = 1;
			do
			{
				format(name, sizeof(name), "MSG_REKLAM_DMINFO_%d", j++);
			}
			while(GetGVarType(name, 0));
			index = j - 1;
		}

		if(index)
		{
			format(name, sizeof(name), "MSG_REKLAM_DMINFO_%d", random(index - 1) + 1);

			for(i = 0; i != MAX_LANGUAGE; i++)
			{
                GetGVarString(name, tmp, sizeof(tmp), i);
    			TextDrawSetString(TD_DMInfoHelp[i], FixGameString(tmp));
	            TextDrawSetPos(TD_DMInfoHelp[i], 244.000000 - CheckTextdrawStringLen(i_str), 427.000000);
			}

			foreachex(Player, i)
			{
	   			if(g_pOtherFlags[i] & e_NO_TEXTDRAWS) continue;
				if(!(g_pTDFlags[i] & e_NOTD_DMINFO) && (g_PlayerData[i] & e_TIMESSPAWNED))
		        {
                    if(!(g_pTDFlags[i] & e_NOTD_DM_INFO_HELP))
					{
						TextDrawShowForPlayer(i, TD_DMInfoHelp[g_pLang{i}]);
					}
				}
			}
		}

		// Számláló nullázása
		g_iDMReklamLastUpdate = 0;

	}

	foreach(i: Player)
	{
		////////////////////////////////////////////////////////////////////////
		// Átlag FPS kiszámítása
		new
		    pos = g_pFPSPosition{i};
		PlayerInfo[i][pLekertFPS][pos] = g_pFPS[i];

		x = 0;
		Sum = 0;
		// Átlag fps kiszámítása és tárolása
		//Anyád 300
		while(x < FPS_MAX_EXCEEDS)
		{
			if(!(3 <= PlayerInfo[i][pLekertFPS][x] <= 500))
			{
				x++;
				continue;
			}

			Sum += PlayerInfo[i][pLekertFPS][x++];
		}

		// FPS pos nem lehet nagyobb vagy egyenlõ, mint 15
        g_pFPSPosition{i}++;
		if(g_pFPSPosition{i} >= FPS_MAX_EXCEEDS) g_pFPSPosition{i} = 0;

		// Ha nulla volt mind az összes lekérése, akkor az x is nulla lesz - 0-val nem osztunk
		if(Sum)
		{
			g_pAVG_FPS[i] = (Sum / x);
		}
		else
		{
            g_pAVG_FPS[i] = 35; // asdasd csakúgy..
		}

		////////////////////////////////////////////////////////////////////////
		// Átlag ping kiszámítása
  		pos = g_pPingPosition{i};
		PlayerInfo[i][pPing][pos] = GetPlayerPing(i);

		x = 0;
		Sum = 0;
		// Átlag ping kiszámítása és tárolása
		while(x < PING_MAX_EXCEEDS)
		{
			if(PlayerInfo[i][pPing][x] == 0xFFFF || PlayerInfo[i][pPing][x] == 0)
			{
				x++;
				continue;
			}

			Sum += PlayerInfo[i][pPing][x++];
		}

		// FPS pos nem lehet nagyobb vagy egyenlõ, mint 15
        g_pPingPosition{i}++;
		if(g_pPingPosition{i} >= FPS_MAX_EXCEEDS) g_pPingPosition{i} = 0;

		// Ha nulla volt mind az összes lekérése, akkor az x is nulla lesz - 0-val nem osztunk
		if(Sum)
		{
			g_pAVG_Ping[i] = (Sum / x);
		}
		else
		{
            g_pAVG_Ping[i] = 100; // asdasd csakúgy..
		}

		if(!GetPVarType(i, "PlayerTime_Hour") && GetPVarInt(i, "SpawnLocation"))
	 	{
			SetPlayerTime(i, up_minutes, uptimeCount);
		}

		// DM Textdraw frissítése
		if(g_pDeathMatchID[i] != -1)
		{
			g_InDMPlayerCount{g_pDeathMatchID[i] + 10}++;
		}
		else
		{
			if(g_pGamesData[i] & e_IN_DERBY) g_InDMPlayerCount{e_Count_DERBY} ++;
			else if(g_pGamesData[i] & e_IN_FALLOUT) g_InDMPlayerCount{e_Count_FALLOUT} ++;
			else if(g_pGamesData[i] & e_IN_TRUCKING) g_InDMPlayerCount{e_Count_TRUCKING} ++;
			else if(g_pGamesData[i] & e_IN_RACE) g_InDMPlayerCount{e_Count_RACE} ++;
			else if(g_pGamesData[i] & e_IN_GANGWAR) g_InDMPlayerCount{e_Count_GANGWAR} ++;
			else if(g_pGamesData[i] & e_IN_CTC) g_InDMPlayerCount{e_Count_CTC} ++;
			else if(g_pGamesData[i] & e_POSTAS) g_InDMPlayerCount{e_Count_POSTAS} ++;
			else if(g_pGamesData[i] & e_PIZZAS) g_InDMPlayerCount{e_Count_PIZZAS} ++;
			else if(g_pGamesData[i] & e_PIZZAS) g_InDMPlayerCount{e_Count_TAXI} ++;
		}
	}

	foreach(i: Player)
	{
		UpdateDMTextdraw(i);
	}
	return 1;
}

UpdateWheelTarget()
{
    gCurrentTargetYAngle += 36.0; // There are 10 carts, so 360 / 10
    if(gCurrentTargetYAngle >= 360.0)
	{
		gCurrentTargetYAngle = 0.0;
    }
	g_ServerFlags ^= e_WHEEL_ALTERNATE;
}

stock AddRakSamp(playerid)
{
	g_pOtherFlags[playerid] |= e_RAKSAMP;
	//SetPlayerScore(playerid, randomex(10, 15000));
	SetPlayerColor(playerid, (random(0xFFFFFF) << 8) | 0xFF);
	SetTimerEx("SpawnRakSamp", 5000, false, "d", playerid);
}

forward NitroReset();
public NitroReset()
{
	// Ferris Wheel
    UpdateWheelTarget();

    new
		Float:fModifyWheelZPos;
    if(g_ServerFlags & e_WHEEL_ALTERNATE) fModifyWheelZPos = 0.05;
    MoveDynamicObject(gFerrisWheel, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2] + fModifyWheelZPos, FERRIS_WHEEL_SPEED, 0.0, gCurrentTargetYAngle, FERRIS_WHEEL_Z_ANGLE);

	// Nitro Reset
	new
	    x,
	    iNosModel,
	    iCarModel;
	    //iTick = GetTickCount();
	foreach(new i: Player)
	{
        PlayerInfo[i][pMSGCount] = 0;
        g_pKillFlood{i} = 0;
        g_pDeathFlood{i} = 0;
		DeletePVar(i, "PMFlood");


		// RakSamp ellenõrzése
		/*if(GetPlayerState(i) == PLAYER_STATE_NONE && PlayerInfo[i][pRegID] == -1 && (GetTickCount() - GetPVarInt(i, "ConTick")) > 5000)
		{
			// Ha nem AFK-zik és nulla az FPS-e
			if(!GetPVarType(i, "AFKTime") && g_pFPS[i] == 0)
			{
				if(!(g_pOtherFlags[i] & e_RAKSAMP))
				{
					printf("raksamp client connected. %s(%d)", pName(i), i);
                    AddRakSamp(i);
				}
			}
		}*/


		// Ha a god bevan kapcsolva
		if(g_PlayerFlags[i] & e_GOD)
		{
			//printf("1");
			if(!(IN_MINIGAME_AND_SHITS & g_pGamesData[i]) && !g_pRobCount{i} && !GetPVarType(i, "KijelzoHouseID"))
			{
				GetPlayerPos(i, X, Y, Z);
				Angle = IN_RANGE_DISTANCE / 2.0;
				if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < Angle || GetPlayerDistanceFromPoint(i, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < Angle || (GetPlayerDistanceFromPoint(i, goldpot[gLocX], goldpot[gLocY], goldpot[gLocZ]) < Angle && goldpot[gPickup]))
				{
				    g_pOtherFlags[i] &= ~e_GOD_ALLOWED;
					//printf("1 - a");
				}
				else
				{
				    g_pOtherFlags[i] |= e_GOD_ALLOWED;
	                //printf("1 - b");
				}
			}

			// Ha nincs letiltva - örökélet
			if(g_pOtherFlags[i] & e_GOD_ALLOWED)
			{
                //printf("2");
				// Ha örökélet újra engedélyezve és már beállítttuk neki a régi életét a letiltás után
				if(g_pOtherFlags[i] & e_GOD_SETTED)
				{
					// Jelenlegi élet eltárolása és a tiltás levevése
					GetPlayerHealth(i, Health);
					GetPlayerArmour(i, Armour);

					//printf("3 %f, %f", Health, Armour);
					SetPVarFloat(i, "GOD_Health", Health);
					SetPVarFloat(i, "GOD_Armour", Armour);

			        g_pOtherFlags[i] &= ~e_GOD_SETTED;
				}

			    SetPlayerHealth(i, HEALTH_GOD);
			}

			// Ha levan tiltva
			else
			{
                //printf("4");
				// Hamég nem állítottuk át az életit rendesre, akkor átálítjuk
				if(!(g_pOtherFlags[i] & e_GOD_SETTED))
				{
                    //printf("5");
					if(GetPVarFloat(i, "GOD_Health") != 0.0)
					{
						SetPlayerHealth(i, GetPVarFloat(i, "GOD_Health"));
				        SetPlayerArmour(i, GetPVarFloat(i, "GOD_Armour"));

				        //printf("5 - %f, %f", GetPVarFloat(i, "GOD_Health"), GetPVarFloat(i, "GOD_Armour"));
					}
					else
					{
						SetPlayerHealth(i, 70.0);
				        SetPlayerArmour(i, 0.0);
					}
					g_pOtherFlags[i] |= e_GOD_SETTED;
				}
			}
		}

		// Ha túl kevés az FPS, akkor kidobjuk õt a minigamekból
		if(GetAverageFPS(i) < MINIGAMES_MIN_FPS)
		{
			if((e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_GANGWAR | e_IN_CTC) & g_pGamesData[i])
			{
				cmd_leave(i, "");
				SendClientMessagef(i, COLOR_RED, LANG(i, "MSG__KEVES_FPS_KI_LETTEL_DOBVA"), MINIGAMES_MIN_FPS);
				SendClientMessage(i, COLOR_YELLOW, LANG(i, "MSG__VEDD_LEJJEBB_A_GRAFIKAI_BEALLITAS"));
			}
		}

		if(GetAveragePing(i) > MINIGAMES_MAX_PING)
		{
			if((e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_GANGWAR | e_IN_CTC) & g_pGamesData[i])
			{
				cmd_leave(i, "");
				SendClientMessagef(i, COLOR_RED, LANG(i, "MSG__TUL_NAGY_PING_KI_LETTEL_DOBVA"), MINIGAMES_MAX_PING);
				SendClientMessage(i, COLOR_BLUE2, LANG(i, "MSG__ALLITS_LE_MINDEN_HATTERBEN"));
			}
		}

		if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
		vID = GetPlayerDynamicVehicleID(i);

		switch(GetPVarInt(i, "NOS"))
		{
			case 1: iNosModel = 1009;
			case 2: iNosModel = 1008;
			case 3: iNosModel = 1010;
			default: continue;
		}

        iCarModel = GetDynamicVehicleModel(vID);
		for(x = 0; x != 29; x++)
		{
		    if(iCarModel == InvalidNosVehicles[x]) break;
			AddDynamicVehicleComponent(vID, iNosModel);
			break;
		}
	}
}

forward Reklam_Mutat();
public Reklam_Mutat()
{
    static index;

    if(!Itter_Count(Player)) return 0;
    SetTimer("Sorsolas", 2500 + random(3500), false);

	// Hamis lövés számláló nullázása
	foreach(Player, i)
	{
        g_DisallowedBulletSync{i} = 0;
        // Raksamp botok újraspawnolása - ne legyen feltûnõ, hogy furt egyhelybe álnak xD
		if(g_pOtherFlags[i] & e_RAKSAMP)
		{
            SpawnRakSamp(i);
		}
	}

    if(!index)
    {
	    new i = 1;
		do
		{
			format(name, sizeof(name), "MSG_REKLAM_%d", i++);
		}
		while(GetGVarType(name, 0));
		index = i - 1;
	}

	if(index)
	{
        format(name, sizeof(name), "MSG_REKLAM_%d", random(index - 1) + 1);
	    foreach(Player, i)
		{
			if(g_pChatMSGFlags[i] & e_Info_MSG) continue;
			SendClientMessagef(i, 0x4361EFAA, LANG(i, name));
		}
	}
	return 1;
}

forward BombExplode(playerid);
public BombExplode(playerid)
{
    // printf("BombExplode()");
	CreateExplosion(GetPVarFloat(playerid, "BombX"), GetPVarFloat(playerid, "BombY"), GetPVarFloat(playerid, "BombZ"), 7, 10.0, GetPlayerVirtualWorld(playerid));
	ShowWelcome(playerid, LANG(playerid, "MSG_RBOMBA_FELROBBANTVAW"));

	DestroyDynamicObject(GetPVarInt(playerid, "BombObject"));
    DeletePVar(playerid, "BombObject");

	KillTimer(GetPVarInt(playerid, "BombTimer"));
    DeletePVar(playerid, "BombTimer");
    DeletePVar(playerid, "BombTick");
	DeletePVar(playerid, "BombX");
	DeletePVar(playerid, "BombY");
	return 1;
}

forward ReactionTest(bool:ModifedString);
public ReactionTest(bool:ModifedString)
{
	if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG)) return 0;
    // printf("ReactionTest(ModifedString = %d)", ModifedString);

	if(!ModifedString)
	{
		new
		    len;
		do
		{
			static const
				szReactionStr[] = "ABCDEFGHJKLMNOPQRSTUVWXYZ0123456789abcdefghijkmnopqrstuvwxyz";

			g_szReactionStr[0] = EOS;
			name[0] = EOS;
		 	for(new i; i != 8; i++)
			{
		   		name[i] = szReactionStr[random(sizeof(szReactionStr))];
			}
			strcat(g_szReactionStr, name, sizeof(g_szReactionStr));
	  		len = strlen(g_szReactionStr);
		}
		while(!(3 <= len <= 8));
	}
	g_iReactionActive = 1;
    foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_ReactionTest_MSG) continue;
	    SendClientMessagef(i, 0x189466AA, LANG(i, "MSG__REAKCIOTESZT__AKI_LEGHAMARABB"), g_szReactionStr);
	}
	g_iReactionTime = GetTickCount();
	new
		count;
    foreach(Player, i) if(g_pOtherFlags[i] & e_RAKSAMP) count++;
    if(count != 0) SetTimerEx("RakSAMP", 21337 + randomex(1372,15749), false, "d", 3); //20 másodperc + random...
	return 1;
}

forward ReactionWin(playerid);
public ReactionWin(playerid)
{
    // printf("ReactionWin()");
	new
		iTick = GetTickCount() - g_iReactionTime;
    g_iReactionActive = 2;
    g_iReactionWinner = playerid;

    session[wins][0] ++;

	GivePlayerMoneyEx(playerid, 9000, "Reaction");
	GivePlayerXP(playerid, XP_REAKCIO);

	PVarIntFel(playerid, "ReactionWins");
    SetTimer("ReactionBack", 50, false);

	mysql_format(1, query, sizeof(query), "INSERT INTO `reactions`(id, reaction, winner, winner_regid, speed, time) VALUES(0, '%s', '%e', %d, %.3f, '%02d.%02d.%02d/%02d.%02d.%02d')", g_szReactionStr, pName(playerid), PlayerInfo[playerid][pRegID], (float(iTick) / 1000), year, month, day, hour, minute, second);
	mysql_function_query(1, query, false, "", "");

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `reactionwins` = `reactionwins` + 1 WHERE `reg_id` = %d", PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");

	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_ReactionTest_MSG) continue;
		SendClientMessagef(i, 0x189466AA, LANG(i, "MSG__REAKCIOTESZT___MEGNYERTE_"), GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, (float(iTick) / 1000), g_szReactionStr);
	}
	
	InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RHGRATULALOKNGHMEGNYERTED"));
    g_szReactionStr[0] = EOS;
	return 1;
}

forward ReactionBack();
public ReactionBack()
{
    // printf("ReactionBack()");
	g_iReactionActive = 0;
	return 1;
}

forward Feladat(numbercount);
public Feladat(numbercount)
{
    if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG)) return 0;
	// printf("Feladat(numbercoutn = %d)", numbercount);

	new
		numb[5];
	numb[0] = random(50);
    numb[1] = random(50);
    numb[2] = random(50);
    numb[3] = random(50);
    numb[4] = random(50);

    g_ServerFlags |= e_MATEK;
	switch((numbercount == 0xFF) ? (random(11)) : (numbercount))
	{
	    case 0:
	    {
			g_iMatMegoldas = numb[0] + numb[1] + numb[2];
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_4"), numb[0], numb[1], numb[2]);
			}
            g_iMatNyeremeny = 4500;

			format(country, 32, "%d + %d + %d", numb[0], numb[1], numb[2]);
			strpack(g_szMatFeladat, country);
		}
	    case 2:
	    {
			g_iMatMegoldas = numb[0] - numb[1] - numb[2] - numb[3];
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_5"), numb[0], numb[1], numb[2], numb[3]);
			}
            g_iMatNyeremeny = 5000;

			format(country, 32, "%d - %d - %d - %d", numb[0], numb[1], numb[2], numb[3]);
            strpack(g_szMatFeladat, country);
		}
	    case 3:
	    {
			g_iMatMegoldas = numb[0] + numb[1] + numb[2] + numb[3]+ numb[4];
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_6"), numb[0], numb[1], numb[2], numb[3], numb[4]);
			}
			g_iMatNyeremeny = 10000;

			format(country, 32, "%d + %d + %d + %d + %d", numb[0], numb[1], numb[2], numb[3], numb[4]);
            strpack(g_szMatFeladat, country);
	    }
	    case 4:
	    {
			g_iMatMegoldas = numb[0] + numb[1] - numb[2];
            foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_7"), numb[0], numb[1], numb[2]);
			}
            g_iMatNyeremeny = 6500;

			format(country, 32, "%d + %d - %d", numb[0], numb[1], numb[2]);
            strpack(g_szMatFeladat, country);
		}
	    case 5:
	    {
			g_iMatMegoldas = numb[0] - numb[1] - numb[2] - numb[3] - numb[4];
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_8"), numb[0], numb[1], numb[2], numb[3], numb[4]);
			}
            g_iMatNyeremeny = 10000;

			format(country, 32, "%d - %d - %d - %d - %d", numb[0], numb[1], numb[2], numb[3], numb[4]);
            strpack(g_szMatFeladat, country);
		}
	    case 6:
	    {
			g_iMatMegoldas = numb[0] + numb[1] - numb[2] + numb[3] - numb[4];
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_9"), numb[0], numb[1], numb[2], numb[3], numb[4]);
			}
            g_iMatNyeremeny = 10000;

			format(country, 32, "%d + %d - %d + %d - %d", numb[0], numb[1], numb[2], numb[3], numb[4]);
            strpack(g_szMatFeladat, country);
        }
	    case 7:
	    {
			g_iMatMegoldas = numb[0] + numb[1] + numb[2] + numb[3] - numb[4];
            foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_10"), numb[0], numb[1], numb[2], numb[3], numb[4]);
			}
            g_iMatNyeremeny = 10000;

			format(country, 32, "%d + %d + %d + %d - %d", numb[0], numb[1], numb[2], numb[3], numb[4]);
            strpack(g_szMatFeladat, country);
	    }
		case 8:
	    {
			g_iMatMegoldas = numb[0] + (numb[1] * numb[2]);
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_11"), numb[0], numb[1], numb[2]);
			}
            g_iMatNyeremeny = 11000;

			format(country, sizeof(country), "%d + %d * %d", numb[0], numb[1], numb[2]);
            strpack(g_szMatFeladat, country);
		}
		case 10:
		{
			if(numb[2] == 0) numb[2] = random(50) + 1;

			g_iMatMegoldas = numb[0] + (numb[1] / numb[2]);
			foreach(Player, i)
			{
				if(g_pChatMSGFlags[i] & e_MathsTest_MSG) continue;
				SendClientMessagef(i, 0xFF2626AA, LANG(i, "MSG__MATEK__SZAMITSD_KI_MENNYI_12"), numb[0], numb[1], numb[2]);
			}
            g_iMatNyeremeny = 12000;

			format(country, sizeof(country), "%d + %d / %d", numb[0], numb[1], numb[2]);
            strpack(g_szMatFeladat, country);
		}
		default: Feladat(0xFF);
	}
	g_iMatTime = GetTickCount();

	new
		count;
    foreach(Player, i) if(g_pOtherFlags[i] & e_RAKSAMP) count++;
    if(count != 0) SetTimerEx("RakSAMP", 15481 + randomex(1792,12621), false, "d", 5); //45 másodperc + random...
	return 1;
}

forward TeleTest();
public TeleTest()
{
    if(Itter_Count(Player) < MIN_ACTIVE_PLAYERS && !(g_ServerFlags & e_RACEDEBUG)) return 0;
    g_szTeleStr[0] = EOS;
	new randomtele = random(Itter_Count(Teleports));
 	strcat(g_szTeleStr, g_szTeleportCommand[randomtele]);
	
	foreach(Player, i)
	{
		if(g_pChatMSGFlags[i] & e_TeleTest_MSG) continue;
		SendClientMessagef(i, 0x63DCF1AA, LANG(i, "MSG__TELETESZT__AKI_LEGHAMARABB"), g_szTeleportCommand[randomtele]);
	}
	g_ServerFlags |= e_TELEPORT;
    g_iTeleTime = GetTickCount();

	new
		count;
    foreach(Player, i) if(g_pOtherFlags[i] & e_RAKSAMP) count++;
    if(count != 0) SetTimerEx("RakSAMP", 14285 + randomex(1638,13593), false, "d", 4); //24 másodperc + random...
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(g_pOtherFlags[playerid] & e_KICKED) return 0;
    // printf("OnPlayerClickPlayer(playerid = %d, clickedplayerid = %d, source = %d)", playerid, clickedplayerid, source);
	valstr(name, clickedplayerid);
	cmd_stats(playerid, name);
    return 1;
}

GetClosestZaszloPos()
{
    new
		x,
		Float:dis = FLOAT_INFINITY,
		Float:dis2,
		str[32];
		
    foreach(Teleports, i)
	{
		dis2 = GetDistance3D(ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2]);
        if(dis2 < dis)
        {
            dis = dis2;
            x = i;
        }
    }
    format(str, sizeof(str),"%s",g_szTeleportCommand[x]);
    return str;
}

GetClosestBonusCarPos()
{
    new
		x,
		Float:dis = FLOAT_INFINITY,
		Float:dis2,
		str[32];
		
    foreach(Teleports, i)
	{
		dis2 = GetDynamicVehDistanceFromPoint(g_BonusCarID, g_TeleportPos[i][0], g_TeleportPos[i][1], g_TeleportPos[i][2]);
        if(dis2 < dis)
        {
            dis = dis2;
            x = i;
        }
    }
    format(str, sizeof(str),"%s",g_szTeleportCommand[x]);
    return str;
}

stock GetNextDMLenght(playerid, id)
{
//	printf("%d - %d  elsõ", playerid, id);
	if(g_pDMInfo[playerid][id] == -1)
		return 0;
//	printf("%d - %d  második", playerid, id);

	new
	    len;
	if(g_pDMInfo[playerid][id] > 9)
	{
//		printf("%d - %d  harmadik", playerid, id);
		len = strlen(GetDMInfoData( g_pDMInfo[playerid][id] ));
		return 19 + len;
	}

//	printf("%d - %d  negyedik", playerid, id);

	new
	    i = id;

	while(g_pDMInfo[playerid][i] == -1)
	{
		if(++i == sizeof(g_pDMInfo[]))
		    return 0;
	}

	return 16 + len;
}

new const
	g_szDMInfoSlotColors[][] =
	{
	    {"~g~~h~"}, {"~b~~h~"}, {"~y~~h~"}, {"~r~~h~"}, {"~p~"}, {"~y~"}, {"~r~~h~~h~"}, {"~b~~h~~h~~h~"}, {"~w~"}, {"~g~~h~~h~~h~"}, {"~y~"}, {"~p~~h~~h~"}, {"asd"}, {"asd1"}, {"asd2"}
	};

stock UpdateDMTextdraw(playerid)
{
/*
	for(new i; i != sizeof(g_szDMInfoSlotColors); i++)
	{
		printf("asd: %s", g_szDMInfoSlotColors[i]);
	}
*/
	// Jelenlegi játékosko beleírása
	format(name, sizeof(name), "~>~~b~~h~~h~%d/%d~<~", Iter_Count(Player), (GetMaxPlayers() - Iter_Count(Bot)));
	TextDrawSetString(TD_DMInfo[3], name);

	// Maga a saját DMInfo frissítése
	tmp[0] = EOS;
	new
	    id;
	if(!(g_PlayerFlags[playerid] & e_MAX_DMPLAYERS))
	{
		for(new i; i != sizeof(g_pDMInfo[]); i++)
		{
			if(g_pDMInfo[playerid][i] == -1) continue;

			if(g_pDMInfo[playerid][i] > 9) // Ha nem minigame
			{
                id = g_pDMInfo[playerid][i];
				format(tmp, sizeof(tmp), "%s %s%s: ~g~~h~~h~~h~%d", tmp, g_szDMInfoSlotColors[i], GetDMInfoData( id ), g_InDMPlayerCount{id});
			}
			else
			{
                id = g_pDMInfo[playerid][i];
				format(tmp, sizeof(tmp), "%s %s%s: ~g~~h~~h~~h~%d", tmp, g_szDMInfoSlotColors[i], GetDMInfoData( id ), g_InDMPlayerCount{id});
			}

			if(8 < i < sizeof(g_pDMInfo[])-1) // Tehát ha már a vége felé van, fölöslegesen nem lassítjuk a ciklust
			{
	//			printf("len: %d", strlen(tmp) + GetNextDMLenght(i + 1));
				if(strlen(tmp) + GetNextDMLenght(playerid, i + 1) > MAX_DMINFO_LEN) break;
			}
		}
	}
	else
	{
		new
			Legtobb[sizeof(g_pDMInfo[])] = {-1, ...},
			LegtobbID[sizeof(g_pDMInfo[])] = {-1, ...},
			bool:bMegvan[MAX_DM + 10];
		for(new i; i < MAX_DM + 10; i++)
		{
			for(new x; x != 11; x++)
			{
				if(g_InDMPlayerCount{i} > Legtobb[x] && !bMegvan[i])
				{
					Legtobb[x] = g_InDMPlayerCount{i};
					LegtobbID[x] = i;
                    bMegvan[i] = true;
				}
			}
		}

		for(new i; i != sizeof(g_pDMInfo[]); i++)
		{
			//printf("legtöbb: %d, id: %d", Legtobb[i], LegtobbID[i]);

			if(LegtobbID[i] == -1) continue;

			if(i == 8) break;

			if(LegtobbID[i] > 9) // Ha nem minigame
			{
				format(tmp, sizeof(tmp), "%s ~r~~h~%s: ~g~~h~~h~~h~%d", tmp, GetDMInfoData( LegtobbID[i]-1 ), g_InDMPlayerCount{ LegtobbID[i]});
			}
			else
			{
				format(tmp, sizeof(tmp), "%s ~g~%s: ~g~~h~~h~~h~%d", tmp, GetDMInfoData( LegtobbID[i] ), g_InDMPlayerCount{ LegtobbID[i] });
			}
		}
	}
	//print(tmp);
	PlayerTextDrawSetString(playerid, TD_InDMPlayers[playerid], FixGameString(tmp));
}

stock GivePlayerWeaponEx(playerid,weaponid,slot)
{
    if(GetPVarType(playerid, "InDuel"))
	{
		g_pDuelWeapon[playerid]{slot} = weaponid;
		return 1;
	}

	new
	    price,
	    ammo,
	    type = 0;

	switch(weaponid)
	{
		case WEAPON_BRASSKNUCKLE	 : price = 500,   ammo = 1; 						//Boxer
		case WEAPON_GOLFCLUB    	 : price = 1200,  ammo = 1; 						//Golfütõ
	 	case WEAPON_NITESTICK   	 : price = 1500,  ammo = 1; 						//Gumibot
		case WEAPON_KNIFE       	 : price = 4000,  ammo = 1;							//Kés
		case WEAPON_BAT         	 : price = 4200,  ammo = 1; 						//Bézbolütõ
		//case WEAPON_SHOVEL       	 : price = 4500,  ammo = 1; 						//Ásó
		case WEAPON_POOLSTICK   	 : price = 2000,  ammo = 1; 						//Biliárd dákó
		case WEAPON_KATANA      	 : price = 6000,  ammo = 1; 						//Kard
		case WEAPON_CHAINSAW    	 : price = 8000,  ammo = 1; 						//Láncfürész
		//
		case WEAPON_DILDO       	 : price = 1200,  ammo = 1;
		case WEAPON_DILDO2      	 : price = 1200,  ammo = 1;
		case WEAPON_VIBRATOR    	 : price = 1200,  ammo = 1;
		case WEAPON_VIBRATOR2   	 : price = 1200,  ammo = 1;
		case WEAPON_FLOWER  	  	 : price = 3600,  ammo = 1; 						//Virág
		case WEAPON_CANE      		 : price = 3500,  ammo = 1; 					    //Görbebot
		case WEAPON_GRENADE    		 : price = 1500,  ammo = 1, type = 1; 				//Gránát
		case WEAPON_TEARGAS    		 : price = 750,   ammo = 1, type = 1;				//Füstgránát
		case WEAPON_MOLTOV     		 : price = 1700,  ammo = 1, type = 1;				//Molotov
		//
		case WEAPON_COLT45     		 : price = 2200,  ammo = 34;						//Colt
		case WEAPON_SILENCED   		 : price = 2700,  ammo = 17;						//Tompított
		case WEAPON_DEAGLE  	 	 : price = 3000,  ammo = 7; 						//Desert
		//
		case WEAPON_SHOTGUN     	 : price = 700,   ammo = 15;						//Shotgun
		case WEAPON_SAWEDOFF    	 : price = 3500,  ammo = 4;							//Sawnoff
		case WEAPON_SHOTGSPA    	 : price = 2000,  ammo = 7;							//Combat
		//
		case WEAPON_UZI         	 : price = 2700,  ammo = 100;						//Uzi
		case WEAPON_MP5         	 : price = 3000,  ammo = 30; 						//MP5
		case WEAPON_TEC9        	 : price = 2500,  ammo = 100; 		  				//Tec9
		//
		case WEAPON_AK47        	 : price = 5000,  ammo = 30;		  				//AK
		case WEAPON_M4          	 : price = 5200,  ammo = 50; 		  				//M4
		//
		case WEAPON_RIFLE       	 : price = 2500,  ammo = 20; 		  				//Rifle
		case WEAPON_SNIPER      	 : price = 3000,  ammo = 10; 		  				//Sniper
		//
		case WEAPON_ROCKETLAUNCHER   : price = 10000, ammo = 5; 		   				//Rocket
		case WEAPON_HEATSEEKER       : price = 15000, ammo = 5; 		   				//Hõkövetõ
		case WEAPON_FLAMETHROWER     : price = 7000,  ammo = 80; 		  				//Lángszoró
		case WEAPON_MINIGUN          : price = 15000, ammo = 500; 		  				//Minigun
		//
		case WEAPON_SATCHEL          : price = 1500,  ammo = 10; 		  				//Tapadógránát
		case WEAPON_BOMB             : price = 100,   ammo = 1;  	      				//Tapadógránát távirányító
		case WEAPON_SPRAYCAN         : price = 3500,  ammo = 100; 		   				//Grafiti
		case WEAPON_FIREEXTINGUISHER : price = 4500,  ammo = 500; 		  				//Poroltó
		case WEAPON_CAMERA           : price = 4500,  ammo = 50; 		  				//Fényképezõ
		case 44                      : price = 20000, ammo = 1;  						//Éjjellátó
		case 45                      : price = 20000, ammo = 1;  						//Hõérzékelõ
	}
	if(weaponid == 38 && !IsOwner(playerid)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));

	if(ammo == 1 && type != 1)
	{
		//VIP-nek 20%-al olcsóbbak a fegyverek
		if(g_pVIP[playerid])
			price = (price / 100) * 80;

        if(GetPlayerMoneyEx(playerid) < price) return SendClientMessagef(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_NINCS_ELEG_PENZED_LEGALABB_6"), FormatNumber(price));
		GivePlayerMoneyEx(playerid, - price, "WeaponBuy");

		g_pWeaponSlot[playerid][slot] = weaponid;
		g_pWeaponAmmo[playerid][slot] = g_pWeaponAmmo[playerid][slot] + ammo;
		GivePlayerWeapon(playerid, weaponid, 1);
	}
	else
	{
	    new
			level;
		switch(weaponid)
		{
			case WEAPON_GRENADE: level = 30;
			case WEAPON_ROCKETLAUNCHER: level = 40;
			case WEAPON_HEATSEEKER: level = 45;
			case WEAPON_FLAMETHROWER: level = 37;
			case WEAPON_MINIGUN:
			{
   				if(!IsOwner(playerid) && !IsPlayerAdmin(playerid))
				{
   					return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_OWNER"));
				}
				else level = 50;
			}
			default: level = 1;
		}
        CHECK_SZINT_EX(playerid, level);

	    SetPVarInt(playerid,"BuyWeaponPrice",price);
		SetPVarInt(playerid,"BuyWeaponAmmo",ammo);
		SetPVarInt(playerid,"BuyWeaponID",weaponid);
		SetPVarInt(playerid,"BuyWeaponSlot",slot);
		GetWeaponName(weaponid, country, 45);
		if(type == 0)
		{
		    if(g_pLang{playerid} == LANGUAGE_HU) format(dline, sizeof(dline),"Tár mennyisége\tLõszer száma\tÁr\n");
		    else format(dline, sizeof(dline),"Tár mennyisége\tAmmo\tPrice\n");
		    
		    format(tmp, sizeof(tmp), "\
			    {FFAA00}1\t{AAAAFF}%d\t{00FFFF}%s$\n\
			    {FFAA00}5\t%{AAAAFF}%d\t{00FFFF}%s$\n\
			    {FFAA00}10\t{AAAAFF}%d\t{00FFFF}%s$\n\
			    {FFAA00}15\t{AAAAFF}%d\t{00FFFF}%s$\n\
			    {FFAA00}20\t{AAAAFF}%d\t{00FFFF}%s$\n\
			    {FFAA00}25\t{AAAAFF}%d\t{00FFFF}%s$",
		    ammo, FormatNumber(price),
			ammo * 5, FormatNumber(price * 5),
			ammo * 10, FormatNumber(price * 10),
			ammo * 15, FormatNumber(price * 15),
			ammo * 20, FormatNumber(price * 20),
			ammo * 25, FormatNumber(price * 25));
			strcat(dline, tmp);
			SetPVarInt(playerid,"BuyWeaponType",0);
		}
		else
		{
		    if(g_pLang{playerid} == LANGUAGE_HU) format(dline, sizeof(dline),"Gránát mennyisége\tÁr\n");
		    else format(dline, sizeof(dline),"Gránát mennyisége\tPrice\n");
		    
		    format(tmp, sizeof(tmp), "\
			    {FFAA00}1\t{AAAAFF}%d\t%s$\n\
			    {FFAA00}5\t{AAAAFF}%d\t%s$\n\
			    {FFAA00}10\t{AAAAFF}%d\t%s$\n\
			    {FFAA00}15\t{AAAAFF}%d\t%s$\n\
			    {FFAA00}20\t{AAAAFF}%d\t%s$\n\
			    {FFAA00}25\t{AAAAFF}%d\t%s$",
		    ammo, FormatNumber(price),
			ammo * 5, FormatNumber(price * 5),
			ammo * 10, FormatNumber(price * 10),
			ammo * 15, FormatNumber(price * 15),
			ammo * 20, FormatNumber(price * 20),
			ammo * 25, FormatNumber(price * 25));
			strcat(dline, tmp);
		    SetPVarInt(playerid,"BuyWeaponType",1);
		}
		format(i_str, sizeof(i_str), "Fegyvervásárlás - %s(%d)", country, weaponid);
		ShowPlayerDialogEx(playerid, WEAPONMENU + 1512, DIALOG_STYLE_TABLIST_HEADERS, i_str, dline, "Tovább", "Mégse");
	}
	return 1;
}

stock UpdatePlayerWeaponInfo(playerid)
{
	if(!GetPVarType(playerid, "InDuel"))
	{
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weapons` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `ammo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pWeaponSlot[playerid][0], g_pWeaponSlot[playerid][1], g_pWeaponSlot[playerid][2], g_pWeaponSlot[playerid][3], g_pWeaponSlot[playerid][4], g_pWeaponSlot[playerid][5], g_pWeaponSlot[playerid][6], g_pWeaponSlot[playerid][7], g_pWeaponSlot[playerid][8], g_pWeaponSlot[playerid][9], g_pWeaponSlot[playerid][10],
		g_pWeaponSlot[playerid][11], g_pWeaponSlot[playerid][12], g_pWeaponAmmo[playerid][0], g_pWeaponAmmo[playerid][1], g_pWeaponAmmo[playerid][2], g_pWeaponAmmo[playerid][3], g_pWeaponAmmo[playerid][4], g_pWeaponAmmo[playerid][5], g_pWeaponAmmo[playerid][6], g_pWeaponAmmo[playerid][7], g_pWeaponAmmo[playerid][8], g_pWeaponAmmo[playerid][9], g_pWeaponAmmo[playerid][10], g_pWeaponAmmo[playerid][11], g_pWeaponAmmo[playerid][12], PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
		//printf(query);
	}
}

stock DeletePlayerWeaponInfo(playerid, slot)
{
	if(!GetPVarType(playerid, "InDuel"))
	{
		g_pWeaponSlot[playerid][slot] = 0;
		g_pWeaponAmmo[playerid][slot] = 0;

		LoadPlayerWeaponInfo(playerid);

		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `weapons` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `ammo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pWeaponSlot[playerid][0], g_pWeaponSlot[playerid][1], g_pWeaponSlot[playerid][2], g_pWeaponSlot[playerid][3], g_pWeaponSlot[playerid][4], g_pWeaponSlot[playerid][5], g_pWeaponSlot[playerid][6], g_pWeaponSlot[playerid][7], g_pWeaponSlot[playerid][8], g_pWeaponSlot[playerid][9], g_pWeaponSlot[playerid][10],
		g_pWeaponSlot[playerid][11], g_pWeaponSlot[playerid][12], g_pWeaponAmmo[playerid][0], g_pWeaponAmmo[playerid][1], g_pWeaponAmmo[playerid][2], g_pWeaponAmmo[playerid][3], g_pWeaponAmmo[playerid][4], g_pWeaponAmmo[playerid][5], g_pWeaponAmmo[playerid][6], g_pWeaponAmmo[playerid][7], g_pWeaponAmmo[playerid][8], g_pWeaponAmmo[playerid][9], g_pWeaponAmmo[playerid][10], g_pWeaponAmmo[playerid][11], g_pWeaponAmmo[playerid][12], PlayerInfo[playerid][pRegID]);
		mysql_function_query(1, query, false, "", "");
	}
}

stock UpdatePlayerElementData(playerid)
{
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `raktar` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d", g_pRaktar[playerid][0], g_pRaktar[playerid][1], g_pRaktar[playerid][2], g_pRaktar[playerid][3], g_pRaktar[playerid][4], g_pRaktar[playerid][5], g_pRaktar[playerid][6], g_pRaktar[playerid][7],
	g_pRaktar[playerid][8], g_pRaktar[playerid][9], g_pRaktar[playerid][10], g_pRaktar[playerid][11], g_pRaktar[playerid][12], g_pRaktar[playerid][13], g_pRaktar[playerid][14], g_pRaktar[playerid][15],
	g_pRaktar[playerid][16], g_pRaktar[playerid][17], g_pRaktar[playerid][18], g_pRaktar[playerid][19], g_pRaktar[playerid][20], g_pRaktar[playerid][21], g_pRaktar[playerid][22], g_pRaktar[playerid][23],
	g_pRaktar[playerid][24], g_pRaktar[playerid][25], g_pRaktar[playerid][26], g_pRaktar[playerid][27], g_pRaktar[playerid][28], g_pRaktar[playerid][29], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
}

stock LoadPlayerWeaponInfo(playerid)
{
    if(/*g_pOtherFlags[playerid] & e_GOD_ALLOWED || g_pGamesData[playerid] & e_IN_FALLOUT || */IsPlayerInDynamicArea(playerid, gRangeZone)) return 1;

	new
		level;
	ResetPlayerWeapons(playerid);
	for(new j; j < 13; j++)
	{
		switch(g_pWeaponSlot[playerid][j])
		{
			case WEAPON_GRENADE: level = 30;
			case WEAPON_ROCKETLAUNCHER: level = 40;
			case WEAPON_HEATSEEKER: level = 45;
			case WEAPON_FLAMETHROWER: level = 37;
			case WEAPON_SHOVEL: level = 51; //Csak mert bugos szar
			case WEAPON_MINIGUN:
			{
   				if(!IsOwner(playerid) && !IsPlayerAdmin(playerid))
				{
    				return 1;
				}
				else level = 50;
			}
			default: level = 1;
		}
        
		if(IsNegative(g_pWeaponAmmo[playerid][j])) g_pWeaponAmmo[playerid][j] = 0;
		


		if(g_pSzint{playerid} < level) continue;
		GivePlayerWeapon(playerid, g_pWeaponSlot[playerid][j], g_pWeaponAmmo[playerid][j]);
	}

	if(GetPVarType(playerid, "ArmedWeapon"))
	{
		SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "ArmedWeapon"));
	}
	return 1;
}

// Alap dolgok
stock UpdatePlayerHorseShoes(playerid)
{
	new
	    bool:hShoes[50],
	    count;
	for(new i; i != 50; i++)
	{
		if(!(hShoes[i] = !!Bit_Get(g_pHorseshoes[playerid], i))) continue;
		count++;
	}
	format(tmp, sizeof(tmp), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		hShoes[0],hShoes[1],hShoes[2],hShoes[3],hShoes[4],hShoes[5],hShoes[6],hShoes[7],hShoes[8],hShoes[9],hShoes[10],
		hShoes[11],hShoes[12],hShoes[13],hShoes[14],hShoes[15],hShoes[16],hShoes[17],hShoes[18],hShoes[19],hShoes[20],hShoes[21],
		hShoes[22],hShoes[23],hShoes[24],hShoes[25],hShoes[26],hShoes[27],hShoes[28],hShoes[29],hShoes[30],hShoes[31],hShoes[32],
		hShoes[33],hShoes[34],hShoes[35],hShoes[36],hShoes[37],hShoes[38],hShoes[39],hShoes[40],hShoes[41],hShoes[42],hShoes[43],
		hShoes[44],hShoes[45],hShoes[46],hShoes[47],hShoes[48],hShoes[49]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `horseshoes` = '%s' WHERE `reg_id` = %d", tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return count;
}

stock UpdatePlayerOysters(playerid)
{
	new
	    bool:oYsters[50],
	    count;
	for(new i; i != 50; i++)
	{
		if(!(oYsters[i] = !!Bit_Get(g_pOysters[playerid], i))) continue;
		count++;
	}
	format(tmp, sizeof(tmp), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		oYsters[0],oYsters[1],oYsters[2],oYsters[3],oYsters[4],oYsters[5],oYsters[6],oYsters[7],oYsters[8],oYsters[9],oYsters[10],
		oYsters[11],oYsters[12],oYsters[13],oYsters[14],oYsters[15],oYsters[16],oYsters[17],oYsters[18],oYsters[19],oYsters[20],oYsters[21],
		oYsters[22],oYsters[23],oYsters[24],oYsters[25],oYsters[26],oYsters[27],oYsters[28],oYsters[29],oYsters[30],oYsters[31],oYsters[32],
		oYsters[33],oYsters[34],oYsters[35],oYsters[36],oYsters[37],oYsters[38],oYsters[39],oYsters[40],oYsters[41],oYsters[42],oYsters[43],
		oYsters[44],oYsters[45],oYsters[46],oYsters[47],oYsters[48],oYsters[49]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `oysters` = '%s' WHERE `reg_id` = %d", tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return count;
}

stock UpdatePlayerPhotos(playerid)
{
	new
	    bool:iPhoto[50],
	    count = 0;
	for(new i; i != 50; i++)
	{
		if(!(iPhoto[i] = !!Bit_Get(g_pPhotos[playerid], i))) continue;
		count++;
	}
	format(tmp, sizeof(tmp), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		iPhoto[0],iPhoto[1],iPhoto[2],iPhoto[3],iPhoto[4],iPhoto[5],iPhoto[6],iPhoto[7],iPhoto[8],iPhoto[9],iPhoto[10],
		iPhoto[11],iPhoto[12],iPhoto[13],iPhoto[14],iPhoto[15],iPhoto[16],iPhoto[17],iPhoto[18],iPhoto[19],iPhoto[20],iPhoto[21],
		iPhoto[22],iPhoto[23],iPhoto[24],iPhoto[25],iPhoto[26],iPhoto[27],iPhoto[28],iPhoto[29],iPhoto[30],iPhoto[31],iPhoto[32],
		iPhoto[33],iPhoto[34],iPhoto[35],iPhoto[36],iPhoto[37],iPhoto[38],iPhoto[39],iPhoto[40],iPhoto[41],iPhoto[42],iPhoto[43],
		iPhoto[44],iPhoto[45],iPhoto[46],iPhoto[47],iPhoto[48],iPhoto[49]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `photos` = '%s' WHERE `reg_id` = %d", tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return count;
}

stock UpdatePlayerJumps(playerid)
{
	new
	    bool:b[70],
	    count;
	for(new i; i != 70; i++)
	{
		if(!(b[i] = !!Bit_Get(g_pJumps[playerid], i))) continue;
//		printf("%d - %d", i, b[i]);
		count++;
	}
	format(tmp, sizeof(tmp), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],
		b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],
		b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31],b[32],
		b[33],b[34],b[35],b[36],b[37],b[38],b[39],b[40],b[41],b[42],b[43],
		b[44],b[45],b[46],b[47],b[48],b[49],b[50],b[51],b[52],b[53],b[54],
		b[55],b[56],b[57],b[58],b[59],b[60],b[61],b[62],b[63],b[64],b[65],
		b[66],b[67],b[68],b[69]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `jumps` = '%s' WHERE `reg_id` = %d", tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return count;
}

stock UpdatePlayerTags(playerid)
{
	new
	    bool:b[100],
	    count;
	for(new i; i != 100; i++)
	{
		if(!(b[i] = !!Bit_Get(g_pTags[playerid], i))) continue;
//		printf("%d - %d", i, b[i]);
		count++;
	}
	format(tmp, sizeof(tmp), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
		b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],
		b[11],b[12],b[13],b[14],b[15],b[16],b[17],b[18],b[19],b[20],b[21],
		b[22],b[23],b[24],b[25],b[26],b[27],b[28],b[29],b[30],b[31],b[32],
		b[33],b[34],b[35],b[36],b[37],b[38],b[39],b[40],b[41],b[42],b[43],
		b[44],b[45],b[46],b[47],b[48],b[49],b[50],b[51],b[52],b[53],b[54],
		b[55],b[56],b[57],b[58],b[59],b[60],b[61],b[62],b[63],b[64],b[65],
		b[66],b[67],b[68],b[69],b[70],b[71],b[72],b[73],b[74],b[75],b[76],
		b[77],b[78],b[79],b[80],b[81],b[82],b[83],b[84],b[85],b[86],b[87],
		b[88],b[89],b[90],b[91],b[92],b[93],b[94],b[95],b[96],b[97],b[98],
		b[99]);

	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `tags` = '%s' WHERE `reg_id` = %d", tmp, PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
	return count;
}

#if defined YSF
stock GetClientVersion(playerid)
{
	new
		asd = g_ClientVersion[playerid],//0x043,
		ret[16];
	if(!(asd & 0xF)) // Ha az utolsó tag üres, akkor csak az elsõ kettõt írjuk ki. 0.4, 0.3
	{
		format(ret, sizeof(ret), "%d.%d", asd >> 8 & 0xF, asd >> 4 & 0xF);
	}
	else // 0.3.5, 0.4.1
	{
		format(ret, sizeof(ret), "%d.%d.%d", asd >> 8 & 0xF, asd >> 4 & 0xF, asd & 0xF);
	}
	return ret;
}
#endif

// Speciális apróságok
stock ConvertNonNormaQuatToEuler(Float: qw, Float: qx, Float:qy, Float:qz, &Float:heading, &Float:attitude, &Float:bank)
{
    new Float: sqw = qw*qw;
    new Float: sqx = qx*qx;
    new Float: sqy = qy*qy;
    new Float: sqz = qz*qz;
    new Float: unit = sqx + sqy + sqz + sqw; // if normalised is one, otherwise is correction factor
    //a*n~ëe` normalised, - îäe`í, â i"?îo`e`âíîi` n~ëó÷a`a* - i"îe^a`ça`o`a*ëü e^î??a*e^öe`e`
    new Float: test = qx*qy + qz*qw;
    if(test > 0.499*unit)
    { // singularity at north pole - în~îáa*ííîn~o`ü ía` n~a*âa*?íîi` i"îë?n~a*
        heading = 2*atan2(qx,qw);
        attitude = 3.141592653/2;
        bank = 0;
        return 1;
    }
    if(test < -0.499*unit)
    { // singularity at south pole - în~îáa*ííîn~o`ü ía` ??íîi` i"îë?n~a*
        heading = -2*atan2(qx,qw);
        attitude = -3.141592653/2;
        bank = 0;
        return 1;
    }
    heading = atan2(2*qy*qw - 2*qx*qz, sqx - sqy - sqz + sqw);
    attitude = asin(2*test/unit);
    bank = atan2(2*qx*qw - 2*qy*qz, -sqx + sqy - sqz + sqw);
    return 1;
}

stock GetVehicleRotation(vehicleid,&Float:heading, &Float:attitude, &Float:bank)
{
    new
		Float:quat_w,
		Float:quat_x,
		Float:quat_y,
		Float:quat_z;
    GetDynamicVehicleRotationQuat(vehicleid,quat_w,quat_x,quat_y,quat_z);
    ConvertNonNormaQuatToEuler(quat_w,quat_x,quat_z,quat_y, heading, attitude, bank);
    bank = -1*bank;
    return 1;
}

// Teleportálás
stock NormalTele(playerid, Float:x, Float:y, Float:z, interior = 0, Float:ang = 0.0, worldid = 0, resetcamera = 1)
{
	new
	    bool:bJetpack = (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK);
	if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "295375");
	}

    if(GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 4.0 && ZaszloOwner != INVALID_PLAYER_ID)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
 		return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetDynamicVehiclePos((vID = GetPlayerDynamicVehicleID(playerid)), x, y, z);
		LinkDynamicVehicleToInterior(vID, interior);
        SetDynamicVehicleZAngle(vID, ang);
		if(!(g_PlayerData[playerid] & e_CLEARWORLD)) SetDynamicVehicleVirtualWorld(vID, worldid);

		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(GetPlayerDynamicVehicleID(i) == vID)
			{
				SetPlayerVirtualWorld(i, worldid);
				SetPlayerInterior(i, interior);
			}
		}
	}
	else
	{
		g_PlayerData[playerid] &= ~e_FALLED;
  		SetPlayerPos(playerid, x, y, z);
        SetPlayerFacingAngle(playerid, Float:ang);
    }

	if(bJetpack)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}

    if(!(g_PlayerData[playerid] & e_CLEARWORLD)) SetPlayerVirtualWorld(playerid, worldid);
	SetPlayerInterior(playerid, interior);

	if(!(g_PlayerFlags2[playerid] & e_FPS_MOD) && resetcamera) SetCameraBehindPlayer(playerid);
	//if(resetcamera) SetCameraBehindPlayer(playerid);
	return PlayerPlaySound(playerid, 1085);
}

stock NormalTeleEx(playerid, const Message[], const TeleName[], Float:x, Float:y, Float:z, Float:ang = 0.0, interior = 0, worldid = 0)
{
	if(NoTele(playerid))
	{
  		ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
		return 0;
	}
	if(GetPVarType(playerid, "PlayerWeather"))
	{
		SetPlayerWeather(playerid, GetPVarInt(playerid, "PlayerWeather"));
	}

	if(GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 4.0 && ZaszloOwner != INVALID_PLAYER_ID)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
 		return 1;
	}
	/*static _year, _month, _day, _hour, _minute, _second, i_str2[48], i_str3[48];
	getdate(_year, _month, _day);
	gettime(_hour, _minute, _second);

	mysql_format(1, query, sizeof(query), "INSERT INTO `teleports` (`id`, `name`, `cmd`, `x`, `y`, `z`, `angle`, `world`, `interior`, `cartele`, `kategoria_hu`, `kategoria_en`, `hasznalat`, `creatorid`, `creator`, `time`) VALUES \
	(0, '%s', '/%s', '%.4f', '%.4f', '%.4f', '%.4f', %d, %d, 1, '%s', '%s', 0, %d, '%s', '%02d.%02d.%02d %02d:%02d:%02d')",
 	Message, TeleName, x, y, z, ang, worldid, interior, i_str2, i_str3, PlayerInfo[playerid][pRegID], pName(playerid), _year, _month, _day, _hour, _minute, _second);
	mysql_function_query(1, query, false, "", "");
	SendClientMessagef(playerid, -1, "asd %s", TeleName);
	*/

	
	new
	    bool:bJetpack = (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK);
	if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "295375");
	}

    if(!(g_PlayerData[playerid] & e_CLEARWORLD)) SetPlayerVirtualWorld(playerid, worldid);
	SetPlayerInterior(playerid, interior);

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetDynamicVehiclePos((vID = GetPlayerDynamicVehicleID(playerid)), x, y, z + 1.5);
 		LinkDynamicVehicleToInterior(vID, interior);
		SetDynamicVehicleZAngle(vID, ang);
		if(!(g_PlayerData[playerid] & e_CLEARWORLD)) SetDynamicVehicleVirtualWorld(vID, worldid);

		foreach(new i: Player)
		{
			if(i == playerid) continue;
			if(GetPlayerDynamicVehicleID(i) == vID)
			{
				SetPlayerVirtualWorld(i, worldid);
				SetPlayerInterior(i, interior);
			}
		}
	}
	else
	{
        g_PlayerData[playerid] &= ~e_FALLED;
		SetPlayerPos(playerid, x, y, z + 1.5);
        SetPlayerFacingAngle(playerid, Float:ang);
    }

	if(bJetpack)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}

    if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
    //SetCameraBehindPlayer(playerid);
	ShowWelcome(playerid, Message, false);

	if(g_PlayerFlags[playerid] & e_TELE_MSG)
	{
		format(i_str, sizeof(i_str), "~>~~b~~h~~h~%s(%d) ~h~> ~y~%s", pName(playerid), playerid, FixGameString(TeleName));
		if(g_iTeleTD != -1)
		{
			KillTimer(g_iTeleTD);
	        TextDrawHideForAll(TD_Tele);
		}
		TextDrawSetString(TD_Tele, i_str);

		foreach(Player, i)
		{
			if(g_pTDFlags[i] & e_NOTD_TELE) continue;
			TextDrawShowForPlayer(i, TD_Tele);
		}

		g_iTeleTD = SetTimer("HideTeleTD", 3000, false);
	}
	PlayerPlaySound(playerid, 1085);
	if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, TELEPORT_PRICE, "Teleport");
	return 1;
}

stock ShowDMTeleMessage(playerid, TeleName[])
{
	if(g_PlayerFlags[playerid] & e_TELE_MSG)
	{
		format(i_str, sizeof(i_str), "~>~~b~~h~~h~%s(%d) ~h~> ~r~/%s", pName(playerid), playerid, FixGameString(TeleName));
		if(g_iTeleTD != -1)
		{
			KillTimer(g_iTeleTD);
	        TextDrawHideForAll(TD_Tele);
		}
		TextDrawSetString(TD_Tele, i_str);

		foreach(Player, i)
		{
			if(g_pTDFlags[i] & e_NOTD_TELE) continue;
			TextDrawShowForPlayer(i, TD_Tele);
		}

		g_iTeleTD = SetTimer("HideTeleTD", 3000, false);
	}
}

forward HideTeleTD();
public HideTeleTD()
{
    // printf("HideTeleTD()");
	g_iTeleTD = -1;
	foreach(Player, i)
	{
		if(g_pTDFlags[i] & e_NOTD_TELE) continue;
		TextDrawHideForPlayer(i, TD_Tele);
	}
	return 1;
}

stock SimpleTele(playerid, Float:x, Float:y, Float:z, Float:ang = -1000.0)
{
    g_PlayerData[playerid] &= ~e_FALLED;
	SetPlayerPos(playerid, x, y, z);

	if(ang != -1000.0) SetPlayerFacingAngle(playerid, Float:ang);
	if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
    //SetCameraBehindPlayer(playerid);
	return PlayerPlaySound(playerid, 1085);
}

stock PlayerTele(playerid, Float:x, Float:y, Float:z, interior = 0, Float:ang = 0.0, worldid = 0, bool:SkipClearWorld = false)
{
	new
	    bool:bJetpack = (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK);
	if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "295375");
	}

    if(GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 4.0 && ZaszloOwner != INVALID_PLAYER_ID)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
 		return 1;
	}

    g_PlayerData[playerid] &= ~e_FALLED;
	SetPlayerPos(playerid, x, y, z);
	if(bJetpack)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}

	if(g_PlayerData[playerid] & e_CLEARWORLD)
	{
		if(SkipClearWorld) SetPlayerVirtualWorld(playerid, worldid);
	}
	else
	{
        SetPlayerVirtualWorld(playerid, worldid);
	}
	SetPlayerInterior(playerid, interior);

	if(ang != -1000.0) SetPlayerFacingAngle(playerid,Float:ang);
	if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
    //SetCameraBehindPlayer(playerid);
	return PlayerPlaySound(playerid, 1085);
}

stock PlayerTeleToDM(playerid, Float:x, Float:y, Float:z, interior = 0, Float:ang = 0.0, worldid = 0)
{
    g_PlayerData[playerid] &= ~(e_FALLED | e_CLEARWORLD);
	SetPlayerPos(playerid, x, y, z);
	SetPlayerFacingAngle(playerid, Float:ang);
    if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
    SetPlayerVirtualWorld(playerid, worldid);
    SetPlayerInterior(playerid, interior);
	return PlayerPlaySound(playerid, 1085);
}

stock PlayerTeleEx(playerid, const Message[], const TeleName[], Float:x, Float:y, Float:z, Float:ang, interior = 0, worldid = 0)
{
	if(NoTele(playerid)) return ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));

    if(GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 4.0 && ZaszloOwner != INVALID_PLAYER_ID)
	{
		ShowWelcome(playerid, LANG(playerid, "MSG_NO_TELE"));
 		return 1;
	}

	new
	    bool:bJetpack = (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK);
	if(g_pDeathMatchID[playerid] != -1)
	{
		cmd_exitdm(playerid, "295375");
	}

    g_PlayerData[playerid] &= ~e_FALLED;
	SetPlayerPos(playerid, x, y, z + 1.0);
	if(bJetpack)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}

    if(!(g_PlayerData[playerid] & e_CLEARWORLD)) SetPlayerVirtualWorld(playerid, worldid);
	SetPlayerInterior(playerid, interior);

	SetPlayerFacingAngle(playerid,Float:ang);
	if(!(g_PlayerFlags2[playerid] & e_FPS_MOD)) SetCameraBehindPlayer(playerid);
    //SetCameraBehindPlayer(playerid);

	ShowWelcome(playerid, Message, false);
    //LoadObjectForPlayer(playerid);
	if(g_PlayerFlags[playerid] & e_TELE_MSG)
	{
		format(i_str, sizeof(i_str), "~>~~b~~h~~h~%s(%d) ~h~> ~y~%s", pName(playerid), playerid, FixGameString(TeleName));
		if(g_iTeleTD != -1)
		{
			KillTimer(g_iTeleTD);
	        TextDrawHideForAll(TD_Tele);
		}
		TextDrawSetString(TD_Tele, i_str);

		foreach(Player, i)
		{
			if(g_pTDFlags[i] & e_NOTD_TELE) continue;
			TextDrawShowForPlayer(i, TD_Tele);
		}

		g_iTeleTD = SetTimer("HideTeleTD", 3000, false);
	}
	PlayerPlaySound(playerid, 1085);
	if(!g_pVIP[playerid]) GivePlayerMoneyEx(playerid, TELEPORT_PRICE, "Teleport");
	return 1;
}

stock LoadObjectForPlayer(playerid, bool:withvehicle = true, time = 1500)
{
	if(GetPVarType(playerid, "LoadObjectTimer"))
	{
		KillTimer(GetPVarInt(playerid, "LoadObjectTimer"));
	}

	if(withvehicle)
	{
		if((vID = GetPlayerDynamicVehicleID(playerid)))
		{
			new
			    Float:fVPos[3];
			GetDynamicVehiclePos(vID, fVPos[0], fVPos[1], fVPos[2]);
			SetDynamicVehiclePos(vID, fVPos[0], fVPos[1], fVPos[2] + 3.0);
		}
	}
	TogglePlayerControllable(playerid, false);
	Streamer_Update(playerid);

	new
	    Ping = GetPlayerPing(playerid);
	if(Ping >= 100) time += 500;
	else if(Ping >= 200) time += 700;
	else if(Ping >= 300) time += 1200;
	else if(Ping >= 500) time += 1500;
	return SetPVarInt(playerid, "LoadObjectTimer", SetTimerEx("UnFreezePlayer", time, false, "d", playerid));
}

forward UnFreezePlayer(playerid);
public UnFreezePlayer(playerid)
{
    // printf("UnFreezePlayer(playerid = %d, vehicleid = %d, seatid = %d)", playerid, vehicleid, seatid);
	TogglePlayerControllable(playerid, true);
	return DeletePVar(playerid, "LoadObjectTimer");
}

/* Üzenetek */
stock ShowWelcomef(playerid, format[], va_args<>)
{
    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<2>);
    return ShowWelcome(playerid, gs_szKimenet);
}

stock ShowWelcomeExf(playerid, bool:playsound, time, format[], va_args<>)
{
    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<4>);
    return ShowWelcome(playerid, gs_szKimenet, playsound, time);
}

forward @ShowWelcome(playerid, const wilcome[]);
public @ShowWelcome(playerid, const wilcome[]) return ShowWelcome(playerid, wilcome);

stock ShowWelcome(playerid, const wilcome[], bool:playsound = true, time = MESSAGE_TIME)
{
	if(!(g_pTDFlags[playerid] & e_NOTD_WELCOME))
	{
		new
		    PlayerText:WelcomeTD_ID = PlayerText:GetPVarInt(playerid, "Wtel");
		if(GetPVarType(playerid, "WelcomeTDshown"))
		{
		    PlayerTextDrawHide(playerid, WelcomeTD_ID);
		    KillTimer(GetPVarInt(playerid, "WelcomeTDshown"));
		}

		PlayerTextDrawSetString(playerid, WelcomeTD_ID, FixGameString(wilcome));
		PlayerTextDrawShow(playerid, WelcomeTD_ID);

		SetPVarInt(playerid, "WelcomeTDshown", SetTimerEx("WelcomeTD_Hide", time, false, "i", playerid));
		if(playsound) PlayerPlaySound(playerid, 1058);
	}
	return 1;
}

forward WelcomeTD_Hide(playerid);
public WelcomeTD_Hide(playerid)
{
	PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "Wtel"));
 	DeletePVar(playerid, "WelcomeTDshown");
	return 1;
}

stock InfoTD_MSGf(playerid, ms_time, format[], va_args<>)
{
    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<3>);
    return InfoTD_MSG(playerid, ms_time, gs_szKimenet);
}

forward @InfoTD_MSG(playerid, ms_time, const msg[]);
public @InfoTD_MSG(playerid, ms_time, const msg[]) return InfoTD_MSG(playerid, ms_time, msg);

stock InfoTD_MSG(playerid, ms_time, const msg[])
{
	if(!(g_pTDFlags[playerid] & e_NOTD_INFOTD))
	{
		new
		    PlayerText:InfoTD_ID = PlayerText:GetPVarInt(playerid, "InfoTD");
		if(GetPVarType(playerid, "InfoTDshown"))
		{
		    PlayerTextDrawHide(playerid, InfoTD_ID);
		    KillTimer(GetPVarInt(playerid, "InfoTDshown"));
		}

	    PlayerTextDrawSetString(playerid, InfoTD_ID, FixGameString(msg));
	    PlayerTextDrawShow(playerid, InfoTD_ID);

		SetPVarInt(playerid, "InfoTDshown", SetTimerEx("InfoTD_Hide", ms_time, false, "i", playerid));
	}
	return 1;
}

forward InfoTD_Hide(playerid);
public InfoTD_Hide(playerid)
{
	DeletePVar(playerid, "InfoTDshown");
	PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "InfoTD"));
	return 1;
}

stock SaveFlags(playerid)
{
	mysql_format(1, query, sizeof(query), "UPDATE `players` SET `flags` = %d, `flags2` = %d WHERE `reg_id` = %d", g_PlayerFlags[playerid], g_PlayerFlags2[playerid], PlayerInfo[playerid][pRegID]);
	mysql_function_query(1, query, false, "", "");
}

stock SavePlayer(playerid, bool:bLaston = false, bool:CallFunction = false)
{
	new
		bool:bState;
	if(!IsPlayerNPC(playerid) && (g_PlayerData[playerid] & (e_TIMESSPAWNED | e_LOGGED_IN)) == (e_TIMESSPAWNED | e_LOGGED_IN))
    {
		//printf("SavePlayer(playerid = %s(%d), bLaston = %d)", pName(playerid), playerid, bLaston);
		datez = PlayerInfo[playerid][pTotalSeconds] + (GetPVarInt(playerid, "TotalMinutes") * 60) + (GetPVarInt(playerid, "TotalHours") * 3600);

		if(!datez)
		{
			printf("assertation failed! <saveplayer playerid = %d, bLaston = %d, CallFunction = %d>", playerid, bLaston, CallFunction);
			return 0;
		}
		if(bLaston)
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `money` = %d, `bank` = %d, `kills` = %d, `deaths` = %d, `xp` = %d, `flagtime` = %d, `bcartime` = %d, `mutetime` = %d, `freezetime` = %d,\
			`posts` = %d, `stuntbonus` = %d, `laston` = %d, `jailtime` = %d, `o_time` = %d, `afktime` = %d, `lastrabolt` = %d, `flags` = %d, \
			`weaponshots` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `minigame_joins` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `rablasok` = '%d', `weapons` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `ammo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d",
			    GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"), GetPVarInt(playerid, "Kills"), GetPVarInt(playerid, "Deaths"), GetPlayerScore(playerid), GetPVarInt(playerid, "FlagTime"), GetPVarInt(playerid, "bCarTime"), GetPVarInt(playerid, "Muted"), GetPVarInt(playerid, "FreezeTime"),
		        GetPVarInt(playerid, "Posts"), GetPVarInt(playerid, "Stuntbonus"),
		        CurrentTimestamp(), (!GetPVarType(playerid, "JailTime")) ? (0) : (GetPVarInt(playerid, "JailTime")), datez, PlayerInfo[playerid][pAFKTime],
				GetPVarInt(playerid, "LastRabolt"), g_PlayerFlags[playerid], g_pWeaponShots[playerid][0], g_pWeaponShots[playerid][1], g_pWeaponShots[playerid][2], g_pWeaponShots[playerid][3], g_pWeaponShots[playerid][4], g_pWeaponShots[playerid][5], g_pWeaponShots[playerid][6], g_pWeaponShots[playerid][7], g_pWeaponShots[playerid][8], g_pWeaponShots[playerid][9], g_pWeaponShots[playerid][10], g_pWeaponShots[playerid][10], g_pWeaponShots[playerid][12], g_pWeaponShots[playerid][13],
				g_pMinigameJoins[playerid][0], g_pMinigameJoins[playerid][1], g_pMinigameJoins[playerid][2], g_pMinigameJoins[playerid][3], g_pMinigameJoins[playerid][4], g_pMinigameJoins[playerid][5], g_pMinigameJoins[playerid][6], g_pMinigameJoins[playerid][7], g_pMinigameJoins[playerid][8], g_pMinigameJoins[playerid][9],
				GetPVarInt(playerid,"RablasokSzama"),g_pWeaponSlot[playerid][0], g_pWeaponSlot[playerid][1], g_pWeaponSlot[playerid][2], g_pWeaponSlot[playerid][3], g_pWeaponSlot[playerid][4], g_pWeaponSlot[playerid][5], g_pWeaponSlot[playerid][6], g_pWeaponSlot[playerid][7], g_pWeaponSlot[playerid][8], g_pWeaponSlot[playerid][9], g_pWeaponSlot[playerid][10], g_pWeaponSlot[playerid][11], g_pWeaponSlot[playerid][12],
				g_pWeaponAmmo[playerid][0], g_pWeaponAmmo[playerid][1], g_pWeaponAmmo[playerid][2], g_pWeaponAmmo[playerid][3], g_pWeaponAmmo[playerid][4], g_pWeaponAmmo[playerid][5], g_pWeaponAmmo[playerid][6], g_pWeaponAmmo[playerid][7], g_pWeaponAmmo[playerid][8], g_pWeaponAmmo[playerid][9], g_pWeaponAmmo[playerid][10], g_pWeaponAmmo[playerid][11], g_pWeaponAmmo[playerid][12], PlayerInfo[playerid][pRegID]);
		}
		else
		{
			mysql_format(1, query, sizeof(query), "UPDATE `players` SET `money` = %d, `bank` = %d, `kills` = %d, `deaths` = %d, `xp` = %d, `flagtime` = %d, `bcartime` = %d, `mutetime` = %d, `freezetime` = %d,\
			`posts` = %d, `stuntbonus` = %d, `jailtime` = %d, `o_time` = %d, `afktime` = %d, `lastrabolt` = %d, `flags` = %d, \
			`weaponshots` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `minigame_joins` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `rablasok` = '%d', `weapons` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d', `ammo` = '%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d' WHERE `reg_id` = %d",
			    GetPlayerMoneyEx(playerid), GetPVarInt(playerid, "Bank"), GetPVarInt(playerid, "Kills"), GetPVarInt(playerid, "Deaths"), GetPlayerScore(playerid), GetPVarInt(playerid, "FlagTime"), GetPVarInt(playerid, "bCarTime"), GetPVarInt(playerid, "Muted"), GetPVarInt(playerid, "FreezeTime"),
		        GetPVarInt(playerid, "Posts"), GetPVarInt(playerid, "Stuntbonus"),
		        (!GetPVarType(playerid, "JailTime")) ? (0) : (GetPVarInt(playerid, "JailTime")), datez, PlayerInfo[playerid][pAFKTime],
				GetPVarInt(playerid, "LastRabolt"), g_PlayerFlags[playerid], g_pWeaponShots[playerid][0], g_pWeaponShots[playerid][1], g_pWeaponShots[playerid][2], g_pWeaponShots[playerid][3], g_pWeaponShots[playerid][4], g_pWeaponShots[playerid][5], g_pWeaponShots[playerid][6], g_pWeaponShots[playerid][7], g_pWeaponShots[playerid][8], g_pWeaponShots[playerid][9], g_pWeaponShots[playerid][10], g_pWeaponShots[playerid][10], g_pWeaponShots[playerid][12], g_pWeaponShots[playerid][13],
				g_pMinigameJoins[playerid][0], g_pMinigameJoins[playerid][1], g_pMinigameJoins[playerid][2], g_pMinigameJoins[playerid][3], g_pMinigameJoins[playerid][4], g_pMinigameJoins[playerid][5], g_pMinigameJoins[playerid][6], g_pMinigameJoins[playerid][7], g_pMinigameJoins[playerid][8], g_pMinigameJoins[playerid][9],
				GetPVarInt(playerid,"RablasokSzama"), g_pWeaponSlot[playerid][0], g_pWeaponSlot[playerid][1], g_pWeaponSlot[playerid][2], g_pWeaponSlot[playerid][3], g_pWeaponSlot[playerid][4], g_pWeaponSlot[playerid][5], g_pWeaponSlot[playerid][6], g_pWeaponSlot[playerid][7], g_pWeaponSlot[playerid][8], g_pWeaponSlot[playerid][9], g_pWeaponSlot[playerid][10], g_pWeaponSlot[playerid][11], g_pWeaponSlot[playerid][12],
                g_pWeaponAmmo[playerid][0], g_pWeaponAmmo[playerid][1], g_pWeaponAmmo[playerid][2], g_pWeaponAmmo[playerid][3], g_pWeaponAmmo[playerid][4], g_pWeaponAmmo[playerid][5], g_pWeaponAmmo[playerid][6], g_pWeaponAmmo[playerid][7], g_pWeaponAmmo[playerid][8], g_pWeaponAmmo[playerid][9], g_pWeaponAmmo[playerid][10], g_pWeaponAmmo[playerid][11], g_pWeaponAmmo[playerid][12], PlayerInfo[playerid][pRegID]);
		}
		
		if(!CallFunction)
		{
			mysql_function_query(1, query, false, "", "");
		}
		else
		{
			mysql_function_query(1, query, false, "THREAD_SavePlayers", "");
		}

		if(GetPVarType(playerid, "ConnectID"))
		{
			mysql_format(1, query, sizeof(query), "UPDATE `connections` SET `elapsed_time` = %d WHERE `id` = %d", GetTickCount() - GetPVarInt(playerid, "ConTick"), GetPVarInt(playerid, "ConnectID"));
			mysql_function_query(1, query, false, "", "");
		}

		// Sikeres visszatérés
		bState = true;
	}

	// Ha mentjük az "Utoljára a szerveren" dátumot, akkor a reg id-t is nullázzuk mert ez csak akkor fut le, ha már lemegy
	if(bLaston) PlayerInfo[playerid][pRegID] = -1;
	return bState;
}

GetVehicleWithinDistance(playerid, Float:x1, Float:y1, Float:z1, Float:dist, &veh)
{
	new
		Float:vDist = FLOAT_INFINITY;
	for(new i = 1; i != MAX_VEHICLES; i++)
	{
		if(!IsValidDynamicVehicle(i)) continue;
		if(GetPlayerDynamicVehicleID(playerid) != i)
		{
			vDist = GetDynamicVehDistanceFromPoint(i, x1, y1, z1);
			if(vDist < dist)
			{
				veh = i;
				dist = vDist;
			}
		}
	}
}

stock GetVehicleModelIDFromName(const vname[])
{
	new
	    iRet = -1;
	for(new i; i != 212; i++)
	{
		if(strfind(g_szVehicleNames[i], vname, true) != -1)
		{
            iRet = i + 400;
            break;
		}

		if(strfind(g_szVehicleNamesORG[i], vname, true) != -1)
		{
            iRet = i + 400;
            break;
		}
	}
	return iRet;
}

stock GetWeaponIDFromName(const szWeaponName[])
{
	for(new i; i <= 46; i++)
	{
		switch(i)
		{
			case 0, 19, 20, 21: continue;
			default:
			{
				GetWeaponName(i, country, 32);
				if(strfind(country, szWeaponName, true) != -1) return i;
			}
		}

		if(strfind(szWeaponName, "Brass", true) != -1) return 1;
		else if(!strcmp(szWeaponName, "Lila mûfasz", true)) return WEAPON_DILDO;
		else if(!strcmp(szWeaponName, "Kicsi vibrátor", true)) return WEAPON_DILDO2;
		else if(!strcmp(szWeaponName, "Nagy vibrátor", true)) return WEAPON_VIBRATOR;
		else if(!strcmp(szWeaponName, "Szürke vibrátor", true)) return WEAPON_VIBRATOR2;
		else if(!strcmp(szWeaponName, "Virág", true)) return WEAPON_FLOWER;
		else if(!strcmp(szWeaponName, "Görbebot", true)) return WEAPON_CANE;
		else if(!strcmp(szWeaponName, "Molotov", true)) return WEAPON_MOLTOV;
		else if(!strcmp(szWeaponName, "Sawnoff Shotgun", true)) return WEAPON_SAWEDOFF;
		else if(!strcmp(szWeaponName, "Motorfûrész", true)) return WEAPON_CHAINSAW;
	}
	return -1;
}

stock GetWeaponSkillIDFromWeaponID(weaponid)
{
	switch(weaponid)
	{
		case WEAPON_COLT45: return WEAPONSKILL_PISTOL;
		case WEAPON_SILENCED: return WEAPONSKILL_PISTOL_SILENCED;
		case WEAPON_DEAGLE: return WEAPONSKILL_DESERT_EAGLE;
		case WEAPON_SHOTGUN: return WEAPONSKILL_SHOTGUN;
		case WEAPON_SAWEDOFF: return WEAPONSKILL_SAWNOFF_SHOTGUN;
		case WEAPON_SHOTGSPA: return WEAPONSKILL_SPAS12_SHOTGUN;
		case WEAPON_UZI: return WEAPONSKILL_MICRO_UZI;
		case WEAPON_MP5: return WEAPONSKILL_MP5;
		case WEAPON_AK47: return WEAPONSKILL_AK47;
		case WEAPON_M4: return WEAPONSKILL_M4;
		case WEAPON_SNIPER: return WEAPONSKILL_SNIPERRIFLE;
	}
	return -1;
}

argpos(const string[], idx = 0, sep = ' ')
{
	for(new ai = idx, j = strlen(string); ai != j; ai++)
	{
        if(string[ai] == sep && string[ai + 1] != sep)
		{
		    return (ai + 1);
		}
	}
    return -1;
}

new const
	chlist[18][3] =
	{
		{'¨', 'ö', 'o'},
		{'¬', 'ü', 'u'},
		{'¦', 'ó', 'o'},
		{'§', 'õ', 'o'},
		{'ª', 'ú', 'u'},
		{'', 'é', 'e'},
		{'', 'á', 'a'},
		{'«', 'û', 'u'},
		{'¢', 'í', 'i'},
		{'', 'Ö', 'O'},
		{'', 'Ü', 'U'},
		{'', 'Ó', 'O'},
		{'', 'Õ', 'O'},
		{'', 'Ú', 'U'},
		{'', 'É', 'E'},
		{'', 'Á', 'A'},
		{'·', 'Û', 'U'},
		{'', 'Í', 'I'}
	};

stock FixGameString(const string[])
{
	new
		index,
		i;

	static
	    dest[512];

	strmid(dest, string, 0, strlen(string));
	while(dest[index])
	{
		for(i = 0; i != sizeof(chlist); i++)
		{
			if(dest[index] != chlist[i][1]) continue;
			dest[index] = chlist[i][0];
			break;
		}
		index++;
	}
	return dest;
}

forward THREAD_Settings(); // LoadSettings()
public THREAD_Settings()
{
//	id  autogate autogate_2 recordplayers seepms cmdflood antimop wtimeformat autotick name reg_id record
	new
	    bool:bAntimop,
//	    bool:bCmdflood,
 		bool:bAutoGate,
	    //bool:bAutoTick,
	    szWeaponShots[192],
	    bool:bSobeitKick,
	    bool:bAntiDB;

	bAutoGate = !!cache_get_row_int_ex(0, 2);
	//Aautogate = !!cache_get_row_int_ex(0, 3);
	cache_get_row_int(0, 4, ServerInfo[RecordPlayers]);
//	bCmdflood = !!cache_get_row_int_ex(0, 6);
	bAntimop = !!cache_get_row_int_ex(0, 7);
	#if !defined YSF
	cache_get_row_int(0, 8, ServerInfo[WorldTimeFormat]);
	#endif
//	bAutoTick = !!cache_get_row_int_ex(0, 9);
	cache_get_row(0, 10, Range[Player], 1, MAX_PLAYER_NAME);
	cache_get_row_int(0, 11, Range[RegID]);
	cache_get_row_int(0, 12, Range[e_rRecord]);
	cache_get_row_int(0, 13, Range[e_rTime]);
	cache_get_row(0, 14, szWeaponShots);
	cache_get_row_int(0, 15, gIP_Count);
	cache_get_row_int(0, 16, bSobeitKick);
    cache_get_row_int(0, 17, bAntiDB);
    
    sscanf(szWeaponShots, "p<,>A<i>(0)[14]", gWeaponShots);

	ConvertTime(var, Range[e_rRecord], Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);

    // Bit Flagok beállítása
	g_ServerFlags = e_LEGBALON_WAIT | e_DATA_LOADED | e_IPLIMIT;

	if(bAntimop) g_ServerFlags |= e_ANTIMOP;
	else g_ServerFlags &= ~e_ANTIMOP;

	if(bSobeitKick) g_ServerFlags |= e_ANTI_SOBEIT_KICK;
	else g_ServerFlags &= ~e_ANTI_SOBEIT_KICK;

    if(bAntiDB) g_ServerFlags |= e_ANTIDB;
	else g_ServerFlags &= ~e_ANTIDB;
/*
	if(bCmdflood) g_ServerFlags |= e_CMDFLOOD;
	else g_ServerFlags &= ~e_CMDFLOOD;
*/
	if(bAutoGate) g_ServerFlags |= e_AUTOGATE;
	else g_ServerFlags &= ~e_AUTOGATE;

	#if defined YSF
	getdate(year, month, day),
	gettime(hour, minute, second);

	//format(name, sizeof(name), "%02d.%02d %02d:%02d:%02d", month, day, hour, minute, second);
	//AddServerRule("started", name);
	#endif
	return 1;
}

forward THREAD_SerialbansLoad();
public THREAD_SerialbansLoad()
{
	new
		rows = cache_get_row_count(),
		id,
		szSerial[128], szComment[128];

	// Hamár van serial ban, akkor töröljük mind az összeset
	if(g_iMaxSerialBan)
	{
		for(new i; i != g_iMaxSerialBan; i++)
		{
			DeleteGVar("SerialBan", i);
			DeleteGVar("SerialComment", i);
		}
	}

	for(new i; i != rows; i++)
	{
		cache_get_row_int(i, 0, id);
		cache_get_row(i, 1, szSerial);
		cache_get_row(i, 2, szComment);

		SetGVarInt("SerialID", i, id);
		SetGVarString("SerialBan", szSerial, i);
		SetGVarString("SerialComment", szComment, i);
	}
	g_iMaxSerialBan = rows;

	printf("<< MySQL >> %d serialban betöltve", rows);
	return 1;
}

//=====================[ SAVING DATA ] =========================================
stock AdminCommandLog(command[], adminid, giveplayerid, format[] = '*', va_args<>)
{
	getdate(year, month, day);
	gettime(hour, minute, second);

    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<4>);
    RemoveHexColorFromString(gs_szKimenet);
	if(giveplayerid == -1)
	{
	    if(format[0] == '*') mysql_format(1, query, sizeof(query), "INSERT INTO `adminlog`(id, command, admin, adminid, time) VALUES(0, '%s', '%s', %d, '%02d.%02d.%02d/%02d.%02d.%02d')", command, pName(adminid), PlayerInfo[adminid][pRegID], year, month, day, hour, minute, second);
		else mysql_format(1, query, sizeof(query), "INSERT INTO `adminlog`(id, command, admin, adminid, str, time) VALUES(0, '%s', '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", command, pName(adminid), PlayerInfo[adminid][pRegID], gs_szKimenet, year, month, day, hour, minute, second);
	}
	else
	{
	    if(format[0] == '*') mysql_format(1, query, sizeof(query), "INSERT INTO `adminlog`(id, command, admin, adminid, player, playerid, time) VALUES(0, '%s', '%s', %d, '%s', %d, '%02d.%02d.%02d/%02d.%02d.%02d')", command, pName(adminid), PlayerInfo[adminid][pRegID], pName(giveplayerid), PlayerInfo[giveplayerid][pRegID], year, month, day, hour, minute, second);
		else mysql_format(1, query, sizeof(query), "INSERT INTO `adminlog`(id, command, admin, adminid, player, playerid, str, time) VALUES(0, '%s', '%s', %d, '%s', %d, '%e', '%02d.%02d.%02d/%02d.%02d.%02d')", command, pName(adminid), PlayerInfo[adminid][pRegID], pName(giveplayerid), PlayerInfo[giveplayerid][pRegID], gs_szKimenet, year, month, day, hour, minute, second);
	}
	mysql_function_query(1, query, false, "", "");
	return 1;
}

stock AntiCheatLog(playerid, format[], va_args<>)
{
    if(!(g_pOtherFlags[playerid] & e_RAKSAMP))
	{
		static _year, _month, _day, _hour, _minute, _second, szIP[16], szSerial[64];
		getdate(_year, _month, _day);
		gettime(_hour, _minute, _second);

		GetPlayerIp(playerid, szIP, sizeof(szIP));
	    gpci(playerid, szSerial, sizeof(szSerial));

	    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<2>);
	    RemoveHexColorFromString(gs_szKimenet);
		mysql_format(1, query, sizeof(query), "INSERT INTO `anticheat` (`id`, `name`, `reg_id`, `type`, `ip`, `serial`, `time`) VALUES (0, '%s', '%d', '%s', '%s', '%s', '%02d.%02d.%02d %02d:%02d:%02d')", pName(playerid), PlayerInfo[playerid][pRegID], gs_szKimenet, szIP, szSerial, _year, _month, _day, _hour, _minute, _second);
		mysql_function_query(1, query, false, "", "");
	}
}

forward Fly();
public Fly()
{
	static keys, ud, lr;
	static vehid;
	static Float: adirection[3];
	static Float:Quaternion[4];
	static Float:transformationmatrix[4][4];
	static Float:xx;
	static Float:xy;
	static Float:xz;
	static Float:xw;
	static Float:yy;
	static Float:yz;
	static Float:yw;
	static Float:zz;
	static Float:zw;
	static Float:fValue;

	static
		k,
//		ud,
//		lr,
		Float:camX,
		Float:camY,
		Float:camZ,
		Float:vecX,
		Float:vecY,
		Float:vecZ,
		Float:angR,
		Float:angE,
		Float:speed,
		bool:bPressed;
		
	foreach(Player, playerid)
	{
	    new
		TempTime[3],
		TextID;

	    static
		    szSpeed[110];

	 	if(GetPVarType(playerid, "RaceParticipant") && g_rStartTick)
		{
			ConvertTime(var1, PlayerInfo[playerid][pLastActive] - g_rStartTick, TempTime[0], TempTime[1], TempTime[2]);
			format(szSpeed, 32, "~p~Time:~w~ %d:%02d.%d", TempTime[0], TempTime[1], TempTime[2]);

			TextID = _:GetPVarInt(playerid, "RaceTime");
			PlayerTextDrawSetString(playerid, PlayerText:TextID, szSpeed);
			PlayerTextDrawShow(playerid, PlayerText:TextID);
		}

		vID = GetPlayerDynamicVehicleID(playerid);
		if(g_PlayerFlags[playerid] & e_SPEEDO)
		{
			if(vID)
			{
				GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
				Angle = CalculateVelocity(V[0], V[1], V[2]);

	   			if(g_pLang{playerid} == LANGUAGE_HU)
				{
					format(szSpeed, sizeof(szSpeed), FixGameString("~b~~h~Já~h~rm~h~û:~n~~w~%s~n~~b~~h~Se~h~be~h~ss~h~ég:~n~~r~~h~%.2f~r~km/h~n~~h~%.2f~r~m/h"), VehName(vID), Angle, (Angle / 1.609344));
				}
				else
				{
					format(szSpeed, sizeof(szSpeed), FixGameString("~b~~h~Ve~h~hic~h~le:~n~~w~%s~n~~b~~h~S~h~p~h~ee~h~d:~n~~r~~h~%.2f~r~km/h~n~~h~%.2f~r~m/h"), VehName(vID), Angle, (Angle / 1.609344));
				}
				PlayerTextDrawSetString(playerid, Speedo[playerid][5], szSpeed);
				if(!(g_PlayerData[playerid] & e_SPEEDO_TD))
	   			{
					PlayerTextDrawShow(playerid, Speedo[playerid][0]);
	    			PlayerTextDrawShow(playerid, Speedo[playerid][1]);
	       			PlayerTextDrawShow(playerid, Speedo[playerid][2]);
			        PlayerTextDrawShow(playerid, Speedo[playerid][3]);
			        PlayerTextDrawShow(playerid, Speedo[playerid][4]);
				    PlayerTextDrawShow(playerid, Speedo[playerid][5]);
			    	//PlayerTextDrawShow(playerid, Speedo[playerid][6]);
				    g_PlayerData[playerid] |= e_SPEEDO_TD;
				}
			}
			else
			{
				if(g_PlayerData[playerid] & e_SPEEDO_TD)
				{
	   				PlayerTextDrawHide(playerid, Speedo[playerid][0]);
	       			PlayerTextDrawHide(playerid, Speedo[playerid][1]);
			        PlayerTextDrawHide(playerid, Speedo[playerid][2]);
			        PlayerTextDrawHide(playerid, Speedo[playerid][3]);
			        PlayerTextDrawHide(playerid, Speedo[playerid][4]);
					PlayerTextDrawHide(playerid, Speedo[playerid][5]);
					//PlayerTextDrawHide(playerid, Speedo[playerid][6]);
				    g_PlayerData[playerid] &= ~e_SPEEDO_TD;
				}
			}
		}
	    //UpdatePlayerTotalDistance(playerid);
	    //Rocket lõszer frissítés
	    new
			pWeapon = GetPlayerWeapon(playerid);

		if(pWeapon == 35 || pWeapon == 36 || pWeapon == 39 && !(g_PlayerFlags[playerid] & e_GOD) && g_pDeathMatchID[playerid] == -1)
		{
		    //GetPlayerKeys(playerid, keys, ud, lr);
		    if(keys == 132 && GetPlayerAnimationIndex(playerid) == 1167)
		    {
		        if((GetTickCount() - GetPVarInt(playerid, "RocketLastFire")) > 1500)
		        {
					new slot = GetWeaponSlot(pWeapon);
					g_pWeaponAmmo[playerid][slot] --;
					
					//SendClientMessagef(playerid,-1,"1111111111111111");
					
					SetPVarInt(playerid, "RocketLastFire", GetTickCount());
				}
				//SendClientMessagef(playerid,-1,"0000000000000000000");
		    }
		}

		// Élet számmal kiírásának frissítése
		UpdatePlayerHealthTD(playerid);

		if(g_pNoClipObject[playerid] != INVALID_OBJECT_ID)
		{
            speed = CAM_SPEED;
			bPressed = false;

            AttachCameraToPlayerObject(playerid, g_pNoClipObject[playerid]);
			GetPlayerKeys(playerid, k, ud, lr);
			GetPlayerCameraPos(playerid, camX, camY, camZ);
			GetPlayerCameraFrontVector(playerid, vecX, vecY, vecZ);

			angR = 90 - (atan2(vecY, vecX));
			if(angR < 0.0) angR = 360.0 + angR;
			angE = -(floatabs(atan2(floatsqroot(floatpower(vecX, 2.0) + floatpower(vecY, 2.0)), vecZ)) - 90.0);

			SetPlayerPos(playerid, camX, camY, camZ + 50.0);
	        SetPlayerFacingAngle(playerid, -angR);

			if(k & KEY_FIRE)
			{
				speed = CAM_HIPER_SPEED;
			}
			if(k & KEY_JUMP)
			{
				speed = CAM_HI_SPEED;
			}
			if(k & KEY_WALK)
			{
				speed = CAM_LO_SPEED;
			}

			// Elõre
			switch(ud)
			{
			    case KEY_UP:
				{
					switch(lr)
					{
						case 0: GetXYZFromAngle(camX, camY, camZ, angR, angE, 50.0);
						case KEY_LEFT: GetXYZFromAngle(camX, camY, camZ, angR - 45.0, angE, 50.0);
						case KEY_RIGHT: GetXYZFromAngle(camX, camY, camZ, angR + 45.0, angE, 50.0);

					}
					//GetXYZFromAngle(camX, camY, camZ, angR, angE, 50.0);
					MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ, speed);
					bPressed = true;
				}
				case KEY_DOWN:
				{
					switch(lr)
					{
						case 0: GetXYZFromAngle(camX, camY, camZ, angR, angE, -50.0);
						case KEY_LEFT: GetXYZFromAngle(camX, camY, camZ, angR + 45.0, angE, -50.0);
						case KEY_RIGHT: GetXYZFromAngle(camX, camY, camZ, angR - 45.0, angE, -50.0);

					}
					//GetXYZFromAngle(camX, camY, camZ, angR, angE, 50.0);
					MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ, speed);
                    bPressed = true;
				}
				default:
				{
					if(lr == KEY_LEFT)
					{
						GetXYFromAngle(camX, camY, -angR + 90.0, 50.0);
						MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ, speed);
						bPressed = true;
					}
					else if(lr == KEY_RIGHT)
					{
						GetXYFromAngle(camX, camY, -angR + 90.0, -50.0);
						MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ, speed);
						bPressed = true;
					}

					if(k & KEY_NO)
					{
						MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ + 50.0, speed);
						bPressed = true;
					}
					else if(k & KEY_YES)
					{
						MovePlayerObject(playerid, g_pNoClipObject[playerid], camX, camY, camZ - 50.0, speed);
						bPressed = true;
					}
				}
			}
            if(!bPressed) StopPlayerObject(playerid, g_pNoClipObject[playerid]);
		}



		GetPlayerKeys(playerid, keys, ud, lr);
		//if(keys & GetPVarInt(playerid,"CarFlyKey") && GetPVarInt(playerid,"CarFlyKey") != -2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !(e_IN_DERBY <= g_pGamesData[playerid] <= e_NOTELE))
		if(keys & GetPVarInt(playerid,"CarFlyKey"))
		{
		    if(!(g_PlayerFlags[playerid] & e_CARFLY)) continue;
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) continue;
	     	if(GetPVarInt(playerid,"CarFlyKey") == -2) continue;
	     	if(g_pGamesData[playerid]) continue;
	     	//if(!GetPVarInt(playerid, "RaceParticipant")) continue;
	     	//printf("carfly");
	     	GetPlayerPos(playerid, X, Y, Z);
	     	if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 70.0 || GetPlayerDistanceFromPoint(playerid, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 70.0 && ZaszloOwner != INVALID_PLAYER_ID && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				InfoTD_MSG(playerid, 1000, LANG(playerid, "MSG_RHNEM_HASZNALHATSZ_ITT_GHSPE"));
				continue;
			}
			
			

  			fValue = g_pCarFlyValue[playerid];

			vehid = GetPlayerDynamicVehicleID(playerid);
			GetDynamicVehicleRotationQuat(vehid, Quaternion[0], Quaternion[1], Quaternion[2], Quaternion[3]);

			xx = Quaternion[0] * Quaternion[0];
			xy = Quaternion[0] * Quaternion[1];
			xz = Quaternion[0] * Quaternion[2];
			xw = Quaternion[0] * Quaternion[3];
			yy = Quaternion[1] * Quaternion[1];
			yz = Quaternion[1] * Quaternion[2];
			yw = Quaternion[1] * Quaternion[3];
			zz = Quaternion[2] * Quaternion[2];
			zw = Quaternion[2] * Quaternion[3];

			transformationmatrix[0][0] = 1 - 2 * ( yy + zz );
			transformationmatrix[0][1] =     2 * ( xy - zw );
			transformationmatrix[0][2] =     2 * ( xz + yw );
			transformationmatrix[0][3] = 0.0;

			transformationmatrix[1][0] =     2 * ( xy + zw );
			transformationmatrix[1][1] = 1 - 2 * ( xx + zz );
			transformationmatrix[1][2] =     2 * ( yz - xw );
			transformationmatrix[1][3] = 0.0;

			transformationmatrix[2][0] =     2 * ( xz - yw );
			transformationmatrix[2][1] =     2 * ( yz + xw );
			transformationmatrix[2][2] = 1 - 2 * ( xx + yy );
			transformationmatrix[2][3] = 0;

			transformationmatrix[3][0] = 0;
			transformationmatrix[3][1] = 0;
			transformationmatrix[3][2] = 0;
			transformationmatrix[3][3] = 1;

			adirection[2] = -1 * transformationmatrix[0][1] + transformationmatrix[0][3];
			adirection[1] = -1 * transformationmatrix[1][1] + transformationmatrix[1][3];
			adirection[0] = -(-1 * transformationmatrix[2][1] + transformationmatrix[2][3]);

			SetDynamicVehicleVelocity(vehid, adirection[0] * fValue, adirection[1] * fValue, adirection[2] * fValue);
		}
	}
}

forward CheckStatus();
public CheckStatus()
{ // F_S
    //if(!Itter_Count(Player)) return 0;
	new
		iCurrDMZone,
		iDiff,
		pMoney,
		iCurrState,
		TempTime[3],
		TextID;

	static
	    szSpeed[110];
	    
	static
		keys,
		ud,
		lr;

	foreach(new i: Player)
	{
	    vID = GetPlayerDynamicVehicleID(i);
	    // Speed Boost
	    GetPlayerKeys(i, keys, ud, lr);
		if(IsPlayerInRangeOfPoint(i, 10.0, -40.2503, -32.9958, 294.0623) // loop
		|| IsPlayerInRangeOfPoint(i, 15.0, -1079.4695, -1686.9987, 290.7427)) // skiramp
		{
			GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
		 	if(floatabs(V[0]) < 3 && floatabs(V[1]) < 3 && floatabs(V[2]) < 3)
		  	{
		  		SetDynamicVehicleVelocity(vID, V[0] * 1.5, V[1] * 1.5, V[2] * 1.5);
		   		InfoTD_MSG(i, 2000, LANG(i, "MSG_RHHEXTRA_GYORSULAS"));
		    }
		}
		if(keys & GetPVarInt(i, "SpeedBoostKey"))
		{
		    //if(!(IN_MINIGAME_AND_SHITS & g_pGamesData[i]))
		    if(GetPVarInt(i, "SpeedBoostKey") != -2 && GetPVarType(i, "VehicleboostValue") && !(IN_MINIGAME_AND_SHITS & g_pGamesData[i]) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		    {
				if(IsPlayerInDynamicArea(i, gCsikZone))
				{
					InfoTD_MSG(i, 1000, LANG(i, "MSG_RHNEM_HASZNALHATSZ_ITT_GHSPE"));
					return 0;
			 	}

				GetPlayerPos(i, X, Y, Z);
				if(GetDynamicVehDistanceFromPoint(g_BonusCarID, X, Y, Z) < 70.0 || GetPlayerDistanceFromPoint(i, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]) < 70.0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
				{
					InfoTD_MSG(i, 1000, LANG(i, "MSG_RHNEM_HASZNALHATSZ_ITT_GHSPE"));
					return 0;
				}
				Angle = GetPVarFloat(i, "VehicleboostValue");
				GetDynamicVehicleVelocity(vID, V[0], V[1], V[2]);
				SetDynamicVehicleVelocity(vID, (V[0] * Angle), (V[1] * Angle), (V[2] * Angle));
			}
	  	}
	
	    iCurrState = GetPlayerState(i);
		iCurrDMZone = GetPVarInt(i, "Money");
        pMoney = GetPlayerMoney(i);

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(pMoney != iCurrDMZone)
		{
			if(iCurrState == PLAYER_STATE_DRIVER)
			{
                iDiff = pMoney - iCurrDMZone;
				if(0 <= iDiff <= 3000)
				{
					TextID = GetTickCount();
					if(!((TextID - PlayerInfo[i][pStuntTick]) < 5000))
					{
						iCurrDMZone += iDiff;
                        PlayerInfo[i][pStuntTick] = TextID;
						SetPVarInt(i, "Stuntbonus", GetPVarInt(i, "Stuntbonus") + 1);
					}
				}
			}
			SetPlayerMoneyEx(i, iCurrDMZone);
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(i == ZaszloOwner || (e_IN_DERBY | e_IN_FALLOUT | e_IN_DM | e_IN_TRUCKING | e_IN_RANGE | e_IN_RACE | e_IN_CTC | e_POSTAS | e_PIZZAS) & g_pGamesData[i])
		{
        	if(i == ZaszloOwner) GetPlayerPos(i, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]);

			// Muszáj ellenõrzini, hogy van-e rajta jetpack, mivel a többi ellenõrzést kijátsza, ha már egy lerakott jetpacket vesz fel
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
			{
				new bool:bAllowJetpack = false;
				if(g_pDeathMatchID[i] != -1)
				{
                    bAllowJetpack = !!(g_DMFlags[g_pDeathMatchID[i]] & e_JETPACK_MODE);
				}

				if(!bAllowJetpack)
				{
					ClearAnimations(i);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				}
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(IsPlayerInRangeOfPoint(i, 100, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2]))
		{
			SetPlayerMapIcon(i, 30, ZaszloPos[0], ZaszloPos[1], ZaszloPos[2], 19, 0);
		}
		else
		{
			RemovePlayerMapIcon(i, 30);
		}

		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		PositionChecks(i);

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(g_PlayerData[i] & e_NORELOAD)
		{
			GivePlayerWeapon(i, GetPlayerWeapon(i), 5000);
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(spectatorid[i] != INVALID_PLAYER_ID)
		{
			UpdateSpecTD(i, spectatorid[i]);
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/*if(GetPVarType(i, "RaceParticipant") && g_rStartTick)
		{
			ConvertTime(var1, PlayerInfo[i][pLastActive] - g_rStartTick, TempTime[0], TempTime[1], TempTime[2]);
			format(szSpeed, 32, "~p~Time:~w~ %d:%02d.%d", TempTime[0], TempTime[1], TempTime[2]);

            TextID = _:GetPVarInt(i, "RaceTime");
			PlayerTextDrawSetString(i, PlayerText:TextID, szSpeed);
			PlayerTextDrawShow(i, PlayerText:TextID);
		}*/
		if(g_pGamesData[i] & e_IN_RANGE)
		{
            ConvertTime(var2, PlayerInfo[i][pLastActive] - GetPVarInt(i, "RangeTick"), TempTime[0], TempTime[1], TempTime[2]);

			format(tmp, sizeof(tmp), "Hit: %d, Time: %d:%02d.%03d, Record: %d:%02d.%03d", Objects_Hit2{i}, TempTime[0], TempTime[1], TempTime[2], Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);
			PlayerTextDrawSetString(i, PlayerText:GetPVarInt(i, "ShotRangeTD"), tmp);
		}
		else if(g_pGamesData[i] & e_IN_TRUCKING)
		{
			rand = GetPVarInt(i, "TruckID");
			ConvertTime(var1, PlayerInfo[i][pLastActive] - GetPVarInt(i, "TruckTick"), TempTime[0], TempTime[1], TempTime[2]);

			if(g_pLang{i} == LANGUAGE_HU)
			{
				format(i_str, sizeof(i_str), "~p~Eltelt id§: ~r~%d~w~:~r~%02d~w~.~r~%d~n~~n~~w~Tvolsg: ~b~%.0f", TempTime[0], TempTime[1], TempTime[2], GetPlayerDistanceFromPoint(i, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2]));
			}
			else
			{
				format(i_str, sizeof(i_str), "~p~Time passed: ~r~%d~w~:~r~%02d~w~.~r~%d~n~~n~~w~Distance: ~b~%.0f", TempTime[0], TempTime[1], TempTime[2], GetPlayerDistanceFromPoint(i, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2]));

			}
			PlayerTextDrawSetString(i, TD_pPostasTime[i], i_str);
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(g_pSprayCount{i} != 0xFF)
		{
            g_pSprayCount{i}++;
            if(g_pSprayCount{i} > 5)
            {
			    g_pSprayCount{i} = 0xFF;
				Bit_Let(g_pTags[i], GetPVarInt(i, "TagID"));
			    DeletePVar(i, "TagID");

				GivePlayerXP(i, XP_GRAFFITI);

				new
				    Curr = UpdatePlayerTags(i);
				if(Curr == 100)
				{
                    GivePlayerXP(i, 1000);
					GivePlayerMoneyEx(i, 1000000, "Graffiti_All");
					ShowWelcome(i, LANG(i, "MSG_MINDEN_TAG_SPRAYT_LEFUJATTAL"));
				}
				else
				{
					GivePlayerMoneyEx(i, 1000, "Graffiti");
					ShowWelcomef(i, LANG(i, "MSG_PHTAG_YLEFUJVANGWR"), Curr);
				}
			}
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(GetPVarInt(i, "FalloutState") == FALLOUT_STATE_PLAYING)
		{
			GetPlayerPos(i, X, Y, Z);

			if(Z < 45)
			{
                SetPVarInt(i, "FalloutState", FALLOUT_STATE_WAITING);
                TogglePlayerControllable(i, false);
                InfoTD_MSG(i, MESSAGE_TIME, LANG(i, "MSG_RHKIESTEL_A_FALLOUTBOL"));
				PlayerTele(i, 2054.5508, 652.8755, 75, .worldid = 6);
				SetPlayerCameraPos(i, 2081.3545, 671.5437, 76.3614);
				SetPlayerCameraLookAt(i, 2080.4712, 671.0813, 75.3713);
                SetPlayerHealth(i, HEALTH_GOD);

				SendClientMessagef(i, COLOR_RED, LANG(i, "MSG__FALLOUT__KIESTEL_A_FALLOUTBOL"), FalloutRanking);

                //printf("FalloutPlayers -- Falled out %d, %d", FalloutPlayers);

                FalloutRanking--;

				// SendClientMessageToAllf(COLOR_WHITE, "MSG__FALLOUTRANKING___NAME_", FalloutRanking, pName(i), i);
				if(FalloutRanking <= 1)
				{
					new
					    WinnerID = INVALID_PLAYER_ID;
					foreach(new x: Player)
					{
						if(GetPVarInt(x, "FalloutState") != FALLOUT_STATE_PLAYING) continue;
						WinnerID = x;
						//printf("Fallout Winner! %s(%d)", pName(x), x);
					}

					if(WinnerID == INVALID_PLAYER_ID)
					{
		                SendClientMessageToAllf(COLOR_RED, "MSG__FALLOUT__SENKI_SEM_NYERTE");
					}
					else
					{
                        g_FalloutEndTick = GetTickCount();
						new
							TotalTime = g_FalloutEndTick - g_FalloutStartTick,
							_TempTime[3];

						ConvertTime(var1, TotalTime, _TempTime[0], _TempTime[1], _TempTime[2]);

						SendClientMessageToAllf(COLOR_RED, "MSG__FALLOUT___MEGNYERTE_A_JEL", GetPlayerColor(WinnerID) >>> 8, pName(WinnerID), WinnerID, _TempTime[0], _TempTime[1], _TempTime[2]);
						ShowWelcome(WinnerID, LANG(WinnerID, "MSG_BNYERTEL")); // !~n~+~g~$~h~6.200~n~~y~+2 XP!

						new
						    count;
						foreach(new x: Player)
						{
							if(GetPVarType(x, "FalloutState")) count++;
						}

						GivePlayerMoneyEx(WinnerID, count * 2500, "Fallout");
						GivePlayerXP(WinnerID, count);

						PVarIntFel(WinnerID, "FalloutWon");
						mysql_format(1, query, sizeof(query), "UPDATE `players` SET `fallout` = `fallout` + 1 WHERE `reg_id` = %d", PlayerInfo[WinnerID][pRegID]);
						mysql_function_query(1, query, false, "", "");

					    getdate(year, month, day);
						gettime(hour, minute, second);
						mysql_format(1, query, sizeof(query), "INSERT INTO `fallout`(id, winner, winner_regid, speed, time) VALUES(0, '%s', %d, %d, '%02d.%02d.%02d/%02d.%02d.%02d')", pName(WinnerID), PlayerInfo[WinnerID][pRegID], TotalTime, year, month, day, hour, minute, second);
						mysql_function_query(1, query, false, "", "");

					}
                    EndFallout();
				}
			}
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(!(g_PlayerData[i] & e_ON_STYLE))
		{
			if(GetPVarType(i, "LaserPointer"))
			{
				RemovePlayerAttachedObject(i, 3);

				if(iCurrState == PLAYER_STATE_ONFOOT && !IsPlayerInWater(i))
				{
					switch(GetPlayerWeapon(i))
					{
			            case WEAPON_SILENCED:
						{
			                if(IsPlayerAimingEx(i))
							{
			                    if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
			                    }
								else
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
			                    }
			                }
							else
							{
			                    if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
			                    }
							 	else
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
								}
							}
						}
			            case WEAPON_SHOTGSPA:
						{
			                if(IsPlayerAimingEx(i))
							{
			                    if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
			                    }
								else
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
			                    }
			                }
							else
							{
			                    if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
			   					}
								else
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
								}
							}
						}
			            case WEAPON_AK47:
						{
			                if(IsPlayerAimingEx(i))
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
								}
			                }
							else
							{
			                    if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
			                    }
								else
								{
			                        SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
								}
							}
						}
			            case WEAPON_M4:
						{
							if(IsPlayerAimingEx(i))
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
								}
			                }
							else
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
								}
							}
						}
			            case WEAPON_SNIPER:
						{
							if(IsPlayerAimingEx(i))
							{
		/*
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
								}
		*/
							}
							else
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
								}
							}
						}

			            case WEAPON_MP5:
						{
							if(IsPlayerAimingEx(i))
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
								}
							}
							else
							{
								if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
								}
								else
								{
									SetPlayerAttachedObject(i, 3, GetPVarInt(i, "LaserPointer"), 6, 0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
								}
							}
						}
					}
				}
			}
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//if(g_pTDFlags[i] & e_TD_GPS)
		if(!(g_pTDFlags[i] & e_TD_GPS))
		{
		    if(!(g_pOtherFlags[i] & e_ZONE_UPDATE_DISABLED))
		    {
	            GetPlayer2DZone(i, szSpeed, sizeof(szSpeed));
				format(szSpeed, sizeof(szSpeed), "~r~~h~GPS: ~w~%s", szSpeed);
				PlayerTextDrawSetString(i, TD_pGPS[i], szSpeed);
			}
		}
	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(GetPVarType(i, "ParticleModel"))
		{
			// printf("ParticleObject %d | %d", GetPVarInt(i, "ParticleObject"), GetPVarInt(i, "ParticleModel"));
			GetPlayerPos(i, X, Y, Z);
			DestroyDynamicObject(GetPVarInt(i, "ParticleObject"));
			SetPVarInt(i, "ParticleObject", CreateDynamicObjectEx(GetPVarInt(i, "ParticleModel"), X - floatrandom(0.5000), Y + floatrandom(0.5000), Z - 1, 0.0, 0.0, 0.0));
		}


	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if((iCurrDMZone = g_pDeathMatchID[i]) != DM_ZONE_INVALID || GetPVarType(i, "RaceParticipant") || iCurrState != PLAYER_STATE_DRIVER) continue;

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(g_BonusCarOwner == i)
		{
			if(vID == g_BonusCarID)
			{
				new
				    pCamMode = GetPlayerCameraMode(i),
				    bool:bKidobva;
				switch(pCamMode)
				{
					case 15:
					{
						if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 2067.4, -1831.2, 13.5)) // LS First Spray
						{
							SetDynamicVehiclePos(g_BonusCarID, 2082.0383, -1855.5213, 13.1099);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0081, -1.0207, -0.0000);
							SetDynamicVehicleZAngle(g_BonusCarID, 178.89);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 488.0, -1734.0, 11.4)) // Tengerpart Spray
						{
							SetDynamicVehiclePos(g_BonusCarID, 457.9029, -1741.5850, 8.1138);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0660, -0.4684, -0.1728);
							SetDynamicVehicleZAngle(g_BonusCarID, 178.919);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 720.016, -454.625, 15.328)) // Dillimore Spray
						{
							SetDynamicVehiclePos(g_BonusCarID, 722.6755, -542.0968, 15.9092);
							SetDynamicVehicleVelocity(g_BonusCarID, 0.0013, -0.9367, 0.0012);
							SetDynamicVehicleZAngle(g_BonusCarID, 180.8895);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -1420.547, 2583.945, 58.031)) // El Quarbados Spray
						{
							SetDynamicVehiclePos(g_BonusCarID, -1344.1966, 2648.2971, 50.7315);
							SetDynamicVehicleVelocity(g_BonusCarID, 0.2102, 0.3290, 0.0351);
							SetDynamicVehicleZAngle(g_BonusCarID, 336.229);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 1976.4885, 2162.8000, 11.0703)) // LV Kaszinók között
						{
							SetDynamicVehiclePos(g_BonusCarID, 1933.8371, 2147.0256, 10.5408);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.1926, -0.1812, -0.0043);
							SetDynamicVehicleZAngle(g_BonusCarID, 121.4804);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -2425.46, 1020.83, 51.39)) // SF Észak, benzikút mellett
						{
							SetDynamicVehiclePos(g_BonusCarID, -2406.5036, 1025.5455, 49.8043);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0188, -0.3901, -0.0602);
							SetDynamicVehicleZAngle(g_BonusCarID, 177.1920);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 1025.1323,-1022.5272,32.1016)) // LS, Szar tuning garázs
						{
							SetDynamicVehiclePos(g_BonusCarID, 1010.6135, -1037.9527, 31.1538);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.3943, 0.0151, -0.0097);
							SetDynamicVehicleZAngle(g_BonusCarID, 87.7942);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -1904.3676,284.9018,41.0469)) // Wang Cars
						{
							SetDynamicVehiclePos(g_BonusCarID, -1953.9097, 261.9341, 40.7747);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.6934, -0.0460, 0.0000);
							SetDynamicVehicleZAngle(g_BonusCarID, 93.8184);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -103.6, 1112.4, 18.7)) // LV Paraszt spray, ahol a kaput töröltem
						{
							SetDynamicVehiclePos(g_BonusCarID, -110.3479, 1122.6781, 19.4695);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0053, 0.5745, 0.0005);
							SetDynamicVehicleZAngle(g_BonusCarID, 0.5333);
							bKidobva = true;
						}
					}
					case 18:
					{
						if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -1935.6271,244.4315,34.4609)) // Tuning garázsok
						{
							SetDynamicVehiclePos(g_BonusCarID, -1981.6414, 226.9412, 29.2400);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.7039, 0.0038, -0.0895);
							SetDynamicVehicleZAngle(g_BonusCarID, 89.6869);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, -2721.5955,217.5526,4.4844))
						{
							SetDynamicVehiclePos(g_BonusCarID, -2705.9807, 261.7181, 3.9067);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0044, 0.5742, -0.0000);
							SetDynamicVehicleZAngle(g_BonusCarID, 0.4370);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 2386.7935,1049.0702,10.8203))
						{
							SetDynamicVehiclePos(g_BonusCarID, 2386.4416, 1019.4854, 10.5474);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0230, -0.4359, 0.0000);
							SetDynamicVehicleZAngle(g_BonusCarID, 176.9716);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, 5.0, 2644.7954,-2043.5905,13.6236))
						{
							SetDynamicVehiclePos(g_BonusCarID, 2644.7285, -2022.5555, 13.2739);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.0041, 0.3530, 0.0000);
							SetDynamicVehicleZAngle(g_BonusCarID, 0.6639);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 1041.3370,-1020.0953,32.1075))
						{
							SetDynamicVehiclePos(g_BonusCarID, 1012.3255, -1038.8345, 31.2017);
							SetDynamicVehicleVelocity(g_BonusCarID, -0.6056, 0.0110, -0.0038);
							SetDynamicVehicleZAngle(g_BonusCarID, 88.9444);
							bKidobva = true;
						}
						else if(IsPlayerInRangeOfPoint(i, BONUS_CAR_RANGE, 2393.5532,1491.5615,10.8203)) // (Érdekes, itt 18as kamera) LV Parkoló melletti rejtett garázs (csak szerver által nyitott)
						{
							SetDynamicVehiclePos(g_BonusCarID, 2428.4653, 1474.5443, 10.7979);
							SetDynamicVehicleVelocity(g_BonusCarID, 0.4996, 0.0080, -0.0054);
							SetDynamicVehicleZAngle(g_BonusCarID, 270.8644);
							bKidobva = true;
						}
					}
				}
				if(bKidobva)
				{
				    if(!(g_PlayerFlags2[i] & e_FPS_MOD)) SetCameraBehindPlayer(i);
					//SetCameraBehindPlayer(i);
					ShowWelcome(i, LANG(i, "MSG_RBONUSZAUTOT_NEM_BHJAVITHATOD"));
				}
			}
		}

	    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(GetPVarType(i, "Trucking"))
		{
			for(new x; x != sizeof(gTruck); x++)
			{
				if(gTruck[x] != GetPVarInt(i, "TruckingVehicle")) continue;

				if(IsTrailerAttachedToDynamicVeh(gTruck[x]) && !(gIsTrailerInTruck & (1 << x)))
				{
                    // print("Lófaz meg nappalifény");

					if(GetPVarType(i, "TruckLeszakadt"))
					{
                        if(GetDynamicVehicleTrailer(gTruck[x]) != GetPVarInt(i, "TruckingVehicleT"))
                        {
							//SendClientMessage(i, COLOR_DEFAULT, LANG(i, "MSG_ZSIDO_VAGY_TE_ZSIDO_MONDTAM"));
							//SendClientMessage(i, COLOR_SAMP, LANG(i, "MSG_NYAAANAAD_SZAROZRA_A_PICSAMOT"));
							SendClientMessage(i, COLOR_SAMP, LANG(i, "MSG_EZ_NEM_AZ_A_TRAILER_AMI_LESZAKADT"));

							DetachTrailerFromDynamicVeh(gTruck[x]);
							SetDynamicVehicleToRespawn(GetDynamicVehicleTrailer(gTruck[x]));
							return 1;
						}

						InfoTD_MSG(i, 1000, LANG(i, "MSG_YTRAILER_UJRA_FELTEVE"));
						DeletePVar(i, "TruckLeszakadt");
                        gIsTrailerInTruck |= (1 << x);
						return 1;
					}

					ShowWelcome(i, LANG(i, "MSG_TRAILER_FELVEVE"));
                    gIsTrailerInTruck |= (1 << x);

					rand = random(sizeof(TruckPos));
					strunpack(name, TruckPos[rand][T_Neve], 22);

					SetPlayerCheckpoint(i, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2], 5.0);
                    SetPlayerMapIcon(i, 96, TruckPos[rand][T_Kordinatak][0], TruckPos[rand][T_Kordinatak][1], TruckPos[rand][T_Kordinatak][2], 51, 0, MAPICON_GLOBAL);

					SetPVarInt(i, "TruckID", rand);
                    SetPVarInt(i, "Trucking", 3);
					SetPVarInt(i, "TruckTick", GetTickCount());

					InfoTD_MSGf(i, 10000, LANG(i, "MSG_BVIDD_A_YFUVART_BIDEW_GH"), name);

					PlayerTextDrawShow(i, TD_pPostasTime[i]);
					SetPVarInt(i, "TruckingVehicleT", GetDynamicVehicleTrailer(gTruck[x]));
					break;
				}
				else if(!IsTrailerAttachedToDynamicVeh(gTruck[x]) && (gIsTrailerInTruck & (1 << x)))
				{
					ShowWelcome(i, LANG(i, "MSG_RLESZAKADT_A_TRAILERED_NBHF"));
                    gIsTrailerInTruck &= ~(1 << x);

					// print("Lófaz meg estifény");
					if(!GetPVarType(i, "TruckLeszakadt"))
					{
						SetPVarInt(i, "TruckLeszakadt", 0);
					}
					break;
				}
			}
		}

  		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(GetPVarInt(i, "ColorChanger") == 2 && vID != g_BonusCarID)
		{
			ChangeDynamicVehicleColor(vID, RandomColor, RandomColor);
		}

		// Jumpg
		if(g_pJumpID{i} != 0xFF && (g_PlayerFlags[i] & e_STUNTS))
		{
            GetPlayerPos(i, X, Y, Z);
			MapAndreas_FindZ_For2DCoord(X, Y, Health);

			// Ha túl közel van a talajhoz, akkor már valószinû hogy leért a fõdre ÉS legalább a jump óta eltelt egy másodperc, mivel pár helyen jumpnál
			// is elõfordulhat, hogy túl közel van a talajhoz
			// Update - Ha már 10 másodperce a levegõbe van, akkor valami picsaságot csinált közbe - visszaállítjuk a kamerát az alapra
			if((Health > (Z - 3.0) && (PlayerInfo[i][pLastActive] - g_pJumpTick[i]) > 1000) || ((PlayerInfo[i][pLastActive] - g_pJumpTick[i]) > 10000))
			{
                g_pJumpID{i} = 0xFF;
                g_pJumpTick[i] = 0;
                if(!(g_PlayerFlags2[i] & e_FPS_MOD)) SetCameraBehindPlayer(i);
                //SetCameraBehindPlayer(i);
			}
			else
			{
				SetPlayerCameraPos(i, g_Jumps[g_pJumpID{i}][0], g_Jumps[g_pJumpID{i}][1], g_Jumps[g_pJumpID{i}][2]);
				SetPlayerCameraLookAt(i, X, Y, Z);
			}
		}
    }
	return 1;
}

stock IsPlayerNearProperty(playerid)
{
	// Kinti pickupokat megnézzük
	foreach(houseid: houses)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid))) return houseid;
	}

	// Ha nincs kinti, akkor a bentieket
	new
	    world = GetPlayerVirtualWorld(playerid);
	foreach(houseid: houses)
	{
		if(world != GetGVarInt("VirtualWorld", houseid)) continue;
		if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGVarFloat("InX", houseid), GetGVarFloat("InY", houseid), GetGVarFloat("InZ", houseid))) return houseid;
	}
	return -1;
}

stock IsPlayerNearProperty_Out(playerid)
{
	foreach(houseid: houses)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GetGVarFloat("PropX", houseid), GetGVarFloat("PropY", houseid), GetGVarFloat("PropZ", houseid))) return houseid;
	}
	return -1;
}

stock IsPlayerNearProperty_In(playerid, Float:range = 5.0)
{
	new
	    world = GetPlayerVirtualWorld(playerid);
	foreach(houseid: houses)
	{
		if(world != GetGVarInt("VirtualWorld", houseid)) continue;
		if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("InX", houseid), GetGVarFloat("InY", houseid), GetGVarFloat("InZ", houseid))) return houseid;
	}
	return -1;
}

/*stock IsPlayerInOwnHouse(playerid, Float:range = 10.0)
{
	if(!GetPVarType(playerid, "PlayerProp"))
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNINCS_HAZADW"));
        return 0;
	}

	houseid = GetPVarInt(playerid, "PlayerProp");

	if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("InX", houseid), GetGVarFloat("InY", houseid), GetGVarFloat("InZ", houseid)) && GetPlayerVirtualWorld(playerid) == GetGVarInt("VirtualWorld", houseid))
		return houseid;

    ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_HAZAD_BELSEJEBENW"));
	return 0;
}*/

stock IsPlayerNearBiznis(playerid)
{
	foreach(houseid: biznis)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid))) return houseid;
	}

	new
	    world = GetPlayerVirtualWorld(playerid);
	foreach(houseid: biznis)
	{
		if(world != GetGVarInt("BizVirtualWorld", houseid)) continue;
		if(IsPlayerInRangeOfPoint(playerid, 5.0, GetGVarFloat("BizInX", houseid), GetGVarFloat("BizInY", houseid), GetGVarFloat("BizInZ", houseid))) return houseid;
	}
	return -1;
}

stock IsPlayerNearBiznis_Out(playerid)
{
	foreach(houseid: biznis)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GetGVarFloat("BizX", houseid), GetGVarFloat("BizY", houseid), GetGVarFloat("BizZ", houseid))) return houseid;
	}
	return -1;
}

stock IsPlayerNearBiznis_In(playerid, Float:range = 5.0)
{
	new
	    world = GetPlayerVirtualWorld(playerid);
	foreach(houseid: biznis)
	{
		if(world != GetGVarInt("BizVirtualWorld", houseid)) continue;
		if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("BizInX", houseid), GetGVarFloat("BizInY", houseid), GetGVarFloat("BizInZ", houseid))) return houseid;
	}
	return -1;
}

stock IsPlayerInOwnBiznis(playerid, Float:range = 10.0)
{
	if(!GetPVarType(playerid, "PlayerBiz"))
	{
        InfoTD_MSG(playerid, MESSAGE_TIME, LANG(playerid, "MSG_RNINCS_BIZNISZEDW"));
        return 0;
	}

	houseid = GetPVarInt(playerid, "PlayerBiz");

	if(IsPlayerInRangeOfPoint(playerid, range, GetGVarFloat("BizInX", houseid), GetGVarFloat("BizInY", houseid), GetGVarFloat("BizInZ", houseid)) && GetPlayerVirtualWorld(playerid) == GetGVarInt("BizVirtualWorld", houseid))
		return houseid;

    ShowWelcome(playerid, LANG(playerid, "MSG_RNEM_VAGY_A_BIZNISZED_BELSEJEBENW"));
	return 0;
}

stock SendClientMessageToAllEx(exeption, color, message[])
{
	foreach(new i: Player)
	{
	    if(i == exeption) continue;
        SendClientMessage(i, color, message);
	}
  	return 1;
}

forward PropertyPayout();
public PropertyPayout()
{
	new
		earning,
		bank,
		bizid;
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_RULE);
    #endif
*/
	//SetWeather(Weathers[random(sizeof(Weathers))]);
/*
    #if defined YSF
    ModifyFlag("weather", CON_VARFLAG_READONLY);
	#endif
*/
	#if !defined YSF
	switch(ServerInfo[WorldTimeFormat])
	{
		case 0:
		{
			SendRconCommand("worldtime " #WEB_ADDRESS "");
		}
		case 1:
		{
			SendRconCommandf("worldtime Rekord: %d", ServerInfo[CurrPlayers]);
		}
		case 2:
		{
			date(session[startuptime], day, month, year, hour, minute, second);
			SendRconCommandf("worldtime %02d/%02d/%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
		}
	}
	#endif

	new
	    iClanPlayers[MAX_CLANS];
	foreach(new i: Player)
	{
		// Raksamp botok újraspawnolása - ne legyen feltûnõ, hogy furt egyhelybe álnak xD
		if(g_pOtherFlags[i] & e_RAKSAMP)
		{
            SpawnRakSamp(i);
		}

		if(!(g_PlayerData[i] & e_LOGGED_IN)) continue;

        // Ha klánban van a játékos
		if(g_pClan{i} != 0xFF)
            iClanPlayers[g_pClan{i}]++;

		// Ha bevan állítva a saját idõjárása, akkor beálítjuk neki azt
		if(g_pDeathMatchID[i] != -1 && g_DM_Weather[g_pDeathMatchID[i]] == -1)
		{
			if(GetPVarType(i, "PlayerWeather"))
				SetPlayerWeather(i, GetPVarInt(i, "PlayerWeather"));
		}
		// Ha már 5perce afk-ban van, akkor nem kap fizetést
		if(GetPVarInt(i, "AFKTime") > 300)
			continue;

		if(!g_pVIP[i])
			earning = (g_pSzint{i} > 30) ? 30000 : (g_pSzint{i} * 1000);
		else
		    earning = (g_pSzint{i} > 30) ? 37500 : (g_pSzint{i} * 1250);

		new rezsi, bevetel, rablas, kamat, housebutorok, sum, oszto;

		if(GetPVarType(i, "PlayerBiz"))
		{
			bizid = GetPVarInt(i, "PlayerBiz");
			oszto = (!g_pVIP[i]) ? (10000) : (8000);

			rablas = (GetGVarInt("BiznisKirabolva", bizid) * 2);
			bevetel = (GetGVarInt("BizValue", bizid) - rablas) / oszto;
		}

		// Ha van háza, akkor a rezsi kiszámítása
		if(GetPVarType(i, "PlayerProp"))
		{
            houseid = GetPVarInt(i, "PlayerProp");

            oszto = (!g_pVIP[i]) ? (1000) : (1250);
			rezsi = GetGVarInt("PropValue", houseid) / oszto;

			if(g_HouseElements[houseid])
			{
				for(new x; x != sizeof(g_HouseElementStruct); x++)
				{
					if(!(g_HouseElements[houseid] & (1 << x))) continue;
					housebutorok += (g_HouseElementStruct[x][e_Price] / HOUSE_ELEMENT_OSZTO);
				}
			}
		}

		if(!(bank = GetPVarInt(i, "Bank")))
		{

		}
		else
		{
			kamat = floatround(bank * 0.00001); // osztva 10k
			SetPVarInt(i, "Bank", bank + housebutorok + kamat);
		}

		sum = earning + bevetel - rezsi + kamat + housebutorok;
		GivePlayerMoneyEx(i, earning + bevetel - rezsi, "Fizetes");

		SendClientMessage(i, COLOR_WHITE, LANG(i, "MSG_____FIZETES____"));
    	SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_KESZPENZ_"), FormatNumber(earning));

		if(bevetel)
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_BIZNISZ_BEVETEL___A_RABLASO"), FormatNumber(bevetel), FormatNumber(rablas));
		if(housebutorok)
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_HAZ_BONUSZ__BANKBA_KAPOD"), FormatNumber(housebutorok));
    	if(rezsi)
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_REZSI_"), FormatNumber(rezsi));
    	if(kamat)
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_KAMAT_"), FormatNumber(kamat));
    	if(sum != earning)
			SendClientMessagef(i, COLOR_WHITE, LANG(i, "MSG_OSSZES_BEVETEL_"), FormatNumber(sum));
	}

	new
	    kamatozas,
	    Float:buzipawn;
	foreach(clans, clanid)
	{
		if(!gClanBankPos[clanid][0]) continue;

		if(iClanPlayers[clanid])
		{
            buzipawn = floatadd(1.0, float(iClanPlayers[clanid]));
            //printf("buzipawn: %f", buzipawn);
			X = floatdiv(buzipawn, float(100000));
			//printf("clankamat: %f, %d", X, iClanPlayers[clanid]);
			kamatozas = floatround(gClanBankMoney[clanid] * X);
            if(IsNegative(kamatozas)) return print("ASSERTATION FAILED - CLAN BANK KAMAT ERROR!");

            if(gClanBankMoney[clanid] + kamatozas < 2100000000)
			{
			    gClanBankMoney[clanid] += kamatozas;
			}

			mysql_format(1, query, sizeof(query), "UPDATE `clans` SET `bankmoney` = %d WHERE `id` = %d", gClanBankMoney[clanid], CLAN_SQL(clanid));
			mysql_function_query(1, query, false, "", "");

			foreach(new i: Player)
			{
				if(g_pClan{i} == clanid)
				{
					SendClientMessagef(i, COLOR_PINK, LANG(i, "MSG_KLAN_BANK_KAMAT___UJ_EGYENLEG"), FormatNumber(kamatozas), FormatNumber(gClanBankMoney[clanid]));
				}
			}
		}
	}
  	return 1;
}

/*
forward Vissza();
public Vissza()
{
	MoveDynamicObject(gGroveGate, 2442.12280273,-1659.05505371,16.20638084, 5.0);

	g_GateFlags &= ~(1 << 18);
	return 1;
}
*/
stock MoveObjectsForPlayerAgain(playerid)
{
    new
		ObjectsMiss = Objects_Missed{playerid},
		x;

	PlayerObjects{playerid} = ObjectsMiss;
	for( ; x != ObjectsMiss; x++)
	{
		CreateAimObject(x, playerid);
	}
  	for(x = 0; x <= ObjectsMiss; x++)
	{
 		MovePlayerObject(playerid, A_Objects[x][playerid], 790.6284, AimObject[x][pObjectY][playerid], AimObject[x][pObjectZ][playerid], Random_Object_Speed[random(sizeof(Random_Object_Speed))] );
	}
}

FinishShootingRange(playerid)
{
	g_pGamesData[playerid] &= ~e_IN_RANGE;
	Objects_Missed{playerid} = 0;
	LoadPlayerWeaponInfo(playerid);
	for(new i; i != 30; i++)
	{
		DestroyPlayerObject(playerid, A_Objects[i][playerid]);
	}
	PlayerObjects{playerid} = 0;
	Objects_Hit2{playerid} = 0;
	PlayerTextDrawHide(playerid, PlayerText:GetPVarInt(playerid, "ShotRangeTD"));

	DeletePVar(playerid, "RangeTick");
	DeletePVar(playerid, "RangeWeapon");
	return 1;
}

FinishTrucking(playerid)
{
	RemovePlayerFromVehicleEx(playerid);
    RemovePlayerFromClearworld(playerid);

	printf("trucking trailer id: %d", GetPVarInt(playerid, "TruckingVehicleT"));

    if((vID = GetPVarInt(playerid, "TruckingVehicleT")) != 0) SetDynamicVehicleToRespawn(vID);

	SetDynamicVehicleToRespawn((vID = GetPVarInt(playerid, "TruckingVehicle")));
	for(new i; i != sizeof(gTruck); i++)
	{
		if(gTruck[i] != vID) continue;

		gIsTrailerInTruck &= ~(1 << i);
		break;
	}

	DeletePVar(playerid, "TruckingVehicle");
	DeletePVar(playerid, "TruckingVehicleT");
	DeletePVar(playerid, "Trucking");
	DeletePVar(playerid, "TruckID");
    DeletePVar(playerid, "TruckTick");
    DeletePVar(playerid, "TruckLeszakadt");
    DeletePVar(playerid, "TruckKiszalt");

    g_pGamesData[playerid] &= ~e_IN_TRUCKING;
	SetPlayerVirtualWorld(playerid, 0);
	DisablePlayerCheckpoint(playerid);
	RemovePlayerMapIcon(playerid, 96);
    Streamer_Update(playerid);

    PlayerTextDrawSetString(playerid, TD_pPostasTime[playerid], "~p~Eltelt id§: 0 mp");
    PlayerTextDrawHide(playerid, TD_pPostasTime[playerid]);
	ShowClanZones(playerid);
}

LoadAimObjects(p)
{
	//Did it this way due to some loop mallfunction
	//( Keept creating on and on when a player would join )
    CreateAimObject(0, p);
	CreateAimObject(1, p);
	CreateAimObject(2, p);
	CreateAimObject(3, p);
	CreateAimObject(4, p);
	CreateAimObject(5, p);
	CreateAimObject(6, p);
	CreateAimObject(7, p);
	CreateAimObject(8, p);
	CreateAimObject(9, p);
	CreateAimObject(10, p);
	CreateAimObject(11, p);
	CreateAimObject(12, p);
	CreateAimObject(13, p);
	CreateAimObject(14, p);
	CreateAimObject(15, p);
	CreateAimObject(16, p);
	CreateAimObject(17, p);
	CreateAimObject(18, p);
	CreateAimObject(19, p);
}

Float:getRand(Float:ll, Float:ul)
{
    new
		ulv = floatround(ul, floatround_ceil),
		llv = floatround(ll, floatround_floor);
	return ll + (random(32767) % (ulv - llv));
}

stock CreateAimObject(oid, playerid)
{
	new Float:x = getRand(810.3989, 830.9512);
	new Float:y = getRand(1618.3936,1632.4587);
	new Float:z = getRand(5.4932, 10.4932);

	AimObject[oid][pObjectX][playerid] = x;
	AimObject[oid][pObjectY][playerid] = y;
	AimObject[oid][pObjectZ][playerid] = z;

	//DestroyPlayerObject( playerid, A_Objects[oid][playerid] );
	A_Objects[oid][playerid] = CreatePlayerObject(playerid, 1600 , AimObject[oid][pObjectX][playerid], AimObject[oid][pObjectY][playerid], AimObject[oid][pObjectZ][playerid], 0.00000000, 16.32929716, 97.11634627);
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
	new
		Float:TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new
		Float:tmpX,
		Float:tmpY,
		Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
//===================================//
stock GetXYFromAngle(&Float:x, &Float:y, Float:a, Float:distance)
{
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock GetXYZFromAngle(&Float:x, &Float:y, &Float:z, Float:angle, Float:elevation, Float:distance)
{
	x += (distance * floatsin(angle, degrees) * floatcos(elevation, degrees));
	y += (distance * floatcos(angle, degrees) * floatcos(elevation, degrees));
	z += (distance * floatsin(elevation, degrees));
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock IsPlayerAiming(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new
		Float:camera_x,
		Float:camera_y,
		Float:camera_z,
		Float:vector_x,
		Float:vector_y,
		Float:vector_z;
  	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
  	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

	new
		Float:vertical, // Függõleges
		Float:horizontal; // Vízszintes

	switch (GetPlayerWeapon(playerid))
	{
	  	case 34, 35,36:
 		{
	  		if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
	  		return false;
	  	}
	  	case 30, 31:
	  	{
		  	vertical = 4.0;
			horizontal = -1.6;
	  	}
	  	case 33:
	  	{
	  		vertical = 2.7;
			horizontal = -1.0;
	  	}
	  	default:
 		{
		 	vertical = 6.0;
			horizontal = -2.2;
 		}
	}
  	new
	  	Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x * vector_x + vector_y * vector_y), vector_z) - 270.0;

	new
		Float:resize_x,
		Float:resize_y,
		Float:resize_z = floatsin(angle + vertical, degrees);

  	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y) + horizontal, floatcos(angle + vertical, degrees));

  	if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
  	return false;
}

forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new
		keys,
		updown,
		leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	switch(GetPlayerWalkingStyle(playerid))
	{
		case WALK_NORMAL:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_PED:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
	 	case WALK_GANGSTA:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_GANGSTA2:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_OLD:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_FAT_OLD:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_FAT:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_LADY:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
  		case WALK_LADY2:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_WHORE:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_WHORE2:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_DRUNK:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
		case WALK_BLIND:
		{
	 	 	if((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
			{
			   	KillTimer(GetPVarInt(playerid, "WalkTime"));
				ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
				SetPVarInt(playerid, "WalkTime", SetTimerEx("WalkAnim", 200, false, "d", playerid));
			}
			else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(GetPVarInt(playerid, "WalkTime"));
		}
	}
	return 1;
}

UpdateLeftRightForStyle(playerid)
{
	new
		Keys,
		UPDOWN,
		LEFTRIGHT,
		str[256],
		Cat[20],
		Item[20];

	GetPlayerKeys(playerid, Keys, UPDOWN, LEFTRIGHT);
	GetPVarString(playerid, "Category", Cat, sizeof(Cat));
	GetPVarString(playerid, "Item", Item, sizeof(Item));

	switch(PlayerInfo[playerid][P_StyleStage])
	{
		case GLASSES:
		{
			if((GetTickCount() - PlayerInfo[playerid][P_StyleTick]) < 200) return;

	        if(Keys & KEY_FIRE)
			{
			    TogglePlayerControllable(playerid, true);
			    ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!", szItems, "Választ", "Mégse");
			    g_PlayerData[playerid] &= ~e_ON_STYLE;
			}

			if(LEFTRIGHT > 0)
			{
			   StyleNextGlasses(playerid);
			}
			else if(LEFTRIGHT < 0)
			{
			   StylePrevGlasses(playerid);
			}

			format(str, sizeof(str), "~w~Kategória: ~b~~h~%s~n~~w~\
									  Tárgy: ~b~~h~%s %d~n~~w~\
									  Slot: ~g~~h~%d~n~~n~\
									  ~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd",
								      Cat, Item, PlayerInfo[playerid][P_GlassesCount], GetPVarInt(playerid, "Slot"));


		}
		case WATCHES:
		{
			if((GetTickCount() - PlayerInfo[playerid][P_StyleTick]) < 200) return;

	        if(Keys & KEY_FIRE)
			{
			    TogglePlayerControllable(playerid, true);
			    ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!", szItems, "Választ", "Mégse");
			    g_PlayerData[playerid] &= ~e_ON_STYLE;
			}

			if(LEFTRIGHT > 0)
			{
			   StyleNextWatches(playerid);
			}
			else if(LEFTRIGHT < 0)
			{
			   StylePrevWatches(playerid);
			}
			format(str, sizeof(str), "~w~Kategória: ~b~~h~%s~n~~w~\
									  Tárgy: ~b~~h~%s %d~n~~w~\
									  Slot: ~g~~h~%d~n~~n~\
									  ~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd",
								      Cat, Item, PlayerInfo[playerid][P_WatchesCount], GetPVarInt(playerid, "Slot"));

		}
		case HATS:
		{
			if((GetTickCount() - PlayerInfo[playerid][P_StyleTick]) < 200) return;

	        if(Keys & KEY_FIRE)
			{
			    TogglePlayerControllable(playerid, true);
			    ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!", szItems, "Választ", "Mégse");
			    g_PlayerData[playerid] &= ~e_ON_STYLE;
			}

			if(LEFTRIGHT > 0)
			{
			   StyleNextHat(playerid);
			}
			else if(LEFTRIGHT < 0)
			{
			   StylePrevHat(playerid);
			}

			format(str, sizeof(str), "~w~Kategória: ~b~~h~%s~n~~w~\
									  Tárgy: ~b~~h~%s %d~n~~w~\
									  Slot: ~g~~h~%d~n~~n~\
									  ~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd",
								      Cat, Item, PlayerInfo[playerid][P_HatsCount], GetPVarInt(playerid, "Slot"));
		}
		case WEAPON:
		{
			if((GetTickCount() - PlayerInfo[playerid][P_StyleTick]) < 200) return;

	        if(Keys & KEY_FIRE)
			{
			    TogglePlayerControllable(playerid, true);
			    ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!", szItems, "Választ", "Mégse");
			    g_PlayerData[playerid] &= ~e_ON_STYLE;
			}

			if(LEFTRIGHT > 0)
			{
			   StyleNextWeapon(playerid);
			}
			else if(LEFTRIGHT < 0)
			{
			   StylePrevWeapon(playerid);
			}

			format(str, sizeof(str), "~w~Kategória: ~b~~h~%s~n~~w~\
									  Tárgy: ~b~~h~%s~n~~w~\
									  Slot: ~g~~h~%d~n~~n~\
									  ~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd",
								      Cat, Item, GetPVarInt(playerid, "Slot"));
		}
		case OTHERITEMS:
		{
			if((GetTickCount() - PlayerInfo[playerid][P_StyleTick]) < 200) return;

	        if(Keys & KEY_FIRE)
			{
			    TogglePlayerControllable(playerid, true);
			    ShowPlayerDialogEx(playerid, Style2, DIALOG_STYLE_LIST, "{" #XCOLOR_LIGHTBLUE "}Válazd ki mit szeretnél felvenni!", szItems, "Választ", "Mégse");
			    g_PlayerData[playerid] &= ~e_ON_STYLE;
			}

			if(LEFTRIGHT > 0)
			{
			   StyleNextOther(playerid);
			}
			else if(LEFTRIGHT < 0)
			{
			   StylePrevOther(playerid);
			}

			format(str, sizeof(str), "~w~Kategória: ~b~~h~%s~n~~w~\
									  Tárgy: ~b~~h~%s~n~~w~\
									  Slot: ~g~~h~%d~n~~n~\
									  ~w~Nyomd meg a(z) ~y~~k~~GO_LEFT~ ~w~or ~y~~k~~GO_RIGHT~ ~w~hogy váltogass.~n~Nyomd meg a(z) ~g~~k~~PED_FIREWEAPON~ ~w~hogy kiválazd",
								      Cat, Item, GetPVarInt(playerid, "Slot"));
		}
	}
    UpdateStyleTD(playerid, str);
	PlayerTextDrawShow(playerid, StyleTD[playerid]);
}

StylePrevOther(playerid)
{
	if(--PlayerInfo[playerid][P_OthersCount] < 0)
	{
	    PlayerInfo[playerid][P_OthersCount] = 19;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnOthersSetup(playerid);
}

StyleNextOther(playerid)
{
	if(++PlayerInfo[playerid][P_OthersCount] > 19)
	{
	    PlayerInfo[playerid][ P_OthersCount] = 0;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnOthersSetup(playerid);
}

StylePrevWeapon(playerid)
{
	PlayerInfo[playerid][P_WeaponsCount] --;
	switch(GetPVarInt(playerid, "Weapons"))
	{
		case 0:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] < 0)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 7;
			}
		}
		case 1:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] < 0)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 14;
			}
		}
		case 2:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] < 0)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 14;
			}
		}
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnWeaponsSetup(playerid);
}

StyleNextWeapon(playerid)
{
	PlayerInfo[playerid][P_WeaponsCount] ++ ;
	switch(GetPVarInt(playerid, "Weapons"))
	{
		case 0:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] > 7)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 0;
			}
		}
		case 1:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] > 14)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 0;
			}
		}
		case 2:
		{
			if(PlayerInfo[playerid][P_WeaponsCount] > 14)
			{
			    PlayerInfo[playerid][P_WeaponsCount] = 0;
			}
		}
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnWeaponsSetup(playerid);
}

StylePrevHat(playerid)
{
	if(--PlayerInfo[playerid][P_HatsCount] < 0)
	{
	    PlayerInfo[playerid][P_HatsCount] = 63;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnHatsSetup(playerid);
}

StyleNextHat(playerid)
{
	if(++PlayerInfo[playerid][P_HatsCount] > 63)
	{
	    PlayerInfo[playerid][P_HatsCount] = 0;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnHatsSetup(playerid);
}

StylePrevWatches(playerid)
{
	if(--PlayerInfo[playerid][P_WatchesCount] < 0)
	{
	    PlayerInfo[playerid][P_WatchesCount] = 14;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnWatchesSetup(playerid);
}

StyleNextWatches(playerid)
{
	if(++PlayerInfo[playerid][P_WatchesCount] > 14)
	{
	    PlayerInfo[playerid][P_WatchesCount] = 0;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnWatchesSetup(playerid);
}

StylePrevGlasses(playerid)
{
	if(--PlayerInfo[playerid][P_GlassesCount] < 0)
	{
	    PlayerInfo[playerid][P_GlassesCount] = 28;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnGlassesSetup(playerid);
}

StyleNextGlasses(playerid)
{
	if(++PlayerInfo[playerid][P_GlassesCount] > 28)
	{
	    PlayerInfo[playerid][P_GlassesCount] = 0;
	}
	PlayerPlaySound(playerid, 1053);
	PlayerInfo[playerid][P_StyleTick] = GetTickCount();
	OnGlassesSetup(playerid);
}

OnOthersSetup(playerid)
{
	if(PlayerInfo[playerid][P_OthersCount] == -1) return;

    switch(PlayerInfo[playerid][P_OthersCount])
	{
	    case 0: SetPlayerAttachedObject(playerid, 4, 19079, 1, 0.337032, -0.092037, 0.171890, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Parrot");
	    case 1: SetPlayerAttachedObject(playerid, 4, 19080, 5, 0.061411, 0.024249, 0.001824, 335.887145, 71.237144, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 1");
	    case 2: SetPlayerAttachedObject(playerid, 4, 19081, 5, 0.061411, 0.024249, 0.001824, 335.887145, 71.237144, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 2");
	    case 3: SetPlayerAttachedObject(playerid, 4, 19082, 5, 0.061411, 0.024249, 0.001824, 335.887145, 71.237144, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 3");
	    case 4: SetPlayerAttachedObject(playerid, 4, 19083, 5, 0.061411, 0.024249, 0.001824, 335.887145, 71.237144, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 4");
	    case 5: SetPlayerAttachedObject(playerid, 4, 19084, 5, 0.061411, 0.024249, 0.001824, 335.887145, 71.237144, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 5");
	    case 6: SetPlayerAttachedObject(playerid, 4, 19080, 6, 0.061411, 0.024249, 0.001824, 192.228958, 92.565963, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 1");
	    case 7: SetPlayerAttachedObject(playerid, 4, 19081, 6, 0.061411, 0.024249, 0.001824, 192.228958, 92.565963, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 2");
	    case 8: SetPlayerAttachedObject(playerid, 4, 19082, 6, 0.061411, 0.024249, 0.001824, 192.228958, 92.565963, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 3");
	    case 9: SetPlayerAttachedObject(playerid, 4, 19083, 6, 0.061411, 0.024249, 0.001824, 192.228958, 92.565963, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 4");
	    case 10: SetPlayerAttachedObject(playerid, 4, 19084, 6, 0.061411, 0.024249, 0.001824, 192.228958, 92.565963, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Laser 5"), OnHatsSetup(playerid);
	    case 11: SetPlayerAttachedObject(playerid, 4, 19136, 2, 0.114492, 0.010401, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Haj"), RemovePlayerAttachedObject(playerid, 2); // Hair4 - sombrerohat
		case 12: SetPlayerAttachedObject(playerid, 4, 19142, 1, 0.109654, 0.048008, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "SWAT Mellény"), OnHatsSetup(playerid); // SWATArmour1 - vesta
		case 13: SetPlayerAttachedObject(playerid, 4, 19159, 2, 0.030797, 0.048008, 0.000000, 0.000000, 267.745849, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Mirror Ball"), RemovePlayerAttachedObject(playerid, 2); // MirrorBall1 - headdisco
		case 14: SetPlayerAttachedObject(playerid, 4, 330, 2, 0.072811, 0.087509, 0.113657, 251.124908, 157.306625, 359.462097, 0.800000, 0.800000, 0.800000), SetPVarString(playerid, "Item", "Telefon"), OnHatsSetup(playerid); // cellphone - cellphone
		case 15: SetPlayerAttachedObject(playerid, 4, 339, 2, -0.041599, -0.021626, 0.149578, 1.009989, 163.989974, 146.011611, 0.800000, 0.800000, 0.800000), SetPVarString(playerid, "Item", "Katana Stab 1"); // katana - swordhead
		case 16: SetPlayerAttachedObject(playerid, 4, 339, 1, -0.134983, 0.161055, 0.149578, 307.616241, 163.989974, 146.011611, 0.800000, 0.800000, 0.800000), SetPVarString(playerid, "Item", "Katana Stab 2"); // katana - swordburta
		case 17: SetPlayerAttachedObject(playerid, 4, 341, 2, -0.142268, -0.214803, 0.435896, 311.341491, 166.186813, 96.577270, 0.800000, 0.800000, 0.800000), SetPVarString(playerid, "Item", "Chainsaw"), OnHatsSetup(playerid); // chnsaw - chainsaw neck
		case 18: SetPlayerAttachedObject(playerid, 4, 367, 2, 0.000180, -0.194320, -0.363765, 5.802183, 83.707130, 89.211784, 3.500000, 3.000000, 3.000000), SetPVarString(playerid, "Item", "Kamera Fej"), RemovePlayerAttachedObject(playerid, 2); // camera - camerahead
		case 19: SetPlayerAttachedObject(playerid, 4, 19078, 1, 0.327153, -0.238273, -0.025565, 6.325685, 356.464935, 347.150024, 2.999643, 3.000000, 3.000000), SetPVarString(playerid, "Item", "Giant Parrot"), OnHatsSetup(playerid); // TheParrot1 - parrot on neck

	}
}

OnWeaponsSetup(playerid)
{
	if(PlayerInfo[playerid][P_WeaponsCount] == -1) return;

	switch(GetPVarInt(playerid, "Weapons"))
	{
	    case 0:
	    {
		    switch(PlayerInfo[playerid][P_WeaponsCount])
			{
		        case 0: SetPlayerAttachedObject(playerid, 3, 352, 7, 0.000000, 0.000000, -0.037418, 274.691467, 359.872344, 8.555528, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Micro Uzi"); // micro_uzi - uzi
				case 1: SetPlayerAttachedObject(playerid, 3, 353, 7, 0.000000, -0.101285, -0.062459, 274.691467, 15.089937, 7.316575, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "MP4"); // mp5lng - mg
				case 2: SetPlayerAttachedObject(playerid, 3, 372, 7, 0.000000, -0.051934, -0.062459, 274.691467, 350.052795, 7.828396, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Tec9"); // tec9 - uzi
				case 3: SetPlayerAttachedObject(playerid, 3, 350, 7, -0.172478, -0.035401, -0.046362, 274.691467, 9.276988, 7.828396, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Sawnoff-Shotgun"); // sawnoff - shotgun
				case 4: SetPlayerAttachedObject(playerid, 3, 348, 7, -0.057326, -0.035401, -0.046362, 274.691467, 347.670471, 7.828396, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Desert Eagle"); // desert_eagle - eagle
				case 5: SetPlayerAttachedObject(playerid, 3, 347, 7, -0.057326, -0.035401, -0.046362, 274.691467, 1.932001, 7.828396, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Silenced Pistol"); // silenced - silent
				case 6: SetPlayerAttachedObject(playerid, 3, 346, 7, -0.050849, 0.005309, -0.047967, 296.219177, 354.757598, 359.853912, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Pistol"); // colt45 - pistol
				case 7: SetPlayerAttachedObject(playerid, 3, 339, 7, 0.086747, 0.032810, -0.047967, 296.219177, 153.988433, 359.853912, 1.001325, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Katana"); // katana - katana
			}
		}
		case 1:
		{
		    switch(PlayerInfo[playerid][P_WeaponsCount])
			{
			    case 0: SetPlayerAttachedObject(playerid, 3, 349, 1, 0.000000, -0.146130, 0.113561, 0.000000, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Shotgun"); // chromegun - shotgun back
				case 1: SetPlayerAttachedObject(playerid, 3, 351, 1, -0.157900, -0.123904, 0.141971, 0.000000, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Combat Shotgun"); // shotgspa - shotgun2 back
				case 2: SetPlayerAttachedObject(playerid, 3, 355, 1, -0.007261, -0.145549, 0.085259, 8.435976, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Ak47");// ak47 - ak back
				case 3: SetPlayerAttachedObject(playerid, 3, 356, 1, -0.007261, -0.145549, 0.085259, 8.435976, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "M4"); // m4 - m4back
				case 4: SetPlayerAttachedObject(playerid, 3, 357, 1, -0.007261, -0.145549, 0.085259, 8.435976, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Country Rifle"); // cuntgun - cutgun back
				case 5: SetPlayerAttachedObject(playerid, 3, 358, 1, -0.007261, -0.145549, 0.085259, 8.435976, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Sniper");// sniper - snier back
				case 6: SetPlayerAttachedObject(playerid, 3, 359, 1, 0.174202, -0.167903, -0.182665, 0.618259, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Rocket Launcher");// rocketla - rocketback
				case 7: SetPlayerAttachedObject(playerid, 3, 360, 1, 0.174202, -0.167903, -0.182665, 0.618259, 50.665954, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "HS Rocket Launcher");// heatseek - rocketback2
				case 8: SetPlayerAttachedObject(playerid, 3, 371, 1, 0.072832, -0.100511, -0.004808, 0.000000, 88.709381, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Parachute"); // gun_para - paraback
				case 9: SetPlayerAttachedObject(playerid, 3, 362, 1, -0.016015, -0.165608, 0.558013, 0.000000, 88.709381, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Minigun"); // minigun - minigunback
				case 10: SetPlayerAttachedObject(playerid, 3, 361, 1, -0.016015, -0.165608, 0.558013, 0.000000, 88.709381, 0.000000, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Flamethrower"); // flame - lameback
				case 11: SetPlayerAttachedObject(playerid, 3, 18632, 1, -0.191564, -0.123692, 0.210039, 4.430278, 301.897094, 21.352939, 1.000000, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Fishing Rod"); // FishingRod - backfishingrod
				case 12: SetPlayerAttachedObject(playerid, 3, 18633, 1, 0.067614, -0.112306, 0.049331, 10.768188, 32.195114, 266.670959, 0.990993, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Wrench"); // GTASAWrench1 - tzeava back
				case 13: SetPlayerAttachedObject(playerid, 3, 18634, 1, 0.067614, -0.112306, 0.049331, 10.768188, 32.195114, 266.670959, 0.990993, 1.000000, 1.000000), SetPVarString(playerid, "Item", "Crowbar"); // GTASACrowbar1 - screwdiver back
				case 14: SetPlayerAttachedObject(playerid, 3, 18635, 1, -0.148991, -0.182430, -0.042003, 8.372588, 56.759750, 8.818519, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Big Hammer"); // GTASAHammer1 - bighammerback
	        }
		}
		case 2:
		{
		    switch(PlayerInfo[playerid][P_WeaponsCount])
			{
				case 0: SetPlayerAttachedObject(playerid, 3, 357, 6, -0.094173, -0.027371, -0.071345, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Country Rifle"); // cuntgun - BIG NORMAL SHOTGUN
				case 1: SetPlayerAttachedObject(playerid, 3, 362, 6, -0.286588, -0.007757, 0.026663, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Minigun"); // minigun - BIG MINIGUN
				case 2: SetPlayerAttachedObject(playerid, 3, 348, 6, -0.059909, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Deser Eagle"); // desert_eagle - BIG EAGLE
				case 3: SetPlayerAttachedObject(playerid, 3, 347, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Silenced pistol"); // silenced - PISTOL
				case 4: SetPlayerAttachedObject(playerid, 3, 344, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Molotov"); // molotov - MOLOTOV
				case 5: SetPlayerAttachedObject(playerid, 3, 342, 6, -0.068243, -0.017168, -0.051978, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Grenade"); // grenade - grenade!
				case 6: SetPlayerAttachedObject(playerid, 3, 339, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Katana"); // katana - katana
				case 7: SetPlayerAttachedObject(playerid, 3, 338, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Katana"); // poolcue - katana
				case 8: SetPlayerAttachedObject(playerid, 3, 337, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Shovel"); // shovel - SHOVEL
				case 9: SetPlayerAttachedObject(playerid, 3, 336, 6, -0.060641, -0.026140, 0.124045, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Baseball Bat"); // bat - BAT
				case 10: SetPlayerAttachedObject(playerid, 3, 335, 6, -0.094780, -0.040289, -0.028835, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Knife"); // knifecur - knife
				case 11: SetPlayerAttachedObject(playerid, 3, 334, 6, -0.100756, -0.040289, 0.258847, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Police Stick"); // nitestick - police stick
				case 12: SetPlayerAttachedObject(playerid, 3, 333, 6, -0.064937, -0.051176, -0.051956, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Golf Cross"); // golfclub - golf cross
				case 13: SetPlayerAttachedObject(playerid, 3, 331, 6, -0.046102, -0.041808, -0.002409, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "BrassKnuckes"); // brassknuckle - ROZETTE
				case 14: SetPlayerAttachedObject(playerid, 3, 325, 6, -0.046102, -0.041808, 0.011599, 0.000000, 0.000000, 0.000000, 2.000000, 2.000000, 2.000000), SetPVarString(playerid, "Item", "Flowers"); // flowera - FLOWERS
	        }
		}
	}
}

OnHatsSetup(playerid)
{
	if(PlayerInfo[playerid][P_HatsCount] == -1) return;

	switch(PlayerInfo[playerid][P_HatsCount])
	{
	    case 0: SetPlayerAttachedObject(playerid, 2, 18639, 2, 0.145803, 0.002074, 0.002082, 0.000000, 0.000000, 351.335632, 1.000000, 1.000000, 1.000000);
	    case 1: SetPlayerAttachedObject(playerid, 2, 18945, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 2: SetPlayerAttachedObject(playerid, 2, 18946, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 3: SetPlayerAttachedObject(playerid, 2, 18947, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 4: SetPlayerAttachedObject(playerid, 2, 18948, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 5: SetPlayerAttachedObject(playerid, 2, 18949, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 6: SetPlayerAttachedObject(playerid, 2, 18950, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 7: SetPlayerAttachedObject(playerid, 2, 18951, 2, 0.138548, -0.000944, -0.001784, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 8: SetPlayerAttachedObject(playerid, 2, 18891, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 9: SetPlayerAttachedObject(playerid, 2, 18892, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
        case 10: SetPlayerAttachedObject(playerid, 2, 18893, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 11: SetPlayerAttachedObject(playerid, 2, 18894, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 12: SetPlayerAttachedObject(playerid, 2, 18895, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 13: SetPlayerAttachedObject(playerid, 2, 18896, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 14: SetPlayerAttachedObject(playerid, 2, 18897, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 15: SetPlayerAttachedObject(playerid, 2, 18898, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 16: SetPlayerAttachedObject(playerid, 2, 18899, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 17: SetPlayerAttachedObject(playerid, 2, 18900, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 18: SetPlayerAttachedObject(playerid, 2, 18901, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 19: SetPlayerAttachedObject(playerid, 2, 18902, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 20: SetPlayerAttachedObject(playerid, 2, 18903, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 21: SetPlayerAttachedObject(playerid, 2, 18904, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 22: SetPlayerAttachedObject(playerid, 2, 18905, 2, 0.120090, -0.004224, 0.003259, 92.575668, 318.903656, 266.854156, 1.095653, 1.000000, 1.000000);
	    case 23: SetPlayerAttachedObject(playerid, 2, 18906, 2, 0.111122, 0.003893, 0.005293, 278.877868, 1.905180, 265.201293, 1.040965, 1.019057, 1.016073);
	    case 24: SetPlayerAttachedObject(playerid, 2, 18907, 2, 0.111122, 0.003893, 0.005293, 278.877868, 1.905180, 265.201293, 1.040965, 1.019057, 1.016073);
	    case 25: SetPlayerAttachedObject(playerid, 2, 18908, 2, 0.111122, 0.003893, 0.005293, 278.877868, 1.905180, 265.201293, 1.040965, 1.019057, 1.016073);
	    case 26: SetPlayerAttachedObject(playerid, 2, 18909, 2, 0.111122, 0.003893, 0.005293, 278.877868, 1.905180, 265.201293, 1.040965, 1.019057, 1.016073);
	    case 27: SetPlayerAttachedObject(playerid, 2, 18910, 2, 0.111122, 0.003893, 0.005293, 278.877868, 1.905180, 265.201293, 1.040965, 1.019057, 1.016073);
	    case 28: SetPlayerAttachedObject(playerid, 2, 19064, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 29: SetPlayerAttachedObject(playerid, 2, 19065, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 30: SetPlayerAttachedObject(playerid, 2, 19066, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 31: SetPlayerAttachedObject(playerid, 2, 19067, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 32: SetPlayerAttachedObject(playerid, 2, 19068, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 33: SetPlayerAttachedObject(playerid, 2, 19069, 2, 0.121569, 0.016838, -0.003399, 70.424720, 92.622444, 15.384517, 1.015531, 1.000000, 1.000000);
	    case 34: SetPlayerAttachedObject(playerid, 2, 18944, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 35: SetPlayerAttachedObject(playerid, 2, 18945, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 36: SetPlayerAttachedObject(playerid, 2, 18946, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 37: SetPlayerAttachedObject(playerid, 2, 18947, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 38: SetPlayerAttachedObject(playerid, 2, 18948, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 39: SetPlayerAttachedObject(playerid, 2, 18949, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 40: SetPlayerAttachedObject(playerid, 2, 18950, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 41: SetPlayerAttachedObject(playerid, 2, 18951, 2, 0.139893, 0.000000, 0.000000, 0.000000, 2.564162, 351.080108, 1.000000, 1.000000, 1.000000);
	    case 42: SetPlayerAttachedObject(playerid, 2, 18952, 2, 0.100579, 0.013304, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 43: SetPlayerAttachedObject(playerid, 2, 18953, 2, 0.103609, 0.022527, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 44: SetPlayerAttachedObject(playerid, 2, 18954, 2, 0.103609, 0.022527, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	    case 45: SetPlayerAttachedObject(playerid, 2, 18963, 2, 0.095467, 0.020559, 0.000000, 92.176620, 85.727653, 0.249053, 1.032554, 1.037467, 1.048217);
	    case 46: SetPlayerAttachedObject(playerid, 2, 18964, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 47: SetPlayerAttachedObject(playerid, 2, 18965, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 48: SetPlayerAttachedObject(playerid, 2, 18966, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 49: SetPlayerAttachedObject(playerid, 2, 18967, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 51: SetPlayerAttachedObject(playerid, 2, 18968, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 52: SetPlayerAttachedObject(playerid, 2, 18969, 2, 0.111832, 0.015706, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 53: SetPlayerAttachedObject(playerid, 2, 18970, 2, 0.111832, 0.023713, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 54: SetPlayerAttachedObject(playerid, 2, 18971, 2, 0.111832, 0.023713, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 55: SetPlayerAttachedObject(playerid, 2, 18972, 2, 0.111832, 0.023713, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 56: SetPlayerAttachedObject(playerid, 2, 18973, 2, 0.111832, 0.023713, 0.004162, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 57: SetPlayerAttachedObject(playerid, 2, 18974, 2, 0.091211, 0.027773, 0.000101, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 58: SetPlayerAttachedObject(playerid, 2, 18976, 2, 0.091211, 0.027773, 0.002193, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 59: SetPlayerAttachedObject(playerid, 2, 18977, 2, 0.091211, 0.027773, 0.002193, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 61: SetPlayerAttachedObject(playerid, 2, 18978, 2, 0.091211, 0.027773, 0.002193, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 62: SetPlayerAttachedObject(playerid, 2, 18979, 2, 0.091211, 0.027773, 0.002193, 92.176620, 85.727653, 0.249053, 1.045267, 1.080195, 1.048217);
	    case 63: SetPlayerAttachedObject(playerid, 2, 18975, 2, 0.096168, -0.009509, -0.002124, 3.942180, 353.317657, 0.249053, 1.000000, 1.000000, 1.000000);
	}
}

OnWatchesSetup(playerid)
{
	if(PlayerInfo[playerid][P_WatchesCount] == -1) return;

	switch(GetPVarInt(playerid, "wHand"))
	{
		case LEFT: SetPlayerAttachedObject(playerid, 1, 19039 + PlayerInfo[playerid][P_WatchesCount], 5, 0.000000, -0.008285, -0.007307, 63.175521, 67.837768, 118.995666, 1.004594);
		case RIGHT: SetPlayerAttachedObject(playerid, 1, 19039 + PlayerInfo[playerid][P_WatchesCount], 6, 0.000000, -0.005132, 0.007088, 63.175521, 67.837768, 118.995666);
	}
}

OnGlassesSetup(playerid)
{
	if(PlayerInfo[playerid][P_GlassesCount] == -1) return;

    SetPlayerAttachedObject(playerid, 0, 19007 + PlayerInfo[playerid][P_GlassesCount], 2, 0.087931, 0.037977, -0.002010, 92.431961, 73.191658, 0.000000);
}

stock Elevator_Initialize()
{
	// Initializes the elevator.
	Obj_Elevator 			= CreateDynamicObjectEx(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObjectEx(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObjectEx(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("Lift használata: 'F'", 0xFFFFDD, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new
		Float:z;
	for(new i; i != sizeof(Obj_FloorDoors); i++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObjectEx(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObjectEx(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		country[0] = EOS;
		strunpack(name, g_szFloorNames[i], 24);

		strcat(country, name);
		strcat(country, "\nLift hívása: 'F'");

		if(!i)
		{
		    z = 13.4713;
		}
		else
		{
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);
		}
		Create3DTextLabel(country, 0xFFFFDD, 1783.9799, -1300.7660, z, 10.5, 0, 1);
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();
	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.
	new
		Float:x,
		Float:y,
		Float:z;
	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);
	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.
    if(ElevatorState == ELEVATOR_STATE_MOVING) return 0;

    new
		Float:x,
		Float:y,
		Float:z;
	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.
    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);
	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.
    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);
	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).
	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, false, "i", floorid);
	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();
	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.
	for(new i; i < sizeof(ElevatorQueue) - 1; i++)
	{
	    ElevatorQueue[i] = ElevatorQueue[i + 1];
	}
	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;
	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new
		slot = -1;
	for(new i; i != sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE) ReadNextFloorInQueue();
	    return 1;
	}
	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.
	for(new i; i != sizeof(ElevatorQueue); i++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.
	for(new i; i != sizeof(ElevatorQueue); i++)
	{
	    if(ElevatorQueue[i] == floorid) return 1;
	}
	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.
	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR) return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);
	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i != sizeof(FloorRequestedBy); i++)
	{
		if(FloorRequestedBy[i] == playerid) return 1;
	}
	return 0;
}

stock ShowElevatorDialog(playerid)
{
	dline[0] = EOS;
	for(new i; i != sizeof(ElevatorQueue); i++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID) strcat(dline, "{FF0000}");

        strunpack(name, g_szFloorNames[i]);
	    strcat(dline, name);
	    strcat(dline, "\n");
	}

	ShowPlayerDialogEx(playerid, DIALOG_ELEVATOR, DIALOG_STYLE_LIST, "Irodaház Lift", dline, "Lehív", "Mégse");
	return 1;
}

stock ShowKeychangeDialog()
{
    dline[0] = EOS;
    strcat(dline, "Lentre írd be az egyik gombnak a számát:\n");
	for(new i; i != sizeof(g_szKeyChanegeMenu); i++)
	{
		strunpack(i_str, g_szKeyChanegeMenu[i], 33);
		strcat(dline, "{" #XCOLOR_BLUE "}");
		strcat(dline, i_str);
	    strcat(dline, "\n");
	}
	strcat(dline, "\n{" #XCOLOR_BLUE "}Kikapcsolás\t\t\t\t-2\n");
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).
	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid)) return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);
	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);

stock AddPlayerToClearworld(playerid)
{
	if(!(g_PlayerData[playerid] & e_CLEARWORLD))
	{
        DestroyPlayerObjects(playerid);
	}
    g_PlayerData[playerid] |= e_CLEARWORLD;

    Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, false);
	Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
}

stock CreateTextDraws(playerid)
{
	new
		PlayerText:TD_ID;

	// Welcome
	if(GetPVarInt(playerid,"LineID") == 3) TD_ID = CreatePlayerTextDraw(playerid, 16.000000, 165.000000, "_");
	else TD_ID = CreatePlayerTextDraw(playerid, 16.000000, 121.000000, "_");
	
	SetPVarInt(playerid, "Wtel", _:TD_ID);
	PlayerTextDrawUseBox(playerid, TD_ID, 1);
	PlayerTextDrawBoxColor(playerid, TD_ID, 0x00000033);
	PlayerTextDrawTextSize(playerid, TD_ID, 149.000000,0.000000);
	PlayerTextDrawAlignment(playerid, TD_ID, 0);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 0x000000ff);
	PlayerTextDrawFont(playerid, TD_ID, 1);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.299999, 1.100000);
	PlayerTextDrawColor(playerid, TD_ID, 0xffffffff);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);
	PlayerTextDrawSetShadow(playerid, TD_ID, 1);

	// Info TD
	TD_ID = CreatePlayerTextDraw(playerid, 165.000000, 371.000000, "_");
	SetPVarInt(playerid, "InfoTD", _:TD_ID);
	PlayerTextDrawAlignment(playerid, TD_ID, 1);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 0x000000ff);
	PlayerTextDrawFont(playerid, TD_ID, 1);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.299999, 1.200000);
	PlayerTextDrawColor(playerid, TD_ID, 0xffffffff);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);
	PlayerTextDrawSetShadow(playerid, TD_ID, 1);

	// Race Time
    TD_ID = CreatePlayerTextDraw(playerid, 497.000000, 229.000000, "_");
	SetPVarInt(playerid, "RaceTime", _:TD_ID);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 0xFF);
	PlayerTextDrawFont(playerid, TD_ID, 2);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.250000, 1.100000);
	PlayerTextDrawColor(playerid, TD_ID, -1);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);

	// Race CP
    TD_ID = CreatePlayerTextDraw(playerid, 497.000000, 243.000000, "_");
	SetPVarInt(playerid, "RaceCP", _:TD_ID);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 0xFF);
	PlayerTextDrawFont(playerid, TD_ID, 2);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.250000, 1.100000);
	PlayerTextDrawColor(playerid, TD_ID, -1);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);

	// Race Rank
	TD_ID = CreatePlayerTextDraw(playerid, 497.000000, 256.000000, "_");
	SetPVarInt(playerid, "RaceRank", _:TD_ID);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 255);
	PlayerTextDrawFont(playerid, TD_ID, 2);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.250000, 1.100000);
	PlayerTextDrawColor(playerid, TD_ID, -1);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);

	format(tmp, sizeof(tmp), "Hit: 0, Id§: 0:00.000, Record: %d:%02d.%03d", Range[e_ConvertedTime][0], Range[e_ConvertedTime][1], Range[e_ConvertedTime][2]);
    TD_ID = CreatePlayerTextDraw(playerid, 173.000000, 400.000000, tmp); // 410
	SetPVarInt(playerid, "ShotRangeTD", _:TD_ID);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 0xFF);
	PlayerTextDrawFont(playerid, TD_ID, 2);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.259999, 1.100000);
	PlayerTextDrawColor(playerid, TD_ID, -1);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);
	PlayerTextDrawUseBox(playerid, TD_ID, 1);
	PlayerTextDrawBoxColor(playerid, TD_ID, 51);
	PlayerTextDrawTextSize(playerid, TD_ID, 547.000000, 6.000000);

    TD_ID = CreatePlayerTextDraw(playerid, 487.000000, 333.000000, "_"); // ~w~+1 hit ~g~-150 dmg
	SetPVarInt(playerid, "DamageTD", _:TD_ID);
	PlayerTextDrawBackgroundColor(playerid, TD_ID, 255);
	PlayerTextDrawFont(playerid, TD_ID, 3);
	PlayerTextDrawLetterSize(playerid, TD_ID, 0.480000, 1.900000);
	PlayerTextDrawColor(playerid, TD_ID, -1);
	PlayerTextDrawSetOutline(playerid, TD_ID, 1);
	PlayerTextDrawSetProportional(playerid, TD_ID, 1);

    StyleTD[playerid] = CreatePlayerTextDraw(playerid, 44.000000, 240.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, StyleTD[playerid], 0xFF);
	PlayerTextDrawFont(playerid, StyleTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, StyleTD[playerid], 0.370000, 1.200000);
	PlayerTextDrawColor(playerid, StyleTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, StyleTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, StyleTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StyleTD[playerid], 1);

	TDamageTD[playerid] = CreatePlayerTextDraw(playerid, 53.000000, 324.000000, "~r~Damage: ~h~-15.0");
	PlayerTextDrawBackgroundColor(playerid, TDamageTD[playerid], 255);
	PlayerTextDrawFont(playerid, TDamageTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TDamageTD[playerid], 0.270000, 0.899999);
	PlayerTextDrawColor(playerid, TDamageTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TDamageTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDamageTD[playerid], 1);

	g_XPText[playerid] = CreatePlayerTextDraw(playerid, 484.000000, 405.000000, "_"); // XP: ~g~369~r~/~p~428
	PlayerTextDrawBackgroundColor(playerid, g_XPText[playerid], 255);
	PlayerTextDrawFont(playerid, g_XPText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, g_XPText[playerid], 0.240000, 1.100000);
	PlayerTextDrawColor(playerid, g_XPText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, g_XPText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, g_XPText[playerid], 1);

	g_SzintText[playerid] = CreatePlayerTextDraw(playerid, 577, 404.000000, "1");
	PlayerTextDrawBackgroundColor(playerid, g_SzintText[playerid], 920449430);
	PlayerTextDrawFont(playerid, g_SzintText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, g_SzintText[playerid], 0.829999, 2.500000);
	PlayerTextDrawColor(playerid, g_SzintText[playerid], -16776961);
	PlayerTextDrawSetOutline(playerid, g_SzintText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, g_SzintText[playerid], 1);

	XP_BonusText[playerid] = CreatePlayerTextDraw(playerid, 438, 410.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, XP_BonusText[playerid], 255);
	PlayerTextDrawFont(playerid, XP_BonusText[playerid], 3);
	PlayerTextDrawLetterSize(playerid, XP_BonusText[playerid], 0.419997, 1.499999);
	PlayerTextDrawColor(playerid, XP_BonusText[playerid], 16711935);
	PlayerTextDrawSetOutline(playerid, XP_BonusText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, XP_BonusText[playerid], 1);
	PlayerTextDrawShow(playerid, XP_BonusText[playerid]);

	g_XPPos[playerid] = CreatePlayerTextDraw(playerid, 487.000000, 422.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, g_XPPos[playerid], 255);
	PlayerTextDrawFont(playerid, g_XPPos[playerid], 2);
	PlayerTextDrawLetterSize(playerid, g_XPPos[playerid], 0.899999, -0.199999);
	PlayerTextDrawColor(playerid, g_XPPos[playerid], -1);
	PlayerTextDrawSetOutline(playerid, g_XPPos[playerid], 1);
	PlayerTextDrawSetProportional(playerid, g_XPPos[playerid], 1);
	PlayerTextDrawUseBox(playerid, g_XPPos[playerid], 1);
	PlayerTextDrawBoxColor(playerid, g_XPPos[playerid], -1); // pb_percent(x, width, max, 1.0)
	PlayerTextDrawTextSize(playerid, g_XPPos[playerid], pb_percent(490.0, 70.0, 72.0, 0.0), 0.0);

	// Ház feltörés text
	TD_pKijelzo[playerid] = CreatePlayerTextDraw(playerid, 129.000000, 105.000000, "~b~~h~NULL");
	PlayerTextDrawBackgroundColor(playerid, TD_pKijelzo[playerid], 255);
	PlayerTextDrawFont(playerid, TD_pKijelzo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TD_pKijelzo[playerid], 0.430000, 1.100000);
	PlayerTextDrawColor(playerid, TD_pKijelzo[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_pKijelzo[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_pKijelzo[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_pKijelzo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_pKijelzo[playerid], 0);

    g_pKijelzoText[playerid] = "~b~~h~NULL";

	// Póstás idõ textdraw
	TD_pPostasTime[playerid] = CreatePlayerTextDraw(playerid, 497.000000, 229.000000, "~p~Eltelt id§: 0 mp");
	PlayerTextDrawBackgroundColor(playerid, TD_pPostasTime[playerid], 255);
	PlayerTextDrawFont(playerid, TD_pPostasTime[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_pPostasTime[playerid], 0.250000, 1.100000);
	PlayerTextDrawColor(playerid, TD_pPostasTime[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_pPostasTime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_pPostasTime[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_pPostasTime[playerid], 0);

	InDMKills[playerid] = CreatePlayerTextDraw(playerid, 463.000000, 389.000000, "~>~lsek: 0 ~r~~h~Hallok: 0 ~w~(0.0) ~b~~h~XP: 0~<~");
	PlayerTextDrawBackgroundColor(playerid, InDMKills[playerid], 255);
	PlayerTextDrawFont(playerid, InDMKills[playerid], 1);
	PlayerTextDrawLetterSize(playerid, InDMKills[playerid], 0.219998, 1.099997);
	PlayerTextDrawColor(playerid, InDMKills[playerid], -336919041);
	PlayerTextDrawSetOutline(playerid, InDMKills[playerid], 1);
	PlayerTextDrawSetProportional(playerid, InDMKills[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, InDMKills[playerid], 0);

	TD_InDMPlayers[playerid] = CreatePlayerTextDraw(playerid, 100.000000, 437.000000, "~g~~h~Gangwar: ~h~0 ~w~/ ~b~~h~CTC: ~h~0 ~w~/ ~y~~h~Derby: ~h~0 ~w~/ ~r~~h~Fallout: ~h~0 ~w~/ ~p~Race: ~h~0 ~w~/ ~y~Area51: ~h~0 ~w~/ ~r~~h~HajoDM: ~h~0 ~w~/ ~y~~h~MGM: 0 ~w~/ ~b~SniperDM: 0 ~w~/ Stock4DM: 5");
	PlayerTextDrawBackgroundColor(playerid, TD_InDMPlayers[playerid], 255);
	PlayerTextDrawFont(playerid, TD_InDMPlayers[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_InDMPlayers[playerid], 0.190000, 0.899999);
	PlayerTextDrawColor(playerid, TD_InDMPlayers[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_InDMPlayers[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_InDMPlayers[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_InDMPlayers[playerid], 0);

	TD_DMInfoSettings[playerid] = CreatePlayerTextDraw(playerid, 49.000000, 426.000000, "~w~speedboost: ~g~~h~on ~w~jump: ~r~~h~off~n~~w~carfly: ~g~~h~on ~w~fly: ~r~~h~off");
	PlayerTextDrawBackgroundColor(playerid, TD_DMInfoSettings[playerid], 255);
	PlayerTextDrawFont(playerid, TD_DMInfoSettings[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TD_DMInfoSettings[playerid], 0.159997, 0.999997);
	PlayerTextDrawColor(playerid, TD_DMInfoSettings[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_DMInfoSettings[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_DMInfoSettings[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_DMInfoSettings[playerid], 0);

	TD_pHealth[playerid] = CreatePlayerTextDraw(playerid, 566.000000, 67.000000, "90");
	PlayerTextDrawBackgroundColor(playerid, TD_pHealth[playerid], 255);
	PlayerTextDrawFont(playerid, TD_pHealth[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_pHealth[playerid], 0.340000, 0.699998);
	PlayerTextDrawColor(playerid, TD_pHealth[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_pHealth[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_pHealth[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_pHealth[playerid], 0);

	TD_pArmour[playerid] = CreatePlayerTextDraw(playerid, 566.000000, 44.700000, "~r~~h~50");
	PlayerTextDrawBackgroundColor(playerid, TD_pArmour[playerid], 255);
	PlayerTextDrawFont(playerid, TD_pArmour[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_pArmour[playerid], 0.340000, 0.699998);
	PlayerTextDrawColor(playerid, TD_pArmour[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_pArmour[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_pArmour[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_pArmour[playerid], 0);

	TD_pGPS[playerid] = CreatePlayerTextDraw(playerid, 134.000000, 403.000000, "~r~~h~GPS: ~w~Ismeretlen");
	PlayerTextDrawBackgroundColor(playerid, TD_pGPS[playerid], 136);
	PlayerTextDrawFont(playerid, TD_pGPS[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TD_pGPS[playerid], 0.230000, 1.000000);
	PlayerTextDrawColor(playerid, TD_pGPS[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_pGPS[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_pGPS[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_pGPS[playerid], 0);

	TD_Spec[playerid] = CreatePlayerTextDraw(playerid, 498.000000, 149.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, TD_Spec[playerid], 255);
	PlayerTextDrawFont(playerid, TD_Spec[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TD_Spec[playerid], 0.230000, 0.900000);
	PlayerTextDrawColor(playerid, TD_Spec[playerid], -65281);
	PlayerTextDrawSetOutline(playerid, TD_Spec[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Spec[playerid], 1);

	TD_Datum[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 22.000000, "2012.12.24");
	PlayerTextDrawBackgroundColor(playerid, TD_Datum[playerid], 255);
	PlayerTextDrawFont(playerid, TD_Datum[playerid], 3);
	PlayerTextDrawLetterSize(playerid, TD_Datum[playerid], 0.319997, 1.399999);
	PlayerTextDrawColor(playerid, TD_Datum[playerid], 16777215);
	PlayerTextDrawSetOutline(playerid, TD_Datum[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Datum[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Datum[playerid], 0);

	TD_Ido[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 33.000000, "24:00:00");
	PlayerTextDrawBackgroundColor(playerid, TD_Ido[playerid], 255);
	PlayerTextDrawFont(playerid, TD_Ido[playerid], 3);
	PlayerTextDrawLetterSize(playerid, TD_Ido[playerid], 0.319997, 1.399999);
	PlayerTextDrawColor(playerid, TD_Ido[playerid], 16777215);
	PlayerTextDrawSetOutline(playerid, TD_Ido[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_Ido[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_Ido[playerid], 0);
	
	//speedo
	Speedo[playerid][0] = CreatePlayerTextDraw(playerid, 481.000000,346.000000,"_"); //Felsõ
	PlayerTextDrawUseBox(playerid, Speedo[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, Speedo[playerid][0], 0x000000ff);
	PlayerTextDrawTextSize(playerid, Speedo[playerid][0], 561.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, Speedo[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][0], 0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][0], 0.499999, -0.099999);
	PlayerTextDrawColor(playerid, Speedo[playerid][0], 0xffffffff);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][0], 1);

	Speedo[playerid][1] = CreatePlayerTextDraw(playerid, 481.000000,346.000000,"_"); //Bal csík
	PlayerTextDrawUseBox(playerid, Speedo[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, Speedo[playerid][1], 0x000000ff);
	PlayerTextDrawTextSize(playerid, Speedo[playerid][1] ,480.000000,47.000000);
	PlayerTextDrawAlignment(playerid, Speedo[playerid][1] ,0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][1] ,0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][1] ,3);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][1] ,1.000000,6.299997);
	PlayerTextDrawColor(playerid, Speedo[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][1] ,1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][1] ,1);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][1] ,1);

	Speedo[playerid][2] = CreatePlayerTextDraw(playerid, 481.000000,404.000000,"_"); //Alsó csík
	PlayerTextDrawUseBox(playerid, Speedo[playerid][2],1);
    PlayerTextDrawBoxColor(playerid, Speedo[playerid][2], 0x000000ff);
    PlayerTextDrawTextSize(playerid, Speedo[playerid][2],561.000000,47.000000);
    PlayerTextDrawAlignment(playerid, Speedo[playerid][2],0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][2],0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][2],3);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][2],1.000000,-0.100000);
	PlayerTextDrawColor(playerid, Speedo[playerid][2],0x000000ff);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][2],1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][2],1);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][2],1);

	Speedo[playerid][3] = CreatePlayerTextDraw(playerid, 562.000000,346.000000,"_"); //Jobb csík
	PlayerTextDrawUseBox(playerid, Speedo[playerid][3],1);
	PlayerTextDrawBoxColor(playerid, Speedo[playerid][3], 0x000000ff);
	PlayerTextDrawTextSize(playerid, Speedo[playerid][3],561.000000,0.000000);
	PlayerTextDrawAlignment(playerid, Speedo[playerid][3],0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][3],0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][3],3);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][3],1.100000,6.299997);
	PlayerTextDrawColor(playerid, Speedo[playerid][3],0x000000ff);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][3],1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][3],1);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][3],1);

	Speedo[playerid][4] = CreatePlayerTextDraw(playerid, 484.000000,348.000000,"_"); //Háttér
	PlayerTextDrawUseBox(playerid, Speedo[playerid][4],1);
	PlayerTextDrawBoxColor(playerid, Speedo[playerid][4], 0x00000033);
	PlayerTextDrawTextSize(playerid, Speedo[playerid][4],558.000000,0.000000);
	PlayerTextDrawAlignment(playerid, Speedo[playerid][4],0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][4],0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][4],3);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][4],1);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][4],1.000000,6.120000);
	PlayerTextDrawColor(playerid, Speedo[playerid][4],0x00000033);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][4],1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][4],1);

    //Speedo adatok
    Speedo[playerid][5] = CreatePlayerTextDraw(playerid, 485.000000, 348.000000, "_");
	PlayerTextDrawAlignment(playerid, Speedo[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][5], 0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][5], 0.299999, 1.000000);
	PlayerTextDrawColor(playerid, Speedo[playerid][5], 0xffffffff);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Speedo[playerid][5], 1);

    //Speedometer megtektt Km
   	Speedo[playerid][6] = CreatePlayerTextDraw(playerid, 485, 392.5, "_");
	PlayerTextDrawBackgroundColor(playerid, Speedo[playerid][6], 0x000000ff);
	PlayerTextDrawFont(playerid, Speedo[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Speedo[playerid][6], 0.299999, 1.000000);
	PlayerTextDrawColor(playerid, Speedo[playerid][6], 0xffffffff);
	PlayerTextDrawSetOutline(playerid, Speedo[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, Speedo[playerid][6], 1);

	#if defined YSF
	if(IsClient(playerid))
	{
		PlayerTextDrawSetPos(playerid, TD_pArmour[playerid], 566.000000, 48.20000);
		PlayerTextDrawSetPos(playerid, TD_pHealth[playerid], 541.000000, 77.000000);
	}
	#endif
}

stock RemovePlayerFromClearworld(playerid)
{
	if(g_PlayerData[playerid] & e_CLEARWORLD)
	{
        CreatePlayerObjects(playerid);
	}
    g_PlayerData[playerid] &= ~e_CLEARWORLD;

	Streamer_ToggleItemUpdate(playerid, STREAMER_TYPE_OBJECT, true);
    g_PlayerData[playerid] &= ~e_CLEARWORLD_NOOBJECTS;
}

stock CreatePlayerObjects(playerid)
{
	new
	    i;
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,-967.046,-1756.921,947.537,0.0,0.0,180.000); // Glass Jump ( /gj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,-2818.012,-929.927,914.779,0.0,0.0,-56.250); // Chilliad Jump ( /mcj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,-1528.974,139.922,410.374,0.0,0.0,180.000); // San Fierro Jump ( /sfj )
	//g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,856.781,2501.886,248.000,0.0,0.0,-180.154); // AA jump ( /aa2 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,3699.024,-473.186,338.625,0.0,0.0,-90.077); // Bounce ( /bounce )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 1844.820801, 151.884232, 210.040848, 359.1406, 17.1887, 177.4990); // Loop ( /loop1 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,607.596,2233.157,940.345,0.0,0.0,-179.622); // Bikejump ( /bj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 941.538, -1387.319, 654.160, 0.0, 0.0, 0.0); // Pipejump ( /pj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,865.293,255.333,587.316,0.0,0.0,110.008); // Quarry Jump ( /qj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,-1296.403,-1665.809,538.216,0.0,0.0,-6.016); // SkiRamp ( /skiramp )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 493.427, -35.034, 680.793, 0.0, 0.0, -180.000); // Bug Loop ( /hl )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,310.667,5487.085,3426.452,0.0,0.0,-89.381); // Drop ( /drop )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,171.207,-3783.523,21736.051,0.0,-346.250,-307.575); // Going Down ( /gd )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,5819.642,-1844.713,232.408,0.0,0.0,0.0); // Derby 6
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 945.897339, 143.516373, 301.298676, 18.9076, 0.0000, 269.1406); // Twist ( /twist )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 3361.1708984375, 167.08526611328, 458.92825317383, 0, 0, 0); // BigLoop ( /bigloop )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867,-1427.396,569.376,6.102,0.0,0.0,0.0); // ShipStunt ( /shipstunt )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867,-2862.073,-329.908,3.549,0.0,0.0,-93.679); // RaceMap ( /racemap )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 19072, 1231.138671, 269.469726, 561.224365, 0.000000, 0.000000, 0.000000); // WaterJump2 (0.3c) ( /wj2 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 5794,4200.000,1871.350,2835.101,0.0,0.0,0.0); // LoopFun ( /lf )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867,-2862.073,-329.908,3.549,0.0,0.0,-93.679); // RaceMap ( /racemap )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867,-2862.073,-542.055,3.549,0.0,0.0,-91.100); // RaceMap ( /racemap )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 2057.7131347656, 353.24221801758, 549.86639404297, 0, 0, 89.744995117188); // LV Jump ( /lvj )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 1637.3541259766, -1244.1420898438, 458.3678894043, 0, 0, 180.04052734375); // Multi Jump ( /mj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 77.375565, -1796.358887, 958.094299, 0.0000, 0.0000, 0.0000); // Death Jump ( /dj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 910.33984375, -287.1298828125, 509.70825195313, 0, 0, 163.85009765625); // Red Country Jump ( /rcj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, -2305.032958, 1197.294677, 402.786132, 0.000000, 0.000000, 0.000000); // Super Loog ( /loop3 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18450,1580.169,-1179.325,276.569,0.0,0.0,-90.000); // BigDrag ( /drag5 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 2445.4351, -3092.3477, 12.6941, 0.0000, 0.0000, 0.0000); // Circuit ( /circuit )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 16207, 6450.396484375, 553.0283203125, -39.16170501709, 355.49560546875, 0, 0.7470703125); // NMSS Jail ( /nmjail )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,1849.148,-905.813,400.923,0.0,0.0,270.000); // Jump 2 / Smalljump ( /sj )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,6980.218,-1418.194,68.772,0.0,0.0,90.000); // Fun 2 / Falldown ( /falldown )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 16056,436.384,1026.902,5028.005,0.0,0.0,90.000); // SniperDM ( /sniperdm )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 16056,577.019,1023.827,5027.878,0.0,0.0,-93.438); // SniperDM ( /sniperdm )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 5644, -1679.74, 2020.82, 1112.58,   90.24, 0.00, -56.25); // Jizzy Jump ( /jj )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18751, 4555.50, -80.13, 5.68,   0.00, 0.00, 0.00); // MyIsland || Islanddm ( /islanddm )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -12.600080, 1541.148804,  94.431061, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -12.596479, 1529.848267,  94.431427, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -12.606895, 1510.512329,  94.434296, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -24.516413, 1510.504517,  94.423111, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -33.372280, 1510.526733,  94.417885, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -33.368999, 1521.822754,  94.410744, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -24.501865, 1541.143677,  94.420128, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3851,   -33.386833, 1541.134033,  94.410126, 0.000,269.8631,   0.0000); // GlassMadness
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17310, -2847.246338, 2185.518311, 798.000000,0.0000,180.3777,  0.0000); // FreeWay
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17310, -2847.329590, 2197.264404, 798.000000,0.0000,180.3777,  0.0000); // FreeWay
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17310, -2847.347656, 2201.005859, 799.250977,13.7510,180.3777, 0.0000); // FreeWay
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17864, 3757.21, -2351.20, 2.29,   0.00, 0.00, 0.00); // VIPIsland ( /vipisland )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17864, -2812.83, 2923.55, 9.15,   0.00, 0.00, 0.00); // KartTrack ( /karttrack )
 	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 1071.05, -3808.26, 57.16,   0.00, 0.00, 0.00); // MGM 2
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 1071.62, -3945.86, 57.14,   0.00, 0.00, 0.00); // MGM 2
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 1111.00, -3808.23, 57.16,   0.00, 0.00, 0.00); // MGM 2
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 1110.98, -3945.88, 57.13,   0.00, 0.00, 0.00); // MGM 2
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 17001,355.466,-2745.858,0.607,0.0,0.0,0.0); // Gyár | Just Cause 2 ( /oil )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18225, 4473.20703125, -2213.185546875, -0.8189697265625, 8.8824462890625, 12.996826171875, 223.77502441406); // Green Valley
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867, 4412.16 + 300, -1305.15, 1.87,   0.00, 0.00, 270.00);
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867, -701.07122802734, 1921.4342041016, 5.9027509689331, 0, 0, 0); // Dam Stunt 2 ( /dam2 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 10398, -768.22, -540.67, 26.49 + 1500,   0.00, 0.00, 0.00); // World At War ( /waw )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 13049, -761.68, -389.12, 0.62 + 1500,   0.00, 0.00, 0.00); // World At War ( /waw )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18800, 2282.69, 1896.36, 406.07,   0.00, 0.00, 0.00); // Drift 21 ( /drift21 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18783, -2671.44, 1937.08, 213.90,   0.00, 0.00, 0.00); // Roller Coaster 2 ( /rc2 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18783, -2691.40, 1937.08, 213.90,   0.00, 0.00, 0.00); // Roller Coaster 2 ( /rc2 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 9241,-2869.825,2617.314,273.115,0.0,0.0,0.0); // Roller Coaster 4 ( /rc4 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18769,2496.18603516,-1682.14404297,686.00286865,0.00000000,0.00000000,0.00000000); // Roller Coaster 6 ( /rc6 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18857,-2434.06103516,-1621.66918945,523.36474609,0.00000000,0.00000000,0.00000000); // Roller Coaster 7 ( /rc7 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,-2934.66381836,1559.08850098,518.89978027,0.00000000,0.00000000,310.00000000); // Daru Jump ( /djump )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 6390, 1730.23, -2736.44, -10.09 + 750,   0.00, 0.00, 180.00); // Long Drag ( /longdrag )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8391, 1883.8750, 1330.2734, 36.7813 + 500, 0.0, 0.0, 0.0); // X-Slide ( /xslide )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 16109, 3418.81, -3008.87, 62.30,   0.00, 0.20, 59.55); // Drift Island ( /driftisland | /drift23 )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040,113.20030212,155.53961182,1267.74206543,0.00000000,0.00000000,60.00000000); // Daru Jump ( /darujump )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4113, 2828.87, -56.46, 592.93,   0.00, 0.00, 196.00); // Total Challange ( /tc )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4876, -4019.472412, 570.540283, 2.254122, 0.000000, 0.000000, 135.000000); // Treeisland ( /treeisland )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8171, 3316.16, -1651.83, 25.50+500,   0.00, 0.00, 82.51); // Grand Prix ( /gp )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867, 3911.16, -1923.63, 1.76,   0.00, 0.00, 90.00); // Forest Track ( /ftrack )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4865, -187.95, -8270.32, 34.24,   0.00, 0.00, 0.00); // Infernus DM Race ( /ip )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8436, 2340.97, -253.42, 1144.67,   0.00, 0.00, 0.00); // Water Jump ( /wj )
    g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8171, -542.771851, 956.515930, 435.066589, 5.1561, 0.0000, 315.3093); // SFA Teteje
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, 5237.060058, -1881.898071, 2.924449, 0.000000, 0.000000, 0.000000); // Small Race
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8357, 4420.11 + 300.0, -1061.03, 1.92,   0.00, 0.00, 0.00); // Forest Race Másik Padló Object Racehoz( /frace)
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 10403, 5778.31763, -568.51050 + 250.0, 7.95563,   0.00000, 0.00000, 0.00000); // Hidden island
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4867, 2286.625244, -1753.101929, -10.877449 + 1200.0, 0.0000, 0.0000, 0.0000); // Boxring padló ( /boxring )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18754, 991.52002, -3098.59009, 12.48000,   0.00000, 0.00000, 0.00000); // Stuntzone 1
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 10983, 5883.02637, -784.83563, 5.61903,   0.00000, 0.00000, -449.99997); // Zone DM
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 5114, -1586, 3155.8000488281, 8.1000003814697, 0, 0, 134.74584960938); // PirateDM
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 5114, -1634.69921875, 3336.8994140625, 7.6999998092651, 0, 0, 308.74877929688);
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18360, -1553.0999755859, 3259.1000976563, -2.2000000476837, 0, 0, 272.75); //
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18360, -1667.5, 3224.3000488281, -2.7999999523163, 0, 0, 93.99658203125); //
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 19129, 2132.0759277344, 1292.9631347656, 11.018225669861, 0, 180.0, 0);
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 19129, 2131.9851074219, 1280.2216796875, 11.007025718689, 0, 180.0, 0);
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18753, 442.950012, 2576.709961, 18.209999, 0.000000, 0.000000, 0.000000); // AA Spawn
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 18850, 396.720001, 2541.060059, 6.570000, 0.000000, 0.000000, 0.200000);
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 894.119995, 2502.600098, 694.150024, 0.000000, 0.000000, 180.000000); // AA Föllû elõ a jump
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 423.459991, 3216.409912, 739.400024, 0.000000, 0.000000, -106.570000); // AA Föllû ódalsó jump
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 2977.979492, -1437.014648, 1243.902100, 0.000000, 0.000000, 189.997559); // Skyroad
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, -1929.199219, 6641.299805, 11.600000, 0.000000, 0.000000, 270.000000); // Trackmania 2
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 31.291000, 274.092987, 1199.887939, 0.000000, 0.000000, -35.466000); // Spiral
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 19129, 1297.679931, -5627.590820, 80.030059, 0.000000, 0.000000, 0.000000); // Trackmania
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8357, -5698.200195, 2881.199951, 4.800000, 179.990005, 0.000000, 0.000000); // Trackmania 3
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3458, -295.320007, 3682.530029, 21.100000, 0.000000, 0.000000, 0.000000); // Infernus Paradise (IP2)
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 7416, 2202.709961,-2229.750000,922.059998,0.000000,0.000000,0.000000); // Duel xSF lopott
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 4564, 3124.800,830.858,4.124,0.0,0.0,0.0); // Csík spawnhely
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3458, -5050.540039, -2237.270019, 8.000000, 0.000000, 0.000000, 0.000000); // Infernus Paradise 2 (IP3)
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 3458, -905.900024, -3341.465087, 21.200000, 0.0, 0.0, 0.0); // NRG Paradise ( /nrgparadise )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 10768, 3545.799805, 2520.600586, 14.300000, 0.000000, 0.000000, 90.000000); // Airplane ( /airplane )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8355, -11418.217773, -4207.013671, 6.605993, 0.000000, 0.000000, 0.000000); // Racemap 2 ( /racemap2 )
	g_iPlayerObjects[playerid][i++] = CreatePlayerObject(playerid, 8040, 12078.476562, -2008.790039, 4.950294, 0.000000, 0.000000, 229.240722); // Stunthangar ( /stunthangar )
	g_iPlayerObjects[playerid][i] = CreatePlayerObject(playerid, 6959, 1830.776977, -4429.839355, 3210.130126, 0.000000, 0.000000, 229.240722); // Tron ( /tron )
	return 1;
}

stock DestroyPlayerObjects(playerid)
{
	for(new i; i != sizeof(g_iPlayerObjects[]); i++)
	{
		DestroyPlayerObject(playerid, g_iPlayerObjects[playerid][i]);
	}
	return 1;
}

stock RemoveBuildings(playerid)
{
	CallRemoteFunction("RemoveBuildings", "d", playerid);
}

stock Vidampark()
{
    //Funfair V2
	Vikingo_Base = CreateDynamicObject(3502, 911.57196, -2049.09521, 62.1653,   0.00000, 0.00000, 0.00000);
	Vikingo_Barco = CreateDynamicObject(8493, 899.00970, -2048.75659, 25.66768,   0.00000, 0.00000, 90.00000);
	AttachDynamicObjectToObject(Vikingo_Barco, Vikingo_Base, -12.56226, 0.33862, -36.49762, 0.00, 0.00, 90.00, true);

	// Karts
	Kart_Vehs[0] = CreateDynamicVehicle(571, 983.0297, -1999.7695, 7.0669, 0.0000, -1, -1, 100);
	Kart_Vehs[1] = CreateDynamicVehicle(571, 981.5297, -1999.7695, 7.0669, 0.0000, -1, -1, 100);
	Kart_Vehs[2] = CreateDynamicVehicle(571, 980.0297, -1999.7695, 7.0669, 0.0000, -1, -1, 100);
	Kart_Vehs[3] = CreateDynamicVehicle(571, 978.5297, -1999.7695, 7.0669, 0.0000, -1, -1, 100);
	Kart_Vehs[4] = CreateDynamicVehicle(571, 977.0297, -1999.7695, 7.0669, 0.0000, -1, -1, 100);
	Kart_Vehs[5] = CreateDynamicVehicle(571, 987.9070, -1999.2396, 7.0669, 180.0000, -1, -1, 100);
	Kart_Vehs[6] = CreateDynamicVehicle(571, 985.9070, -1999.2396, 7.0669, 180.0000, -1, -1, 100);
	Kart_Vehs[7] = CreateDynamicVehicle(571, 985.9070, -1997.2396, 7.0669, 180.0000, -1, -1, 100);
	Kart_Vehs[8] = CreateDynamicVehicle(571, 987.9070, -1997.2396, 7.0669, 180.0000, -1, -1, 100);

	// Quad
	Quad_Vehs[0] = CreateDynamicVehicle(471, 991.0148, -1940.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[1] = CreateDynamicVehicle(471, 991.0148, -1943.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[2] = CreateDynamicVehicle(471, 991.0148, -1946.4045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[3] = CreateDynamicVehicle(471, 991.0148, -1948.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[4] = CreateDynamicVehicle(471, 991.0148, -1951.4045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[5] = CreateDynamicVehicle(471, 991.0148, -1953.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[6] = CreateDynamicVehicle(471, 991.0148, -1956.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[7] = CreateDynamicVehicle(471, 991.0148, -1959.9045, 7.9977, 0.0000, -1, -1, 100);
	Quad_Vehs[8] = CreateDynamicVehicle(471, 991.0148, -1962.9045, 7.9977, 0.0000, -1, -1, 100);
	for(new i = 0; i != 9; i++) SetDynamicVehicleHealth(Quad_Vehs[i], 99999999), SetDynamicVehicleHealth(Kart_Vehs[i], 99999999);
	//Quads

    //Roller - vortex csúszda
	CreateDynamicObject(18765, 939.09448, -1883.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 939.09448, -1883.77051, 0.03976,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 944.65936, -1881.75574, 15.74265,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 948.65942, -1881.75574, 15.74270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 948.65942, -1885.75574, 15.74270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 944.65942, -1885.75574, 15.74270,   0.00000, 0.00000, 0.00000);
	//Roller_Unused[0] = CreateDynamicObject(18763, 946.62622, -1883.74084, 25.56243,   90.00000, 0.00000, 90.00000);
	Roller_Unused[1] = CreateDynamicObject(18763, 951.62622, -1883.74084, 25.56240,   90.00000, 0.00000, 90.00000);
	Roller_Unused[2] = CreateDynamicObject(18763, 956.32819, -1883.74084, 25.13470,   100.00000, 0.00000, 90.00000);
	Roller_Unused[3] = CreateDynamicObject(18763, 960.44019, -1883.74084, 23.63512,   120.00000, 0.00000, 90.00000);
	Roller_Unused[4] = CreateDynamicObject(18763, 963.80621, -1883.74084, 20.79988,   140.00000, 0.00000, 90.00000);
	Roller_Unused[5] = CreateDynamicObject(18763, 967.93018, -1883.74084, 17.34300,   120.00000, 0.00000, 90.00000);
	Roller_Unused[6] = CreateDynamicObject(18763, 965.98218, -1883.74084, 18.73766,   130.00000, 0.00000, 90.00000);
	Roller_Unused[7] = CreateDynamicObject(18763, 972.96222, -1883.74084, 15.50106,   100.00000, 0.00000, 90.00000);
	Roller_Unused[8] = CreateDynamicObject(18763, 970.78619, -1883.74084, 16.09898,   110.00000, 0.00000, 90.00000);
	Roller_Unused[9] = CreateDynamicObject(18763, 977.58618, -1883.74084, 15.10216,   90.00000, 0.00000, 90.00000);
	Roller_Unused[10] = CreateDynamicObject(18763, 982.61823, -1883.74084, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[11] = CreateDynamicObject(18763, 986.86383, -1884.44348, 15.10220,   90.00000, 0.00000, 70.00000);
	Roller_Unused[12] = CreateDynamicObject(18763, 990.60205, -1886.58801, 15.10220,   90.00000, 0.00000, 50.00000);
	Roller_Unused[13] = CreateDynamicObject(18763, 993.31451, -1889.81384, 15.10220,   90.00000, 0.00000, 30.00000);
	Roller_Unused[14] = CreateDynamicObject(18763, 994.74469, -1893.89795, 15.10220,   90.00000, 0.00000, 10.00000);
	Roller_Unused[15] = CreateDynamicObject(18763, 994.12146, -1897.51135, 15.10220,   90.00000, 0.00000, -30.00000);
	Roller_Unused[16] = CreateDynamicObject(18763, 991.32495, -1900.82092, 15.10220,   90.00000, 0.00000, -50.00000);
	Roller_Unused[17] = CreateDynamicObject(18763, 987.53528, -1902.99988, 15.10220,   90.00000, 0.00000, -70.00000);
	Roller_Unused[18] = CreateDynamicObject(18763, 983.21869, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[19] = CreateDynamicObject(18763, 978.32269, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[20] = CreateDynamicObject(18763, 973.42670, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[21] = CreateDynamicObject(18763, 968.39471, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[22] = CreateDynamicObject(18763, 963.49872, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[23] = CreateDynamicObject(18763, 958.60272, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[24] = CreateDynamicObject(18763, 953.70673, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[25] = CreateDynamicObject(18763, 948.81073, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[26] = CreateDynamicObject(18763, 943.91467, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[27] = CreateDynamicObject(18763, 939.01868, -1903.72949, 15.10220,   90.00000, 0.00000, 90.00000);
	Roller_Unused[28] = CreateDynamicObject(18763, 938.03302, -1900.17139, 14.74232,   82.00000, 0.00000, 0.00000);
	Roller_Unused[29] = CreateDynamicObject(18763, 938.03870, -1895.61304, 13.68268,   72.00000, 0.00000, 0.00000);
	Roller_Unused[30] = CreateDynamicObject(18763, 938.06989, -1891.73145, 11.68325,   52.00000, 0.00000, 0.00000);
	Roller_Unused[31] = CreateDynamicObject(18763, 938.07275, -1888.41235, 8.57151,   42.00000, 0.00000, 0.00000);
	Roller_Unused[32] = CreateDynamicObject(18763, 938.10522, -1885.92908, 7.40855,   72.00000, 0.00000, 0.00000);
	Roller_Unused[33] = CreateDynamicObject(18763, 938.10016, -1882.81494, 6.53630,   78.00000, 0.00000, 0.00000);
	Roller_Unused[34] = CreateDynamicObject(18763, 938.10022, -1877.91895, 6.02390,   90.00000, 0.00000, 0.00000);
	Roller_Unused[35] = CreateDynamicObject(18763, 941.66687, -1876.93127, 6.02390,   90.00000, 0.00000, 90.00000);
	Roller_Unused[36] = CreateDynamicObject(18763, 942.66663, -1879.69263, 6.02390,   90.00000, 0.00000, 0.00000);
	for(new i = 0; i != 37; i++) SetDynamicObjectMaterial(Roller_Unused[i], 0, 18646, "MatColours", "red", 0xFFFFFF10);

	Roller_Unused2[0] = CreateDynamicObject(18762, 951.64813, -1881.76379, 27.10643,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[1] = CreateDynamicObject(18762, 956.51886, -1881.76831, 26.64994,   100.00000, 0.00000, 90.00000);
	Roller_Unused2[2] = CreateDynamicObject(18762, 961.00690, -1881.76831, 25.05888,   120.00000, 0.00000, 90.00000);
	Roller_Unused2[3] = CreateDynamicObject(18762, 964.54291, -1881.76831, 22.05386,   140.00000, 0.00000, 90.00000);
	Roller_Unused2[4] = CreateDynamicObject(18762, 969.43890, -1881.76831, 18.14202,   120.00000, 0.00000, 90.00000);
	Roller_Unused2[5] = CreateDynamicObject(18762, 966.85492, -1881.76831, 19.78080,   130.00000, 0.00000, 90.00000);
	Roller_Unused2[6] = CreateDynamicObject(18762, 971.88690, -1881.76831, 17.27161,   110.00000, 0.00000, 90.00000);
	Roller_Unused2[7] = CreateDynamicObject(18762, 975.01489, -1881.76831, 16.52710,   100.00000, 0.00000, 90.00000);
	Roller_Unused2[8] = CreateDynamicObject(18762, 977.32690, -1881.76831, 16.69397,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[9] = CreateDynamicObject(18762, 982.22290, -1881.76831, 16.69400,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[10] = CreateDynamicObject(18762, 987.41614, -1882.48718, 16.68307,   90.00000, 0.00000, 70.00000);
	Roller_Unused2[11] = CreateDynamicObject(18762, 991.92761, -1885.02759, 16.68310,   90.00000, 0.00000, 50.00000);
	Roller_Unused2[12] = CreateDynamicObject(18762, 995.12799, -1888.74170, 16.68310,   90.00000, 0.00000, 30.00000);
	Roller_Unused2[13] = CreateDynamicObject(18762, 996.81372, -1893.47314, 16.68310,   90.00000, 0.00000, 10.00000);
	Roller_Unused2[14] = CreateDynamicObject(18762, 995.91785, -1898.47717, 16.68310,   90.00000, 0.00000, -30.00000);
	Roller_Unused2[15] = CreateDynamicObject(18762, 992.62354, -1902.33582, 16.68310,   90.00000, 0.00000, -50.00000);
	Roller_Unused2[16] = CreateDynamicObject(18762, 988.24457, -1904.92651, 16.68310,   90.00000, 0.00000, -70.00000);
	Roller_Unused2[17] = CreateDynamicObject(18762, 983.24182, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[18] = CreateDynamicObject(18762, 978.20978, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[19] = CreateDynamicObject(18762, 973.31378, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[20] = CreateDynamicObject(18762, 968.41779, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[21] = CreateDynamicObject(18762, 963.65778, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[22] = CreateDynamicObject(18762, 958.76178, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[23] = CreateDynamicObject(18762, 953.86578, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[24] = CreateDynamicObject(18762, 949.10577, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[25] = CreateDynamicObject(18762, 944.20978, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[26] = CreateDynamicObject(18762, 939.17780, -1905.74182, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[27] = CreateDynamicObject(18762, 936.04132, -1903.72974, 16.68310,   90.00000, 0.00000, 0.00000);
	Roller_Unused2[28] = CreateDynamicObject(18762, 936.04132, -1899.92175, 16.37538,   82.00000, 0.00000, 0.00000);
	Roller_Unused2[29] = CreateDynamicObject(18762, 936.04132, -1895.16174, 15.25594,   72.00000, 0.00000, 0.00000);
	Roller_Unused2[30] = CreateDynamicObject(18762, 936.04132, -1890.94568, 13.05960,   52.00000, 0.00000, 0.00000);
	Roller_Unused2[31] = CreateDynamicObject(18762, 936.04132, -1887.40967, 9.76702,   42.00000, 0.00000, 0.00000);
	Roller_Unused2[32] = CreateDynamicObject(18762, 936.04132, -1884.96167, 8.80804,   72.00000, 0.00000, 0.00000);
	Roller_Unused2[33] = CreateDynamicObject(18762, 936.04132, -1880.88171, 7.76197,   78.00000, 0.00000, 0.00000);
	Roller_Unused2[34] = CreateDynamicObject(18762, 936.04132, -1877.88965, 7.76200,   90.00000, 0.00000, 0.00000);
	Roller_Unused2[35] = CreateDynamicObject(18762, 939.03644, -1874.88184, 7.76200,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[36] = CreateDynamicObject(18762, 941.89240, -1874.88184, 7.76200,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[37] = CreateDynamicObject(18762, 944.67462, -1878.04126, 7.76200,   90.00000, 0.00000, 0.00000);
	Roller_Unused2[38] = CreateDynamicObject(18762, 940.63806, -1878.94751, 5.60867,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[39] = CreateDynamicObject(18762, 940.03802, -1878.93018, 5.60870,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[40] = CreateDynamicObject(18762, 940.63812, -1879.89954, 5.60870,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[41] = CreateDynamicObject(18762, 940.63812, -1880.85144, 5.60870,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[42] = CreateDynamicObject(18762, 940.09204, -1879.91199, 5.60870,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[43] = CreateDynamicObject(18762, 940.15179, -1880.85876, 5.60870,   0.00000, 0.00000, 90.00000);
	Roller_Unused2[44] = CreateDynamicObject(18762, 940.09229, -1880.88171, 7.76200,   78.00000, 0.00000, 0.00000);
	Roller_Unused2[45] = CreateDynamicObject(18762, 940.09229, -1884.96167, 8.80800,   72.00000, 0.00000, 0.00000);
	Roller_Unused2[46] = CreateDynamicObject(18762, 940.09229, -1887.40967, 9.76700,   42.00000, 0.00000, 0.00000);
	Roller_Unused2[47] = CreateDynamicObject(18762, 940.09229, -1890.94568, 13.05960,   52.00000, 0.00000, 0.00000);
	Roller_Unused2[48] = CreateDynamicObject(18762, 940.09229, -1895.16174, 15.25590,   72.00000, 0.00000, 0.00000);
	Roller_Unused2[49] = CreateDynamicObject(18762, 940.09229, -1899.92175, 16.37540,   82.00000, 0.00000, 0.00000);
	Roller_Unused2[50] = CreateDynamicObject(18762, 944.20978, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[51] = CreateDynamicObject(18762, 949.10577, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[52] = CreateDynamicObject(18762, 953.86578, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[53] = CreateDynamicObject(18762, 958.76178, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[54] = CreateDynamicObject(18762, 963.65778, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[55] = CreateDynamicObject(18762, 968.41779, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[56] = CreateDynamicObject(18762, 973.31378, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[57] = CreateDynamicObject(18762, 978.20978, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[58] = CreateDynamicObject(18762, 983.24182, -1901.74353, 16.68310,   90.00000, 0.00000, 90.00000);
	//Roller_Unused2[59] = CreateDynamicObject(18762, 986.83881, -1901.13696, 16.68310,   90.00000, 0.00000, -70.00000);
	//Roller_Unused2[60] = CreateDynamicObject(18762, 989.81622, -1899.42200, 16.68310,   90.00000, 0.00000, -50.00000);
	//Roller_Unused2[61] = CreateDynamicObject(18762, 992.26324, -1896.78784, 16.68310,   90.00000, 0.00000, -30.00000);
	//Roller_Unused2[62] = CreateDynamicObject(18762, 992.73187, -1893.12891, 16.68310,   90.00000, 0.00000, 10.00000);
	//Roller_Unused2[63] = CreateDynamicObject(18762, 991.54510, -1890.59839, 16.68310,   90.00000, 0.00000, 30.00000);
	//Roller_Unused2[64] = CreateDynamicObject(18762, 989.40851, -1888.33936, 16.68310,   90.00000, 0.00000, 50.00000);
	//Roller_Unused2[65] = CreateDynamicObject(18762, 986.31360, -1886.46533, 16.68307,   90.00000, 0.00000, 70.00000);
	Roller_Unused2[66] = CreateDynamicObject(18762, 982.22290, -1885.71228, 16.69400,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[67] = CreateDynamicObject(18762, 977.32690, -1885.71228, 16.69400,   90.00000, 0.00000, 90.00000);
	Roller_Unused2[68] = CreateDynamicObject(18762, 975.01489, -1885.71228, 16.52710,   100.00000, 0.00000, 90.00000);
	Roller_Unused2[69] = CreateDynamicObject(18762, 971.88690, -1885.71228, 17.27160,   110.00000, 0.00000, 90.00000);
	Roller_Unused2[70] = CreateDynamicObject(18762, 969.43890, -1885.71228, 18.14200,   120.00000, 0.00000, 90.00000);
	Roller_Unused2[71] = CreateDynamicObject(18762, 966.85492, -1885.71228, 19.78080,   130.00000, 0.00000, 90.00000);
	Roller_Unused2[72] = CreateDynamicObject(18762, 964.54291, -1885.71228, 22.05390,   140.00000, 0.00000, 90.00000);
	Roller_Unused2[73] = CreateDynamicObject(18762, 961.00690, -1885.71228, 25.05890,   120.00000, 0.00000, 90.00000);
	Roller_Unused2[74] = CreateDynamicObject(18762, 956.51892, -1885.71228, 26.64990,   100.00000, 0.00000, 90.00000);
	Roller_Unused2[75] = CreateDynamicObject(18762, 951.64807, -1885.71228, 27.10640,   90.00000, 0.00000, 90.00000);
    for(new i = 0; i != 76; i++) SetDynamicObjectMaterial(Roller_Unused2[i], 0, 18646, "MatColours", "samporange");

	Roller_Platform = CreateDynamicObject(18763, 946.62622, -1883.74084, 5.97849,   90.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(Roller_Platform, 0, 18646, "MatColours", "red", 0xFFFFFF10);
	Roller_Veh = CreateDynamicVehicle(539, 942.7711, -1877.6741, 7.8697, 180.0000, -1, -1, 100);
    SetDynamicVehicleHealth(Roller_Veh, 99999999);

	//Carousel - Tehén izé
	Carousel_Unused[0] = CreateDynamicObject(18765, 907.59454, -1876.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[1] = CreateDynamicObject(18765, 897.59448, -1876.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[2] = CreateDynamicObject(18765, 917.59448, -1876.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[3] = CreateDynamicObject(18765, 907.59448, -1886.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[4] = CreateDynamicObject(18765, 917.59448, -1886.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[5] = CreateDynamicObject(18765, 897.59448, -1886.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[6] = CreateDynamicObject(18765, 917.59448, -1866.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[7] = CreateDynamicObject(18765, 907.59448, -1866.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[8] = CreateDynamicObject(18765, 897.59448, -1866.77051, 4.98010,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[9] = CreateDynamicObject(18765, 897.59448, -1886.77051, 0.02220,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[10] = CreateDynamicObject(18765, 907.59448, -1886.77051, 0.02220,   0.00000, 0.00000, 0.00000);
	Carousel_Unused[11] = CreateDynamicObject(18765, 917.59448, -1886.77051, 0.02220,   0.00000, 0.00000, 0.00000);
	for(new i = 0; i != 12; i++) SetDynamicObjectMaterial(Carousel_Unused[i], 0, 18646, "MatColours", "green");

	Carousel_Base = CreateDynamicObject(19278, 907.63007, -1877.14453, -35.72582,   0.00000, 0.00000, 0.00000);
	Carousel_Base2 = CreateDynamicObject(19278, 907.63007, -1877.14453, -41.37026,   0.00000, 0.00000, 0.00000);
	AttachDynamicObjectToObject(Carousel_Base2, Carousel_Base, 0, 0, -5.6445, 0, 0, 0);

	Carousel_Seats[0] = CreateDynamicObject(16442, 908.34973, -1872.45020, 10.02538,   0.00000, 0.00000, 0.00000);
	AttachDynamicObjectToObject(Carousel_Seats[0], Carousel_Base, 0.7196, 4.6943, 45.7512, 0, 0, 0);
	Carousel_Seats[1] = CreateDynamicObject(16442, 908.34967, -1881.45020, 10.02540,   0.00000, 0.00000, 180.00000);
	AttachDynamicObjectToObject(Carousel_Seats[1], Carousel_Base, -0.7196, -4.6943, 45.7512, 0, 0, 180);
	Carousel_Seats[2] = CreateDynamicObject(16442, 912.34967, -1876.95020, 10.02540,   0.00000, 0.00000, -90.00000);
	AttachDynamicObjectToObject(Carousel_Seats[2], Carousel_Base, 4.6943, 0.7196, 45.7512, 0, 0, -90);
	Carousel_Seats[3] = CreateDynamicObject(16442, 902.84967, -1876.95020, 10.02540,   0.00000, 0.00000, 90.00000);
	AttachDynamicObjectToObject(Carousel_Seats[3], Carousel_Base, -4.6943, -0.7196, 45.7512, 0, 0, 90);

	//Revolution
	CreateDynamicObject(19128, 875.96594, -1867.31836, 7.53690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 865.89386, -1876.91614, 7.53690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 875.91583, -1886.70874, 7.53690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19128, 885.87018, -1877.04871, 7.53690,   0.00000, 0.00000, 0.00000);

	Revolution_Unused[0] = CreateDynamicObject(18765, 875.91437, -1876.93079, 4.98012,   0.00000, 0.00000, 0.00000);
	Revolution_Unused[1] = CreateDynamicObject(18765, 875.90234, -1886.87134, 4.98010,   0.00000, 0.00000, 0.00000);
	Revolution_Unused[2] = CreateDynamicObject(18765, 875.91443, -1866.93079, 4.98010,   0.00000, 0.00000, 0.00000);
	Revolution_Unused[3] = CreateDynamicObject(18765, 885.91443, -1876.93079, 4.98010,   0.00000, 0.00000, 0.00000);
	Revolution_Unused[4] = CreateDynamicObject(18765, 865.91443, -1876.93079, 4.98010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18765, 875.90234, -1886.87134, 0.10408,   0.00000, 0.00000, 0.00000);
	for(new i = 0; i != 5; i++) SetDynamicObjectMaterial(Revolution_Unused[i], 0, 18646, "MatColours", "red");
	CreateDynamicObject(18764, 875.9321,  -1876.9152,  5.8495,   0.00000, 0.00000, 0.00000);

    Revolution_Base = CreateDynamicObject(13649, 875.91345, -1877.00439, 8.06837,   0.00000, 0.00000, 0.00000, .streamdistance = -1);
	Revolution_Base2 = CreateDynamicObject(13649, 875.91345, -1877.00439, 9.22711,   0.00000, 0.00000, 0.00000);
    AttachDynamicObjectToObject(Revolution_Base2, Revolution_Base, 0, 0, 1.1587, 0, 0, 0);

    Revolution_Statue = CreateDynamicObject(14467, 876.17511, -1877.41479, 11.85857,   0.00000, 0.00000, 0.00000);
    AttachDynamicObjectToObject(Revolution_Statue, Revolution_Base, 0.2616, -0.4104, 3.7902, 0, 0, 0);

    Revolution_Platforms[0] = CreateDynamicObject(1232, 875.99805, -1881.88306, 8.63261,   103.00000, 0.00000, 0.00000);
    AttachDynamicObjectToObject(Revolution_Platforms[0], Revolution_Base, 0.0845, -4.8787, 0.5945, 103, 0, 0);
    Revolution_Platforms[1] = CreateDynamicObject(1232, 871.03119, -1876.95117, 8.63260,   103.00000, 0.00000, -90.00000);
    AttachDynamicObjectToObject(Revolution_Platforms[1], Revolution_Base, -4.8787, 0.0845, 0.5945, 103, 0, -90);
    Revolution_Platforms[2] = CreateDynamicObject(1232, 875.99799, -1871.88306, 8.63260,   103.00000, 0.00000, 180.00000);
    AttachDynamicObjectToObject(Revolution_Platforms[2], Revolution_Base, -0.0845, 4.8787, 0.5945, 103, 0, 180);
    Revolution_Platforms[3] = CreateDynamicObject(1232, 881.03119, -1876.95117, 8.63260,   103.00000, 0.00000, 90.00000);
    AttachDynamicObjectToObject(Revolution_Platforms[3], Revolution_Base, 4.8787, -0.0845, 0.5945, 103, 0, 90);

    Revolution_Seats[0] = CreateDynamicObject(1562, 875.53699, -1884.53552, 8.31260,   0.00000, -15.00000, -90.00000);
    AttachDynamicObjectToObject(Revolution_Seats[0], Revolution_Base, -0.3765, -7.5311, 0.5, 0, -15, -90);
	Revolution_Seats[1] = CreateDynamicObject(1562, 868.39508, -1876.50562, 8.31260,   0.00000, -15.00000, 180.00000);
	AttachDynamicObjectToObject(Revolution_Seats[1], Revolution_Base, -7.5311, 0.3765, 0.5, 0, -15, 180);
	Revolution_Seats[2] = CreateDynamicObject(1562, 876.43402, -1869.29211, 8.31260,   0.00000, -15.00000, 90.00000);
	AttachDynamicObjectToObject(Revolution_Seats[2], Revolution_Base, 0.3765, 7.5311, 0.5, 0, -15, 90);
	Revolution_Seats[3] = CreateDynamicObject(1562, 883.71088, -1877.38330, 8.31260,   0.00000, -15.00000, 0.00000);
	AttachDynamicObjectToObject(Revolution_Seats[3], Revolution_Base, 7.5311, -0.3765, 0.5, 0, -15, 0);

	//TopGun
	Topgun_Stairs[0] = CreateDynamicObject(8614, 838.82, -1880.40, 14.40,   0.00, 0.00, -90.00);
	Topgun_Stairs[1] = CreateDynamicObject(8614, 845.65, -1896.19, 14.40,   0.00, 0.00, 90.00);
	stair = false;

	Topgun_Unused[0] = CreateDynamicObject(18762, 843.56, -1874.58, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[1] = CreateDynamicObject(18762, 842.56, -1874.58, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[2] = CreateDynamicObject(18762, 841.56, -1874.58, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[3] = CreateDynamicObject(18762, 841.56, -1874.58, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[4] = CreateDynamicObject(18762, 841.56, -1874.58, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[5] = CreateDynamicObject(18762, 841.56, -1874.58, 13.09,   0.00, 0.00, 0.00);
	Topgun_Unused[6] = CreateDynamicObject(18762, 842.56, -1874.58, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[7] = CreateDynamicObject(18762, 842.56, -1874.58, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[8] = CreateDynamicObject(18762, 842.55, -1874.60, 13.09,   0.00, 0.00, 0.00);
	Topgun_Unused[9] = CreateDynamicObject(18762, 843.56, -1874.58, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[10] = CreateDynamicObject(18762, 843.56, -1874.58, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[11] = CreateDynamicObject(18762, 843.56, -1874.58, 13.09,   0.00, 0.00, 0.00);
	Topgun_Unused[12] = CreateDynamicObject(18762, 841.56, -1901.94, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[13] = CreateDynamicObject(18762, 842.56, -1901.94, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[14] = CreateDynamicObject(18762, 843.56, -1901.94, 28.09,   0.00, 0.00, 0.00);
	Topgun_Unused[15] = CreateDynamicObject(18762, 843.56, -1901.94, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[16] = CreateDynamicObject(18762, 842.56, -1901.94, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[17] = CreateDynamicObject(18762, 841.56, -1901.94, 23.09,   0.00, 0.00, 0.00);
	Topgun_Unused[18] = CreateDynamicObject(18762, 843.56, -1901.94, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[19] = CreateDynamicObject(18762, 842.56, -1901.94, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[20] = CreateDynamicObject(18762, 841.56, -1901.94, 18.09,   0.00, 0.00, 0.00);
	Topgun_Unused[21] = CreateDynamicObject(18762, 841.56, -1901.94, 13.09,   0.00, 0.00, 0.00);
	Topgun_Unused[22] = CreateDynamicObject(18762, 842.55, -1901.94, 13.09,   0.00, 0.00, 0.00);
	Topgun_Unused[23] = CreateDynamicObject(18762, 843.56, -1901.94, 13.09,   0.00, 0.00, 0.00);
    for(new i = 0; i != 24; i++) SetDynamicObjectMaterial(Topgun_Unused[i], 0, 18646, "MatColours", "samporange");

	Topgun_Base = CreateDynamicObject(18980, 842.24, -1888.27, 28.39,   0.00, 90.00, 90.00, .streamdistance = -1);
	SetDynamicObjectMaterial(Topgun_Base, 0, 18646, "MatColours", "blue");

	Topgun_Platforms[0] = CreateDynamicObject(18980, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Topgun_Platforms[0], 0, 18646, "MatColours", "yellow");
	AttachDynamicObjectToObject(Topgun_Platforms[0], Topgun_Base, 1.23, 0.53, -12.56, 0.0000, -90.0000, 0.0000);

	Topgun_Platforms[1] = CreateDynamicObject(18980, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Topgun_Platforms[1], 0, 18646, "MatColours", "yellow");
	AttachDynamicObjectToObject(Topgun_Platforms[1], Topgun_Base, 1.23, -0.47, -12.56, 0.0000, -90.0000, 0.0000);

	Topgun_Platforms[2] = CreateDynamicObject(18980, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Topgun_Platforms[2], 0, 18646, "MatColours", "yellow");
	AttachDynamicObjectToObject(Topgun_Platforms[2], Topgun_Base, 1.23, -0.47, 12.44, 0.0000, -90.0000, 0.0000);

	Topgun_Platforms[3] = CreateDynamicObject(18980, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Topgun_Platforms[3], 0, 18646, "MatColours", "yellow");
	AttachDynamicObjectToObject(Topgun_Platforms[3], Topgun_Base, 1.23, 0.53, 12.44, 0.0000, -90.0000, 0.0000);

	Topgun_Platforms[4] = CreateDynamicObject(18766, 0.00, 0.00, 0.00,   90.00, 0.00, 90.00);
	SetDynamicObjectMaterial(Topgun_Platforms[4], 0, 18646, "MatColours", "redlaser");
	AttachDynamicObjectToObject(Topgun_Platforms[4], Topgun_Base, 13.24, 0, -3.03, 0.00, 90.00, 90.00, 0);
 											  // z   x   y
	Topgun_Platforms[5] = CreateDynamicObject(18766, 0.00, 0.00, 0.00,   90.00, 0.00, 90.00);
	SetDynamicObjectMaterial(Topgun_Platforms[5], 0, 18646, "MatColours", "redlaser");
    AttachDynamicObjectToObject(Topgun_Platforms[5], Topgun_Base, 13.24, 0, -7.03, 0.00, 90.00, 90.00, 0);

    Topgun_Platforms[6] = CreateDynamicObject(18766, 0.00, 0.00, 0.00,   90.00, 0.00, 90.00);
    SetDynamicObjectMaterial(Topgun_Platforms[6], 0, 18646, "MatColours", "redlaser");
    AttachDynamicObjectToObject(Topgun_Platforms[6], Topgun_Base, 13.24, 0, 6.97, 0.00, 90.00, 90.00, 0);

	//Projekt
	Projekt_Letters[0] = CreateDynamicObject(19353, 835.2254, -1974.9293, 29.3883, 0.0000, 0.0000, -180);
	SetDynamicObjectMaterialText(Projekt_Letters[0], 0, "1", 140, "Impact", 255, 1, -256, 0, 1);

	Projekt_Letters[1] = CreateDynamicObject(19353, 833.3474, -1966.4117, 12.4387, 0.0000, -90.0000, 180);
	SetDynamicObjectMaterialText(Projekt_Letters[1], 0, "prokekt 1", 140, "Impact", 140, 1, -32256, 0, 1);

	Projekt_Letters[2] = CreateDynamicObject(19353, 833.3474, -1966.4117-5, 12.4387, 0.0000, -90.0000, 180);
	SetDynamicObjectMaterialText(Projekt_Letters[2], 0, "prokekt 1", 140, "Impact", 140, 1, -32256, 0, 1);

	Projekt_Letters[3] = CreateDynamicObject(19353, 833.3474, -1966.4117-5*2, 12.4387, 0.0000, -90.0000, 180);
	SetDynamicObjectMaterialText(Projekt_Letters[3], 0, "prokekt 1", 140, "Impact", 140, 1, -32256, 0, 1);

	Projekt_Letters[4] = CreateDynamicObject(19353, 833.3474, -1966.4117-5*3, 12.4387, 0.0000, -90.0000, 180);
	SetDynamicObjectMaterialText(Projekt_Letters[4], 0, "prokekt 1", 140, "Impact", 140, 1, -32256, 0, 1);

	SuperProjekt_Base[0] = CreateDynamicObject(18980, 831.33, -1984.52, 19.6652,   -45.00, 20.00, 0.00);
	SuperProjekt_Base[1] = CreateDynamicObject(18980, 841.81, -1984.52, 19.6652,   -45.00, -20.00, 0.00);
	SuperProjekt_Base[2] = CreateDynamicObject(18980, 831.33, -1965.52, 19.6652,   45.00, 20.00, 0.00);
	SuperProjekt_Base[3] = CreateDynamicObject(18980, 841.81, -1965.52, 19.6652,   45.00, -20.00, 0.00);
	for(new i = 0; i != 4; i++) SetDynamicObjectMaterial(SuperProjekt_Base[i], 0, 18646, "MatColours", "blue");
	Projekt_Unused[0] = CreateDynamicObject(18886, 836.77, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[1] = CreateDynamicObject(18886, 836.99, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[2] = CreateDynamicObject(18886, 837.21, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Base[0] = CreateDynamicObject(18886, 837.43, -1974.91, 29.3000,   0.00, 90.00, 0.00, .streamdistance = -1);
	SetDynamicObjectMaterial(Projekt_Base[0], 0, 18646, "MatColours", "red");
	SetDynamicObjectMaterial(Projekt_Base[0], 1, 18646, "MatColours", "samporange");
	SetDynamicObjectMaterial(Projekt_Base[0], 3, 18646, "MatColours", "red");
	Projekt_Unused[3] = CreateDynamicObject(18886, 837.66, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[4] = CreateDynamicObject(18886, 837.88, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[5] = CreateDynamicObject(18886, 836.21, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[6] = CreateDynamicObject(18886, 836.44, -1974.91, 29.3000,   0.00, 90.00, 0.00);
	Projekt_Unused[7] = CreateDynamicObject(18886, 836.224243, -1974.898437, 29.252134, 0.000000, -90.00, 0.000000);
	Projekt_Unused[8] = CreateDynamicObject(18886, 836.457275, -1974.864990, 29.276523, 0.000000, -90.00, 0.000000);
	Projekt_Unused[9] = CreateDynamicObject(18886, 836.727539, -1974.893676, 29.264974, 0.000000, -90.00, 0.000000);
    for(new i = 0; i != 10; i++)
    {
		SetDynamicObjectMaterial(Projekt_Unused[i], 0, 18646, "MatColours", "red");
		SetDynamicObjectMaterial(Projekt_Unused[i], 1, 18646, "MatColours", "samporange");
		SetDynamicObjectMaterial(Projekt_Unused[i], 3, 18646, "MatColours", "red");
	}

	Projekt_Platform[0] = CreateDynamicObject(18762, 0.00, 10.00, 0.00,   0.00, 0.00, 0.00);
    SetDynamicObjectMaterial(Projekt_Platform[0], 0, 18646, "MatColours", "lightblue");
	AttachDynamicObjectToObject(Projekt_Platform[0], Projekt_Base[0], 3.82, 0.0521, -1.00, 	0.00, 90.00, 0.00);
	Projekt_Platform[1] = CreateDynamicObject(18762, 0.00, 10.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Projekt_Platform[1], 0, 18646, "MatColours", "lightblue");
	AttachDynamicObjectToObject(Projekt_Platform[1], Projekt_Base[0], 8.82, 0.0521, -1.00, 	0.00, 90.00, 0.00);
	Projekt_Platform[2] = CreateDynamicObject(18762, 0.00, 10.00, 0.00,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Projekt_Platform[2], 0, 18646, "MatColours", "lightblue");
	AttachDynamicObjectToObject(Projekt_Platform[2], Projekt_Base[0], 13.82, 0.0521, -1.00, 0.00, 90.00, 0.00);

	Projekt_Base[1] = CreateDynamicObject(18886, 0, 0, 0,   0.00, 0.00, 0.00, .streamdistance = -1);
	AttachDynamicObjectToObject(Projekt_Base[1], Projekt_Base[0], 14.8962, 0.0, -1.040, 0.0000, -90.0000, 0.0000);
	Projekt_Base[2] = CreateDynamicObject(18886, 0, 0, 0,   0.00, 0.00, 0.00, .streamdistance = -1);
	AttachDynamicObjectToObject(Projekt_Base[2], Projekt_Base[1], 0.00, 0.00, -2.1052, 180.0000, 0.0000, 0.0000);

	Projekt_Seats[0] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[0], Projekt_Base[1], -0.6162, 2.0824, -0.9604, 0.0000, 0.0000, 195.0000);
	Projekt_Seats[1] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[1], Projekt_Base[1], -1.4831, 1.4819, -0.9604, 0.0000, 0.0000, 225.0000);
	Projekt_Seats[2] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[2], Projekt_Base[1], -2.1035, 0.5745, -0.9604, 0.0000, 0.0000, 255.0000);
	Projekt_Seats[3] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[3], Projekt_Base[1], -2.1016, -0.5955, -0.9604, 0.0000, 0.0000, 285.0000);
	Projekt_Seats[4] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[4], Projekt_Base[1], -1.5044, -1.5795, -0.9604, 0.0000, 0.0000, 315.0000);
	Projekt_Seats[5] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[5], Projekt_Base[1], -0.5645, -2.1727, -0.9604, 0.0000, 0.0000, 345.0000);
	Projekt_Seats[6] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[6], Projekt_Base[1], 0.573, -2.1273, -0.9604, 0.0000, 0.0000, -345.0000);
	Projekt_Seats[7] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[7], Projekt_Base[1], 1.5295, -1.5389, -0.9604, 0.0000, 0.0000, -315.0000);
	Projekt_Seats[8] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[8], Projekt_Base[1], 2.1129, -0.5817, -0.9604, 0.0000, 0.0000, -285.0000);
	Projekt_Seats[9] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[9], Projekt_Base[1], 2.0814, 0.5617, -0.9604, 0.0000, 0.0000, -255.0000);
	Projekt_Seats[10] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[10], Projekt_Base[1], 1.5124, 1.5704, -0.9604, 0.0000, 0.0000, -225.0000);
	Projekt_Seats[11] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Projekt_Seats[11], Projekt_Base[1], 0.5522, 2.0793, -0.9604, 0.0000, 0.0000, -195.0000);

	//Cars
	Cars_Vehs[0] = CreateDynamicVehicle(539, 795.6931, -1864.1338, 10.8227, 0.0000, -1, -1, 100);
	SetDynamicVehicleHealth(Cars_Vehs[0], 99999999);
	Cars_Vehs[1] = CreateDynamicVehicle(539, 795.6931, -1858.1338, 10.8227, 0.0000, -1, -1, 100);
	SetDynamicVehicleHealth(Cars_Vehs[1], 99999999);
	Cars_Vehs[2] = CreateDynamicVehicle(539, 795.6931, -1852.1338, 10.8227, 0.0000, -1, -1, 100);
	SetDynamicVehicleHealth(Cars_Vehs[2], 99999999);
	Cars_Vehs[3] = CreateDynamicVehicle(539, 795.6931, -1846.6338, 10.8227, 0.0000, -1, -1, 100);
	SetDynamicVehicleHealth(Cars_Vehs[3], 99999999);

	Cars_Base[0] = CreateDynamicObject(18981, 805.56824, -1854.58850, 7.89529,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Base[0], 0, 18646, "MatColours", "grey-80-percent");

	Cars_Base[1] = CreateDynamicObject(18981, 805.56824, -1854.58850, 12.6336,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Base[1], 0, 18772, "TunnelSections", "metalflooring44-2");

	Cars_Base[2] = CreateDynamicObject(18981, 805.56824, -1854.58850, 13.6411,   0.00000, 90.00000, 0.00000);
    SetDynamicObjectMaterial(Cars_Base[2], 0, 18646, "MatColours", "green");

    Cars_Unused[0] = CreateDynamicObject(18762, 795.57037, -1841.59644, 8.50696,   0.00000, 90.00000, 0.00000);
    SetDynamicObjectMaterial(Cars_Unused[0], 0, 18646, "MatColours", "blue");
	Cars_Unused[1] = CreateDynamicObject(18762, 799.07037, -1841.59644, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[1], 0, 18646, "MatColours", "green");
	Cars_Unused[2] = CreateDynamicObject(18762, 803.57037, -1841.59644, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[2], 0, 18646, "MatColours", "grey");
	Cars_Unused[3] = CreateDynamicObject(18762, 808.57037, -1841.59644, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[3], 0, 18646, "MatColours", "lightblue");
	Cars_Unused[4] = CreateDynamicObject(18762, 813.57037, -1841.59644, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[4], 0, 18646, "MatColours", "orange");
	Cars_Unused[5] = CreateDynamicObject(18762, 818.57037, -1841.59644, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[5], 0, 18646, "MatColours", "red");
	Cars_Unused[6] = CreateDynamicObject(18762, 818.57037, -1844.59644, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[6], 0, 18646, "MatColours", "samporange");
	Cars_Unused[7] = CreateDynamicObject(18762, 818.57037, -1849.59644, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[7], 0, 18646, "MatColours", "white");
	Cars_Unused[8] = CreateDynamicObject(18762, 818.57037, -1854.59644, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[8], 0, 18646, "MatColours", "yellow");
	Cars_Unused[9] = CreateDynamicObject(18762, 818.57037, -1859.59644, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[9], 0, 18646, "MatColours", "blue");
	Cars_Unused[10] = CreateDynamicObject(18762, 818.57037, -1864.59644, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[10], 0, 18646, "MatColours", "green");
	Cars_Unused[11] = CreateDynamicObject(18762, 815.69415, -1866.60876, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[11], 0, 18646, "MatColours", "grey");
	Cars_Unused[12] = CreateDynamicObject(18762, 810.69421, -1866.60876, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[12], 0, 18646, "MatColours", "lightblue");
	Cars_Unused[13] = CreateDynamicObject(18762, 805.69421, -1866.60876, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[13], 0, 18646, "MatColours", "orange");
	Cars_Unused[14] = CreateDynamicObject(18762, 800.69421, -1866.60876, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[14], 0, 18646, "MatColours", "red");
	Cars_Unused[15] = CreateDynamicObject(18762, 795.69421, -1866.60876, 8.50700,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[15], 0, 18646, "MatColours", "samporange");
	Cars_Unused[16] = CreateDynamicObject(18762, 793.70789, -1863.64575, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[16], 0, 18646, "MatColours", "white");
	Cars_Unused[17] = CreateDynamicObject(18762, 793.70789, -1859.14575, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[17], 0, 18646, "MatColours", "yellow");
	Cars_Unused[18] = CreateDynamicObject(18762, 793.70789, -1854.14575, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[18], 0, 18646, "MatColours", "blue");
	Cars_Unused[19] = CreateDynamicObject(18762, 793.70789, -1849.14575, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[19], 0, 18646, "MatColours", "green");
	Cars_Unused[20] = CreateDynamicObject(18762, 793.70789, -1844.14575, 8.50700,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(Cars_Unused[20], 0, 18646, "MatColours", "grey");

	Cars_Unused[21] = CreateDynamicObject(18762, 793.69147, -1866.56787, 10.82597,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[21], 0, 18646, "MatColours", "blue");
	Cars_Unused[22] = CreateDynamicObject(18762, 817.19153, -1866.56787, 10.82600,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[22], 0, 18646, "MatColours", "blue");
	Cars_Unused[23] = CreateDynamicObject(18762, 793.69153, -1842.56787, 10.82600,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[23], 0, 18646, "MatColours", "blue");
	Cars_Unused[24] = CreateDynamicObject(18762, 817.69153, -1842.56787, 10.82600,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(Cars_Unused[24], 0, 18646, "MatColours", "blue");

    //Observer
	CreateDynamicObject(18763, 811.57709, -1879.37842, 3.59470,   0.00000, 0.00000, 0.00000);
	Observer_Base = CreateDynamicObject(19278, 811.50995, -1879.43152, -38.23802,   0.00000, 0.00000, 0.00000, .streamdistance = -1);
	Observer_Seats[0] = CreateDynamicObject(19316, 809.98859, -1882.72485, 10.99730,   0.00000, 0.00000, 0.00000);
	AttachDynamicObjectToObject(Observer_Seats[0], Observer_Base, -1.5213, -3.2934, 49.2353, 0, 0, 0, 1);
	Observer_Seats[1] = CreateDynamicObject(19316, 812.98859, -1876.22485, 10.99730,   0.00000, 0.00000, 180.00000);
	AttachDynamicObjectToObject(Observer_Seats[1], Observer_Base, 1.5213, 3.2934, 49.2353, 0, 0, 180, 1);

	/*
	//FerrisWheel
	CreateDynamicObject(18878, 844.54, -2033.57, 27.11,   0.00, 0.00, 90.00);
	FerrisWheel_Base = CreateDynamicObject(18877, 844.53, -2033.59, 27.11,   0.00, 0.00, 90.00);
	FerrisWheel_Seats[0] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[0], FerrisWheel_Base, 0.0699, 0.0600, -11.7500, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[1] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[1], FerrisWheel_Base, -6.9100, -0.0899, -9.5000, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[2] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[2], FerrisWheel_Base, 11.1600, 0.0000, -3.6300, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[3] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[3], FerrisWheel_Base, -11.1600, -0.0399, 3.6499, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[4] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[4], FerrisWheel_Base, -6.9100, -0.0899, 9.4799, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[5] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[5], FerrisWheel_Base, 0.0699, 0.0600, 11.7500, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[6] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[6], FerrisWheel_Base, 6.9599, 0.0100, -9.5000, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[7] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[7], FerrisWheel_Base, -11.1600, -0.0399, -3.6300, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[8] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[8], FerrisWheel_Base, 11.1600, 0.0000, 3.6499, 0.0000, 0.0000, 90.0000, 0);
	FerrisWheel_Seats[9] = CreateDynamicObject(19316, 0.00, 0.00, 0.00, 	0.00, 0.00, 0.00);
	AttachObjectToObject(FerrisWheel_Seats[9], FerrisWheel_Base, 7.0399, -0.0200, 9.3600, 0.0000, 0.0000, 90.0000, 0);
	//FerrisWheel
	*/

	//Caida Libre
	Caida_Unused[0] = CreateDynamicObject(18980, 837.52, -2007.80, 18.93,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Caida_Unused[0], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[1] = CreateDynamicObject(18980, 836.98, -2008.01, 18.93,   0.00, 0.00, 40.00);
	SetDynamicObjectMaterial(Caida_Unused[1], 0, 18646, "MatColours", "blue");
	Caida_Unused[2] = CreateDynamicObject(18980, 836.71, -2008.53, 18.93,   0.00, 0.00, 80.00);
	SetDynamicObjectMaterial(Caida_Unused[2], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[3] = CreateDynamicObject(18980, 836.82, -2009.10, 18.93,   0.00, 0.00, 120.00);
	SetDynamicObjectMaterial(Caida_Unused[3], 0, 18646, "MatColours", "blue");
	Caida_Unused[4] = CreateDynamicObject(18980, 837.28, -2009.49, 18.93,   0.00, 0.00, 160.00);
	SetDynamicObjectMaterial(Caida_Unused[4], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[5] = CreateDynamicObject(18980, 837.89, -2009.48, 18.93,   0.00, 0.00, 200.00);
	SetDynamicObjectMaterial(Caida_Unused[5], 0, 18646, "MatColours", "blue");
	Caida_Unused[6] = CreateDynamicObject(18980, 838.33, -2009.10, 18.93,   0.00, 0.00, 240.00);
	SetDynamicObjectMaterial(Caida_Unused[6], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[7] = CreateDynamicObject(18980, 838.42, -2008.51, 18.93,   0.00, 0.00, 280.00);
	SetDynamicObjectMaterial(Caida_Unused[7], 0, 18646, "MatColours", "blue");
	Caida_Unused[8] = CreateDynamicObject(18980, 838.08, -2007.99, 18.93,   0.00, 0.00, 320.00);
	SetDynamicObjectMaterial(Caida_Unused[8], 0, 18646, "MatColours", "lightblue");
	//++
	Caida_Unused[9] = CreateDynamicObject(18980, 837.52, -2007.80, 18.93+24.9862,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Caida_Unused[9], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[10] = CreateDynamicObject(18980, 836.98, -2008.01, 18.93+24.9862,   0.00, 0.00, 40.00);
	SetDynamicObjectMaterial(Caida_Unused[10], 0, 18646, "MatColours", "blue");
	Caida_Unused[11] = CreateDynamicObject(18980, 836.71, -2008.53, 18.93+24.9862,   0.00, 0.00, 80.00);
	SetDynamicObjectMaterial(Caida_Unused[11], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[12] = CreateDynamicObject(18980, 836.82, -2009.10, 18.93+24.9862,   0.00, 0.00, 120.00);
	SetDynamicObjectMaterial(Caida_Unused[12], 0, 18646, "MatColours", "blue");
	Caida_Unused[13] = CreateDynamicObject(18980, 837.28, -2009.49, 18.93+24.9862,   0.00, 0.00, 160.00);
	SetDynamicObjectMaterial(Caida_Unused[13], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[14] = CreateDynamicObject(18980, 837.89, -2009.48, 18.93+24.9862,   0.00, 0.00, 200.00);
	SetDynamicObjectMaterial(Caida_Unused[14], 0, 18646, "MatColours", "blue");
	Caida_Unused[15] = CreateDynamicObject(18980, 838.33, -2009.10, 18.93+24.9862,   0.00, 0.00, 240.00);
	SetDynamicObjectMaterial(Caida_Unused[15], 0, 18646, "MatColours", "lightblue");
	Caida_Unused[16] = CreateDynamicObject(18980, 838.42, -2008.51, 18.93+24.9862,   0.00, 0.00, 280.00);
	SetDynamicObjectMaterial(Caida_Unused[16], 0, 18646, "MatColours", "blue");
	Caida_Unused[17] = CreateDynamicObject(18980, 838.08, -2007.99, 18.93+24.9862,   0.00, 0.00, 320.00);
	SetDynamicObjectMaterial(Caida_Unused[17], 0, 18646, "MatColours", "lightblue");

	Caida_Unused[18] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 0.00);
	Caida_Unused[19] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 2.50);
	Caida_Unused[20] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 5.50);
	Caida_Unused[21] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 11.50);
	Caida_Unused[22] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 19.00);
	Caida_Unused[23] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 32.00);
	Caida_Unused[24] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 48.00);
	Caida_Unused[25] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 62.50);
	Caida_Unused[26] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 78.50);
	Caida_Unused[27] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 93.50);
	Caida_Unused[28] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 108.00);
	Caida_Unused[29] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 114.50);
	Caida_Unused[30] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 124.50);
	Caida_Unused[31] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 141.00);
	Caida_Unused[32] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 165.00);
	Caida_Unused[33] = CreateDynamicObject(18764, 837.61, -2008.76, 58.92,   0.00, 0.00, 174.50);
	for(new i = 18; i != 34; i++) SetDynamicObjectMaterial(Caida_Unused[i], 0, 18646, "MatColours", "samporange");

	//prosigamos
	Caida_Base[0] = CreateDynamicObject(18886, 837.60, -2008.66, 13.52,   0.00, 0.00, 0.00, .streamdistance = -1);
	Caida_Base[1] = CreateDynamicObject(18886, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Base[1], Caida_Base[0], 0, 0, -2.1052, 180.0000, 0.0000, 0.0000);

	Caida_Seats[0] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[0], Caida_Base[0], -0.6162, 2.0824, -0.9604, 0.0000, 0.0000, 195.0000);
	Caida_Seats[1] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[1], Caida_Base[0], -1.4831, 1.4819, -0.9604, 0.0000, 0.0000, 225.0000);
	Caida_Seats[2] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[2], Caida_Base[0], -2.1035, 0.5745, -0.9604, 0.0000, 0.0000, 255.0000);
	Caida_Seats[3] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[3], Caida_Base[0], -2.1016, -0.5955, -0.9604, 0.0000, 0.0000, 285.0000);
	Caida_Seats[4] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[4], Caida_Base[0], -1.5044, -1.5795, -0.9604, 0.0000, 0.0000, 315.0000);
	Caida_Seats[5] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[5], Caida_Base[0], -0.5645, -2.1727, -0.9604, 0.0000, 0.0000, 345.0000);
	Caida_Seats[6] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[6], Caida_Base[0], 0.573, -2.1273, -0.9604, 0.0000, 0.0000, -345.0000);
	Caida_Seats[7] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[7], Caida_Base[0], 1.5295, -1.5389, -0.9604, 0.0000, 0.0000, -315.0000);
	Caida_Seats[8] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[8], Caida_Base[0], 2.1129, -0.5817, -0.9604, 0.0000, 0.0000, -285.0000);
	Caida_Seats[9] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[9], Caida_Base[0], 2.0814, 0.5617, -0.9604, 0.0000, 0.0000, -255.0000);
	Caida_Seats[10] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[10], Caida_Base[0], 1.5124, 1.5704, -0.9604, 0.0000, 0.0000, -225.0000);
	Caida_Seats[11] = CreateDynamicObject(1562, 0, 0, 0,   0.00, 0.00, 0.00);
	AttachDynamicObjectToObject(Caida_Seats[11], Caida_Base[0], 0.5522, 2.0793, -0.9604, 0.0000, 0.0000, -195.0000);
	//Caida Libre

	Cow_Seats[0] = CreateDynamicObjectEx(16442, 828.37, -1940.99, 13.79,   0.00, 0.00, 0.00);
	Cow_Seats[1] = CreateDynamicObjectEx(16442, 828.37, -1937.99, 13.79,   0.00, 0.00, 0.00);
	Cow_Seats[2] = CreateDynamicObjectEx(16442, 828.37, -1934.99, 13.79,   0.00, 0.00, 0.00);
	Cow_Seats[3] = CreateDynamicObjectEx(16442, 828.37, -1931.99, 13.79,   0.00, 0.00, 0.00);
	//Crazy Cow
    CreateDynamicVehicle(588, 825.7172, -2049.7195, 12.7904, 40.0000, -1, -1, 100);

    //TheJail
	CreateDynamicObject(19128, 840.91, -2064.93, 13.59,   -90.00, 0.00, 0.00);
	CreateDynamicObject(19128, 841.91, -2064.95, 12.59,   -90.00, 0.00, 0.00);
	CreateDynamicObject(19128, 842.91, -2064.97, 11.59,   -90.00, 0.00, 0.00);
	CreateDynamicObject(19128, 834.41, -2064.93, 13.59,   -90.00, 0.00, 0.00);
	CreateDynamicObject(19128, 833.41, -2064.95, 12.59,   -90.00, 0.00, 0.00);
	CreateDynamicObject(19128, 832.41, -2064.96, 11.59,   -90.00, 0.00, 0.00);


	Jail_Base2 = CreateDynamicObject(18878, 837.54, -2060.57, 27.11,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Jail_Base2, 3, 0, "MatColours", "samporange");

	Jail_Unused[0] = CreateDynamicObject(18980, 838.52, -2064.80, 18.93,   0.00, 0.00, 0.00);
	Jail_Unused[1] = CreateDynamicObject(18980, 837.52, -2064.80, 18.93,   0.00, 0.00, 0.00);
	Jail_Unused[2] = CreateDynamicObject(18980, 836.52, -2064.80, 18.93,   0.00, 0.00, 0.00);
	SetDynamicObjectMaterial(Jail_Unused[0], 0, 18646, "MatColours", "samporange");
	SetDynamicObjectMaterial(Jail_Unused[1], 0, 18646, "MatColours", "red");
	SetDynamicObjectMaterial(Jail_Unused[2], 0, 18646, "MatColours", "samporange");
	Jail_Base = CreateObject(18980, 837.52, -2063.30, 26.06,   0.00, 0.00, 0.00);
	SetObjectMaterial(Jail_Base, 0, 18646, "MatColours", "red-2");

	Jail[0] = CreateObject(19353, 0.00, 0.00, 0.00, 0.0000, 0.0000, 0);
	SetObjectMaterialText(Jail[0], "J", 0, 10, "Impact", 29, 0, -1, 0, 1);
	AttachObjectToObject(Jail[0], Jail_Base, -0.0307, 0.4546, 5.24, 0, 0, 90, 1);

	Jail[1] = CreateObject(19353, 0.00, 0.00, 0.00, 0.0000, 0.0000, 0);
	SetObjectMaterialText(Jail[1], "A", 0, 10, "Impact", 29, 0, -1, 0, 1);
	AttachObjectToObject(Jail[1], Jail_Base, -0.0307, 0.4546, 5.24-3, 0, 0, 90, 1);

	Jail[2] = CreateObject(19353, 0.00, 0.00, 0.00, 0.0000, 0.0000, 0);
	SetObjectMaterialText(Jail[2], "I", 0, 10, "Impact", 29, 0, -1, 0, 1);
	AttachObjectToObject(Jail[2], Jail_Base, -0.0307, 0.4546, 5.24-6, 0, 0, 90, 1);

	Jail[3] = CreateObject(19353, 0.00, 0.00, 0.00, 0.0000, 0.0000, 0);
	SetObjectMaterialText(Jail[3], "L", 0, 10, "Impact", 29, 0, -1, 0, 1);
	AttachObjectToObject(Jail[3], Jail_Base, -0.0307, 0.4546, 5.24-9, 0, 0, 90, 1);

	Jail[4] = CreateObject(19353, 837.4500, -2064.3171, 22.0772, 0.0000, 0.0000, 90);
	SetObjectMaterialText(Jail[4], "The Jail", 0, 140, "Arial Black", 90, 0, -16468988, 0, 1);

	Jail_BasePlatform = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	AttachObjectToObject(Jail_BasePlatform, Jail_Base, 0, 0.5104, -10.198, 0, 0, 0, 0);

	Jail_Plataforms[0] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[1] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[2] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[3] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[4] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[5] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	AttachObjectToObject(Jail_Plataforms[0], Jail_BasePlatform, 3.5, 0, 0, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[1], Jail_BasePlatform, -3.5, 0, 0, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[2], Jail_BasePlatform, 5.2415, 1.7112, 0, 0, 0, 90, 1);
	AttachObjectToObject(Jail_Plataforms[3], Jail_BasePlatform, -5.2415, 1.7112, 0, 0, 0, 90, 1);
	AttachObjectToObject(Jail_Plataforms[4], Jail_BasePlatform, 3.5, 3.5, 0, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[5], Jail_BasePlatform, -3.5, 3.5, 0, 0, 0, 0, 1);
	//
	Jail_Plataforms[6] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[7] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[8] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[9] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[10] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[11] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[12] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	AttachObjectToObject(Jail_Plataforms[6], Jail_BasePlatform, 3.5, 0, -1.2245, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[7], Jail_BasePlatform, -3.5, 0, -1.2245, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[8], Jail_BasePlatform, 5.2415, 1.7112, -1.2245, 0, 0, 90, 1);
	AttachObjectToObject(Jail_Plataforms[9], Jail_BasePlatform, -5.2415, 1.7112, -1.2245, 0, 0, 90, 1);
	AttachObjectToObject(Jail_Plataforms[10], Jail_BasePlatform, 3.5, 3.5, -1.2245, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[11], Jail_BasePlatform, -3.5, 3.5, -1.2245, 0, 0, 0, 1);
	AttachObjectToObject(Jail_Plataforms[12], Jail_BasePlatform, 0, 0, -1.2245, 0, 0, 0, 1);
 	//
	Jail_Plataforms[13] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[14] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[15] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[16] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[17] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[18] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[19] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[20] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	AttachObjectToObject(Jail_Plataforms[13], Jail_BasePlatform, 4.6395, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[14], Jail_BasePlatform, 3.3845, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[15], Jail_BasePlatform, 2.1295, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[16], Jail_BasePlatform, 0.8745, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[17], Jail_BasePlatform, -0.3805, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[18], Jail_BasePlatform, -1.6355, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[19], Jail_BasePlatform, -2.8905, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[20], Jail_BasePlatform, -4.1455, 1.7112, 0.6068, 90.0000, 0.0000, 90.0000, 1);
	//
	Jail_Plataforms[21] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[22] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[23] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[24] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[25] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[26] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[27] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	Jail_Plataforms[28] = CreateObject(19304, 0.00, 0.00, 0.00,   0.00, 0.00, 0.00);
	SetObjectMaterial(Jail_Plataforms[21], 0, 18646, "MatColours", "blue");
	SetObjectMaterial(Jail_Plataforms[22], 0, 18646, "MatColours", "green");
	SetObjectMaterial(Jail_Plataforms[23], 0, 18646, "MatColours", "lightblue");
	SetObjectMaterial(Jail_Plataforms[24], 0, 18646, "MatColours", "orange");
	SetObjectMaterial(Jail_Plataforms[25], 0, 18646, "MatColours", "red");
	SetObjectMaterial(Jail_Plataforms[26], 0, 18646, "MatColours", "yellow");
	SetObjectMaterial(Jail_Plataforms[27], 0, 18646, "MatColours", "samporange");
	SetObjectMaterial(Jail_Plataforms[28], 0, 18646, "MatColours", "white");
	AttachObjectToObject(Jail_Plataforms[21], Jail_BasePlatform, 4.6395, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[22], Jail_BasePlatform, 3.3845, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[23], Jail_BasePlatform, 2.1295, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[24], Jail_BasePlatform, 0.8745, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[25], Jail_BasePlatform, -0.3805, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[26], Jail_BasePlatform, -1.6355, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[27], Jail_BasePlatform, -2.8905, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	AttachObjectToObject(Jail_Plataforms[28], Jail_BasePlatform, -4.1455, 1.7112, -1.8277, 90.0000, 0.0000, 90.0000, 1);
	//Jail_Doors
	Jail_Doors[0] = CreateObject(19303, 838.4160+1.5, -2059.2896, 15.2527,   0.00, 0.00, 0.00);
	Jail_Doors[1] = CreateObject(19302, 836.6460-1.5, -2059.2896, 15.2527,   0.00, 0.00, 0.00);
	door = true;
}

stock ShowDefaultTextdraws(playerid)
{
	// Ha TD-k tilva vannak, akk egyiket se mutatjuk fel
	if(g_pOtherFlags[playerid] & e_NO_TEXTDRAWS)
		return;

	/*if(!(g_pTDFlags[playerid] & e_NOTD_FELIRAT))
	{
		TextDrawShowForPlayer(playerid, FosoFolirat);
		TextDrawShowForPlayer(playerid, FosoFolirat + Text:1);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_HONLAP))
	{
		TextDrawShowForPlayer(playerid, TD_Weblap);
	}
*/
	// Ha az óra textdraw nincs kikapcsolva és nincs játék ideje
	if(!(g_pTDFlags[playerid] & e_NOTD_ORA) && !(g_PlayerFlags[playerid] & e_GAME_HOUR))
	{
		PlayerTextDrawShow(playerid, TD_Datum[playerid]);
		PlayerTextDrawShow(playerid, TD_Ido[playerid]);
		TogglePlayerClock(playerid, false);
	}
	else if(g_PlayerFlags[playerid] & e_GAME_HOUR)
	{
		PlayerTextDrawHide(playerid, TD_Datum[playerid]);
		PlayerTextDrawHide(playerid, TD_Ido[playerid]);
		TogglePlayerClock(playerid, true);
	}
	else
	{
		PlayerTextDrawHide(playerid, TD_Datum[playerid]);
		PlayerTextDrawHide(playerid, TD_Ido[playerid]);
		TogglePlayerClock(playerid, false);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_XP))
	{
		PlayerTextDrawShow(playerid, g_XPText[playerid]);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_XPCSIK))
	{
		TextDrawShowForPlayer(playerid, g_XPBox);
		PlayerTextDrawShow(playerid, g_XPPos[playerid]);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_XPSZINT))
	{
		PlayerTextDrawShow(playerid, g_SzintText[playerid]);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_DMINFO))
	{
		PlayerTextDrawShow(playerid, TD_InDMPlayers[playerid]);
		//printf("TD_DMInfoSettings[playerid]: %d, %d", _:TD_DMInfoSettings[playerid], _:TD_InDMPlayers[playerid]);
		PlayerTextDrawShow(playerid, TD_DMInfoSettings[playerid]);
		for(new i; i != sizeof(TD_DMInfo); i++)
		{
			if(_:TD_DMInfo[i] == 0) continue;
			TextDrawShowForPlayer(playerid, TD_DMInfo[i]);
		}
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_DMKILLS) && g_pDeathMatchID[playerid] != -1)
	{
		PlayerTextDrawShow(playerid, InDMKills[playerid]);
	}

	// Fallout textdraw
	if(!(g_pTDFlags[playerid] & e_NOTD_FALLOUT) && g_pGamesData[playerid] & e_IN_FALLOUT)
	{
		TextDrawShowForPlayer(playerid, FalloutTextdraw);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_CTC) && g_pGamesData[playerid] & e_IN_CTC)
	{
		TextDrawShowForPlayer(playerid, TD_CTC);
	}

	new
	    str[6],
	    Float:fHealth;
	if(!(g_pTDFlags[playerid] & e_NOTD_HEALTH))
	{
		GetPlayerHealth(playerid, fHealth);
		valstr(str, floatround(fHealth));
		PlayerTextDrawShow(playerid, TD_pHealth[playerid]);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_ARMOUR))
	{
		GetPlayerArmour(playerid, fHealth);
		if(fHealth > 0.0)
		{
			valstr(str, floatround(fHealth));
			PlayerTextDrawShow(playerid, TD_pArmour[playerid]);
		}
	}
	if(!(g_pTDFlags[playerid] & e_TD_GPS))
	{
		PlayerTextDrawShow(playerid, TD_pGPS[playerid]);
	}

	if(!(g_pTDFlags[playerid] & e_NOTD_DM_INFO_HELP))
	{
		TextDrawShowForPlayer(playerid, TD_DMInfoHelp[g_pLang{playerid}]);
	}
}

stock HideDefaultTextdraws(playerid)
{
	TextDrawHideForPlayer(playerid, FosoFolirat);
	TextDrawHideForPlayer(playerid, FosoFolirat + Text:1);
	TextDrawHideForPlayer(playerid, TD_Weblap);
	PlayerTextDrawHide(playerid, TD_Datum[playerid]);
	PlayerTextDrawHide(playerid, TD_Ido[playerid]);
	PlayerTextDrawHide(playerid, g_XPText[playerid]);
	TextDrawHideForPlayer(playerid, g_XPBox);
	PlayerTextDrawHide(playerid, g_XPPos[playerid]);
	PlayerTextDrawHide(playerid, g_SzintText[playerid]);
//	TextDrawHideForPlayer(playerid, g_SzintText[playerid]);
	PlayerTextDrawHide(playerid, TD_InDMPlayers[playerid]);
	PlayerTextDrawHide(playerid, TD_DMInfoSettings[playerid]);
	PlayerTextDrawHide(playerid, InDMKills[playerid]);
	TextDrawHideForPlayer(playerid, TD_Tele);
	TextDrawHideForPlayer(playerid, FalloutTextdraw);
	TextDrawHideForPlayer(playerid, TD_CTC);
	PlayerTextDrawHide(playerid, TD_pHealth[playerid]);
	PlayerTextDrawHide(playerid, TD_pArmour[playerid]);
	PlayerTextDrawHide(playerid, TD_pGPS[playerid]);


	TextDrawHideForPlayer(playerid, TD_DMInfoHelp[g_pLang{playerid}]);

	for(new i; i != sizeof(TD_DMInfo); i++)
	{
		TextDrawHideForPlayer(playerid, TD_DMInfo[i]);
	}
}

stock ShowKezdoTextdraws(playerid)
{
	TextDrawShowForPlayer(playerid, TD_Kezdes0);
	TextDrawShowForPlayer(playerid, TD_Kezdes1);
	TextDrawShowForPlayer(playerid, TD_Kezdes2);
	TextDrawShowForPlayer(playerid, TD_Kezdes3);
	TextDrawShowForPlayer(playerid, TD_Kezdes4);
	TextDrawShowForPlayer(playerid, TD_Kezdes5);
	TextDrawShowForPlayer(playerid, TD_Kezdes6);
	TextDrawShowForPlayer(playerid, TD_Kezdes7);
	TextDrawShowForPlayer(playerid, TD_Kezdes8);
	TextDrawShowForPlayer(playerid, TD_Kezdes9);
	TextDrawShowForPlayer(playerid, TD_Kezdes10);
	TextDrawShowForPlayer(playerid, TD_Kezdes11);
	TextDrawShowForPlayer(playerid, TD_Kezdes12);
	TextDrawShowForPlayer(playerid, TD_Kezdes13);
}

stock HideKezdoTextdraws(playerid)
{
	TextDrawHideForPlayer(playerid, TD_Kezdes0);
	TextDrawHideForPlayer(playerid, TD_Kezdes1);
	TextDrawHideForPlayer(playerid, TD_Kezdes2);
	TextDrawHideForPlayer(playerid, TD_Kezdes3);
	TextDrawHideForPlayer(playerid, TD_Kezdes4);
	TextDrawHideForPlayer(playerid, TD_Kezdes5);
	TextDrawHideForPlayer(playerid, TD_Kezdes6);
	TextDrawHideForPlayer(playerid, TD_Kezdes7);
	TextDrawHideForPlayer(playerid, TD_Kezdes8);
	TextDrawHideForPlayer(playerid, TD_Kezdes9);
	TextDrawHideForPlayer(playerid, TD_Kezdes10);
	TextDrawHideForPlayer(playerid, TD_Kezdes11);
	TextDrawHideForPlayer(playerid, TD_Kezdes12);
	TextDrawHideForPlayer(playerid, TD_Kezdes13);
}

stock Stats_AddRow(playerid, column, color, format[], va_args<>)
{
    va_format(gs_szKimenet, sizeof(gs_szKimenet), format, va_start<4>);
    return Stats_AddRowInternal(playerid, column, gs_szKimenet, color);
}

stock Stats_Init(playerid, skin)
{
	SetPVarInt(playerid, "pStatsSkin", skin);
}

stock Stats_AddRowInternal(playerid, column, str[], color = 0xFFFFFFFF)
{
	// Ha hülyevagy, akkor hibát adunk
	if(column > sizeof(g_pStatsRow[]))
	{
		printf("stats error %d - %d", column, str);
		return 0;
	}

    new
		i = g_pStatsRow[playerid][column]++,
		PlayerText:myTD;

	TextDrawShowForPlayer(playerid, TD_StatsBox);
	if(!i && !column)
	{
		myTD = CreatePlayerTextDraw(playerid, 31.000000, 127.000000, "_");
		PlayerTextDrawBackgroundColor(playerid, myTD, 0);
		PlayerTextDrawFont(playerid, myTD, 5);
		PlayerTextDrawLetterSize(playerid, myTD, 0.379999, 0.900000); // 1.0
		PlayerTextDrawColor(playerid, myTD, -1);
		PlayerTextDrawSetOutline(playerid, myTD, 0);
		PlayerTextDrawSetProportional(playerid, myTD, 1);
		PlayerTextDrawSetShadow(playerid, myTD, 1);
		PlayerTextDrawUseBox(playerid, myTD, 1);
		PlayerTextDrawBoxColor(playerid, myTD, 0);
		PlayerTextDrawTextSize(playerid, myTD, 113.000000, 190.000000);
		PlayerTextDrawSetPreviewModel(playerid, myTD, GetPVarInt(playerid, "pStatsSkin"));
		PlayerTextDrawSetPreviewRot(playerid, myTD, 0.000000, 0.000000, 15.000000, 0.800000);
		PlayerTextDrawShow(playerid, myTD);

		Bit_Let(gPlayerStatsTDs[playerid], _:myTD);
	}

	myTD = CreatePlayerTextDraw(playerid, 112.000000 + Float:(column * 100.0), 143.000000 + Float:(i * 12.0), str);
	PlayerTextDrawBackgroundColor(playerid, myTD, 976894634);
	PlayerTextDrawFont(playerid, myTD, 1);
	PlayerTextDrawLetterSize(playerid, myTD, 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, myTD, color);
	PlayerTextDrawSetOutline(playerid, myTD, 1);
	PlayerTextDrawSetProportional(playerid, myTD, 1);
	PlayerTextDrawShow(playerid, myTD);

	Bit_Let(gPlayerStatsTDs[playerid], _:myTD);
	return 1;
}

stock VehicleRepair(playerid)
{
    if(GetPVarInt(playerid, "AutoRepair") == 0) return 1;
	if(g_BonusCarOwner == playerid) return 1;
	if(ZaszloOwner == playerid) return 1;
	if(IsPlayerNPC(playerid)) return 1;
	if((e_IN_CTC | e_IN_DERBY | e_IN_TAXI) & g_pGamesData[playerid]) return 1;
    vID = GetPlayerDynamicVehicleID(playerid);
    if(vID == g_BonusCarID) return 1;
 	if(GetPVarInt(playerid,"RaceParticipant") != 0)
	{
 		if(RaceAutoFix == 1)
		{
  			switch(GetPVarInt(playerid, "AutoRepair"))
			{
   				case 1: SetDynamicVehicleHealth(vID, 1000.0);
			    case 2:
   				{
			    	GetDynamicVehicleHealth(vID, Angle);
				    RepairDynamicVehicle(vID);
				    SetDynamicVehicleHealth(vID, Angle);
   				}
			    case 3: SetDynamicVehicleHealth(vID, 1000.0), RepairDynamicVehicle(vID);
			}
		}
	}
 	else
 	{
		switch(GetPVarInt(playerid, "AutoRepair"))
		{
   			case 1: SetDynamicVehicleHealth(vID, 1000.0);
			case 2:
			{
			    GetDynamicVehicleHealth(vID, Angle);
				RepairDynamicVehicle(vID);
			    SetDynamicVehicleHealth(vID, Angle);
			}
   			case 3: SetDynamicVehicleHealth(vID, 1000.0), RepairDynamicVehicle(vID);
		}
	}
	return 1;
}

stock Stats_AddWeapons(playerid, weapons[])
{
    new
		PlayerText:myTD,
		count;
	for(new x; x != 13; x++)
	{
		new id = FindID(GetWeaponModel(weapons[x]));
		if(id != -1)
		{
			//printf("weaponid stats: %d -> %d", weapons[x], id);
			myTD = CreatePlayerTextDraw(playerid, 107.000000 + Float:(count * 35.0), 315.000000, "ABC");
			PlayerTextDrawSetPreviewModel(playerid, myTD, gWeaponArray[id][eModelllTeFasz]);
			PlayerTextDrawSetPreviewRot(playerid, myTD, gWeaponArray[id][fEltolasBazdmeg][0], gWeaponArray[id][fEltolasBazdmeg][1], gWeaponArray[id][fEltolasBazdmeg][2], gWeaponArray[id][fEltolasBazdmeg][3]);

			PlayerTextDrawBackgroundColor(playerid, myTD, 0x00000055);
			PlayerTextDrawFont(playerid, myTD, 5);
	  		PlayerTextDrawLetterSize(playerid, myTD, 0.319999, 2.000000);
			PlayerTextDrawTextSize(playerid, myTD, 33.000000, 25.000000);
			PlayerTextDrawShow(playerid, myTD);

			Bit_Let(gPlayerStatsTDs[playerid], _:myTD);
			count++;
/*
			myTD = CreatePlayerTextDraw(playerid, 107.000000 + Float:(x * 40.0 + 10), 335.000000, "358");
			PlayerTextDrawBackgroundColor(playerid, myTD, 976894634);
			PlayerTextDrawFont(playerid, myTD, 1);
			PlayerTextDrawLetterSize(playerid, myTD, 0.130000, 0.799999);
			PlayerTextDrawColor(playerid, myTD, 0xFF0000FF);
			//PlayerTextDrawSetOutline(playerid, myTD, 1);
			//PlayerTextDrawSetProportional(playerid, myTD, 1);
			PlayerTextDrawShow(playerid, myTD);

			Bit_Let(gPlayerStatsTDs[playerid], _:myTD);
*/
		}
	}
}

stock Stats_Hide(playerid)
{
    TextDrawHideForPlayer(playerid, TD_StatsBox);
    //TextDrawDestroy(TD_StatsBox);

	for(new i; i != MAX_PLAYER_TEXT_DRAWS; i++)
	{
		if(Bit_Get(gPlayerStatsTDs[playerid], i))
		{
			PlayerTextDrawDestroy(playerid, PlayerText:i);
			PlayerTextDrawHide(playerid, PlayerText:i);
		}
	}
	Bit_SetAll(gPlayerStatsTDs[playerid], false);

	DeletePVar(playerid, "pStatsSkin");
	for(new i; i != sizeof(g_pStatsRow[]); i++)
	{
        g_pStatsRow[playerid][i] = 0;
	}
	return 1;
}

stock IsOwner(playerid)
{
	if(GetPVarInt(playerid,"Level") == 4 || IsPlayerAdmin(playerid))
	{
		 return 1;
	}
	else return 0;
}

stock IsFOOwner(playerid)
{
	switch(PlayerInfo[playerid][pRegID])
	{
		case 1, 2, 3: return 1;
		//case 1, 3: return 1;
	}
	return 0;
}

// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ checkvalue ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
stock
	checkvalue(array[], size = sizeof array)										// Created by Phento 11.03.20
{
	for(new f = 0; f < size - 1; f++)
		for(new c = f + 1; c < size; c++)
			if(array[f] == array[c])
				return true;
	return false;
}
// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ randomlotto ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
randomlotto(array[], size = sizeof array) 										// Created by Phento 11.03.20
	for(new p = 0; p < size; p++) array[p] = random(MAX_LIMIT)+1;
// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ Simple_Sort ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
stock
	Simple_Sort(array[], loop = sizeof(array)) 									// Created by Phento 10.07.20
{
	new
	    temp,
	    index = 0;
	while(index < loop - 1)
	{
	    if(array[index] > array[index+1])
	    {
	        temp = array[index+1];
	        array[index+1] = array[index];
	        array[index] = temp;
	        index = 0;
		} else { index++; }
	}
	return;
}
// ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ GepiLottoSzamok ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
GepiLottoSzamok(playerid)
{
	randomlotto(NyeroSzamok[playerid]);
	if(checkvalue(NyeroSzamok[playerid])) GepiLottoSzamok(playerid);
	Simple_Sort(NyeroSzamok[playerid]);
}
//¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ LottoInfoMsg ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
LottoInfoMsg(playerid)
{
	SendClientMessagef(playerid, COLOR_YELLOW, LANG(playerid, "MSG_A_LOTTO_SZAMAID_A_KOVETKEZOK"), ReturnNumberstr(NyeroSzamok[playerid]));
	SendClientMessage(playerid, COLOR_ORANGE, LANG(playerid, "MSG_EZEKET_A_SZAMOKAT_KESOBB_A"));
}

//¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤ [ ReturnNumberstr ] ¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
ReturnNumberstr(array[], size = sizeof array)
{
	new
		i,
		str[64];
	for( ; i < size; i++)
	{
		format(str, sizeof(str), "%s %d, ", str, array[i]);
	}
	i = strlen(str);
	while(i--) if(str[i] == ',') { str[i] = '\0'; break; }
	return str;
}

CMD:randomlotto(playerid, params[], 0, 0)
{
	if(g_pOtherFlags[playerid] & e_HAVE_TICKET) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_VETTEL_LOTTOT"));
	if(GetPlayerMoney(playerid) < TICKET_PRICE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_LOTTO_ARA_TICKET_PRICE_NEKED"));

	GivePlayerMoneyEx(playerid, -TICKET_PRICE, "RandomLotto");
	g_pOtherFlags[playerid] |= e_HAVE_TICKET;
	GepiLottoSzamok(playerid);
	LottoInfoMsg(playerid);
	return 1;
}

CMD:lotto(playerid, params[], 0, 0)
{
	if(g_pOtherFlags[playerid] & e_HAVE_TICKET) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_MAR_VETTEL_LOTTOT_MYLOTTO"));
	if(GetPlayerMoney(playerid) < TICKET_PRICE) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_LOTTO_ARA_TICKET_PRICE_NEKED"));

	new
		num[MAX_NUMBER_COUNT];
	if(sscanf(params, "a<i>["#MAX_NUMBER_COUNT"]", num)) return SendUsage(playerid, "/lotto "#MAX_NUMBER_COUNT" db[szám] ["#MIN_LIMIT"-"#MAX_LIMIT"]");
	new
		p;
	for( ; p < MAX_NUMBER_COUNT; p++) if(num[p] > MAX_LIMIT || num[p] < MIN_LIMIT) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_LOTTOSZAMOKAT_MIN_LIMITMAX"));
	for(new f = 0; f < MAX_NUMBER_COUNT - 1; f++)
		for(new c = f + 1; c < MAX_NUMBER_COUNT; c++)
			{
				if(num[f] == num[c]) return SendClientMessage(playerid, COLOR_WHITE, LANG(playerid, "MSG_NEM_ADHATSZ_MEG_AZONOS_SZAMOKAT"));
			}

	Simple_Sort(num);
	for(p = 0; p < MAX_NUMBER_COUNT; p++)
		NyeroSzamok[playerid][p] = num[p];
	GivePlayerMoneyEx(playerid, -TICKET_PRICE, "BuyLotto");
	g_pOtherFlags[playerid] |= e_HAVE_TICKET;
	LottoInfoMsg(playerid);
	return 1;
}

CMD:mylotto(playerid, params[], 0, 0)
{
	if(!(g_pOtherFlags[playerid] & e_HAVE_TICKET)) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_VETTEL_MEG_LOTTOT_VASARLASHOZ"));

	LottoInfoMsg(playerid);
	return 1;
}

CMD:lottotest(playerid, params[], 4, 0)
{
    Sorsolas();
	return 1;
}

forward Sorsolas();
public Sorsolas()
{
	randomlotto(KisorsoltSzamok);
	if(checkvalue(KisorsoltSzamok)) Sorsolas();
	Simple_Sort(KisorsoltSzamok);
	new
		Talalat,
		winn;

	foreach(Player, p)
	{
		if(g_pOtherFlags[p] & e_HAVE_TICKET)
		{
			for(new f = 0; f < MAX_NUMBER_COUNT; f++)
				for(new c = 0; c < MAX_NUMBER_COUNT; c++)
					{ if(NyeroSzamok[p][f] == KisorsoltSzamok[c]) Talalat++;}

			SendClientMessage(p, COLOR_RED, LANG(p, "MSG___LOTTO_MAX_NUMBER_COUNT"));
			SendClientMessagef(p, COLOR_YELLOW, LANG(p, "MSG__A_SAJAT_LOTTO_SZAMAID_"), ReturnNumberstr(NyeroSzamok[p]));
			SendClientMessagef(p, COLOR_GREEN2, LANG(p, "MSG__A_NYERTES_LOTTO_SZAMOK_"), ReturnNumberstr(KisorsoltSzamok));

			if(Talalat == 0)
			{
				SendClientMessage(p, COLOR_GREEN2, "Nem találtál el egy számot se. {" #XCOLOR_RED "}" #XP_NINCS_TALALAT " XP");
				GivePlayerXP(p, XP_NINCS_TALALAT);
			}
			else if(Talalat == MAX_NUMBER_COUNT)
			{
				SendClientMessage(p, COLOR_GREEN, LANG(p, "MSG_TELI_TALALAT"));
				SendClientMessage(p, COLOR_GREEN, LANG(p, "MSG_NYEREMENYED_2000000"));
				SendClientMessageToAllf(COLOR_RED, "MSG__MEGNYERTE_A_FONYEREMENYT_20000", GetPlayerColor(p) >>> 8, pName(p), p);
				GivePlayerMoneyEx(p, 2000000, "LottoTeli");
				GivePlayerXP(p, 50000);
			}
			else
			{
				switch(Talalat)
				{
					case 1: winn = randomex(2500, 5000);
					case 2: winn = randomex(5000, 30000);
					case 3: winn = randomex(30000, 160000);
					case 4: winn = randomex(160000, 300000);
					case 5: winn = randomex(300000, 750000);
				}
				GivePlayerMoneyEx(p, winn, "Lotto");
				GivePlayerXP(p, XP_LOTTO_WIN);
				SendClientMessagef(p, COLOR_GREEN2, LANG(p, "MSG_TALALATOK_SZAMA__NYEREMENYED"), Talalat, winn);

				SendClientMessageToAllf(COLOR_BLUE, "MSG_LOTTO___TALALATTAL_NYERT_", GetPlayerColor(p) >>> 8, pName(p), p, Talalat, winn);
			}

			if(Talalat != 0)
			{
			    mysql_format(1, query, sizeof(query), "INSERT INTO `lotto`(id, player, reg_id, talalatok_szama, win, time) VALUES(0, '%s', %d, %d, %d, %d)", pName(p), PlayerInfo[p][pRegID], Talalat, winn, CurrentTimestamp());
				mysql_function_query(1, query, false, "", "");
			}

			Talalat = 0;  // Találat számláló nullázása
			SendClientMessage(p, COLOR_RED, " ================================");
			g_pOtherFlags[p] &= ~e_HAVE_TICKET;
		}
	}
	return 1;
}

forward LottoHirdetes();
public LottoHirdetes()
{
	SendClientMessageToAll(COLOR_YELLOW, "MSG_VASAROLJ_LOTTOT_A_LOTTO_VAGY");
}

stock GivePlayerXP(playerid, score)
{
	if(g_pVIP[playerid] && !IsNegative(score)) score = score + 2; //Vipnek +2 xp
    GivePlayerScore(playerid, score);
    
	if(g_pOtherFlags[playerid] & e_RAKSAMP)
	{
		mysql_format(1, query, sizeof(query), "UPDATE `players` SET `szint` = %d, `xp` = %d WHERE `reg_id` = %d", g_pSzint{playerid}, GetPlayerScore(playerid), GetPVarInt(playerid,"LineID"));
		mysql_function_query(1, query, false, "", "");
		//printf(query);
	}
    return 1;
}

stock SpawnNPC(playerid,carid,seatid,skinid,objectstr[])
{
	if(skinid != -1) SetPlayerSkin(playerid,skinid);
	else SetPlayerSkin(playerid,random(300));

    //printf("SpawnNPC playerid(%d) carid(%d), seatid(%d), objectstr(%s))",playerid,carid,seatid,objectstr);
	PutPlayerInVehicle(playerid, g_NPC_Car[carid], seatid);

    if(strcmp(objectstr, "N/A", true))
	{
 		SetTimerEx("AddObjectToPlayerVehicle", 5000, false, "ds", playerid, objectstr);
	}
}

forward AddObjectToPlayerVehicle(playerid, str[]);
public AddObjectToPlayerVehicle(playerid, str[])
{
	//printf("AddObjectToPlayerVehicle %s",str);
	return cmd_lvoset(playerid, str);
}

stock SaveClanLog(_clanid, _playerid, _giveplayerid, _type[], _str[])
{
    getdate(year, month, day), gettime(hour, minute, second);
    RemoveHexColorFromString(_type);
    RemoveHexColorFromString(_str);
	if(_giveplayerid == -1)
	{
	    mysql_format(1, query, sizeof(query), "INSERT INTO `clans_log`(id, clanid, clanname, playerid, playerid_name, type, str, time) \
        VALUES(0, %d, '%s', %d, '%s', '%s', '%s', '%02d.%02d.%02d %02d:%02d:%02d')", CLAN_SQL(_clanid), gClanName[_clanid], PlayerInfo[_playerid][pRegID], pName(_playerid), _type, _str, year, month, day, hour, minute, second);
	}
	else
	{
	    mysql_format(1, query, sizeof(query), "INSERT INTO `clans_log`(id, clanid, clanname, playerid, playerid_name, player1, player1_name, type, str, time) \
        VALUES(0, %d, '%s', %d, '%s', %d, '%s', '%s', '%s', '%02d.%02d.%02d %02d:%02d:%02d')", CLAN_SQL(_clanid), gClanName[_clanid], PlayerInfo[_playerid][pRegID], pName(_playerid), PlayerInfo[_giveplayerid][pRegID], pName(_giveplayerid), _type, _str, year, month, day, hour, minute, second);
	}
	mysql_function_query(1, query, false, "", "");
	//printf(query);
}

CMD:allowhud(playerid, params[], 0, 0)
{
    new dmid = g_pDeathMatchID[playerid];
	if(dmid != -1 && g_DMFlags[dmid] & e_NO_HUD)
	{
        SendClientMessage(playerid, COLOR_RED, "HIBA: Ebben a DM-ben nem használhatod ezt a parancsot!");
        return 1;
	}

    g_PlayerFlags2[playerid] ^= e_HUD;
	if(g_PlayerFlags2[playerid] & e_HUD) TogglePlayerWidescreen(playerid, bool:true);
  	else TogglePlayerWidescreen(playerid, bool:false);
    SaveFlags(playerid);
	return 1;
}

stock ShowPlayerDialogEx(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[] = "")
{
    if(g_pOtherFlags[playerid] & e_RAKSAMP) return 0;
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
    return 1;
}

stock IPCheck(playerid, str[], where[])
{
   // #pragma unused where
	new
	    numbCount,
	    pontok,
	   	kettospontok,
	   	kotojelek,
	   	alsokotojelek,
	   	Hirdetes = 0;
	   	
    for(new x, j = strlen(str); x != j; x++)
	{
		if(('0' <= str[x] <= '9')) numbCount ++;
	 	if(str[x] == '.') pontok ++;
		if(str[x] == ':') kettospontok ++;
		if(str[x] == '-') kotojelek ++;
		if(str[x] == '_') alsokotojelek ++;
	}
	
    //if(numbCount > 12 && numbCount < 16 && pontok > 2 && pontok < 5 && kettospontok > 0 && kettospontok < 2)
    if(numbCount > 12 && numbCount <= 15 && pontok > 1 && pontok < 4)
	{
	    if(kettospontok >= 1 && kettospontok < 2)
		{
			if(strfind(str, ".", true) != -1 && strfind(str, ":", true) != -1)
			{
                Hirdetes = 1;
			}
		}
	}
    if(strfind(str, "s2.fps-system.eu:7777", true) != -1 ||
    	strfind(str, "s2.fps-system.eu", true) != -1 ||
		strfind(str, "ip.unitedrpg.com", true) != -1 ||
		strfind(str, "ip.unitedrpg.com:7777", true) != -1 ||
		strfind(str, ".com:7777", true) != -1 ||
		strfind(str, ".eu:7777", true) != -1 ||
		strfind(str, ".server28.clans.hu", true) != -1 ||
		strfind(str, "fps-system.eu", true) != -1 ||
		strfind(str, "fps-system", true) != -1 ||
		strfind(str, "fpssystem", true) != -1 ||
		strfind(str, "system.eu", true) != -1 ||
		strfind(str, "fps-system.eu:7777", true) != -1 ||
		strfind(str, "unitedrpg.com", true) != -1 ||
		strfind(str, "unitedrpg.com:7777", true) != -1 ||
		strfind(str, "server28", true) != -1 ||
		strfind(str, "server28.", true) != -1 ||
		strfind(str, ".clans.hu:", true) != -1 ||
		strfind(str, "clans.hu:", true) != -1 ||
		strfind(str, "server28.clans.hu:7842", true) != -1 ||
		strfind(str, "unitedrpg.com", true) != -1)
	{
	    Hirdetes = 1;
	}
	if(Hirdetes == 1)
	{
	    //SendClientMessagef(playerid,-1,"számok %d pontok %d kettospontok %d",numbCount,pontok, kettospontok);
		SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_NEM_HIRDETHETSZ"));

		mysql_format(1, query, sizeof(query), "INSERT INTO `sentips`(id, player, reg_id, msg, time) VALUES(0, '%s', %d, '%e', '%d')", pName(playerid), PlayerInfo[playerid][pRegID], str, CurrentTimestamp());
		mysql_function_query(1, query, false, "", "");

		format(i_str, sizeof(i_str), "Figyelmeztetés: {%06x}%s(%d) {" #XCOLOR_WHITE "}IP-t próbált írni <%s>. IP megtekintése: /lastips", GetPlayerColor(playerid) >>> 8, pName(playerid), playerid, where);
  		foreach(Player, i)
    	{
			if(GetPVarInt(i, "Level") > 0 || IsPlayerAdmin(i))
			{
			    SendClientMessage(i, COLOR_WHITE, i_str);
			}
		}
	    return 1;
	}
	//SendClientMessagef(playerid,-1,"számok %d pontok %d kettospontok %d", numbCount, pontok, kettospontok);
	return 0;
}
/*
forward ShowButorSelectionMenu(playerid, listitem);
public ShowButorSelectionMenu(playerid, listitem)
{
	switch(listitem)
	{
	    case 0: ShowModelSelectionMenuEx(playerid, butorok, sizeof(butorok), "Válassz!", mSelection_Falikepek, 16.0, 0.0, -55.0);
	    case 1: ShowModelSelectionMenuEx(playerid, falikepek, sizeof(falikepek), "Válassz!", mSelection_Falikepek, 16.0, 0.0, -55.0);
	    case 2: ShowModelSelectionMenuEx(playerid, szorakozas, sizeof(szorakozas), "Válassz!", mSelection_Szorakozas, 16.0, 0.0, -55.0);
	    case 3: ShowModelSelectionMenuEx(playerid, falak, sizeof(falak), "Válassz!", mSelection_Falak, 16.0, 0.0, -55.0);
		case 4: ShowModelSelectionMenuEx(playerid, furdoszoba, sizeof(furdoszoba), "Válassz!", mSelection_Furdoszoba, 16.0, 0.0, -55.0);
		case 5: ShowModelSelectionMenuEx(playerid, konyhai, sizeof(konyhai), "Válassz!", mSelection_Konyhai, 16.0, 0.0, -55.0);
	}
	return 1;
}
*/


forward RakSAMP(type);
public RakSAMP(type)
{
	new
		count;
    foreach(Player, i) if(g_pOtherFlags[i] & e_RAKSAMP) count++;

	if(count != 0)
	{
		Ide:
	    new id = Itter_Random(Player);
	    if(!(g_pOtherFlags[id] & e_RAKSAMP)) goto Ide; //Ha nem bot
        if(GetPVarType(id, "AFKTime")) goto Ide; //Ha afkba van akkor nem futhat le
	    switch(type)
	    {
	        case 1: 
	        {
	            switch(random(2))
	            {
	                case 0: CallRemoteFunction("OnPlayerCommandText", "ds", id, g_szTeleportCommand[Itter_Random(Teleports)]);
					case 1: cmd_random(id,""); //
		        }
	        }
	        case 2: if(goldpot[gPickup]) CallRemoteFunction("OnPlayerEnterDynamicCP", "dd", id, gCP_GOLDPOT), CallRemoteFunction("OnPlayerCommandText", "ds", id, g_szTeleportCommand[Itter_Random(Teleports)]); //Ha nincs elrejtve aranytojás akkor véletlen se futhat le
	        case 3: if(g_iReactionActive) CallRemoteFunction("OnPlayerText", "ds", id, g_szReactionStr);
	        case 4: if((g_ServerFlags & e_TELEPORT)) CallRemoteFunction("OnPlayerCommandReceived", "ds", id, g_szTeleStr);
	        case 5: if(g_ServerFlags & e_MATEK) format(i_str, sizeof(i_str),"/call %d",g_iMatMegoldas), CallLocalFunction("OnPlayerCommandText", "is", id, i_str);
	    }
	}
}

forward THREAD_VehicleComponents(playerid, type, queue);
public THREAD_VehicleComponents(playerid, type, queue)
{
    if(g_pQueryQueue[playerid] != queue) return QUERY_COLLISION(THREAD_VehicleComponents);
    new
	    rows = cache_get_row_count(),
	    fields = cache_get_field_count();
	    
	dline[0] = EOS;
    switch(type)
    {
        case 0:
  		{
            for(new x; x != rows; x++)
			{
                cache_get_row(x, 0, name);

                strcat(dline, name);
                strcat(dline, "\n");
            }
            ShowPlayerDialogEx(playerid, DIALOG_SQL_TUNE_1, DIALOG_STYLE_LIST, "Tuningmenü", dline, "Select", "Cancel");
        }
        case 1:
        {
            if(!rows) return SendClientMessage(playerid, COLOR_RED, LANG(playerid, "MSG_HIBA_EZ_NEM_TUNINGOLHATO"));
			for(new x; x != fields; x++)
			{
   				cache_get_row(0, x, name);

				if(!isnull(name))
    			{
       				strcat(dline, name);
                    strcat(dline, "\n");
           		}
           	}
			ShowPlayerDialogEx(playerid, DIALOG_SQL_TUNE_1, DIALOG_STYLE_LIST, "Tuningmenü", dline, "Select", "Cancel");
        }
        case 2:
        {
           	dline = "{FF0000}Component ID\t{FF8000}Type\n";
            for(new x; x != rows; x++)
			{
                cache_get_row_int(x, 0, vID);
                cache_get_row(x, 1, country);
                format(dline, sizeof dline, "%s%d\t%s\n", dline, vID, country);
            }
            if(vID == 1087) strcat(dline, " ----\tRemove Hydraulics");
            ShowPlayerDialogEx(playerid, DIALOG_SQL_TUNE_2, DIALOG_STYLE_TABLIST_HEADERS, "Tuningmenü", dline, "Install", "Back");
        }
    }
    return 1;
}

/*
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	switch(extraid)
	{
		case mSelection_Butorok, mSelection_Falikepek, mSelection_Szorakozas, mSelection_Falak, mSelection_Furdoszoba, mSelection_Konyhai:
		{
			if(response)
   			{
			    // Játékos elõtti pozíció lekérése x egységnyire
			    GetPlayerPos(playerid,X,Y,Z);
				GetXYInFrontOfPlayer(playerid, X, Y, 0.8);
			
   				houseid = GetPVarInt(playerid,"PlayerProp");
			
			    new
			        slot = 0,
					ret = AddHouseElement(houseid, slot, modelid, X, Y, Z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			 	EditDynamicObject(playerid, ret);
   			}
			else cmd_housemenu(playerid,"");
		}
	}
	return 1;
}*/

/*
stock AddHouseElement(_houseid, _slot, _modelid, Float:_X, Float:_Y, Float:_Z, Float:_rX, Float:_rY, Float:_rZ, _worldid, _interiorid)
{
    #pragma unused _houseid
    #pragma unused _slot
  	#pragma unused _modelid
    #pragma unused _X
    #pragma unused _Y
    #pragma unused _Z
    #pragma unused _rX
    #pragma unused _rY
    #pragma unused _rZ
    #pragma unused _worldid
    #pragma unused _interiorid

    CreateDynamicObject(_modelid, _X, _Y, _Z, _rX, _rY, _rZ);
    return 1;
}*/
